[info] Loading settings from idea.sbt,build.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed Feb 24, 2018, 7:42:13 PM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1046:63: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private def toDouble: Double = java.lang.Double.parseDouble(new String(buf, 0, mark, head - mark))
[warn]                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:448:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:456:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:948:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] four warnings found
[info] Done compiling.
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.16.1-SNAPSHOT.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.16.1-SNAPSHOT.jar ...
[info] Compiling 46 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:14:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "bd");
[info]       private def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(JsoniterCodecs.this.stringCodec.decodeValue(in, null))
[info]         };
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = JsoniterCodecs.this.stringCodec.decodeValue(in, _s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         _bd = in.readBigDecimal(_bd);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       _os = d1(in, _os)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.s, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:15:66: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Arrays':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Arrays] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Array[Int]] = new Array[Array[Int]](0);
[info]       private val v1: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private val v2: Array[Int] = new Array[Int](0);
[info]       private def d1(in: JsonReader, default: Array[Array[Int]]): Array[Array[Int]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Array[Int]](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Array[Int]](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, JsoniterCodecs.this.intArrayCodec.decodeValue(in, v2));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Array[Int]](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = if (in.isNextToken('{'))
[info]         {
[info]           var _aa: Array[Array[Int]] = v0;
[info]           var _a: Array[BigInt] = v1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3104 => if (in.isCharBufEqualsTo(l, "aa"))
[info]                       _aa = d1(in, _aa)
[info]                     else
[info]                       in.skip()
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       _a = JsoniterCodecs.this.bigIntArrayCodec.decodeValue(in, _a)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Arrays(aa = _aa, a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: Array[Array[Int]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             JsoniterCodecs.this.intArrayCodec.encodeValue(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.aa;
[info]           if (v.length.>(0))
[info]             {
[info]               out.writeNonEscapedAsciiKey("aa");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.a;
[info]           if (v.length.>(0))
[info]             {
[info]               out.writeNonEscapedAsciiKey("a");
[info]               JsoniterCodecs.this.bigIntArrayCodec.encodeValue(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val arraysCodec: JsonValueCodec[Arrays] = make[Arrays](CodecMakerConfig())
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:16:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0);
[info]       private def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[scala.math.BigDecimal](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[scala.math.BigDecimal](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[scala.math.BigInt](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[scala.math.BigInt](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.BitSets':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.BitSets] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = BitSet.newBuilder;
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               BitSet.empty;
[info]             do 
[info]               x.add(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = if (in.isNextToken('{'))
[info]         {
[info]           var _bs: scala.collection.immutable.BitSet = BitSet.empty;
[info]           var _mbs: scala.collection.mutable.BitSet = BitSet.empty;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3153 => if (in.isCharBufEqualsTo(l, "bs"))
[info]                       _bs = d1(in, _bs)
[info]                     else
[info]                       in.skip()
[info]                     case 107902 => if (in.isCharBufEqualsTo(l, "mbs"))
[info]                       _mbs = d2(in, _mbs)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.BitSets(bs = _bs, mbs = _mbs)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e2(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.bs;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("bs");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mbs;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mbs");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetsCodec: JsonValueCodec[BitSets] = make[BitSets](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Boolean] = new Array[Boolean](0);
[info]       private def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Boolean](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Boolean](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Byte] = new Array[Byte](0);
[info]       private def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Byte](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Byte](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Double] = new Array[Double](0);
[info]       private def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Double](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Double](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.Duration] = new Array[java.time.Duration](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.Duration](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.Duration](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Float] = new Array[Float](0);
[info]       private def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Float](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Float](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.Instant] = new Array[java.time.Instant](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.Instant](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.Instant](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.LocalDate](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.LocalDate](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.LocalDateTime](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.LocalDateTime](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.OffsetDateTime](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.OffsetDateTime](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.OffsetTime](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.OffsetTime](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.LocalTime](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.LocalTime](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.Period] = new Array[java.time.Period](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.Period](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.Period](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.ZonedDateTime](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.ZonedDateTime](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.ZoneOffset](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.ZoneOffset](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.ZoneId](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.ZoneId](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0);
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = {
[info]         val v = in.readString();
[info]         try {
[info]           Suit.valueOf(v)
[info]         } catch {
[info]           case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]         }
[info]       };
[info]       private def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0);
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Int] = new Array[Int](0);
[info]       private def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Int](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Int](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Short] = new Array[Short](0);
[info]       private def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Short](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Short](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Long] = new Array[Long](0);
[info]       private def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Long](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Long](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.util.UUID] = new Array[java.util.UUID](0);
[info]       private def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.util.UUID](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.util.UUID](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:75: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Iterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Iterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.Vector[String]): scala.collection.immutable.Vector[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[String];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.stringCodec.decodeValue(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d4(in: JsonReader, default: scala.collection.immutable.HashSet[Long]): scala.collection.immutable.HashSet[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = HashSet.newBuilder[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: List[scala.collection.immutable.HashSet[Long]]): List[scala.collection.immutable.HashSet[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[scala.collection.immutable.HashSet[Long]];
[info]             do 
[info]               x.+=(d4(in, HashSet.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.immutable.Vector[String] = Vector.empty[String];
[info]           var _s: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]           var _ls: List[scala.collection.immutable.HashSet[Long]] = List.empty[scala.collection.immutable.HashSet[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Iterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.Vector[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e2(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e4(x: scala.collection.immutable.HashSet[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e3(x: List[scala.collection.immutable.HashSet[Long]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e4(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.l;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("l");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.s;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("s");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.ls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("ls");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val iterablesCodec: JsonValueCodec[Iterables] = make[Iterables](CodecMakerConfig())
[info]                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:60: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Maps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Maps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Maps = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.HashMap[String,Double]): scala.collection.immutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[String, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.HashMap[Long,Double]): scala.collection.immutable.HashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[Long, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]]): scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), d3(in, HashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Maps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.HashMap[String,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e3(x: scala.collection.immutable.HashMap[Long,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e2(x: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.m;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("m");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mm;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mm");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapsCodec: JsonValueCodec[Maps] = make[Maps](CodecMakerConfig())
[info]                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "i");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = JsoniterCodecs.this.stringCodec.decodeValue(in, _s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.s, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:96: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[String]): scala.collection.mutable.ArrayBuffer[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               ArrayBuffer.empty[String];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.stringCodec.decodeValue(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.TreeSet[Int]): scala.collection.mutable.TreeSet[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               TreeSet.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d4(in: JsonReader, default: scala.collection.mutable.Set[Long]): scala.collection.mutable.Set[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Set.empty[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]]): scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = ResizableArray.newBuilder[scala.collection.mutable.Set[Long]];
[info]             do 
[info]               x.+=(d4(in, Set.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.mutable.ArrayBuffer[String] = ArrayBuffer.empty[String];
[info]           var _s: scala.collection.mutable.TreeSet[Int] = TreeSet.empty[Int];
[info]           var _ls: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = ResizableArray.empty[scala.collection.mutable.Set[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.mutable.ArrayBuffer[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e2(x: scala.collection.mutable.TreeSet[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e4(x: scala.collection.mutable.Set[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e3(x: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e4(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.l;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("l");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.s;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("s");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.ls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("ls");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableIterablesCodec: JsonValueCodec[MutableIterables] = make[MutableIterables](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:81: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.HashMap[String,Double]): scala.collection.mutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               HashMap.empty[String, Double];
[info]             do 
[info]               x.update(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.OpenHashMap[Long,Double]): scala.collection.mutable.OpenHashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               OpenHashMap.empty[Long, Double];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]]): scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]             do 
[info]               x.update(in.readKeyAsInt(), d3(in, OpenHashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.mutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.mutable.HashMap[String,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e3(x: scala.collection.mutable.OpenHashMap[Long,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e2(x: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.m;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("m");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mm;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mm");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapsCodec: JsonValueCodec[MutableMaps] = make[MutableMaps](CodecMakerConfig())
[info]                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:90: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.IntMap[Double]): scala.collection.immutable.IntMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.LongMap[Double]): scala.collection.immutable.LongMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = LongMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]]): scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]             do 
[info]               x.update(in.readKeyAsLong(), d3(in, LongMap.empty[Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.IntMap[Double] = IntMap.empty[Double];
[info]           var _mm: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.IntMap[Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e3(x: scala.collection.immutable.LongMap[Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e2(x: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.m;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("m");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mm;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mm");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intAndLongMapsCodec: JsonValueCodec[IntAndLongMaps] = make[IntAndLongMaps](CodecMakerConfig())
[info]                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var req0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readByte();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readShort();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         _bl = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         _ch = in.readChar();
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         _dbl = in.readDouble();
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         _f = in.readFloat();
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "l");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = JsoniterCodecs.this.stringCodec.decodeValue(in, _s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.s, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:65: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("a");
[info]       private val r1: Array[String] = Array("b");
[info]       private val r2: Array[String] = Array("l", "r");
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         _a = in.readInt();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = JsoniterCodecs.this.stringCodec.decodeValue(in, _b);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = JsoniterCodecs.this.adtCodec.decodeValue(in, _l);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         _r = JsoniterCodecs.this.adtCodec.decodeValue(in, _r);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           {
[info]             in.scanToKey("type");
[info]             val l = in.readStringAsCharBuf();
[info]             (in.charBufToHashCode(l): @switch) match {
[info]               case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d1(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d2(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d3(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case _ => in.discriminatorValueError("type")
[info]             }
[info]           }
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.b, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:66: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig())
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("status");
[info]       private val r1: Array[String] = Array("distance", "duration", "status");
[info]       private val r2: Array[String] = Array("text", "value");
[info]       private def d1(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.stringCodec.decodeValue(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = JsoniterCodecs.this.stringCodec.decodeValue(in, _text);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         _value = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         _distance = d6(in, _distance);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         _duration = d6(in, _duration);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = JsoniterCodecs.this.stringCodec.decodeValue(in, _status);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       _elements = d4(in, _elements)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: Seq[String] = Seq.empty[String];
[info]           var _origin_addresses: Seq[String] = Seq.empty[String];
[info]           var _rows: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       _destination_addresses = d1(in, _destination_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       _origin_addresses = d1(in, _origin_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       _rows = d2(in, _rows)
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = JsoniterCodecs.this.stringCodec.decodeValue(in, _status);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.text, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.status, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e2(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e3(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.status, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private val r1: Array[String] = Array("screen_name", "name", "id", "id_str");
[info]       private val r2: Array[String] = Array("url", "expanded_url", "display_url");
[info]       private val r3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private val r4: Array[String] = Array("url", "description");
[info]       private val r5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.stringCodec.decodeValue(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = JsoniterCodecs.this.stringCodec.decodeValue(in, _screen_name);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = JsoniterCodecs.this.stringCodec.decodeValue(in, _name);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = JsoniterCodecs.this.stringCodec.decodeValue(in, _id_str);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = JsoniterCodecs.this.stringCodec.decodeValue(in, _url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         _expanded_url = JsoniterCodecs.this.stringCodec.decodeValue(in, _expanded_url);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         _display_url = JsoniterCodecs.this.stringCodec.decodeValue(in, _display_url);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       _hashtags = d3(in, _hashtags)
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       _symbols = d3(in, _symbols)
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       _user_mentions = d4(in, _user_mentions)
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(JsoniterCodecs.this.stringCodec.decodeValue(in, null))
[info]         };
[info]       private def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = d12(in, _url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = d12(in, _description);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]           else
[info]             in.requiredKeyError(r4, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var req0 = -1;
[info]           var req1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = JsoniterCodecs.this.stringCodec.decodeValue(in, _id_str);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = JsoniterCodecs.this.stringCodec.decodeValue(in, _name);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = JsoniterCodecs.this.stringCodec.decodeValue(in, _screen_name);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         _location = JsoniterCodecs.this.stringCodec.decodeValue(in, _location);
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = JsoniterCodecs.this.stringCodec.decodeValue(in, _description);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = JsoniterCodecs.this.stringCodec.decodeValue(in, _url);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d11(in, _entities);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         _protected = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         _followers_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         _friends_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         _listed_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = JsoniterCodecs.this.stringCodec.decodeValue(in, _created_at);
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         _favourites_count = in.readInt();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         _utc_offset = in.readInt();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         _time_zone = JsoniterCodecs.this.stringCodec.decodeValue(in, _time_zone);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         _geo_enabled = in.readBoolean();
[info]                         req0.&=(-65537)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         _verified = in.readBoolean();
[info]                         req0.&=(-131073)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         _statuses_count = in.readInt();
[info]                         req0.&=(-262145)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = JsoniterCodecs.this.stringCodec.decodeValue(in, _lang);
[info]                         req0.&=(-524289)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         _contributors_enabled = in.readBoolean();
[info]                         req0.&=(-1048577)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         _is_translator = in.readBoolean();
[info]                         req0.&=(-2097153)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         _is_translation_enabled = in.readBoolean();
[info]                         req0.&=(-4194305)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         _profile_background_color = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_background_color);
[info]                         req0.&=(-8388609)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         _profile_background_image_url = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_background_image_url);
[info]                         req0.&=(-16777217)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         _profile_background_image_url_https = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_background_image_url_https);
[info]                         req0.&=(-33554433)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         _profile_background_tile = in.readBoolean();
[info]                         req0.&=(-67108865)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         _profile_image_url = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_image_url);
[info]                         req0.&=(-134217729)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         _profile_image_url_https = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_image_url_https);
[info]                         req0.&=(-268435457)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         _profile_banner_url = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_banner_url);
[info]                         req0.&=(-536870913)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         _profile_link_color = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_link_color);
[info]                         req0.&=(-1073741825)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         _profile_sidebar_border_color = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_sidebar_border_color);
[info]                         req0.&=(2147483647)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         _profile_sidebar_fill_color = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_sidebar_fill_color);
[info]                         req1.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         _profile_text_color = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_text_color);
[info]                         req1.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         _profile_use_background_image = in.readBoolean();
[info]                         req1.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         _has_extended_profile = in.readBoolean();
[info]                         req1.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         _default_profile = in.readBoolean();
[info]                         req1.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         _default_profile_image = in.readBoolean();
[info]                         req1.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         _following = in.readBoolean();
[info]                         req1.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         _follow_request_sent = in.readBoolean();
[info]                         req1.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         _notifications = in.readBoolean();
[info]                         req1.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         _translator_type = JsoniterCodecs.this.stringCodec.decodeValue(in, _translator_type);
[info]                         req1.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0).&&(req1.==(0)))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]           else
[info]             in.requiredKeyError(r3, Array(req0, req1))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 32767;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = JsoniterCodecs.this.stringCodec.decodeValue(in, _created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = JsoniterCodecs.this.stringCodec.decodeValue(in, _id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = JsoniterCodecs.this.stringCodec.decodeValue(in, _text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = JsoniterCodecs.this.stringCodec.decodeValue(in, _source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = JsoniterCodecs.this.stringCodec.decodeValue(in, _lang);
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredKeyError(r5, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 65535;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = JsoniterCodecs.this.stringCodec.decodeValue(in, _created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = JsoniterCodecs.this.stringCodec.decodeValue(in, _id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = JsoniterCodecs.this.stringCodec.decodeValue(in, _text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = JsoniterCodecs.this.stringCodec.decodeValue(in, _source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         _retweeted_status = d13(in, _retweeted_status);
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = JsoniterCodecs.this.stringCodec.decodeValue(in, _lang);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.screen_name, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.name, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.id_str, out)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.expanded_url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.display_url, out)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.id_str, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.name, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.screen_name, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.location, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.description, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.created_at, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.time_zone, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.lang, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_background_color, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_background_image_url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_background_image_url_https, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_image_url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_image_url_https, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_banner_url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_link_color, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_sidebar_border_color, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_sidebar_fill_color, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_text_color, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.translator_type, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.created_at, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.id_str, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.text, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.source, out)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.lang, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.created_at, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.id_str, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.text, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.source, out)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.lang, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:15:18: local val v1 in value arraysFormat is never used
[warn]     implicit val v1: Format[Array[BigInt]] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:21:18: local val v1 in value bitSetsFormat is never used
[warn]     implicit val v1: Reads[BitSet] = Reads[BitSet](js => JsSuccess(BitSet(js.as[Array[Int]]: _*)))
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:22:18: local val v2 in value bitSetsFormat is never used
[warn]     implicit val v2: Reads[mutable.BitSet] =
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:29:18: local val v1 in value mapsFormat is never used
[warn]     implicit val v1: OFormat[HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:32:18: local val v2 in value mapsFormat is never used
[warn]     implicit val v2: OFormat[Map[Int, HashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:44:18: local val v1 in value mutableMapsFormat is never used
[warn]     implicit val v1: OFormat[mutable.HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:47:18: local val v2 in value mutableMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.Map[Int, mutable.OpenHashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:64:18: local val v1 in value intAndLongMapsFormat is never used
[warn]     implicit val v1: OFormat[IntMap[Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:69:18: local val v2 in value intAndLongMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.LongMap[LongMap[Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:81:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:88:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:89:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:90:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:95:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:96:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:97:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:101:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:102:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:103:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:104:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:105:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:106:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:107:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 23 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.16.1-SNAPSHOT.jar ...
Processing 330 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Compiling 40 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
[info] Done packaging.
[info] Compiling 448 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.16.1-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.16.1-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -prof gc -rf json -rff jdk9.json .*Benchmark.*
[error] WARNING: An illegal reflective access operation has occurred
[error] WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/tmp/sbt_3b1ae14a/target/5f9f9839/jmh-core-1.20.jar) to field java.io.PrintStream.charOut
[error] WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[error] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[error] WARNING: All illegal access operations will be denied in a future release
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 00:38:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 399400.730 ops/s
[info] # Warmup Iteration   2: 746115.831 ops/s
[info] # Warmup Iteration   3: 743400.511 ops/s
[info] Iteration   1: 773827.120 ops/s
[info]                  ·gc.alloc.rate:                   2045.020 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2300.876 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4680.465 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 784354.526 ops/s
[info]                  ·gc.alloc.rate:                   2072.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1993.989 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4001.964 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 784273.312 ops/s
[info]                  ·gc.alloc.rate:                   2072.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011.196 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4036.558 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 778577.145 ops/s
[info]                  ·gc.alloc.rate:                   2058.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.346 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4088.404 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 773269.551 ops/s
[info]                  ·gc.alloc.rate:                   2043.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.909 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4134.097 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   778860.331 ±(99.9%) 20750.360 ops/s [Average]
[info]   (min, avg, max) = (773269.551, 778860.331, 784354.526), stdev = 5388.802
[info]   CI (99.9%): [758109.971, 799610.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   2058.573 ±(99.9%) 54.693 MB/sec [Average]
[info]   (min, avg, max) = (2043.634, 2058.573, 2072.731), stdev = 14.203
[info]   CI (99.9%): [2003.881, 2113.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4160.001, 4160.001, 4160.001), stdev = 0.001
[info]   CI (99.9%): [4160.000, 4160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.121 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.121, 0.187), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.244 ±(99.9%) 0.388 B/op [Average]
[info]   (min, avg, max) = (0.126, 0.244, 0.381), stdev = 0.101
[info]   CI (99.9%): [≈ 0, 0.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2072.063 ±(99.9%) 495.457 MB/sec [Average]
[info]   (min, avg, max) = (1993.989, 2072.063, 2300.876), stdev = 128.669
[info]   CI (99.9%): [1576.606, 2567.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4188.298 ±(99.9%) 1076.960 B/op [Average]
[info]   (min, avg, max) = (4001.964, 4188.298, 4680.465), stdev = 279.683
[info]   CI (99.9%): [3111.337, 5265.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.34% complete, ETA 01:01:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 460485.344 ops/s
[info] # Warmup Iteration   2: 1621012.846 ops/s
[info] # Warmup Iteration   3: 1630225.220 ops/s
[info] Iteration   1: 1660368.995 ops/s
[info]                  ·gc.alloc.rate:                   1181.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.445 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 930.391 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1658439.357 ops/s
[info]                  ·gc.alloc.rate:                   1180.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.845 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1250.409 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1659418.372 ops/s
[info]                  ·gc.alloc.rate:                   1180.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.235 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1259.807 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1655772.371 ops/s
[info]                  ·gc.alloc.rate:                   1178.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.400 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 951.978 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1664607.168 ops/s
[info]                  ·gc.alloc.rate:                   1184.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.508 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1268.478 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1659721.253 ±(99.9%) 12420.998 ops/s [Average]
[info]   (min, avg, max) = (1655772.371, 1659721.253, 1664607.168), stdev = 3225.694
[info]   CI (99.9%): [1647300.254, 1672142.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1181.065 ±(99.9%) 8.790 MB/sec [Average]
[info]   (min, avg, max) = (1178.145, 1181.065, 1184.482), stdev = 2.283
[info]   CI (99.9%): [1172.274, 1189.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.112, 0.187), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.107 ±(99.9%) 0.198 B/op [Average]
[info]   (min, avg, max) = (0.039, 0.107, 0.178), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1194.087 ±(99.9%) 713.641 MB/sec [Average]
[info]   (min, avg, max) = (981.445, 1194.087, 1341.508), stdev = 185.330
[info]   CI (99.9%): [480.446, 1907.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1132.213 ±(99.9%) 672.583 B/op [Average]
[info]   (min, avg, max) = (930.391, 1132.213, 1268.478), stdev = 174.668
[info]   CI (99.9%): [459.630, 1804.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.68% complete, ETA 01:01:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2509050.805 ops/s
[info] # Warmup Iteration   2: 3378901.285 ops/s
[info] # Warmup Iteration   3: 3521081.552 ops/s
[info] Iteration   1: 3459564.021 ops/s
[info]                  ·gc.alloc.rate:                   228.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.753 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 116.370 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 3530129.943 ops/s
[info]                  ·gc.alloc.rate:                   233.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.735 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 114.047 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3457685.085 ops/s
[info]                  ·gc.alloc.rate:                   228.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.797 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 116.430 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3374397.491 ops/s
[info]                  ·gc.alloc.rate:                   223.063 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.909 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119.314 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 3536302.537 ops/s
[info]                  ·gc.alloc.rate:      233.642 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   3471615.815 ±(99.9%) 253960.028 ops/s [Average]
[info]   (min, avg, max) = (3374397.491, 3471615.815, 3536302.537), stdev = 65952.613
[info]   CI (99.9%): [3217655.787, 3725575.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   229.394 ±(99.9%) 16.581 MB/sec [Average]
[info]   (min, avg, max) = (223.063, 229.394, 233.642), stdev = 4.306
[info]   CI (99.9%): [212.812, 245.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.011 ±(99.9%) 0.053 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.034), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.005 ±(99.9%) 0.024 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.015), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204.639 ±(99.9%) 440.501 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.639, 255.909), stdev = 114.397
[info]   CI (99.9%): [≈ 0, 645.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   93.232 ±(99.9%) 200.818 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 93.232, 119.314), stdev = 52.152
[info]   CI (99.9%): [≈ 0, 294.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 1.03% complete, ETA 01:01:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28024.711 ops/s
[info] # Warmup Iteration   2: 172632.508 ops/s
[info] # Warmup Iteration   3: 172035.260 ops/s
[info] Iteration   1: 171849.540 ops/s
[info]                  ·gc.alloc.rate:                   1439.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1641.406 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15035.611 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 173754.613 ops/s
[info]                  ·gc.alloc.rate:                   1455.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.427 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12007.309 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 170150.040 ops/s
[info]                  ·gc.alloc.rate:                   1425.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12341.988 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 173697.672 ops/s
[info]                  ·gc.alloc.rate:                   1454.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.188 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15198.678 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 173540.527 ops/s
[info]                  ·gc.alloc.rate:                   1454.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.369 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12224.848 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   172598.478 ±(99.9%) 6084.776 ops/s [Average]
[info]   (min, avg, max) = (170150.040, 172598.478, 173754.613), stdev = 1580.197
[info]   CI (99.9%): [166513.703, 178683.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1445.728 ±(99.9%) 51.549 MB/sec [Average]
[info]   (min, avg, max) = (1425.026, 1445.728, 1455.316), stdev = 13.387
[info]   CI (99.9%): [1394.179, 1497.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13184.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13184.002, 13184.002, 13184.003), stdev = 0.001
[info]   CI (99.9%): [13184.002, 13184.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.644 ±(99.9%) 1.096 B/op [Average]
[info]   (min, avg, max) = (0.191, 0.644, 0.943), stdev = 0.285
[info]   CI (99.9%): [≈ 0, 1.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1465.281 ±(99.9%) 684.459 MB/sec [Average]
[info]   (min, avg, max) = (1325.427, 1465.281, 1677.188), stdev = 177.752
[info]   CI (99.9%): [780.822, 2149.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   13361.687 ±(99.9%) 6191.964 B/op [Average]
[info]   (min, avg, max) = (12007.309, 13361.687, 15198.678), stdev = 1608.033
[info]   CI (99.9%): [7169.723, 19553.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.37% complete, ETA 01:00:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_3b1ae14a/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 557238.010 ops/s
[info] # Warmup Iteration   2: 2120937.664 ops/s
[info] # Warmup Iteration   3: 2082963.624 ops/s
[info] Iteration   1: 2130302.795 ops/s
[info]                  ·gc.alloc.rate:                   692.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      971.082 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 717.544 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2115349.628 ops/s
[info]                  ·gc.alloc.rate:                   688.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.975 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 484.981 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2122473.082 ops/s
[info]                  ·gc.alloc.rate:                   690.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 485.558 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2138262.663 ops/s
[info]                  ·gc.alloc.rate:                   695.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.367 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 483.948 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2104790.428 ops/s
[info]                  ·gc.alloc.rate:                   684.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.369 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 493.648 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   2122235.719 ±(99.9%) 49975.121 ops/s [Average]
[info]   (min, avg, max) = (2104790.428, 2122235.719, 2138262.663), stdev = 12978.380
[info]   CI (99.9%): [2072260.598, 2172210.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   690.401 ±(99.9%) 15.698 MB/sec [Average]
[info]   (min, avg, max) = (684.919, 690.401, 695.471), stdev = 4.077
[info]   CI (99.9%): [674.703, 706.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   512.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (512.000, 512.000, 512.000), stdev = 0.001
[info]   CI (99.9%): [512.000, 512.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.167 ±(99.9%) 0.676 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.167, 0.480), stdev = 0.175
[info]   CI (99.9%): [≈ 0, 0.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.124 ±(99.9%) 0.499 B/op [Average]
[info]   (min, avg, max) = (0.061, 0.124, 0.355), stdev = 0.130
[info]   CI (99.9%): [≈ 0, 0.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   719.109 ±(99.9%) 542.523 MB/sec [Average]
[info]   (min, avg, max) = (651.975, 719.109, 971.082), stdev = 140.891
[info]   CI (99.9%): [176.586, 1261.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   533.136 ±(99.9%) 397.231 B/op [Average]
[info]   (min, avg, max) = (483.948, 533.136, 717.544), stdev = 103.160
[info]   CI (99.9%): [135.905, 930.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.71% complete, ETA 01:00:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4826050.067 ops/s
[info] # Warmup Iteration   2: 6839784.760 ops/s
[info] # Warmup Iteration   3: 6950436.749 ops/s
[info] Iteration   1: 6876990.734 ops/s
[info]                  ·gc.alloc.rate:                   349.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.554 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 117.083 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 6793470.758 ops/s
[info]                  ·gc.alloc.rate:                   345.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.839 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59.263 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6667723.635 ops/s
[info]                  ·gc.alloc.rate:                   338.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.711 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77.599 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6948507.814 ops/s
[info]                  ·gc.alloc.rate:                   353.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.815 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74.461 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 7002334.802 ops/s
[info]                  ·gc.alloc.rate:                   355.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73.511 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   6857805.549 ±(99.9%) 508495.634 ops/s [Average]
[info]   (min, avg, max) = (6667723.635, 6857805.549, 7002334.802), stdev = 132054.701
[info]   CI (99.9%): [6349309.915, 7366301.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   348.588 ±(99.9%) 25.891 MB/sec [Average]
[info]   (min, avg, max) = (338.882, 348.588, 355.892), stdev = 6.724
[info]   CI (99.9%): [322.697, 374.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.751 ±(99.9%) 6.351 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.751, 3.702), stdev = 1.649
[info]   CI (99.9%): [≈ 0, 7.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.177 ±(99.9%) 1.500 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.177, 0.874), stdev = 0.389
[info]   CI (99.9%): [≈ 0, 1.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   350.388 ±(99.9%) 367.304 MB/sec [Average]
[info]   (min, avg, max) = (255.839, 350.388, 511.554), stdev = 95.388
[info]   CI (99.9%): [≈ 0, 717.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   80.383 ±(99.9%) 83.547 B/op [Average]
[info]   (min, avg, max) = (59.263, 80.383, 117.083), stdev = 21.697
[info]   CI (99.9%): [≈ 0, 163.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 5.000), stdev = 1.673
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 2.05% complete, ETA 01:00:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68563.431 ops/s
[info] # Warmup Iteration   2: 316042.943 ops/s
[info] # Warmup Iteration   3: 320623.943 ops/s
[info] Iteration   1: 319309.925 ops/s
[info]                  ·gc.alloc.rate:                   1041.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.130 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4831.686 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 317222.937 ops/s
[info]                  ·gc.alloc.rate:                   1035.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.585 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4889.895 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 319372.249 ops/s
[info]                  ·gc.alloc.rate:                   1042.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.727 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4883.198 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 319617.024 ops/s
[info]                  ·gc.alloc.rate:                   1042.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.821 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4908.962 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 313990.222 ops/s
[info]                  ·gc.alloc.rate:                   1025.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334.482 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6686.305 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   317902.471 ±(99.9%) 9203.024 ops/s [Average]
[info]   (min, avg, max) = (313990.222, 317902.471, 319617.024), stdev = 2389.996
[info]   CI (99.9%): [308699.448, 327105.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1037.412 ±(99.9%) 29.121 MB/sec [Average]
[info]   (min, avg, max) = (1025.066, 1037.412, 1042.924), stdev = 7.563
[info]   CI (99.9%): [1008.291, 1066.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5136.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5136.001, 5136.001, 5136.001), stdev = 0.001
[info]   CI (99.9%): [5136.001, 5136.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.433 ±(99.9%) 0.520 B/op [Average]
[info]   (min, avg, max) = (0.308, 0.433, 0.620), stdev = 0.135
[info]   CI (99.9%): [≈ 0, 0.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1057.549 ±(99.9%) 596.593 MB/sec [Average]
[info]   (min, avg, max) = (980.130, 1057.549, 1334.482), stdev = 154.933
[info]   CI (99.9%): [460.956, 1654.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5240.009 ±(99.9%) 3115.207 B/op [Average]
[info]   (min, avg, max) = (4831.686, 5240.009, 6686.305), stdev = 809.009
[info]   CI (99.9%): [2124.802, 8355.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 2.40% complete, ETA 01:00:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 955106.140 ops/s
[info] # Warmup Iteration   2: 1596263.049 ops/s
[info] # Warmup Iteration   3: 1591774.666 ops/s
[info] Iteration   1: 1587377.778 ops/s
[info]                  ·gc.alloc.rate:                   2476.725 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2324.265 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2304.816 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1601050.524 ops/s
[info]                  ·gc.alloc.rate:                   2497.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2681.931 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2637.073 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 1600447.246 ops/s
[info]                  ·gc.alloc.rate:                   2497.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2363.797 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2324.886 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1602197.970 ops/s
[info]                  ·gc.alloc.rate:                   2500.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2371.994 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2330.215 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1609733.655 ops/s
[info]                  ·gc.alloc.rate:                   2511.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2717.356 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2657.314 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1600161.435 ±(99.9%) 31048.999 ops/s [Average]
[info]   (min, avg, max) = (1587377.778, 1600161.435, 1609733.655), stdev = 8063.326
[info]   CI (99.9%): [1569112.435, 1631210.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2496.628 ±(99.9%) 48.336 MB/sec [Average]
[info]   (min, avg, max) = (2476.725, 2496.628, 2511.494), stdev = 12.553
[info]   CI (99.9%): [2448.292, 2544.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2456.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2456.000, 2456.000, 2456.000), stdev = 0.001
[info]   CI (99.9%): [2456.000, 2456.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.112, 0.167), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.110 ±(99.9%) 0.188 B/op [Average]
[info]   (min, avg, max) = (0.041, 0.110, 0.163), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2491.869 ±(99.9%) 735.240 MB/sec [Average]
[info]   (min, avg, max) = (2324.265, 2491.869, 2717.356), stdev = 190.939
[info]   CI (99.9%): [1756.629, 3227.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2450.861 ±(99.9%) 691.648 B/op [Average]
[info]   (min, avg, max) = (2304.816, 2450.861, 2657.314), stdev = 179.619
[info]   CI (99.9%): [1759.212, 3142.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   37.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.74% complete, ETA 00:59:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 893121.806 ops/s
[info] # Warmup Iteration   2: 2625626.702 ops/s
[info] # Warmup Iteration   3: 2620529.470 ops/s
[info] Iteration   1: 2632754.890 ops/s
[info]                  ·gc.alloc.rate:                   1846.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1654.691 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 989.368 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2646768.764 ops/s
[info]                  ·gc.alloc.rate:                   1856.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2005.340 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1192.694 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 2644786.441 ops/s
[info]                  ·gc.alloc.rate:                   1854.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.407 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1201.941 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 2634660.505 ops/s
[info]                  ·gc.alloc.rate:                   1848.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.323 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1009.542 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2640752.961 ops/s
[info]                  ·gc.alloc.rate:                   1852.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694.129 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1009.631 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   2639944.712 ±(99.9%) 23602.254 ops/s [Average]
[info]   (min, avg, max) = (2632754.890, 2639944.712, 2646768.764), stdev = 6129.430
[info]   CI (99.9%): [2616342.458, 2663546.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1851.687 ±(99.9%) 16.028 MB/sec [Average]
[info]   (min, avg, max) = (1846.411, 1851.687, 1856.215), stdev = 4.162
[info]   CI (99.9%): [1835.660, 1867.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.125 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.125, 0.167), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.074 ±(99.9%) 0.089 B/op [Average]
[info]   (min, avg, max) = (0.050, 0.074, 0.099), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1812.778 ±(99.9%) 704.364 MB/sec [Average]
[info]   (min, avg, max) = (1654.691, 1812.778, 2019.407), stdev = 182.921
[info]   CI (99.9%): [1108.414, 2517.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1080.635 ±(99.9%) 411.577 B/op [Average]
[info]   (min, avg, max) = (989.368, 1080.635, 1201.941), stdev = 106.885
[info]   CI (99.9%): [669.058, 1492.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 8.000), stdev = 0.894
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 3.08% complete, ETA 00:59:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9432563.283 ops/s
[info] # Warmup Iteration   2: 10337838.480 ops/s
[info] # Warmup Iteration   3: 10502683.895 ops/s
[info] Iteration   1: 10521573.451 ops/s
[info]                  ·gc.alloc.rate:                   1336.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1319.369 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 197.395 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 10360160.327 ops/s
[info]                  ·gc.alloc.rate:                   1316.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1324.994 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 201.333 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 10530505.661 ops/s
[info]                  ·gc.alloc.rate:                   1337.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331.773 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 199.073 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 10571300.613 ops/s
[info]                  ·gc.alloc.rate:                   1343.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.788 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 199.297 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 10546722.621 ops/s
[info]                  ·gc.alloc.rate:                   1340.205 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.265 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 200.606 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   10506052.534 ±(99.9%) 322367.886 ops/s [Average]
[info]   (min, avg, max) = (10360160.327, 10506052.534, 10571300.613), stdev = 83717.916
[info]   CI (99.9%): [10183684.648, 10828420.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1334.938 ±(99.9%) 41.484 MB/sec [Average]
[info]   (min, avg, max) = (1316.219, 1334.938, 1343.509), stdev = 10.773
[info]   CI (99.9%): [1293.455, 1376.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   200.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (200.000, 200.000, 200.000), stdev = 0.001
[info]   CI (99.9%): [200.000, 200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.014 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (0.009, 0.014, 0.022), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1331.838 ±(99.9%) 38.750 MB/sec [Average]
[info]   (min, avg, max) = (1319.369, 1331.838, 1344.265), stdev = 10.063
[info]   CI (99.9%): [1293.088, 1370.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   199.541 ±(99.9%) 5.850 B/op [Average]
[info]   (min, avg, max) = (197.395, 199.541, 201.333), stdev = 1.519
[info]   CI (99.9%): [193.691, 205.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 3.42% complete, ETA 00:59:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 145610.852 ops/s
[info] # Warmup Iteration   2: 642259.247 ops/s
[info] # Warmup Iteration   3: 653203.448 ops/s
[info] Iteration   1: 651063.493 ops/s
[info]                  ·gc.alloc.rate:                   1654.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              4000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1647.930 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3984.817 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 663878.906 ops/s
[info]                  ·gc.alloc.rate:                   1687.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              4000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1665.617 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3947.335 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 652306.478 ops/s
[info]                  ·gc.alloc.rate:                   1657.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              4000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1675.499 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4042.987 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 652989.022 ops/s
[info]                  ·gc.alloc.rate:                   1659.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              4000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4060.570 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 660918.774 ops/s
[info]                  ·gc.alloc.rate:                   1679.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              4000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.432 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4025.907 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   656231.335 ±(99.9%) 22210.666 ops/s [Average]
[info]   (min, avg, max) = (651063.493, 656231.335, 663878.906), stdev = 5768.040
[info]   CI (99.9%): [634020.668, 678442.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1667.810 ±(99.9%) 57.483 MB/sec [Average]
[info]   (min, avg, max) = (1654.209, 1667.810, 1687.840), stdev = 14.928
[info]   CI (99.9%): [1610.327, 1725.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   4000.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4000.001, 4000.001, 4000.001), stdev = 0.001
[info]   CI (99.9%): [4000.001, 4000.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.166), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.240 ±(99.9%) 0.397 B/op [Average]
[info]   (min, avg, max) = (0.151, 0.240, 0.403), stdev = 0.103
[info]   CI (99.9%): [≈ 0, 0.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1672.874 ±(99.9%) 64.849 MB/sec [Average]
[info]   (min, avg, max) = (1647.930, 1672.874, 1690.432), stdev = 16.841
[info]   CI (99.9%): [1608.025, 1737.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4012.323 ±(99.9%) 176.802 B/op [Average]
[info]   (min, avg, max) = (3947.335, 4012.323, 4060.570), stdev = 45.915
[info]   CI (99.9%): [3835.522, 4189.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 3.77% complete, ETA 00:59:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1010531.870 ops/s
[info] # Warmup Iteration   2: 1914541.347 ops/s
[info] # Warmup Iteration   3: 1960059.580 ops/s
[info] Iteration   1: 1941871.730 ops/s
[info]                  ·gc.alloc.rate:                   1796.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1638.766 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1328.419 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1913759.906 ops/s
[info]                  ·gc.alloc.rate:                   1770.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1986.347 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1633.126 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1938481.006 ops/s
[info]                  ·gc.alloc.rate:                   1793.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1668.903 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1355.144 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1955077.488 ops/s
[info]                  ·gc.alloc.rate:                   1808.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.912 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1351.647 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1950831.291 ops/s
[info]                  ·gc.alloc.rate:                   1804.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.444 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1633.262 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   1940004.284 ±(99.9%) 62059.929 ops/s [Average]
[info]   (min, avg, max) = (1913759.906, 1940004.284, 1955077.488), stdev = 16116.766
[info]   CI (99.9%): [1877944.356, 2002064.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1794.686 ±(99.9%) 56.539 MB/sec [Average]
[info]   (min, avg, max) = (1770.912, 1794.686, 1808.531), stdev = 14.683
[info]   CI (99.9%): [1738.147, 1851.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1456.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1456.000, 1456.000, 1456.000), stdev = 0.001
[info]   CI (99.9%): [1456.000, 1456.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.117, 0.167), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.095 ±(99.9%) 0.171 B/op [Average]
[info]   (min, avg, max) = (0.034, 0.095, 0.137), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1799.474 ±(99.9%) 727.926 MB/sec [Average]
[info]   (min, avg, max) = (1638.766, 1799.474, 2024.444), stdev = 189.040
[info]   CI (99.9%): [1071.549, 2527.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1460.320 ±(99.9%) 608.963 B/op [Average]
[info]   (min, avg, max) = (1328.419, 1460.320, 1633.262), stdev = 158.146
[info]   CI (99.9%): [851.357, 2069.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 4.11% complete, ETA 00:59:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_3b1ae14a/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 2062243.617 ops/s
[info] # Warmup Iteration   2: 6290153.962 ops/s
[info] # Warmup Iteration   3: 6338127.050 ops/s
[info] Iteration   1: 6338416.251 ops/s
[info]                  ·gc.alloc.rate:                   1739.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1649.173 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 409.457 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 6346716.481 ops/s
[info]                  ·gc.alloc.rate:                   1741.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1998.911 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 495.739 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 6357911.938 ops/s
[info]                  ·gc.alloc.rate:                   1744.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 415.306 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 6239168.355 ops/s
[info]                  ·gc.alloc.rate:                   1712.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.869 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 425.315 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 6314285.870 ops/s
[info]                  ·gc.alloc.rate:                   1733.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.427 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 421.572 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   6319299.779 ±(99.9%) 183201.222 ops/s [Average]
[info]   (min, avg, max) = (6239168.355, 6319299.779, 6357911.938), stdev = 47576.776
[info]   CI (99.9%): [6136098.557, 6502501.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1734.467 ±(99.9%) 50.304 MB/sec [Average]
[info]   (min, avg, max) = (1712.369, 1734.467, 1744.823), stdev = 13.064
[info]   CI (99.9%): [1684.163, 1784.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.000, 432.000), stdev = 0.001
[info]   CI (99.9%): [432.000, 432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.125 ±(99.9%) 0.204 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.125, 0.187), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.031 ±(99.9%) 0.051 B/op [Average]
[info]   (min, avg, max) = (0.016, 0.031, 0.046), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1740.555 ±(99.9%) 559.643 MB/sec [Average]
[info]   (min, avg, max) = (1649.173, 1740.555, 1998.911), stdev = 145.337
[info]   CI (99.9%): [1180.913, 2300.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   433.478 ±(99.9%) 136.032 B/op [Average]
[info]   (min, avg, max) = (409.457, 433.478, 495.739), stdev = 35.327
[info]   CI (99.9%): [297.445, 569.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 4.45% complete, ETA 00:58:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11179562.771 ops/s
[info] # Warmup Iteration   2: 21009327.001 ops/s
[info] # Warmup Iteration   3: 21771445.312 ops/s
[info] Iteration   1: 21739720.750 ops/s
[info]                  ·gc.alloc.rate:                   663.084 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.721 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.559 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.600 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 21666610.802 ops/s
[info]                  ·gc.alloc.rate:                   660.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.519 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 21898887.172 ops/s
[info]                  ·gc.alloc.rate:                   667.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.705 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46.919 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 21874293.236 ops/s
[info]                  ·gc.alloc.rate:                   667.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.759 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46.971 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 21948216.534 ops/s
[info]                  ·gc.alloc.rate:                   669.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.129 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46.909 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   21825545.699 ±(99.9%) 453288.225 ops/s [Average]
[info]   (min, avg, max) = (21666610.802, 21825545.699, 21948216.534), stdev = 117717.513
[info]   CI (99.9%): [21372257.474, 22278833.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   665.572 ±(99.9%) 13.843 MB/sec [Average]
[info]   (min, avg, max) = (660.635, 665.572, 669.344), stdev = 3.595
[info]   CI (99.9%): [651.728, 679.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.794 ±(99.9%) 6.300 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.794, 3.721), stdev = 1.636
[info]   CI (99.9%): [≈ 0, 7.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.057 ±(99.9%) 0.456 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.057, 0.269), stdev = 0.118
[info]   CI (99.9%): [≈ 0, 0.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   654.232 ±(99.9%) 7.611 MB/sec [Average]
[info]   (min, avg, max) = (652.705, 654.232, 657.559), stdev = 1.977
[info]   CI (99.9%): [646.621, 661.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   47.184 ±(99.9%) 1.329 B/op [Average]
[info]   (min, avg, max) = (46.909, 47.184, 47.600), stdev = 0.345
[info]   CI (99.9%): [45.855, 48.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 4.79% complete, ETA 00:58:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16872468.598 ops/s
[info] # Warmup Iteration   2: 22154113.580 ops/s
[info] # Warmup Iteration   3: 21837793.420 ops/s
[info] Iteration   1: 22398115.449 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 22301573.686 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 22304767.233 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 22317118.672 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 22317253.356 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   22327765.679 ±(99.9%) 153880.168 ops/s [Average]
[info]   (min, avg, max) = (22301573.686, 22327765.679, 22398115.449), stdev = 39962.191
[info]   CI (99.9%): [22173885.511, 22481645.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 5.14% complete, ETA 00:58:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 399820.712 ops/s
[info] # Warmup Iteration   2: 1432010.738 ops/s
[info] # Warmup Iteration   3: 1429706.962 ops/s
[info] Iteration   1: 1452417.082 ops/s
[info]                  ·gc.alloc.rate:                   2133.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              2312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2325.272 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2520.315 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 1437787.802 ops/s
[info]                  ·gc.alloc.rate:                   2112.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              2312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011.807 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2201.774 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1425265.046 ops/s
[info]                  ·gc.alloc.rate:                   2093.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              2312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.674 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2234.727 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1445979.160 ops/s
[info]                  ·gc.alloc.rate:                   2123.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              2312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2369.844 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2579.721 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 1421389.454 ops/s
[info]                  ·gc.alloc.rate:                   2088.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              2312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.564 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2254.896 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1436567.709 ±(99.9%) 50917.260 ops/s [Average]
[info]   (min, avg, max) = (1421389.454, 1436567.709, 1452417.082), stdev = 13223.051
[info]   CI (99.9%): [1385650.449, 1487484.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2110.259 ±(99.9%) 73.998 MB/sec [Average]
[info]   (min, avg, max) = (2088.139, 2110.259, 2133.078), stdev = 19.217
[info]   CI (99.9%): [2036.261, 2184.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2312.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2312.000, 2312.000, 2312.000), stdev = 0.001
[info]   CI (99.9%): [2312.000, 2312.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.112, 0.167), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.123 ±(99.9%) 0.148 B/op [Average]
[info]   (min, avg, max) = (0.090, 0.123, 0.182), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2153.432 ±(99.9%) 685.901 MB/sec [Average]
[info]   (min, avg, max) = (2011.807, 2153.432, 2369.844), stdev = 178.126
[info]   CI (99.9%): [1467.531, 2839.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2358.287 ±(99.9%) 682.714 B/op [Average]
[info]   (min, avg, max) = (2201.774, 2358.287, 2579.721), stdev = 177.299
[info]   CI (99.9%): [1675.573, 3041.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Run progress: 5.48% complete, ETA 00:58:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12729.536 ops/s
[info] # Warmup Iteration   2: 15572.577 ops/s
[info] # Warmup Iteration   3: 15516.696 ops/s
[info] Iteration   1: 15698.881 ops/s
[info]                  ·gc.alloc.rate:                   1120.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              112280.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.885 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98226.791 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 15577.959 ops/s
[info]                  ·gc.alloc.rate:                   1111.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              112294.111 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.632 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99298.754 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 15667.045 ops/s
[info]                  ·gc.alloc.rate:                   1117.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              112296.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1316.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 132293.220 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 15675.403 ops/s
[info]                  ·gc.alloc.rate:                   1118.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              112296.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992.955 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99681.263 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 15258.604 ops/s
[info]                  ·gc.alloc.rate:                   1088.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              112294.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 102954.471 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   15575.579 ±(99.9%) 704.818 ops/s [Average]
[info]   (min, avg, max) = (15258.604, 15575.579, 15698.881), stdev = 183.039
[info]   CI (99.9%): [14870.761, 16280.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1111.250 ±(99.9%) 50.694 MB/sec [Average]
[info]   (min, avg, max) = (1088.495, 1111.250, 1120.077), stdev = 13.165
[info]   CI (99.9%): [1060.556, 1161.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   112292.235 ±(99.9%) 26.461 B/op [Average]
[info]   (min, avg, max) = (112280.026, 112292.235, 112296.033), stdev = 6.872
[info]   CI (99.9%): [112265.773, 112318.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6.719 ±(99.9%) 10.402 B/op [Average]
[info]   (min, avg, max) = (4.180, 6.719, 10.434), stdev = 2.701
[info]   CI (99.9%): [≈ 0, 17.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1054.064 ±(99.9%) 566.474 MB/sec [Average]
[info]   (min, avg, max) = (979.885, 1054.064, 1316.894), stdev = 147.111
[info]   CI (99.9%): [487.591, 1620.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   106490.900 ±(99.9%) 55955.688 B/op [Average]
[info]   (min, avg, max) = (98226.791, 106490.900, 132293.220), stdev = 14531.514
[info]   CI (99.9%): [50535.212, 162446.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Run progress: 5.82% complete, ETA 00:58:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12124.680 ops/s
[info] # Warmup Iteration   2: 19283.597 ops/s
[info] # Warmup Iteration   3: 18991.832 ops/s
[info] Iteration   1: 19302.807 ops/s
[info]                  ·gc.alloc.rate:                   682.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              55677.937 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      649.438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52955.641 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 19285.668 ops/s
[info]                  ·gc.alloc.rate:                   682.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              55696.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.169 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53301.300 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 18857.686 ops/s
[info]                  ·gc.alloc.rate:                   667.387 MB/sec
[info]                  ·gc.alloc.rate.norm:              55696.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.183 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54761.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 19287.750 ops/s
[info]                  ·gc.alloc.rate:                   682.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              55666.858 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53757.797 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 19307.018 ops/s
[info]                  ·gc.alloc.rate:                   682.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              55664.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992.808 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80937.469 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   19208.186 ±(99.9%) 755.318 ops/s [Average]
[info]   (min, avg, max) = (18857.686, 19208.186, 19307.018), stdev = 196.154
[info]   CI (99.9%): [18452.868, 19963.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   679.593 ±(99.9%) 26.283 MB/sec [Average]
[info]   (min, avg, max) = (667.387, 679.593, 682.824), stdev = 6.826
[info]   CI (99.9%): [653.310, 705.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   55680.173 ±(99.9%) 59.206 B/op [Average]
[info]   (min, avg, max) = (55664.023, 55680.173, 55696.027), stdev = 15.376
[info]   CI (99.9%): [55620.967, 55739.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.377 ±(99.9%) 5.847 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.377, 3.398), stdev = 1.518
[info]   CI (99.9%): [≈ 0, 8.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   722.128 ±(99.9%) 582.821 MB/sec [Average]
[info]   (min, avg, max) = (649.438, 722.128, 992.808), stdev = 151.357
[info]   CI (99.9%): [139.307, 1304.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   59142.643 ±(99.9%) 46987.719 B/op [Average]
[info]   (min, avg, max) = (52955.641, 59142.643, 80937.469), stdev = 12202.562
[info]   CI (99.9%): [12154.923, 106130.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Run progress: 6.16% complete, ETA 00:57:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15085.005 ops/s
[info] # Warmup Iteration   2: 16404.129 ops/s
[info] # Warmup Iteration   3: 16490.230 ops/s
[info] Iteration   1: 16487.225 ops/s
[info]                  ·gc.alloc.rate:                   305.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              29200.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24416.541 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 16443.856 ops/s
[info]                  ·gc.alloc.rate:                   305.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              29200.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.518 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48966.701 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 16545.283 ops/s
[info]                  ·gc.alloc.rate:      306.938 MB/sec
[info]                  ·gc.alloc.rate.norm: 29200.029 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 16313.331 ops/s
[info]                  ·gc.alloc.rate:                   302.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              29200.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     322.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.681 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31812.032 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 16529.742 ops/s
[info]                  ·gc.alloc.rate:                   306.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              29200.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.681 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31394.491 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   16463.887 ±(99.9%) 358.002 ops/s [Average]
[info]   (min, avg, max) = (16313.331, 16463.887, 16545.283), stdev = 92.972
[info]   CI (99.9%): [16105.885, 16821.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   305.414 ±(99.9%) 6.671 MB/sec [Average]
[info]   (min, avg, max) = (302.612, 305.414, 306.938), stdev = 1.732
[info]   CI (99.9%): [298.743, 312.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29200.027 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (29200.025, 29200.027, 29200.031), stdev = 0.003
[info]   CI (99.9%): [29200.016, 29200.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.680 ±(99.9%) 5.727 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.680, 3.340), stdev = 1.487
[info]   CI (99.9%): [≈ 0, 6.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   65.586 ±(99.9%) 552.683 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 65.586, 322.326), stdev = 143.530
[info]   CI (99.9%): [≈ 0, 618.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   285.326 ±(99.9%) 713.626 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 285.326, 511.518), stdev = 185.326
[info]   CI (99.9%): [≈ 0, 998.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   27317.953 ±(99.9%) 68346.813 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27317.953, 48966.701), stdev = 17749.450
[info]   CI (99.9%): [≈ 0, 95664.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 5.000), stdev = 2.074
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Run progress: 6.51% complete, ETA 00:57:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9132.861 ops/s
[info] # Warmup Iteration   2: 16342.534 ops/s
[info] # Warmup Iteration   3: 16416.565 ops/s
[info] Iteration   1: 16337.194 ops/s
[info]                  ·gc.alloc.rate:                   921.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              88808.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.308 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94648.406 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 16396.257 ops/s
[info]                  ·gc.alloc.rate:                   925.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              88808.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.733 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63238.104 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 16494.526 ops/s
[info]                  ·gc.alloc.rate:                   930.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              88808.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.711 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94796.406 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 16686.386 ops/s
[info]                  ·gc.alloc.rate:                   941.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              88808.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      998.257 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94151.305 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 16698.896 ops/s
[info]                  ·gc.alloc.rate:                   942.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              88808.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1002.804 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94517.493 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   16522.652 ±(99.9%) 635.741 ops/s [Average]
[info]   (min, avg, max) = (16337.194, 16522.652, 16698.896), stdev = 165.100
[info]   CI (99.9%): [15886.911, 17158.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   932.310 ±(99.9%) 36.096 MB/sec [Average]
[info]   (min, avg, max) = (921.694, 932.310, 942.228), stdev = 9.374
[info]   CI (99.9%): [896.214, 968.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   88808.027 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (88808.024, 88808.027, 88808.031), stdev = 0.002
[info]   CI (99.9%): [88808.018, 88808.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.042, 0.062), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.971 ±(99.9%) 5.443 B/op [Average]
[info]   (min, avg, max) = (1.962, 3.971, 5.959), stdev = 1.413
[info]   CI (99.9%): [≈ 0, 9.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   927.162 ±(99.9%) 578.559 MB/sec [Average]
[info]   (min, avg, max) = (658.733, 927.162, 1002.804), stdev = 150.250
[info]   CI (99.9%): [348.604, 1505.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   88270.343 ±(99.9%) 53891.643 B/op [Average]
[info]   (min, avg, max) = (63238.104, 88270.343, 94796.406), stdev = 13995.488
[info]   CI (99.9%): [34378.700, 142161.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Run progress: 6.85% complete, ETA 00:57:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9913.705 ops/s
[info] # Warmup Iteration   2: 12962.042 ops/s
[info] # Warmup Iteration   3: 13351.957 ops/s
[info] Iteration   1: 13473.267 ops/s
[info]                  ·gc.alloc.rate:                   1622.496 MB/sec
[info]                  ·gc.alloc.rate.norm:              189520.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1636.381 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 191141.804 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 13397.647 ops/s
[info]                  ·gc.alloc.rate:                   1613.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              189528.736 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1648.676 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 193712.678 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 13615.596 ops/s
[info]                  ·gc.alloc.rate:                   1639.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              189584.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1663.431 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 192305.666 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 13471.326 ops/s
[info]                  ·gc.alloc.rate:                   1622.557 MB/sec
[info]                  ·gc.alloc.rate.norm:              189584.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.864 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1674.763 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 195683.862 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 13577.057 ops/s
[info]                  ·gc.alloc.rate:                   1635.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              189584.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1683.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 195237.439 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   13506.979 ±(99.9%) 339.370 ops/s [Average]
[info]   (min, avg, max) = (13397.647, 13506.979, 13615.596), stdev = 88.133
[info]   CI (99.9%): [13167.609, 13846.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1626.617 ±(99.9%) 41.507 MB/sec [Average]
[info]   (min, avg, max) = (1613.066, 1626.617, 1639.889), stdev = 10.779
[info]   CI (99.9%): [1585.110, 1668.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   189560.173 ±(99.9%) 126.364 B/op [Average]
[info]   (min, avg, max) = (189520.030, 189560.173, 189584.040), stdev = 32.816
[info]   CI (99.9%): [189433.809, 189686.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9.202 ±(99.9%) 16.516 B/op [Average]
[info]   (min, avg, max) = (4.863, 9.202, 14.437), stdev = 4.289
[info]   CI (99.9%): [≈ 0, 25.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1661.417 ±(99.9%) 73.913 MB/sec [Average]
[info]   (min, avg, max) = (1636.381, 1661.417, 1683.833), stdev = 19.195
[info]   CI (99.9%): [1587.503, 1735.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   193616.290 ±(99.9%) 7395.112 B/op [Average]
[info]   (min, avg, max) = (191141.804, 193616.290, 195683.862), stdev = 1920.487
[info]   CI (99.9%): [186221.177, 201011.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Run progress: 7.19% complete, ETA 00:57:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6740.864 ops/s
[info] # Warmup Iteration   2: 12925.028 ops/s
[info] # Warmup Iteration   3: 13050.925 ops/s
[info] Iteration   1: 13068.548 ops/s
[info]                  ·gc.alloc.rate:                   1425.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              171759.884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.241 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 158666.105 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 13234.635 ops/s
[info]                  ·gc.alloc.rate:                   1444.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              171760.158 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1327.795 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 157916.163 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 13088.015 ops/s
[info]                  ·gc.alloc.rate:                   1428.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              171760.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1671.492 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 200983.742 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 13128.167 ops/s
[info]                  ·gc.alloc.rate:                   1432.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              171760.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.236 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 161147.389 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 13032.528 ops/s
[info]                  ·gc.alloc.rate:                   1422.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              171760.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 162977.750 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   13110.379 ±(99.9%) 298.684 ops/s [Average]
[info]   (min, avg, max) = (13032.528, 13110.379, 13234.635), stdev = 77.567
[info]   CI (99.9%): [12811.695, 13409.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1430.703 ±(99.9%) 32.626 MB/sec [Average]
[info]   (min, avg, max) = (1422.154, 1430.703, 1444.198), stdev = 8.473
[info]   CI (99.9%): [1398.077, 1463.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   171760.032 ±(99.9%) 0.377 B/op [Average]
[info]   (min, avg, max) = (171759.884, 171760.032, 171760.158), stdev = 0.098
[info]   CI (99.9%): [171759.655, 171760.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.224 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.125), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   6.479 ±(99.9%) 26.722 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.479, 14.853), stdev = 6.940
[info]   CI (99.9%): [≈ 0, 33.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1402.041 ±(99.9%) 582.123 MB/sec [Average]
[info]   (min, avg, max) = (1317.241, 1402.041, 1671.492), stdev = 151.175
[info]   CI (99.9%): [819.918, 1984.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   168338.230 ±(99.9%) 70697.389 B/op [Average]
[info]   (min, avg, max) = (157916.163, 168338.230, 200983.742), stdev = 18359.887
[info]   CI (99.9%): [97640.841, 239035.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Run progress: 7.53% complete, ETA 00:57:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11896.942 ops/s
[info] # Warmup Iteration   2: 14534.123 ops/s
[info] # Warmup Iteration   3: 14580.403 ops/s
[info] Iteration   1: 14642.635 ops/s
[info]                  ·gc.alloc.rate:                   1567.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              168472.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1639.313 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 176158.763 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 14670.109 ops/s
[info]                  ·gc.alloc.rate:                   1570.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              168472.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1650.808 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 177133.016 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 14730.982 ops/s
[info]                  ·gc.alloc.rate:                   1577.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              168472.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 177823.060 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 14553.659 ops/s
[info]                  ·gc.alloc.rate:                   1557.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              168472.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.078 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 144831.138 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 14540.339 ops/s
[info]                  ·gc.alloc.rate:                   1556.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              168472.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 182116.541 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   14627.545 ±(99.9%) 309.269 ops/s [Average]
[info]   (min, avg, max) = (14540.339, 14627.545, 14730.982), stdev = 80.316
[info]   CI (99.9%): [14318.276, 14936.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1565.796 ±(99.9%) 33.492 MB/sec [Average]
[info]   (min, avg, max) = (1556.425, 1565.796, 1577.028), stdev = 8.698
[info]   CI (99.9%): [1532.305, 1599.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   168472.050 ±(99.9%) 0.185 B/op [Average]
[info]   (min, avg, max) = (168472.028, 168472.050, 168472.136), stdev = 0.048
[info]   CI (99.9%): [168471.865, 168472.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.125), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   7.604 ±(99.9%) 18.851 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.604, 13.400), stdev = 4.896
[info]   CI (99.9%): [≈ 0, 26.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1595.248 ±(99.9%) 554.897 MB/sec [Average]
[info]   (min, avg, max) = (1339.078, 1595.248, 1682.479), stdev = 144.105
[info]   CI (99.9%): [1040.351, 2150.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   171612.504 ±(99.9%) 58311.893 B/op [Average]
[info]   (min, avg, max) = (144831.138, 171612.504, 182116.541), stdev = 15143.413
[info]   CI (99.9%): [113300.611, 229924.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 7.88% complete, ETA 00:57:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12022.997 ops/s
[info] # Warmup Iteration   2: 14622.068 ops/s
[info] # Warmup Iteration   3: 14618.543 ops/s
[info] Iteration   1: 14759.208 ops/s
[info]                  ·gc.alloc.rate:                   1529.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              163136.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1638.439 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 174715.309 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 14858.583 ops/s
[info]                  ·gc.alloc.rate:                   1540.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              163136.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1319.850 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 139812.485 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 14834.613 ops/s
[info]                  ·gc.alloc.rate:                   1537.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              163136.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1661.080 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 176258.579 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 14695.749 ops/s
[info]                  ·gc.alloc.rate:                   1523.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              163136.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1672.987 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 179197.422 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 14811.254 ops/s
[info]                  ·gc.alloc.rate:                   1534.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              163136.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.307 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 142981.202 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   14791.881 ±(99.9%) 250.731 ops/s [Average]
[info]   (min, avg, max) = (14695.749, 14791.881, 14858.583), stdev = 65.114
[info]   CI (99.9%): [14541.151, 15042.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1533.054 ±(99.9%) 25.958 MB/sec [Average]
[info]   (min, avg, max) = (1523.037, 1533.054, 1540.027), stdev = 6.741
[info]   CI (99.9%): [1507.097, 1559.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   163136.049 ±(99.9%) 0.182 B/op [Average]
[info]   (min, avg, max) = (163136.027, 163136.049, 163136.133), stdev = 0.047
[info]   CI (99.9%): [163135.867, 163136.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   9.747 ±(99.9%) 12.990 B/op [Average]
[info]   (min, avg, max) = (4.440, 9.747, 13.376), stdev = 3.374
[info]   CI (99.9%): [≈ 0, 22.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   1527.532 ±(99.9%) 687.829 MB/sec [Average]
[info]   (min, avg, max) = (1319.850, 1527.532, 1672.987), stdev = 178.627
[info]   CI (99.9%): [839.703, 2215.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   162592.999 ±(99.9%) 74889.327 B/op [Average]
[info]   (min, avg, max) = (139812.485, 162592.999, 179197.422), stdev = 19448.520
[info]   CI (99.9%): [87703.673, 237482.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Run progress: 8.22% complete, ETA 00:56:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3078.571 ops/s
[info] # Warmup Iteration   2: 4380.831 ops/s
[info] # Warmup Iteration   3: 4523.733 ops/s
[info] Iteration   1: 4514.116 ops/s
[info]                  ·gc.alloc.rate:                   1112.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              388047.658 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.512 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1293.241 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 450915.543 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 4513.828 ops/s
[info]                  ·gc.alloc.rate:                   1113.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              388048.090 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21.773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      974.232 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 339655.017 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 4512.901 ops/s
[info]                  ·gc.alloc.rate:                   1112.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              388048.523 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.652 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 341356.321 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 4507.559 ops/s
[info]                  ·gc.alloc.rate:                   1111.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              388048.098 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.549 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 459057.224 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 4516.347 ops/s
[info]                  ·gc.alloc.rate:                   1113.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              388048.090 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.222 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 346160.050 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   4512.950 ±(99.9%) 12.587 ops/s [Average]
[info]   (min, avg, max) = (4507.559, 4512.950, 4516.347), stdev = 3.269
[info]   CI (99.9%): [4500.364, 4525.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1112.621 ±(99.9%) 3.279 MB/sec [Average]
[info]   (min, avg, max) = (1111.208, 1112.621, 1113.409), stdev = 0.851
[info]   CI (99.9%): [1109.342, 1115.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   388048.092 ±(99.9%) 1.177 B/op [Average]
[info]   (min, avg, max) = (388047.658, 388048.092, 388048.523), stdev = 0.306
[info]   CI (99.9%): [388046.915, 388049.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   17.416 ±(99.9%) 31.826 B/op [Average]
[info]   (min, avg, max) = (7.267, 17.416, 29.011), stdev = 8.265
[info]   CI (99.9%): [≈ 0, 49.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1110.779 ±(99.9%) 679.987 MB/sec [Average]
[info]   (min, avg, max) = (974.232, 1110.779, 1314.549), stdev = 176.590
[info]   CI (99.9%): [430.792, 1790.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   387428.831 ±(99.9%) 237910.245 B/op [Average]
[info]   (min, avg, max) = (339655.017, 387428.831, 459057.224), stdev = 61784.535
[info]   CI (99.9%): [149518.585, 625339.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Run progress: 8.56% complete, ETA 00:56:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6523.621 ops/s
[info] # Warmup Iteration   2: 8504.051 ops/s
[info] # Warmup Iteration   3: 8613.604 ops/s
[info] Iteration   1: 8664.151 ops/s
[info]                  ·gc.alloc.rate:                   1268.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              230472.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.755 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 178694.675 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 8636.126 ops/s
[info]                  ·gc.alloc.rate:                   1264.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              230472.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.445 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 240050.827 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 8650.462 ops/s
[info]                  ·gc.alloc.rate:                   1266.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              230472.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1324.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 240934.939 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 8526.348 ops/s
[info]                  ·gc.alloc.rate:                   1248.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              230472.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1332.465 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 245913.696 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 8639.485 ops/s
[info]                  ·gc.alloc.rate:                   1265.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              230481.946 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.054 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 243911.325 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   8623.314 ±(99.9%) 212.944 ops/s [Average]
[info]   (min, avg, max) = (8526.348, 8623.314, 8664.151), stdev = 55.301
[info]   CI (99.9%): [8410.370, 8836.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1262.889 ±(99.9%) 30.900 MB/sec [Average]
[info]   (min, avg, max) = (1248.795, 1262.889, 1268.802), stdev = 8.025
[info]   CI (99.9%): [1231.989, 1293.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   230474.028 ±(99.9%) 17.045 B/op [Average]
[info]   (min, avg, max) = (230472.047, 230474.028, 230481.946), stdev = 4.426
[info]   CI (99.9%): [230456.983, 230491.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12.915 ±(99.9%) 22.111 B/op [Average]
[info]   (min, avg, max) = (7.562, 12.915, 18.967), stdev = 5.742
[info]   CI (99.9%): [≈ 0, 35.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1259.373 ±(99.9%) 594.125 MB/sec [Average]
[info]   (min, avg, max) = (983.755, 1259.373, 1339.054), stdev = 154.292
[info]   CI (99.9%): [665.248, 1853.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   229901.092 ±(99.9%) 110593.787 B/op [Average]
[info]   (min, avg, max) = (178694.675, 229901.092, 245913.696), stdev = 28720.855
[info]   CI (99.9%): [119307.306, 340494.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Run progress: 8.90% complete, ETA 00:56:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14464.443 ops/s
[info] # Warmup Iteration   2: 24935.553 ops/s
[info] # Warmup Iteration   3: 24866.176 ops/s
[info] Iteration   1: 24787.193 ops/s
[info]                  ·gc.alloc.rate:                   917.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              58248.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.735 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62281.802 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 24300.703 ops/s
[info]                  ·gc.alloc.rate:                   899.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              58244.513 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      988.413 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64004.382 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 25012.407 ops/s
[info]                  ·gc.alloc.rate:                   925.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              58216.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.056 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41664.716 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 24964.834 ops/s
[info]                  ·gc.alloc.rate:                   923.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              58216.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.780 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62848.205 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 24604.285 ops/s
[info]                  ·gc.alloc.rate:                   910.011 MB/sec
[info]                  ·gc.alloc.rate.norm:              58216.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.995 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1002.121 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64108.525 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   24733.884 ±(99.9%) 1119.665 ops/s [Average]
[info]   (min, avg, max) = (24300.703, 24733.884, 25012.407), stdev = 290.773
[info]   CI (99.9%): [23614.219, 25853.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   915.012 ±(99.9%) 40.452 MB/sec [Average]
[info]   (min, avg, max) = (899.464, 915.012, 925.057), stdev = 10.505
[info]   CI (99.9%): [874.561, 955.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   58228.116 ±(99.9%) 63.973 B/op [Average]
[info]   (min, avg, max) = (58216.016, 58228.116, 58248.016), stdev = 16.614
[info]   CI (99.9%): [58164.143, 58292.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.015
[info]   CI (99.9%): [0.006, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3.982 ±(99.9%) 3.777 B/op [Average]
[info]   (min, avg, max) = (2.620, 3.982, 5.393), stdev = 0.981
[info]   CI (99.9%): [0.205, 7.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   926.021 ±(99.9%) 569.068 MB/sec [Average]
[info]   (min, avg, max) = (662.056, 926.021, 1002.121), stdev = 147.785
[info]   CI (99.9%): [356.952, 1495.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   58981.526 ±(99.9%) 37394.399 B/op [Average]
[info]   (min, avg, max) = (41664.716, 58981.526, 64108.525), stdev = 9711.207
[info]   CI (99.9%): [21587.128, 96375.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Run progress: 9.25% complete, ETA 00:56:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25785.801 ops/s
[info] # Warmup Iteration   2: 28046.800 ops/s
[info] # Warmup Iteration   3: 28366.161 ops/s
[info] Iteration   1: 28450.818 ops/s
[info]                  ·gc.alloc.rate:                   516.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     148.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      331.340 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18332.392 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 28484.798 ops/s
[info]                  ·gc.alloc.rate:                   517.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.983 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36567.105 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 28310.096 ops/s
[info]                  ·gc.alloc.rate:                   513.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.362 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18368.133 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 27943.055 ops/s
[info]                  ·gc.alloc.rate:                   507.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.371 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37144.962 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 28494.415 ops/s
[info]                  ·gc.alloc.rate:                   517.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.699 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18212.749 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   28336.636 ±(99.9%) 893.760 ops/s [Average]
[info]   (min, avg, max) = (27943.055, 28336.636, 28494.415), stdev = 232.107
[info]   CI (99.9%): [27442.876, 29230.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   514.320 ±(99.9%) 16.380 MB/sec [Average]
[info]   (min, avg, max) = (507.119, 514.320, 517.174), stdev = 4.254
[info]   CI (99.9%): [497.940, 530.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   28568.015 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (28568.014, 28568.015, 28568.018), stdev = 0.002
[info]   CI (99.9%): [28568.009, 28568.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.573 ±(99.9%) 4.530 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.573, 2.677), stdev = 1.176
[info]   CI (99.9%): [≈ 0, 5.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   31.707 ±(99.9%) 250.608 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31.707, 148.089), stdev = 65.082
[info]   CI (99.9%): [≈ 0, 282.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   462.551 ±(99.9%) 696.453 MB/sec [Average]
[info]   (min, avg, max) = (329.699, 462.551, 661.983), stdev = 180.867
[info]   CI (99.9%): [≈ 0, 1159.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   25725.068 ±(99.9%) 39135.446 B/op [Average]
[info]   (min, avg, max) = (18212.749, 25725.068, 37144.962), stdev = 10163.351
[info]   CI (99.9%): [≈ 0, 64860.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Run progress: 9.59% complete, ETA 00:56:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8134.696 ops/s
[info] # Warmup Iteration   2: 15090.909 ops/s
[info] # Warmup Iteration   3: 15051.312 ops/s
[info] Iteration   1: 15067.198 ops/s
[info]                  ·gc.alloc.rate:                   1503.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              157087.917 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1651.134 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 172513.051 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 15055.389 ops/s
[info]                  ·gc.alloc.rate:                   1502.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              157088.139 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 139132.345 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 15024.001 ops/s
[info]                  ·gc.alloc.rate:                   1500.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              157088.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1676.067 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 175518.561 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 15125.522 ops/s
[info]                  ·gc.alloc.rate:                   1509.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              157088.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 140108.162 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 15110.225 ops/s
[info]                  ·gc.alloc.rate:                   1507.952 MB/sec
[info]                  ·gc.alloc.rate.norm:              157088.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1688.386 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 175884.349 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   15076.467 ±(99.9%) 159.104 ops/s [Average]
[info]   (min, avg, max) = (15024.001, 15076.467, 15125.522), stdev = 41.319
[info]   CI (99.9%): [14917.363, 15235.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1504.725 ±(99.9%) 15.138 MB/sec [Average]
[info]   (min, avg, max) = (1500.070, 1504.725, 1509.567), stdev = 3.931
[info]   CI (99.9%): [1489.587, 1519.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   157088.029 ±(99.9%) 0.305 B/op [Average]
[info]   (min, avg, max) = (157087.917, 157088.029, 157088.139), stdev = 0.079
[info]   CI (99.9%): [157087.725, 157088.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.125), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   8.694 ±(99.9%) 11.872 B/op [Average]
[info]   (min, avg, max) = (6.498, 8.694, 13.057), stdev = 3.083
[info]   CI (99.9%): [≈ 0, 20.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1538.555 ±(99.9%) 705.109 MB/sec [Average]
[info]   (min, avg, max) = (1330.791, 1538.555, 1688.386), stdev = 183.115
[info]   CI (99.9%): [833.445, 2243.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   160631.293 ±(99.9%) 74040.240 B/op [Average]
[info]   (min, avg, max) = (139132.345, 160631.293, 175884.349), stdev = 19228.015
[info]   CI (99.9%): [86591.053, 234671.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 1.095
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Run progress: 9.93% complete, ETA 00:55:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15333.613 ops/s
[info] # Warmup Iteration   2: 17708.673 ops/s
[info] # Warmup Iteration   3: 17886.756 ops/s
[info] Iteration   1: 18031.793 ops/s
[info]                  ·gc.alloc.rate:                   1575.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              137528.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.817 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1311.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 114502.685 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 17995.188 ops/s
[info]                  ·gc.alloc.rate:                   1572.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              137528.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1651.476 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 144399.134 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 17864.512 ops/s
[info]                  ·gc.alloc.rate:                   1560.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              137528.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.097 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 146623.413 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 17864.055 ops/s
[info]                  ·gc.alloc.rate:                   1560.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              137528.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1674.877 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147570.625 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 18075.147 ops/s
[info]                  ·gc.alloc.rate:                   1579.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              137528.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 117275.329 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   17966.139 ±(99.9%) 374.257 ops/s [Average]
[info]   (min, avg, max) = (17864.055, 17966.139, 18075.147), stdev = 97.193
[info]   CI (99.9%): [17591.882, 18340.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1569.863 ±(99.9%) 32.747 MB/sec [Average]
[info]   (min, avg, max) = (1560.869, 1569.863, 1579.252), stdev = 8.504
[info]   CI (99.9%): [1537.116, 1602.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   137528.025 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (137528.023, 137528.025, 137528.030), stdev = 0.003
[info]   CI (99.9%): [137528.012, 137528.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.104), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6.931 ±(99.9%) 12.547 B/op [Average]
[info]   (min, avg, max) = (1.817, 6.931, 9.169), stdev = 3.258
[info]   CI (99.9%): [≈ 0, 19.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1529.756 ±(99.9%) 707.435 MB/sec [Average]
[info]   (min, avg, max) = (1311.645, 1529.756, 1674.877), stdev = 183.719
[info]   CI (99.9%): [822.322, 2237.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   134074.237 ±(99.9%) 64188.246 B/op [Average]
[info]   (min, avg, max) = (114502.685, 134074.237, 147570.625), stdev = 16669.484
[info]   CI (99.9%): [69885.991, 198262.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 10.27% complete, ETA 00:55:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15331.630 ops/s
[info] # Warmup Iteration   2: 18227.507 ops/s
[info] # Warmup Iteration   3: 18163.258 ops/s
[info] Iteration   1: 18263.179 ops/s
[info]                  ·gc.alloc.rate:                   1535.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              132320.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1638.934 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 141247.194 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 18325.423 ops/s
[info]                  ·gc.alloc.rate:                   1540.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              132320.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.939 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1651.321 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 141799.193 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 18356.424 ops/s
[info]                  ·gc.alloc.rate:                   1543.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              132320.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331.207 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 114109.741 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 17877.888 ops/s
[info]                  ·gc.alloc.rate:                   1502.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              132320.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.662 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147367.121 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 18318.072 ops/s
[info]                  ·gc.alloc.rate:                   1539.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              132320.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.392 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 115605.475 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   18228.197 ±(99.9%) 765.088 ops/s [Average]
[info]   (min, avg, max) = (17877.888, 18228.197, 18356.424), stdev = 198.691
[info]   CI (99.9%): [17463.109, 18993.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1532.523 ±(99.9%) 65.071 MB/sec [Average]
[info]   (min, avg, max) = (1502.771, 1532.523, 1543.649), stdev = 16.899
[info]   CI (99.9%): [1467.451, 1597.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   132320.026 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (132320.022, 132320.026, 132320.033), stdev = 0.005
[info]   CI (99.9%): [132320.008, 132320.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   7.541 ±(99.9%) 8.909 B/op [Average]
[info]   (min, avg, max) = (5.365, 7.541, 10.764), stdev = 2.314
[info]   CI (99.9%): [≈ 0, 16.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   1528.103 ±(99.9%) 669.184 MB/sec [Average]
[info]   (min, avg, max) = (1331.207, 1528.103, 1673.662), stdev = 173.785
[info]   CI (99.9%): [858.919, 2197.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   132025.745 ±(99.9%) 61082.237 B/op [Average]
[info]   (min, avg, max) = (114109.741, 132025.745, 147367.121), stdev = 15862.863
[info]   CI (99.9%): [70943.508, 193107.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Run progress: 10.62% complete, ETA 00:55:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 301431.485 ops/s
[info] # Warmup Iteration   2: 365843.957 ops/s
[info] # Warmup Iteration   3: 370869.196 ops/s
[info] Iteration   1: 373266.425 ops/s
[info]                  ·gc.alloc.rate:                   1887.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1979.131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8346.464 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 373402.075 ops/s
[info]                  ·gc.alloc.rate:                   1888.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1663.351 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7012.501 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 367172.364 ops/s
[info]                  ·gc.alloc.rate:                   1857.063 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011.838 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8623.416 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 373693.949 ops/s
[info]                  ·gc.alloc.rate:                   1890.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.150 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8517.960 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 371217.406 ops/s
[info]                  ·gc.alloc.rate:                   1877.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1692.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7172.471 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   371750.444 ±(99.9%) 10553.546 ops/s [Average]
[info]   (min, avg, max) = (367172.364, 371750.444, 373693.949), stdev = 2740.722
[info]   CI (99.9%): [361196.898, 382303.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1880.216 ±(99.9%) 53.261 MB/sec [Average]
[info]   (min, avg, max) = (1857.063, 1880.216, 1890.626), stdev = 13.832
[info]   CI (99.9%): [1826.955, 1933.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   7960.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7960.001, 7960.001, 7960.001), stdev = 0.001
[info]   CI (99.9%): [7960.001, 7960.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.125), stdev = 0.015
[info]   CI (99.9%): [0.047, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.440 ±(99.9%) 0.230 B/op [Average]
[info]   (min, avg, max) = (0.357, 0.440, 0.526), stdev = 0.060
[info]   CI (99.9%): [0.210, 0.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1873.898 ±(99.9%) 693.615 MB/sec [Average]
[info]   (min, avg, max) = (1663.351, 1873.898, 2023.150), stdev = 180.130
[info]   CI (99.9%): [1180.284, 2567.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7934.562 ±(99.9%) 2992.322 B/op [Average]
[info]   (min, avg, max) = (7012.501, 7934.562, 8623.416), stdev = 777.096
[info]   CI (99.9%): [4942.241, 10926.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Run progress: 10.96% complete, ETA 00:55:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 462479.819 ops/s
[info] # Warmup Iteration   2: 698120.980 ops/s
[info] # Warmup Iteration   3: 708018.031 ops/s
[info] Iteration   1: 721353.645 ops/s
[info]                  ·gc.alloc.rate:                   597.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.594 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1412.703 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 721504.491 ops/s
[info]                  ·gc.alloc.rate:                   597.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.467 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1421.167 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 699517.685 ops/s
[info]                  ·gc.alloc.rate:                   579.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.877 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1473.260 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 704056.242 ops/s
[info]                  ·gc.alloc.rate:                   583.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.389 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1469.753 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 721808.210 ops/s
[info]                  ·gc.alloc.rate:                   597.933 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 719.686 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   713648.055 ±(99.9%) 42153.474 ops/s [Average]
[info]   (min, avg, max) = (699517.685, 713648.055, 721808.210), stdev = 10947.123
[info]   CI (99.9%): [671494.580, 755801.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   591.269 ±(99.9%) 34.882 MB/sec [Average]
[info]   (min, avg, max) = (579.639, 591.269, 597.933), stdev = 9.059
[info]   CI (99.9%): [556.387, 626.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1304.001, 1304.001, 1304.001), stdev = 0.001
[info]   CI (99.9%): [1304.001, 1304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.082 ±(99.9%) 0.259 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.082, 0.182), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   588.266 ±(99.9%) 556.111 MB/sec [Average]
[info]   (min, avg, max) = (330.003, 588.266, 657.389), stdev = 144.420
[info]   CI (99.9%): [32.155, 1144.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1299.314 ±(99.9%) 1252.171 B/op [Average]
[info]   (min, avg, max) = (719.686, 1299.314, 1473.260), stdev = 325.185
[info]   CI (99.9%): [47.143, 2551.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Run progress: 11.30% complete, ETA 00:55:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1628040.459 ops/s
[info] # Warmup Iteration   2: 1717050.958 ops/s
[info] # Warmup Iteration   3: 1684825.982 ops/s
[info] Iteration   1: 1672908.059 ops/s
[info]                  ·gc.alloc.rate:                   323.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 481.295 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1695669.908 ops/s
[info]                  ·gc.alloc.rate:                   327.439 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 237.423 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1706410.752 ops/s
[info]                  ·gc.alloc.rate:                   329.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.779 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 304.125 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1679931.041 ops/s
[info]                  ·gc.alloc.rate:                   324.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.792 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 308.914 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1710413.389 ops/s
[info]                  ·gc.alloc.rate:                   330.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.428 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 302.197 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1693066.630 ±(99.9%) 62821.706 ops/s [Average]
[info]   (min, avg, max) = (1672908.059, 1693066.630, 1710413.389), stdev = 16314.598
[info]   CI (99.9%): [1630244.924, 1755888.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   327.014 ±(99.9%) 12.217 MB/sec [Average]
[info]   (min, avg, max) = (323.052, 327.014, 330.389), stdev = 3.173
[info]   CI (99.9%): [314.797, 339.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.669 ±(99.9%) 5.616 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.669, 3.278), stdev = 1.459
[info]   CI (99.9%): [≈ 0, 6.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.617 ±(99.9%) 5.179 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.617, 3.023), stdev = 1.345
[info]   CI (99.9%): [≈ 0, 5.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   351.037 ±(99.9%) 366.485 MB/sec [Average]
[info]   (min, avg, max) = (255.728, 351.037, 511.458), stdev = 95.175
[info]   CI (99.9%): [≈ 0, 717.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   326.791 ±(99.9%) 351.319 B/op [Average]
[info]   (min, avg, max) = (237.423, 326.791, 481.295), stdev = 91.236
[info]   CI (99.9%): [≈ 0, 678.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 5.000), stdev = 1.643
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Run progress: 11.64% complete, ETA 00:54:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63116.639 ops/s
[info] # Warmup Iteration   2: 104319.580 ops/s
[info] # Warmup Iteration   3: 105566.085 ops/s
[info] Iteration   1: 105652.806 ops/s
[info]                  ·gc.alloc.rate:                   3837.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3718.820 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55409.124 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 104033.255 ops/s
[info]                  ·gc.alloc.rate:                   3778.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3734.231 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56505.739 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 105272.888 ops/s
[info]                  ·gc.alloc.rate:                   3824.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4084.293 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61058.795 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   4: 105578.314 ops/s
[info]                  ·gc.alloc.rate:                   3835.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3744.145 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55819.055 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 105254.264 ops/s
[info]                  ·gc.alloc.rate:                   3823.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3744.502 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55990.859 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   105158.305 ±(99.9%) 2516.960 ops/s [Average]
[info]   (min, avg, max) = (104033.255, 105158.305, 105652.806), stdev = 653.646
[info]   CI (99.9%): [102641.346, 107675.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3819.885 ±(99.9%) 92.093 MB/sec [Average]
[info]   (min, avg, max) = (3778.526, 3819.885, 3837.406), stdev = 23.916
[info]   CI (99.9%): [3727.792, 3911.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   57176.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (57176.004, 57176.004, 57176.004), stdev = 0.001
[info]   CI (99.9%): [57176.003, 57176.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.146 ±(99.9%) 0.283 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.146, 0.229), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.182 ±(99.9%) 4.245 B/op [Average]
[info]   (min, avg, max) = (0.930, 2.182, 3.424), stdev = 1.102
[info]   CI (99.9%): [≈ 0, 6.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3805.198 ±(99.9%) 602.114 MB/sec [Average]
[info]   (min, avg, max) = (3718.820, 3805.198, 4084.293), stdev = 156.367
[info]   CI (99.9%): [3203.084, 4407.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   56956.714 ±(99.9%) 8958.981 B/op [Average]
[info]   (min, avg, max) = (55409.124, 56956.714, 61058.795), stdev = 2326.619
[info]   CI (99.9%): [47997.733, 65915.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   56.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (11.000, 11.200, 12.000), stdev = 0.447
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   60.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (11.000, 12.000, 13.000), stdev = 0.707
[info]   CI (99.9%): [60.000, 60.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Run progress: 11.99% complete, ETA 00:54:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 240725.985 ops/s
[info] # Warmup Iteration   2: 317958.481 ops/s
[info] # Warmup Iteration   3: 321518.552 ops/s
[info] Iteration   1: 323283.873 ops/s
[info]                  ·gc.alloc.rate:                   791.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              3856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.355 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3171.656 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 318972.266 ops/s
[info]                  ·gc.alloc.rate:                   781.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              3856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      650.679 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3211.178 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 322366.933 ops/s
[info]                  ·gc.alloc.rate:                   789.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              3856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      977.920 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4774.252 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 322215.095 ops/s
[info]                  ·gc.alloc.rate:                   789.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              3856.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.886 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3193.565 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 322922.209 ops/s
[info]                  ·gc.alloc.rate:                   791.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              3856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      984.860 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4800.152 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   321952.075 ±(99.9%) 6623.610 ops/s [Average]
[info]   (min, avg, max) = (318972.266, 321952.075, 323283.873), stdev = 1720.130
[info]   CI (99.9%): [315328.465, 328575.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   788.747 ±(99.9%) 16.375 MB/sec [Average]
[info]   (min, avg, max) = (781.339, 788.747, 791.897), stdev = 4.252
[info]   CI (99.9%): [772.372, 805.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3856.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3856.001, 3856.001, 3856.001), stdev = 0.001
[info]   CI (99.9%): [3856.001, 3856.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.285 ±(99.9%) 0.751 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.285, 0.507), stdev = 0.195
[info]   CI (99.9%): [≈ 0, 1.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   783.740 ±(99.9%) 694.847 MB/sec [Average]
[info]   (min, avg, max) = (650.679, 783.740, 984.860), stdev = 180.450
[info]   CI (99.9%): [88.893, 1478.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3830.161 ±(99.9%) 3364.753 B/op [Average]
[info]   (min, avg, max) = (3171.656, 3830.161, 4800.152), stdev = 873.816
[info]   CI (99.9%): [465.407, 7194.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Run progress: 12.33% complete, ETA 00:54:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 729696.635 ops/s
[info] # Warmup Iteration   2: 1117473.262 ops/s
[info] # Warmup Iteration   3: 1089009.263 ops/s
[info] Iteration   1: 1117666.047 ops/s
[info]                  ·gc.alloc.rate:                   789.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      969.953 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1366.248 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1098456.298 ops/s
[info]                  ·gc.alloc.rate:                   776.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      650.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 932.512 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1100678.908 ops/s
[info]                  ·gc.alloc.rate:                   777.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.697 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 934.904 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1113736.320 ops/s
[info]                  ·gc.alloc.rate:                   787.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      986.782 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1394.119 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1119218.041 ops/s
[info]                  ·gc.alloc.rate:                   790.674 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.389 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 930.175 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   1109951.123 ±(99.9%) 37424.044 ops/s [Average]
[info]   (min, avg, max) = (1098456.298, 1109951.123, 1119218.041), stdev = 9718.905
[info]   CI (99.9%): [1072527.079, 1147375.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   784.190 ±(99.9%) 26.285 MB/sec [Average]
[info]   (min, avg, max) = (776.203, 784.190, 790.674), stdev = 6.826
[info]   CI (99.9%): [757.904, 810.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1112.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1112.000, 1112.000, 1112.000), stdev = 0.001
[info]   CI (99.9%): [1112.000, 1112.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.146), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.101 ±(99.9%) 0.288 B/op [Average]
[info]   (min, avg, max) = (0.029, 0.101, 0.209), stdev = 0.075
[info]   CI (99.9%): [≈ 0, 0.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   784.548 ±(99.9%) 681.850 MB/sec [Average]
[info]   (min, avg, max) = (650.916, 784.548, 986.782), stdev = 177.074
[info]   CI (99.9%): [102.697, 1466.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1111.592 ±(99.9%) 944.922 B/op [Average]
[info]   (min, avg, max) = (930.175, 1111.592, 1394.119), stdev = 245.393
[info]   CI (99.9%): [166.670, 2056.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Run progress: 12.67% complete, ETA 00:54:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2047723.928 ops/s
[info] # Warmup Iteration   2: 2288888.557 ops/s
[info] # Warmup Iteration   3: 2430472.100 ops/s
[info] Iteration   1: 2437931.650 ops/s
[info]                  ·gc.alloc.rate:                   1127.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.213 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 632.144 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2433935.007 ops/s
[info]                  ·gc.alloc.rate:                   1125.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.180 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 635.158 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2448549.762 ops/s
[info]                  ·gc.alloc.rate:                   1132.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1315.547 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 845.681 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2450099.876 ops/s
[info]                  ·gc.alloc.rate:                   1133.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992.178 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 637.385 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2434197.017 ops/s
[info]                  ·gc.alloc.rate:                   1125.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.838 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 860.570 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   2440942.662 ±(99.9%) 30160.627 ops/s [Average]
[info]   (min, avg, max) = (2433935.007, 2440942.662, 2450099.876), stdev = 7832.619
[info]   CI (99.9%): [2410782.036, 2471103.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1128.997 ±(99.9%) 13.937 MB/sec [Average]
[info]   (min, avg, max) = (1125.747, 1128.997, 1133.233), stdev = 3.620
[info]   CI (99.9%): [1115.059, 1142.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.092, 0.104), stdev = 0.011
[info]   CI (99.9%): [0.048, 0.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.059 ±(99.9%) 0.029 B/op [Average]
[info]   (min, avg, max) = (0.053, 0.059, 0.067), stdev = 0.008
[info]   CI (99.9%): [0.030, 0.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1119.991 ±(99.9%) 714.824 MB/sec [Average]
[info]   (min, avg, max) = (979.213, 1119.991, 1330.838), stdev = 185.638
[info]   CI (99.9%): [405.167, 1834.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   722.187 ±(99.9%) 460.767 B/op [Average]
[info]   (min, avg, max) = (632.144, 722.187, 860.570), stdev = 119.660
[info]   CI (99.9%): [261.421, 1182.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 13.01% complete, ETA 00:54:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2268654.282 ops/s
[info] # Warmup Iteration   2: 2530537.444 ops/s
[info] # Warmup Iteration   3: 2556807.340 ops/s
[info] Iteration   1: 2554498.242 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2555864.417 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2544785.789 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2564191.066 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2562906.217 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2556449.146 ±(99.9%) 29939.402 ops/s [Average]
[info]   (min, avg, max) = (2544785.789, 2556449.146, 2564191.066), stdev = 7775.168
[info]   CI (99.9%): [2526509.744, 2586388.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Run progress: 13.36% complete, ETA 00:53:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 405360.551 ops/s
[info] # Warmup Iteration   2: 539354.745 ops/s
[info] # Warmup Iteration   3: 552800.727 ops/s
[info] Iteration   1: 556150.039 ops/s
[info]                  ·gc.alloc.rate:                   656.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      649.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1838.043 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 558698.150 ops/s
[info]                  ·gc.alloc.rate:                   658.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.431 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1824.028 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 555937.006 ops/s
[info]                  ·gc.alloc.rate:                   655.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      969.640 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2745.882 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 557659.977 ops/s
[info]                  ·gc.alloc.rate:                   657.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      648.073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1829.355 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 558978.717 ops/s
[info]                  ·gc.alloc.rate:                   659.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      649.846 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1829.689 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   557484.778 ±(99.9%) 5415.581 ops/s [Average]
[info]   (min, avg, max) = (555937.006, 557484.778, 558978.717), stdev = 1406.409
[info]   CI (99.9%): [552069.197, 562900.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   657.379 ±(99.9%) 6.398 MB/sec [Average]
[info]   (min, avg, max) = (655.401, 657.379, 659.191), stdev = 1.662
[info]   CI (99.9%): [650.981, 663.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1856.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1856.001, 1856.001, 1856.001), stdev = 0.001
[info]   CI (99.9%): [1856.001, 1856.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.827 ±(99.9%) 6.763 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.827, 3.969), stdev = 1.756
[info]   CI (99.9%): [≈ 0, 7.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.340 ±(99.9%) 19.134 B/op [Average]
[info]   (min, avg, max) = (0.059, 2.340, 11.228), stdev = 4.969
[info]   CI (99.9%): [≈ 0, 21.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   712.931 ±(99.9%) 552.599 MB/sec [Average]
[info]   (min, avg, max) = (647.431, 712.931, 969.640), stdev = 143.508
[info]   CI (99.9%): [160.332, 1265.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2013.399 ±(99.9%) 1576.841 B/op [Average]
[info]   (min, avg, max) = (1824.028, 2013.399, 2745.882), stdev = 409.501
[info]   CI (99.9%): [436.558, 3590.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 1.000
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Run progress: 13.70% complete, ETA 00:53:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 141196.562 ops/s
[info] # Warmup Iteration   2: 170946.522 ops/s
[info] # Warmup Iteration   3: 174720.173 ops/s
[info] Iteration   1: 175002.294 ops/s
[info]                  ·gc.alloc.rate:                   2103.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1985.651 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17859.090 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 174599.699 ops/s
[info]                  ·gc.alloc.rate:                   2098.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2338.193 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21080.450 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 175039.413 ops/s
[info]                  ·gc.alloc.rate:                   2104.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.577 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18155.423 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 174900.852 ops/s
[info]                  ·gc.alloc.rate:                   2102.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18253.567 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 174514.581 ops/s
[info]                  ·gc.alloc.rate:                   2098.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.398 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18341.474 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   174811.368 ±(99.9%) 922.048 ops/s [Average]
[info]   (min, avg, max) = (174514.581, 174811.368, 175039.413), stdev = 239.453
[info]   CI (99.9%): [173889.320, 175733.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   2101.563 ±(99.9%) 10.950 MB/sec [Average]
[info]   (min, avg, max) = (2098.562, 2101.563, 2104.627), stdev = 2.844
[info]   CI (99.9%): [2090.614, 2112.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   18920.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18920.002, 18920.002, 18920.003), stdev = 0.001
[info]   CI (99.9%): [18920.002, 18920.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.712 ±(99.9%) 0.603 B/op [Average]
[info]   (min, avg, max) = (0.562, 0.712, 0.937), stdev = 0.157
[info]   CI (99.9%): [0.109, 1.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2081.243 ±(99.9%) 557.850 MB/sec [Average]
[info]   (min, avg, max) = (1985.651, 2081.243, 2338.193), stdev = 144.872
[info]   CI (99.9%): [1523.393, 2639.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   18738.001 ±(99.9%) 5090.597 B/op [Average]
[info]   (min, avg, max) = (17859.090, 18738.001, 21080.450), stdev = 1322.012
[info]   CI (99.9%): [13647.404, 23828.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Run progress: 14.04% complete, ETA 00:53:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 281226.358 ops/s
[info] # Warmup Iteration   2: 436143.978 ops/s
[info] # Warmup Iteration   3: 445341.233 ops/s
[info] Iteration   1: 442112.404 ops/s
[info]                  ·gc.alloc.rate:                   366.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.466 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1821.173 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 444264.802 ops/s
[info]                  ·gc.alloc.rate:                   368.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.850 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1146.908 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 444743.886 ops/s
[info]                  ·gc.alloc.rate:                   368.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.726 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1145.676 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 446113.104 ops/s
[info]                  ·gc.alloc.rate:                   369.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.703 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1149.206 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 445465.321 ops/s
[info]                  ·gc.alloc.rate:                   369.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1150.859 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   444539.903 ±(99.9%) 5884.498 ops/s [Average]
[info]   (min, avg, max) = (442112.404, 444539.903, 446113.104), stdev = 1528.185
[info]   CI (99.9%): [438655.406, 450424.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   368.298 ±(99.9%) 4.911 MB/sec [Average]
[info]   (min, avg, max) = (366.221, 368.298, 369.575), stdev = 1.275
[info]   CI (99.9%): [363.387, 373.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1304.001, 1304.001, 1304.001), stdev = 0.001
[info]   CI (99.9%): [1304.001, 1304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.103 ±(99.9%) 0.324 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.103, 0.221), stdev = 0.084
[info]   CI (99.9%): [≈ 0, 0.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   362.086 ±(99.9%) 321.572 MB/sec [Average]
[info]   (min, avg, max) = (323.726, 362.086, 511.466), stdev = 83.511
[info]   CI (99.9%): [40.514, 683.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1282.764 ±(99.9%) 1158.992 B/op [Average]
[info]   (min, avg, max) = (1145.676, 1282.764, 1821.173), stdev = 300.986
[info]   CI (99.9%): [123.773, 2441.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Run progress: 14.38% complete, ETA 00:53:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1029411.597 ops/s
[info] # Warmup Iteration   2: 1061708.529 ops/s
[info] # Warmup Iteration   3: 1075112.440 ops/s
[info] Iteration   1: 1093002.235 ops/s
[info]                  ·gc.alloc.rate:                   211.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.758 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 368.324 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1094205.488 ops/s
[info]                  ·gc.alloc.rate:                   211.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.727 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 367.937 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1092851.710 ops/s
[info]                  ·gc.alloc.rate:                   211.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.774 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 368.397 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1095215.584 ops/s
[info]                  ·gc.alloc.rate:      211.522 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1044499.557 ops/s
[info]                  ·gc.alloc.rate:                   201.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.860 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 385.450 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   1083954.915 ±(99.9%) 85011.395 ops/s [Average]
[info]   (min, avg, max) = (1044499.557, 1083954.915, 1095215.584), stdev = 22077.189
[info]   CI (99.9%): [998943.520, 1168966.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   209.352 ±(99.9%) 16.286 MB/sec [Average]
[info]   (min, avg, max) = (201.794, 209.352, 211.522), stdev = 4.229
[info]   CI (99.9%): [193.067, 225.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.005 ±(99.9%) 0.037 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.022), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.007 ±(99.9%) 0.053 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.032), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204.624 ±(99.9%) 440.468 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.624, 255.860), stdev = 114.388
[info]   CI (99.9%): [≈ 0, 645.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   298.021 ±(99.9%) 642.157 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 298.021, 385.450), stdev = 166.766
[info]   CI (99.9%): [≈ 0, 940.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Run progress: 14.73% complete, ETA 00:53:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45913.484 ops/s
[info] # Warmup Iteration   2: 80857.787 ops/s
[info] # Warmup Iteration   3: 81061.651 ops/s
[info] Iteration   1: 80973.376 ops/s
[info]                  ·gc.alloc.rate:                   3340.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3370.362 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65527.099 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 80901.162 ops/s
[info]                  ·gc.alloc.rate:                   3338.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3389.881 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65950.703 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 81004.399 ops/s
[info]                  ·gc.alloc.rate:                   3343.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3058.563 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59414.777 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 80716.516 ops/s
[info]                  ·gc.alloc.rate:                   3330.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.067 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66366.474 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 80384.637 ops/s
[info]                  ·gc.alloc.rate:                   3316.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.346 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66647.056 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   80796.018 ±(99.9%) 984.532 ops/s [Average]
[info]   (min, avg, max) = (80384.637, 80796.018, 81004.399), stdev = 255.680
[info]   CI (99.9%): [79811.485, 81780.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3334.053 ±(99.9%) 41.618 MB/sec [Average]
[info]   (min, avg, max) = (3316.788, 3334.053, 3343.609), stdev = 10.808
[info]   CI (99.9%): [3292.435, 3375.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   64952.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (64952.005, 64952.005, 64952.005), stdev = 0.001
[info]   CI (99.9%): [64952.004, 64952.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.187 ±(99.9%) 0.305 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.187, 0.271), stdev = 0.079
[info]   CI (99.9%): [≈ 0, 0.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.652 ±(99.9%) 5.962 B/op [Average]
[info]   (min, avg, max) = (1.618, 3.652, 5.265), stdev = 1.548
[info]   CI (99.9%): [≈ 0, 9.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3325.044 ±(99.9%) 575.953 MB/sec [Average]
[info]   (min, avg, max) = (3058.563, 3325.044, 3403.346), stdev = 149.573
[info]   CI (99.9%): [2749.091, 3900.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   64781.222 ±(99.9%) 11666.421 B/op [Average]
[info]   (min, avg, max) = (59414.777, 64781.222, 66647.056), stdev = 3029.732
[info]   CI (99.9%): [53114.801, 76447.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   49.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   53.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.600, 13.000), stdev = 1.517
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Run progress: 15.07% complete, ETA 00:52:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 222756.936 ops/s
[info] # Warmup Iteration   2: 278213.490 ops/s
[info] # Warmup Iteration   3: 278255.249 ops/s
[info] Iteration   1: 278992.456 ops/s
[info]                  ·gc.alloc.rate:                   1382.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              7800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1306.570 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7371.212 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 280724.851 ops/s
[info]                  ·gc.alloc.rate:                   1391.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              7800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.738 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7372.292 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 279016.760 ops/s
[info]                  ·gc.alloc.rate:                   1382.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              7800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1323.460 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7466.290 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 280189.425 ops/s
[info]                  ·gc.alloc.rate:                   1388.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              7800.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1666.150 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9360.281 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 280550.394 ops/s
[info]                  ·gc.alloc.rate:                   1390.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              7800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.850 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7522.929 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   279894.777 ±(99.9%) 3216.365 ops/s [Average]
[info]   (min, avg, max) = (278992.456, 279894.777, 280724.851), stdev = 835.280
[info]   CI (99.9%): [276678.412, 283111.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1386.971 ±(99.9%) 15.806 MB/sec [Average]
[info]   (min, avg, max) = (1382.575, 1386.971, 1391.013), stdev = 4.105
[info]   CI (99.9%): [1371.164, 1402.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7800.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7800.001, 7800.001, 7800.002), stdev = 0.001
[info]   CI (99.9%): [7800.001, 7800.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.445 ±(99.9%) 0.376 B/op [Average]
[info]   (min, avg, max) = (0.350, 0.445, 0.585), stdev = 0.098
[info]   CI (99.9%): [0.069, 0.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1390.354 ±(99.9%) 595.688 MB/sec [Average]
[info]   (min, avg, max) = (1306.570, 1390.354, 1666.150), stdev = 154.698
[info]   CI (99.9%): [794.666, 1986.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7818.601 ±(99.9%) 3327.896 B/op [Average]
[info]   (min, avg, max) = (7371.212, 7818.601, 9360.281), stdev = 864.244
[info]   CI (99.9%): [4490.705, 11146.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 7.000), stdev = 1.304
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Run progress: 15.41% complete, ETA 00:52:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1705430.243 ops/s
[info] # Warmup Iteration   2: 1833989.350 ops/s
[info] # Warmup Iteration   3: 1885432.324 ops/s
[info] Iteration   1: 1887822.245 ops/s
[info]                  ·gc.alloc.rate:                   508.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      584.460 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 487.326 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1902482.298 ops/s
[info]                  ·gc.alloc.rate:                   512.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.674 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 542.552 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1905234.004 ops/s
[info]                  ·gc.alloc.rate:                   513.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.047 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 270.196 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1899691.160 ops/s
[info]                  ·gc.alloc.rate:                   511.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.804 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 540.877 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1858017.851 ops/s
[info]                  ·gc.alloc.rate:                   500.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.421 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 276.499 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   1890649.512 ±(99.9%) 74748.437 ops/s [Average]
[info]   (min, avg, max) = (1858017.851, 1890649.512, 1905234.004), stdev = 19411.932
[info]   CI (99.9%): [1815901.075, 1965397.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   509.285 ±(99.9%) 20.009 MB/sec [Average]
[info]   (min, avg, max) = (500.554, 509.285, 513.212), stdev = 5.196
[info]   CI (99.9%): [489.276, 529.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (424.000, 424.000, 424.000), stdev = 0.001
[info]   CI (99.9%): [424.000, 424.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.772 ±(99.9%) 6.290 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.772, 3.694), stdev = 1.634
[info]   CI (99.9%): [≈ 0, 7.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.644 ±(99.9%) 5.245 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.644, 3.080), stdev = 1.362
[info]   CI (99.9%): [≈ 0, 5.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   509.281 ±(99.9%) 651.000 MB/sec [Average]
[info]   (min, avg, max) = (326.421, 509.281, 655.674), stdev = 169.063
[info]   CI (99.9%): [≈ 0, 1160.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   423.490 ±(99.9%) 534.727 B/op [Average]
[info]   (min, avg, max) = (270.196, 423.490, 542.552), stdev = 138.867
[info]   CI (99.9%): [≈ 0, 958.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 6.000), stdev = 2.074
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 15.75% complete, ETA 00:52:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1681898.465 ops/s
[info] # Warmup Iteration   2: 1824192.633 ops/s
[info] # Warmup Iteration   3: 1742697.687 ops/s
[info] Iteration   1: 1835450.273 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1832077.866 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1828645.326 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1827489.381 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1837320.253 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   1832196.620 ±(99.9%) 16293.931 ops/s [Average]
[info]   (min, avg, max) = (1827489.381, 1832196.620, 1837320.253), stdev = 4231.482
[info]   CI (99.9%): [1815902.689, 1848490.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Run progress: 16.10% complete, ETA 00:52:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29899.341 ops/s
[info] # Warmup Iteration   2: 46914.625 ops/s
[info] # Warmup Iteration   3: 46452.850 ops/s
[info] Iteration   1: 47235.692 ops/s
[info]                  ·gc.alloc.rate:                   1990.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              66336.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1964.123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65452.769 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 47532.736 ops/s
[info]                  ·gc.alloc.rate:                   2003.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              66336.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1987.949 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65828.251 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 47506.602 ops/s
[info]                  ·gc.alloc.rate:                   2002.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              66336.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2006.204 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66472.564 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 47226.228 ops/s
[info]                  ·gc.alloc.rate:                   1990.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              66336.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67320.293 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 47131.564 ops/s
[info]                  ·gc.alloc.rate:                   1986.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              66336.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.352 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67734.019 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   47326.565 ±(99.9%) 697.569 ops/s [Average]
[info]   (min, avg, max) = (47131.564, 47326.565, 47532.736), stdev = 181.156
[info]   CI (99.9%): [46628.996, 48024.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1994.596 ±(99.9%) 29.186 MB/sec [Average]
[info]   (min, avg, max) = (1986.487, 1994.596, 2003.283), stdev = 7.580
[info]   CI (99.9%): [1965.410, 2023.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66336.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66336.009, 66336.009, 66336.009), stdev = 0.001
[info]   CI (99.9%): [66336.008, 66336.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.108, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.598 ±(99.9%) 5.114 B/op [Average]
[info]   (min, avg, max) = (1.390, 3.598, 4.856), stdev = 1.328
[info]   CI (99.9%): [≈ 0, 8.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2001.332 ±(99.9%) 99.434 MB/sec [Average]
[info]   (min, avg, max) = (1964.123, 2001.332, 2028.352), stdev = 25.823
[info]   CI (99.9%): [1901.899, 2100.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   66561.579 ±(99.9%) 3716.128 B/op [Average]
[info]   (min, avg, max) = (65452.769, 66561.579, 67734.019), stdev = 965.067
[info]   CI (99.9%): [62845.451, 70277.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Run progress: 16.44% complete, ETA 00:52:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20371.452 ops/s
[info] # Warmup Iteration   2: 26802.633 ops/s
[info] # Warmup Iteration   3: 27130.365 ops/s
[info] Iteration   1: 26955.894 ops/s
[info]                  ·gc.alloc.rate:                   1543.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              90144.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1640.051 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95772.353 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 27070.152 ops/s
[info]                  ·gc.alloc.rate:                   1550.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              90143.427 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320.599 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76795.915 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 27070.638 ops/s
[info]                  ·gc.alloc.rate:                   1550.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              90144.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1662.432 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96675.160 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 27070.580 ops/s
[info]                  ·gc.alloc.rate:                   1550.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              90144.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1674.474 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97356.430 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 27315.409 ops/s
[info]                  ·gc.alloc.rate:                   1564.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              90144.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77532.981 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   27096.535 ±(99.9%) 508.395 ops/s [Average]
[info]   (min, avg, max) = (26955.894, 27096.535, 27315.409), stdev = 132.029
[info]   CI (99.9%): [26588.140, 27604.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1551.718 ±(99.9%) 29.111 MB/sec [Average]
[info]   (min, avg, max) = (1543.668, 1551.718, 1564.250), stdev = 7.560
[info]   CI (99.9%): [1522.608, 1580.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   90143.898 ±(99.9%) 1.013 B/op [Average]
[info]   (min, avg, max) = (90143.427, 90143.898, 90144.016), stdev = 0.263
[info]   CI (99.9%): [90142.885, 90144.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.104), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4.842 ±(99.9%) 6.637 B/op [Average]
[info]   (min, avg, max) = (2.399, 4.842, 6.077), stdev = 1.724
[info]   CI (99.9%): [≈ 0, 11.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1528.594 ±(99.9%) 689.989 MB/sec [Average]
[info]   (min, avg, max) = (1320.599, 1528.594, 1674.474), stdev = 179.188
[info]   CI (99.9%): [838.605, 2218.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   88826.568 ±(99.9%) 41063.311 B/op [Average]
[info]   (min, avg, max) = (76795.915, 88826.568, 97356.430), stdev = 10664.012
[info]   CI (99.9%): [47763.257, 129889.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Run progress: 16.78% complete, ETA 00:51:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36655.704 ops/s
[info] # Warmup Iteration   2: 61094.443 ops/s
[info] # Warmup Iteration   3: 61642.037 ops/s
[info] Iteration   1: 62530.148 ops/s
[info]                  ·gc.alloc.rate:                   1032.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              25976.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.602 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24756.507 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 62527.708 ops/s
[info]                  ·gc.alloc.rate:                   1032.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              25976.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      988.987 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24890.246 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 61976.080 ops/s
[info]                  ·gc.alloc.rate:                   1022.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              25976.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995.349 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25281.056 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 62458.222 ops/s
[info]                  ·gc.alloc.rate:                   1030.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              25976.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1000.302 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25204.298 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 62382.025 ops/s
[info]                  ·gc.alloc.rate:                   1029.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              25976.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1004.700 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25352.645 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   62374.837 ±(99.9%) 889.621 ops/s [Average]
[info]   (min, avg, max) = (61976.080, 62374.837, 62530.148), stdev = 231.032
[info]   CI (99.9%): [61485.216, 63264.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1029.445 ±(99.9%) 15.108 MB/sec [Average]
[info]   (min, avg, max) = (1022.710, 1029.445, 1032.129), stdev = 3.923
[info]   CI (99.9%): [1014.337, 1044.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   25976.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25976.007, 25976.007, 25976.007), stdev = 0.001
[info]   CI (99.9%): [25976.006, 25976.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.062), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.156 ±(99.9%) 1.700 B/op [Average]
[info]   (min, avg, max) = (0.524, 1.156, 1.586), stdev = 0.442
[info]   CI (99.9%): [≈ 0, 2.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   994.588 ±(99.9%) 32.647 MB/sec [Average]
[info]   (min, avg, max) = (983.602, 994.588, 1004.700), stdev = 8.478
[info]   CI (99.9%): [961.941, 1027.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   25096.950 ±(99.9%) 999.364 B/op [Average]
[info]   (min, avg, max) = (24756.507, 25096.950, 25352.645), stdev = 259.532
[info]   CI (99.9%): [24097.587, 26096.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Run progress: 17.12% complete, ETA 00:51:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 73396.424 ops/s
[info] # Warmup Iteration   2: 82805.194 ops/s
[info] # Warmup Iteration   3: 82812.447 ops/s
[info] Iteration   1: 83340.749 ops/s
[info]                  ·gc.alloc.rate:                   537.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61.904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.736 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6226.997 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 83223.471 ops/s
[info]                  ·gc.alloc.rate:                   536.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.998 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12446.305 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 83242.949 ops/s
[info]                  ·gc.alloc.rate:                   536.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.574 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.148 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12405.681 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 83529.612 ops/s
[info]                  ·gc.alloc.rate:                   538.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.702 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6175.108 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 83390.051 ops/s
[info]                  ·gc.alloc.rate:                   537.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.507 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12371.243 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   83345.367 ±(99.9%) 476.736 ops/s [Average]
[info]   (min, avg, max) = (83223.471, 83345.367, 83529.612), stdev = 123.807
[info]   CI (99.9%): [82868.630, 83822.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   537.156 ±(99.9%) 3.127 MB/sec [Average]
[info]   (min, avg, max) = (536.283, 537.156, 538.324), stdev = 0.812
[info]   CI (99.9%): [534.028, 540.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10144.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10144.005, 10144.005, 10144.005), stdev = 0.001
[info]   CI (99.9%): [10144.004, 10144.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.706 ±(99.9%) 5.539 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.706, 3.278), stdev = 1.439
[info]   CI (99.9%): [≈ 0, 6.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   13.325 ±(99.9%) 104.609 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.325, 61.904), stdev = 27.167
[info]   CI (99.9%): [≈ 0, 117.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   525.418 ±(99.9%) 691.441 MB/sec [Average]
[info]   (min, avg, max) = (327.702, 525.418, 657.998), stdev = 179.565
[info]   CI (99.9%): [≈ 0, 1216.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9925.067 ±(99.9%) 13091.025 B/op [Average]
[info]   (min, avg, max) = (6175.108, 9925.067, 12446.305), stdev = 3399.698
[info]   CI (99.9%): [≈ 0, 23016.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Run progress: 17.47% complete, ETA 00:51:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18565.208 ops/s
[info] # Warmup Iteration   2: 33091.467 ops/s
[info] # Warmup Iteration   3: 33673.205 ops/s
[info] Iteration   1: 33785.834 ops/s
[info]                  ·gc.alloc.rate:                   1720.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              80152.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1647.877 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76784.485 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 34200.481 ops/s
[info]                  ·gc.alloc.rate:                   1741.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              80152.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1998.835 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91994.872 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 34197.197 ops/s
[info]                  ·gc.alloc.rate:                   1741.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              80152.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.412 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77258.977 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 34264.669 ops/s
[info]                  ·gc.alloc.rate:                   1744.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              80152.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.701 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77442.248 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 34017.678 ops/s
[info]                  ·gc.alloc.rate:                   1732.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              80152.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.725 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78266.430 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   34093.172 ±(99.9%) 750.392 ops/s [Average]
[info]   (min, avg, max) = (33785.834, 34093.172, 34264.669), stdev = 194.874
[info]   CI (99.9%): [33342.780, 34843.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1736.019 ±(99.9%) 38.373 MB/sec [Average]
[info]   (min, avg, max) = (1720.147, 1736.019, 1744.685), stdev = 9.965
[info]   CI (99.9%): [1697.646, 1774.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   80152.013 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (80152.012, 80152.013, 80152.015), stdev = 0.001
[info]   CI (99.9%): [80152.008, 80152.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.146), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4.231 ±(99.9%) 7.220 B/op [Average]
[info]   (min, avg, max) = (1.912, 4.231, 6.706), stdev = 1.875
[info]   CI (99.9%): [≈ 0, 11.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1740.510 ±(99.9%) 559.844 MB/sec [Average]
[info]   (min, avg, max) = (1647.877, 1740.510, 1998.835), stdev = 145.390
[info]   CI (99.9%): [1180.665, 2300.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   80349.402 ±(99.9%) 25152.299 B/op [Average]
[info]   (min, avg, max) = (76784.485, 80349.402, 91994.872), stdev = 6531.972
[info]   CI (99.9%): [55197.104, 105501.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Run progress: 17.81% complete, ETA 00:51:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28093.421 ops/s
[info] # Warmup Iteration   2: 38176.816 ops/s
[info] # Warmup Iteration   3: 38783.705 ops/s
[info] Iteration   1: 38634.719 ops/s
[info]                  ·gc.alloc.rate:                   520.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              21208.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     139.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      582.509 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23731.359 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 37697.026 ops/s
[info]                  ·gc.alloc.rate:                   508.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              21208.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27211.747 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 38892.674 ops/s
[info]                  ·gc.alloc.rate:                   524.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              21208.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13181.328 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 38554.077 ops/s
[info]                  ·gc.alloc.rate:                   519.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              21208.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      650.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26540.032 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 38873.275 ops/s
[info]                  ·gc.alloc.rate:                   523.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              21208.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.665 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13187.430 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   38530.354 ±(99.9%) 1881.267 ops/s [Average]
[info]   (min, avg, max) = (37697.026, 38530.354, 38892.674), stdev = 488.559
[info]   CI (99.9%): [36649.087, 40411.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   519.212 ±(99.9%) 24.917 MB/sec [Average]
[info]   (min, avg, max) = (508.179, 519.212, 524.047), stdev = 6.471
[info]   CI (99.9%): [494.295, 544.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   21208.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (21208.010, 21208.011, 21208.011), stdev = 0.001
[info]   CI (99.9%): [21208.009, 21208.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.712 ±(99.9%) 5.862 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.712, 3.434), stdev = 1.522
[info]   CI (99.9%): [≈ 0, 6.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   28.997 ±(99.9%) 238.826 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.997, 139.918), stdev = 62.022
[info]   CI (99.9%): [≈ 0, 267.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   507.213 ±(99.9%) 647.142 MB/sec [Average]
[info]   (min, avg, max) = (325.665, 507.213, 652.039), stdev = 168.061
[info]   CI (99.9%): [≈ 0, 1154.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   20770.379 ±(99.9%) 27135.590 B/op [Average]
[info]   (min, avg, max) = (13181.328, 20770.379, 27211.747), stdev = 7047.026
[info]   CI (99.9%): [≈ 0, 47905.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 6.000), stdev = 2.168
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Run progress: 18.15% complete, ETA 00:50:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24629.228 ops/s
[info] # Warmup Iteration   2: 41666.953 ops/s
[info] # Warmup Iteration   3: 41837.416 ops/s
[info] Iteration   1: 41911.886 ops/s
[info]                  ·gc.alloc.rate:                   378.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.737 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9605.505 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 41882.249 ops/s
[info]                  ·gc.alloc.rate:                   378.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      320.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12053.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 40303.621 ops/s
[info]                  ·gc.alloc.rate:                   364.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      320.849 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12525.164 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 41621.825 ops/s
[info]                  ·gc.alloc.rate:                   375.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.699 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12203.874 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 41299.227 ops/s
[info]                  ·gc.alloc.rate:                   372.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24675.363 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   41403.762 ±(99.9%) 2551.273 ops/s [Average]
[info]   (min, avg, max) = (40303.621, 41403.762, 41911.886), stdev = 662.558
[info]   CI (99.9%): [38852.488, 43955.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   373.973 ±(99.9%) 22.810 MB/sec [Average]
[info]   (min, avg, max) = (364.163, 373.973, 378.487), stdev = 5.924
[info]   CI (99.9%): [351.164, 396.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   14216.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14216.010, 14216.010, 14216.011), stdev = 0.001
[info]   CI (99.9%): [14216.009, 14216.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.115 ±(99.9%) 4.095 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.115, 2.361), stdev = 1.063
[info]   CI (99.9%): [≈ 0, 5.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   373.490 ±(99.9%) 599.699 MB/sec [Average]
[info]   (min, avg, max) = (255.737, 373.490, 647.395), stdev = 155.740
[info]   CI (99.9%): [≈ 0, 973.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14212.587 ±(99.9%) 22962.312 B/op [Average]
[info]   (min, avg, max) = (9605.505, 14212.587, 24675.363), stdev = 5963.239
[info]   CI (99.9%): [≈ 0, 37174.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Run progress: 18.49% complete, ETA 00:50:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38511.163 ops/s
[info] # Warmup Iteration   2: 45715.723 ops/s
[info] # Warmup Iteration   3: 46033.131 ops/s
[info] Iteration   1: 46175.816 ops/s
[info]                  ·gc.alloc.rate:                   405.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.542 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17437.668 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 46358.245 ops/s
[info]                  ·gc.alloc.rate:                   407.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     125.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.744 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11160.838 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 46449.617 ops/s
[info]                  ·gc.alloc.rate:                   408.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.724 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11138.976 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 46310.869 ops/s
[info]                  ·gc.alloc.rate:                   407.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.483 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11093.168 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 46216.078 ops/s
[info]                  ·gc.alloc.rate:                   406.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22230.492 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   46302.125 ±(99.9%) 423.299 ops/s [Average]
[info]   (min, avg, max) = (46175.816, 46302.125, 46449.617), stdev = 109.929
[info]   CI (99.9%): [45878.826, 46725.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   406.923 ±(99.9%) 3.783 MB/sec [Average]
[info]   (min, avg, max) = (405.769, 406.923, 408.199), stdev = 0.982
[info]   CI (99.9%): [403.140, 410.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   13832.009 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (13832.009, 13832.009, 13832.010), stdev = 0.001
[info]   CI (99.9%): [13832.008, 13832.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.780 ±(99.9%) 6.304 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.780, 3.708), stdev = 1.637
[info]   CI (99.9%): [≈ 0, 7.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   26.469 ±(99.9%) 214.029 B/op [Average]
[info]   (min, avg, max) = (1.411, 26.469, 125.897), stdev = 55.583
[info]   CI (99.9%): [≈ 0, 240.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   429.645 ±(99.9%) 569.461 MB/sec [Average]
[info]   (min, avg, max) = (326.483, 429.645, 652.730), stdev = 147.887
[info]   CI (99.9%): [≈ 0, 999.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14612.228 ±(99.9%) 19481.025 B/op [Average]
[info]   (min, avg, max) = (11093.168, 14612.228, 22230.492), stdev = 5059.160
[info]   CI (99.9%): [≈ 0, 34093.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 5.000), stdev = 1.673
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 18.84% complete, ETA 00:50:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38138.329 ops/s
[info] # Warmup Iteration   2: 46337.649 ops/s
[info] # Warmup Iteration   3: 45921.816 ops/s
[info] Iteration   1: 46377.788 ops/s
[info]                  ·gc.alloc.rate:                   354.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.753 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8680.677 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 46392.771 ops/s
[info]                  ·gc.alloc.rate:                   354.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.732 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8677.870 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 46522.826 ops/s
[info]                  ·gc.alloc.rate:                   355.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.764 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11121.261 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 46439.460 ops/s
[info]                  ·gc.alloc.rate:                   354.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.675 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11141.134 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 46584.769 ops/s
[info]                  ·gc.alloc.rate:                   356.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.053 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11050.198 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   46463.523 ±(99.9%) 339.822 ops/s [Average]
[info]   (min, avg, max) = (46377.788, 46463.523, 46584.769), stdev = 88.251
[info]   CI (99.9%): [46123.701, 46803.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   355.165 ±(99.9%) 2.731 MB/sec [Average]
[info]   (min, avg, max) = (354.491, 355.165, 356.111), stdev = 0.709
[info]   CI (99.9%): [352.434, 357.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   12032.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12032.009, 12032.009, 12032.009), stdev = 0.001
[info]   CI (99.9%): [12032.009, 12032.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.761 ±(99.9%) 6.462 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.761, 3.763), stdev = 1.678
[info]   CI (99.9%): [≈ 0, 7.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   25.738 ±(99.9%) 218.589 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25.738, 127.280), stdev = 56.767
[info]   CI (99.9%): [≈ 0, 244.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   299.195 ±(99.9%) 152.766 MB/sec [Average]
[info]   (min, avg, max) = (255.732, 299.195, 328.764), stdev = 39.673
[info]   CI (99.9%): [146.430, 451.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   10134.228 ±(99.9%) 5116.028 B/op [Average]
[info]   (min, avg, max) = (8677.870, 10134.228, 11141.134), stdev = 1328.616
[info]   CI (99.9%): [5018.200, 15250.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 1.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Run progress: 19.18% complete, ETA 00:50:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15086.353 ops/s
[info] # Warmup Iteration   2: 19652.306 ops/s
[info] # Warmup Iteration   3: 20159.737 ops/s
[info] Iteration   1: 20019.120 ops/s
[info]                  ·gc.alloc.rate:                   750.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              59034.831 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77235.935 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 19906.339 ops/s
[info]                  ·gc.alloc.rate:                   746.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.988 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51715.214 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 20111.641 ops/s
[info]                  ·gc.alloc.rate:                   754.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              59039.227 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.987 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51242.864 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 20182.951 ops/s
[info]                  ·gc.alloc.rate:                   757.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.058 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51161.450 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 20129.503 ops/s
[info]                  ·gc.alloc.rate:                   755.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      987.464 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77212.235 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   20069.911 ±(99.9%) 419.200 ops/s [Average]
[info]   (min, avg, max) = (19906.339, 20069.911, 20182.951), stdev = 108.865
[info]   CI (99.9%): [19650.711, 20489.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   752.865 ±(99.9%) 15.948 MB/sec [Average]
[info]   (min, avg, max) = (746.617, 752.865, 757.088), stdev = 4.142
[info]   CI (99.9%): [736.917, 768.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   59038.825 ±(99.9%) 8.697 B/op [Average]
[info]   (min, avg, max) = (59034.831, 59038.825, 59040.022), stdev = 2.259
[info]   CI (99.9%): [59030.127, 59047.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.196 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.125), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4.901 ±(99.9%) 15.398 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.901, 9.818), stdev = 3.999
[info]   CI (99.9%): [≈ 0, 20.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   786.987 ±(99.9%) 695.912 MB/sec [Average]
[info]   (min, avg, max) = (653.988, 786.987, 987.464), stdev = 180.726
[info]   CI (99.9%): [91.076, 1482.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   61713.540 ±(99.9%) 54527.839 B/op [Average]
[info]   (min, avg, max) = (51161.450, 61713.540, 77235.935), stdev = 14160.707
[info]   CI (99.9%): [7185.700, 116241.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Run progress: 19.52% complete, ETA 00:50:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12453.684 ops/s
[info] # Warmup Iteration   2: 19655.628 ops/s
[info] # Warmup Iteration   3: 19773.510 ops/s
[info] Iteration   1: 19821.940 ops/s
[info]                  ·gc.alloc.rate:                   562.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              44664.698 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.313 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51410.637 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 19929.914 ops/s
[info]                  ·gc.alloc.rate:                   565.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              44680.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.043 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51500.321 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 19899.230 ops/s
[info]                  ·gc.alloc.rate:                   564.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              44678.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.397 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25895.644 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 19741.089 ops/s
[info]                  ·gc.alloc.rate:                   559.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              44648.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.108 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52311.961 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 19430.658 ops/s
[info]                  ·gc.alloc.rate:                   551.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              44648.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.757 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53364.980 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   19764.566 ±(99.9%) 772.080 ops/s [Average]
[info]   (min, avg, max) = (19430.658, 19764.566, 19929.914), stdev = 200.507
[info]   CI (99.9%): [18992.486, 20536.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   560.814 ±(99.9%) 22.510 MB/sec [Average]
[info]   (min, avg, max) = (551.151, 560.814, 565.692), stdev = 5.846
[info]   CI (99.9%): [538.304, 583.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44663.794 ±(99.9%) 59.951 B/op [Average]
[info]   (min, avg, max) = (44648.021, 44663.794, 44680.022), stdev = 15.569
[info]   CI (99.9%): [44603.844, 44723.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.125), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4.667 ±(99.9%) 14.787 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.667, 10.117), stdev = 3.840
[info]   CI (99.9%): [≈ 0, 19.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   588.324 ±(99.9%) 561.911 MB/sec [Average]
[info]   (min, avg, max) = (327.397, 588.324, 658.757), stdev = 145.926
[info]   CI (99.9%): [26.413, 1150.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   46896.709 ±(99.9%) 45307.576 B/op [Average]
[info]   (min, avg, max) = (25895.644, 46896.709, 53364.980), stdev = 11766.234
[info]   CI (99.9%): [1589.133, 92204.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Run progress: 19.86% complete, ETA 00:49:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72774.096 ops/s
[info] # Warmup Iteration   2: 75902.308 ops/s
[info] # Warmup Iteration   3: 76239.277 ops/s
[info] Iteration   1: 75388.579 ops/s
[info]                  ·gc.alloc.rate:                   196.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.742 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5340.157 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 76047.519 ops/s
[info]                  ·gc.alloc.rate:                   197.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.843 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5294.098 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 75766.319 ops/s
[info]                  ·gc.alloc.rate:      197.149 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 75838.192 ops/s
[info]                  ·gc.alloc.rate:                   197.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.754 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5308.476 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 76302.556 ops/s
[info]                  ·gc.alloc.rate:                   198.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.752 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5276.200 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   75868.633 ±(99.9%) 1308.845 ops/s [Average]
[info]   (min, avg, max) = (75388.579, 75868.633, 76302.556), stdev = 339.903
[info]   CI (99.9%): [74559.788, 77177.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   197.427 ±(99.9%) 3.448 MB/sec [Average]
[info]   (min, avg, max) = (196.159, 197.427, 198.544), stdev = 0.895
[info]   CI (99.9%): [193.979, 200.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.005, 4096.005, 4096.006), stdev = 0.001
[info]   CI (99.9%): [4096.005, 4096.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.008 ±(99.9%) 0.040 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.157 ±(99.9%) 0.837 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.157, 0.432), stdev = 0.217
[info]   CI (99.9%): [≈ 0, 0.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204.618 ±(99.9%) 440.456 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.618, 255.843), stdev = 114.385
[info]   CI (99.9%): [≈ 0, 645.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4243.786 ±(99.9%) 9135.515 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4243.786, 5340.157), stdev = 2372.464
[info]   CI (99.9%): [≈ 0, 13379.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Run progress: 20.21% complete, ETA 00:49:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10093.408 ops/s
[info] # Warmup Iteration   2: 16497.602 ops/s
[info] # Warmup Iteration   3: 16424.952 ops/s
[info] Iteration   1: 16556.179 ops/s
[info]                  ·gc.alloc.rate:                   1051.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              99984.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      977.334 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92921.816 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 16601.613 ops/s
[info]                  ·gc.alloc.rate:                   1054.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              99984.473 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1312.113 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 124409.463 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 16739.843 ops/s
[info]                  ·gc.alloc.rate:                   1063.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              99984.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.814 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93158.741 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 16652.879 ops/s
[info]                  ·gc.alloc.rate:                   1058.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              99984.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.624 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94274.890 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 16550.201 ops/s
[info]                  ·gc.alloc.rate:                   1051.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              99984.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.677 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95241.589 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   16620.143 ±(99.9%) 302.751 ops/s [Average]
[info]   (min, avg, max) = (16550.201, 16620.143, 16739.843), stdev = 78.623
[info]   CI (99.9%): [16317.392, 16922.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1055.824 ±(99.9%) 19.261 MB/sec [Average]
[info]   (min, avg, max) = (1051.554, 1055.824, 1063.406), stdev = 5.002
[info]   CI (99.9%): [1036.563, 1075.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   99984.117 ±(99.9%) 0.767 B/op [Average]
[info]   (min, avg, max) = (99984.026, 99984.117, 99984.473), stdev = 0.199
[info]   CI (99.9%): [99983.350, 99984.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5.921 ±(99.9%) 7.686 B/op [Average]
[info]   (min, avg, max) = (3.914, 5.921, 7.918), stdev = 1.996
[info]   CI (99.9%): [≈ 0, 13.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1055.913 ±(99.9%) 552.639 MB/sec [Average]
[info]   (min, avg, max) = (977.334, 1055.913, 1312.113), stdev = 143.518
[info]   CI (99.9%): [503.274, 1608.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   100001.300 ±(99.9%) 52661.858 B/op [Average]
[info]   (min, avg, max) = (92921.816, 100001.300, 124409.463), stdev = 13676.117
[info]   CI (99.9%): [47339.441, 152663.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 5.000), stdev = 1.140
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Run progress: 20.55% complete, ETA 00:49:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42892.837 ops/s
[info] # Warmup Iteration   2: 58115.159 ops/s
[info] # Warmup Iteration   3: 58319.611 ops/s
[info] Iteration   1: 58482.136 ops/s
[info]                  ·gc.alloc.rate:                   1071.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              28824.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.323 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26353.788 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 57841.477 ops/s
[info]                  ·gc.alloc.rate:                   1059.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              28824.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26699.264 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 58319.796 ops/s
[info]                  ·gc.alloc.rate:                   1067.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              28824.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.824 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35486.448 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 58987.822 ops/s
[info]                  ·gc.alloc.rate:                   1080.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              28824.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992.076 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26473.896 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 59087.457 ops/s
[info]                  ·gc.alloc.rate:                   1081.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              28824.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26553.303 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   58543.738 ±(99.9%) 1963.410 ops/s [Average]
[info]   (min, avg, max) = (57841.477, 58543.738, 59087.457), stdev = 509.891
[info]   CI (99.9%): [56580.328, 60507.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1072.129 ±(99.9%) 35.554 MB/sec [Average]
[info]   (min, avg, max) = (1059.428, 1072.129, 1081.986), stdev = 9.233
[info]   CI (99.9%): [1036.575, 1107.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   28824.007 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (28824.007, 28824.007, 28824.008), stdev = 0.001
[info]   CI (99.9%): [28824.005, 28824.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.020 ±(99.9%) 3.968 B/op [Average]
[info]   (min, avg, max) = (1.109, 2.020, 3.371), stdev = 1.031
[info]   CI (99.9%): [≈ 0, 5.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1052.861 ±(99.9%) 564.591 MB/sec [Average]
[info]   (min, avg, max) = (979.323, 1052.861, 1314.824), stdev = 146.622
[info]   CI (99.9%): [488.270, 1617.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   28313.340 ±(99.9%) 15448.216 B/op [Average]
[info]   (min, avg, max) = (26353.788, 28313.340, 35486.448), stdev = 4011.853
[info]   CI (99.9%): [12865.124, 43761.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Run progress: 20.89% complete, ETA 00:49:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 229443.516 ops/s
[info] # Warmup Iteration   2: 257689.052 ops/s
[info] # Warmup Iteration   3: 250424.027 ops/s
[info] Iteration   1: 247854.845 ops/s
[info]                  ·gc.alloc.rate:                   393.020 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.537 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3248.683 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 250447.084 ops/s
[info]                  ·gc.alloc.rate:                   397.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.675 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2065.931 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 251618.897 ops/s
[info]                  ·gc.alloc.rate:                   398.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.690 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2056.309 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 248518.007 ops/s
[info]                  ·gc.alloc.rate:                   394.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.058 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2071.392 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 251794.724 ops/s
[info]                  ·gc.alloc.rate:                   399.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.406 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4084.745 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   250046.711 ±(99.9%) 6895.994 ops/s [Average]
[info]   (min, avg, max) = (247854.845, 250046.711, 251794.724), stdev = 1790.868
[info]   CI (99.9%): [243150.717, 256942.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   396.491 ±(99.9%) 10.890 MB/sec [Average]
[info]   (min, avg, max) = (393.020, 396.491, 399.267), stdev = 2.828
[info]   CI (99.9%): [385.602, 407.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2496.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2496.002, 2496.002, 2496.002), stdev = 0.001
[info]   CI (99.9%): [2496.001, 2496.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.777 ±(99.9%) 6.220 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.777, 3.666), stdev = 1.615
[info]   CI (99.9%): [≈ 0, 6.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4.883 ±(99.9%) 39.096 B/op [Average]
[info]   (min, avg, max) = (0.130, 4.883, 23.043), stdev = 10.153
[info]   CI (99.9%): [≈ 0, 43.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   429.873 ±(99.9%) 570.121 MB/sec [Average]
[info]   (min, avg, max) = (327.058, 429.873, 653.406), stdev = 148.059
[info]   CI (99.9%): [≈ 0, 999.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2705.412 ±(99.9%) 3565.722 B/op [Average]
[info]   (min, avg, max) = (2056.309, 2705.412, 4084.745), stdev = 926.007
[info]   CI (99.9%): [≈ 0, 6271.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 5.000), stdev = 1.517
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 21.23% complete, ETA 00:49:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 297683.248 ops/s
[info] # Warmup Iteration   2: 331822.440 ops/s
[info] # Warmup Iteration   3: 338720.717 ops/s
[info] Iteration   1: 338378.348 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 338503.271 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 329901.294 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 336851.682 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 338616.380 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   336450.195 ±(99.9%) 14365.864 ops/s [Average]
[info]   (min, avg, max) = (329901.294, 336450.195, 338616.380), stdev = 3730.769
[info]   CI (99.9%): [322084.331, 350816.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Run progress: 21.58% complete, ETA 00:48:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57200.157 ops/s
[info] # Warmup Iteration   2: 79765.771 ops/s
[info] # Warmup Iteration   3: 80508.905 ops/s
[info] Iteration   1: 80455.259 ops/s
[info]                  ·gc.alloc.rate:                   1097.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              21472.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1293.446 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25306.141 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 80669.115 ops/s
[info]                  ·gc.alloc.rate:                   1100.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              21472.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      974.671 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19020.004 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 79864.647 ops/s
[info]                  ·gc.alloc.rate:                   1089.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              21472.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.756 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19290.931 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 80543.121 ops/s
[info]                  ·gc.alloc.rate:                   1098.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              21472.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25695.670 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 81125.595 ops/s
[info]                  ·gc.alloc.rate:                   1107.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              21472.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.747 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19274.962 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   80531.547 ±(99.9%) 1746.139 ops/s [Average]
[info]   (min, avg, max) = (79864.647, 80531.547, 81125.595), stdev = 453.467
[info]   CI (99.9%): [78785.409, 82277.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1098.599 ±(99.9%) 24.312 MB/sec [Average]
[info]   (min, avg, max) = (1089.417, 1098.599, 1107.018), stdev = 6.314
[info]   CI (99.9%): [1074.287, 1122.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   21472.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (21472.005, 21472.005, 21472.006), stdev = 0.001
[info]   CI (99.9%): [21472.004, 21472.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.087, 0.104), stdev = 0.009
[info]   CI (99.9%): [0.052, 0.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.709 ±(99.9%) 0.694 B/op [Average]
[info]   (min, avg, max) = (1.615, 1.709, 2.031), stdev = 0.180
[info]   CI (99.9%): [1.014, 2.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1111.103 ±(99.9%) 679.837 MB/sec [Average]
[info]   (min, avg, max) = (974.671, 1111.103, 1314.894), stdev = 176.552
[info]   CI (99.9%): [431.266, 1790.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   21717.542 ±(99.9%) 13316.062 B/op [Average]
[info]   (min, avg, max) = (19020.004, 21717.542, 25695.670), stdev = 3458.139
[info]   CI (99.9%): [8401.480, 35033.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Run progress: 21.92% complete, ETA 00:48:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20105.827 ops/s
[info] # Warmup Iteration   2: 27040.166 ops/s
[info] # Warmup Iteration   3: 27779.188 ops/s
[info] Iteration   1: 27794.770 ops/s
[info]                  ·gc.alloc.rate:                   578.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              32736.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     198.903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36926.471 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 27946.326 ops/s
[info]                  ·gc.alloc.rate:                   580.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              32711.835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.017 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18307.219 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 27983.041 ops/s
[info]                  ·gc.alloc.rate:                   581.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              32704.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      650.177 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36564.728 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 27861.145 ops/s
[info]                  ·gc.alloc.rate:                   578.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              32704.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      650.413 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36744.939 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 27929.056 ops/s
[info]                  ·gc.alloc.rate:                   580.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              32704.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.554 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36709.168 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   27902.868 ±(99.9%) 288.336 ops/s [Average]
[info]   (min, avg, max) = (27794.770, 27902.868, 27983.041), stdev = 74.880
[info]   CI (99.9%): [27614.531, 28191.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   579.935 ±(99.9%) 5.494 MB/sec [Average]
[info]   (min, avg, max) = (578.048, 579.935, 581.527), stdev = 1.427
[info]   CI (99.9%): [574.441, 585.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   32711.980 ±(99.9%) 53.365 B/op [Average]
[info]   (min, avg, max) = (32704.015, 32711.980, 32736.020), stdev = 13.859
[info]   CI (99.9%): [32658.615, 32765.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.740 ±(99.9%) 5.970 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.740, 3.512), stdev = 1.550
[info]   CI (99.9%): [≈ 0, 6.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   41.895 ±(99.9%) 338.085 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41.895, 198.903), stdev = 87.800
[info]   CI (99.9%): [≈ 0, 379.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   585.840 ±(99.9%) 561.451 MB/sec [Average]
[info]   (min, avg, max) = (325.017, 585.840, 652.042), stdev = 145.807
[info]   CI (99.9%): [24.390, 1147.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   33050.505 ±(99.9%) 31739.913 B/op [Average]
[info]   (min, avg, max) = (18307.219, 33050.505, 36926.471), stdev = 8242.755
[info]   CI (99.9%): [1310.592, 64790.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 4.000), stdev = 1.140
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Run progress: 22.26% complete, ETA 00:48:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105648.911 ops/s
[info] # Warmup Iteration   2: 122387.210 ops/s
[info] # Warmup Iteration   3: 124564.058 ops/s
[info] Iteration   1: 126257.902 ops/s
[info]                  ·gc.alloc.rate:                   492.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      585.045 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7294.983 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 122314.135 ops/s
[info]                  ·gc.alloc.rate:                   477.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.347 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4238.671 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 125475.498 ops/s
[info]                  ·gc.alloc.rate:                   489.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.371 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8222.028 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 123124.910 ops/s
[info]                  ·gc.alloc.rate:                   480.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.710 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4189.501 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 119285.660 ops/s
[info]                  ·gc.alloc.rate:                   465.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.585 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8648.484 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   123291.621 ±(99.9%) 10650.205 ops/s [Average]
[info]   (min, avg, max) = (119285.660, 123291.621, 126257.902), stdev = 2765.825
[info]   CI (99.9%): [112641.415, 133941.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   481.239 ±(99.9%) 41.291 MB/sec [Average]
[info]   (min, avg, max) = (465.736, 481.239, 492.739), stdev = 10.723
[info]   CI (99.9%): [439.948, 522.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6144.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6144.003, 6144.003, 6144.004), stdev = 0.001
[info]   CI (99.9%): [6144.003, 6144.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.687 ±(99.9%) 5.601 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.687, 3.289), stdev = 1.454
[info]   CI (99.9%): [≈ 0, 6.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8.577 ±(99.9%) 69.809 B/op [Average]
[info]   (min, avg, max) = (0.261, 8.577, 41.005), stdev = 18.129
[info]   CI (99.9%): [≈ 0, 78.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   510.612 ±(99.9%) 649.558 MB/sec [Average]
[info]   (min, avg, max) = (327.710, 510.612, 655.585), stdev = 168.688
[info]   CI (99.9%): [≈ 0, 1160.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6518.734 ±(99.9%) 8317.664 B/op [Average]
[info]   (min, avg, max) = (4189.501, 6518.734, 8648.484), stdev = 2160.071
[info]   CI (99.9%): [≈ 0, 14836.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 5.000), stdev = 1.643
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Run progress: 22.60% complete, ETA 00:48:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9039.238 ops/s
[info] # Warmup Iteration   2: 22345.480 ops/s
[info] # Warmup Iteration   3: 22666.623 ops/s
[info] Iteration   1: 22451.637 ops/s
[info]                  ·gc.alloc.rate:                   1239.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              86920.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1311.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91992.640 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 22720.755 ops/s
[info]                  ·gc.alloc.rate:                   1254.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              86920.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.124 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91573.455 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 22541.456 ops/s
[info]                  ·gc.alloc.rate:                   1244.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              86920.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      998.088 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69692.679 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 22790.369 ops/s
[info]                  ·gc.alloc.rate:                   1258.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              86920.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.501 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92372.581 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 22748.901 ops/s
[info]                  ·gc.alloc.rate:                   1256.295 MB/sec
[info]                  ·gc.alloc.rate.norm:              86920.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93003.972 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   22650.624 ±(99.9%) 563.363 ops/s [Average]
[info]   (min, avg, max) = (22451.637, 22650.624, 22790.369), stdev = 146.303
[info]   CI (99.9%): [22087.261, 23213.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1250.841 ±(99.9%) 31.544 MB/sec [Average]
[info]   (min, avg, max) = (1239.615, 1250.841, 1258.551), stdev = 8.192
[info]   CI (99.9%): [1219.297, 1282.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   86920.027 ±(99.9%) 0.067 B/op [Average]
[info]   (min, avg, max) = (86920.018, 86920.027, 86920.058), stdev = 0.017
[info]   CI (99.9%): [86919.961, 86920.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.054, 0.062), stdev = 0.011
[info]   CI (99.9%): [0.010, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.759 ±(99.9%) 3.033 B/op [Average]
[info]   (min, avg, max) = (2.875, 3.759, 4.360), stdev = 0.788
[info]   CI (99.9%): [0.726, 6.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1262.780 ±(99.9%) 571.853 MB/sec [Average]
[info]   (min, avg, max) = (998.088, 1262.780, 1344.229), stdev = 148.508
[info]   CI (99.9%): [690.927, 1834.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   87727.065 ±(99.9%) 38873.175 B/op [Average]
[info]   (min, avg, max) = (69692.679, 87727.065, 93003.972), stdev = 10095.240
[info]   CI (99.9%): [48853.890, 126600.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 1.095
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Run progress: 22.95% complete, ETA 00:48:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 133641.227 ops/s
[info] # Warmup Iteration   2: 165878.245 ops/s
[info] # Warmup Iteration   3: 169941.862 ops/s
[info] Iteration   1: 169931.904 ops/s
[info]                  ·gc.alloc.rate:                   851.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              7888.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      977.092 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9051.150 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 169655.409 ops/s
[info]                  ·gc.alloc.rate:                   850.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              7888.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6043.844 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 169635.282 ops/s
[info]                  ·gc.alloc.rate:                   850.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              7888.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.423 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9079.249 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 169569.481 ops/s
[info]                  ·gc.alloc.rate:                   849.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              7888.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9129.047 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 169955.811 ops/s
[info]                  ·gc.alloc.rate:                   851.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              7888.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.757 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6100.999 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   169749.577 ±(99.9%) 694.561 ops/s [Average]
[info]   (min, avg, max) = (169569.481, 169749.577, 169955.811), stdev = 180.375
[info]   CI (99.9%): [169055.017, 170444.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   850.660 ±(99.9%) 3.393 MB/sec [Average]
[info]   (min, avg, max) = (849.888, 850.660, 851.709), stdev = 0.881
[info]   CI (99.9%): [847.267, 854.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7888.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7888.002, 7888.002, 7888.003), stdev = 0.001
[info]   CI (99.9%): [7888.002, 7888.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.656 ±(99.9%) 1.127 B/op [Average]
[info]   (min, avg, max) = (0.193, 0.656, 0.964), stdev = 0.293
[info]   CI (99.9%): [≈ 0, 1.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   849.850 ±(99.9%) 684.833 MB/sec [Average]
[info]   (min, avg, max) = (651.374, 849.850, 983.604), stdev = 177.849
[info]   CI (99.9%): [165.017, 1534.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7880.858 ±(99.9%) 6358.292 B/op [Average]
[info]   (min, avg, max) = (6043.844, 7880.858, 9129.047), stdev = 1651.228
[info]   CI (99.9%): [1522.565, 14239.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Run progress: 23.29% complete, ETA 00:47:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 516040.095 ops/s
[info] # Warmup Iteration   2: 565982.064 ops/s
[info] # Warmup Iteration   3: 561097.113 ops/s
[info] Iteration   1: 559029.414 ops/s
[info]                  ·gc.alloc.rate:                   428.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.732 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 720.162 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 570215.753 ops/s
[info]                  ·gc.alloc.rate:                   437.583 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.345 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 906.436 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 567120.566 ops/s
[info]                  ·gc.alloc.rate:                   435.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1817.245 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 569790.784 ops/s
[info]                  ·gc.alloc.rate:                   437.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.377 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 901.599 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 572541.542 ops/s
[info]                  ·gc.alloc.rate:                   439.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.709 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1794.544 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   567739.612 ±(99.9%) 20160.601 ops/s [Average]
[info]   (min, avg, max) = (559029.414, 567739.612, 572541.542), stdev = 5235.644
[info]   CI (99.9%): [547579.011, 587900.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   435.682 ±(99.9%) 15.544 MB/sec [Average]
[info]   (min, avg, max) = (428.965, 435.682, 439.372), stdev = 4.037
[info]   CI (99.9%): [420.138, 451.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.761 ±(99.9%) 6.332 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.761, 3.702), stdev = 1.644
[info]   CI (99.9%): [≈ 0, 7.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.102 ±(99.9%) 17.480 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.102, 10.220), stdev = 4.539
[info]   CI (99.9%): [≈ 0, 19.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   443.570 ±(99.9%) 747.171 MB/sec [Average]
[info]   (min, avg, max) = (255.732, 443.570, 654.685), stdev = 194.038
[info]   CI (99.9%): [≈ 0, 1190.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1227.997 ±(99.9%) 2052.092 B/op [Average]
[info]   (min, avg, max) = (720.162, 1227.997, 1817.245), stdev = 532.922
[info]   CI (99.9%): [≈ 0, 3280.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 23.63% complete, ETA 00:47:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 526148.074 ops/s
[info] # Warmup Iteration   2: 558414.708 ops/s
[info] # Warmup Iteration   3: 572337.418 ops/s
[info] Iteration   1: 571983.487 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 571613.695 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 570718.284 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 571882.992 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 571542.095 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   571548.111 ±(99.9%) 1920.163 ops/s [Average]
[info]   (min, avg, max) = (570718.284, 571548.111, 571983.487), stdev = 498.660
[info]   CI (99.9%): [569627.948, 573468.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Run progress: 23.97% complete, ETA 00:47:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 157260.592 ops/s
[info] # Warmup Iteration   2: 289810.080 ops/s
[info] # Warmup Iteration   3: 293003.727 ops/s
[info] Iteration   1: 293688.388 ops/s
[info]                  ·gc.alloc.rate:                   811.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.969 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3494.813 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 292820.725 ops/s
[info]                  ·gc.alloc.rate:                   809.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.056 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5284.771 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 297370.285 ops/s
[info]                  ·gc.alloc.rate:                   822.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.719 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3481.504 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 297205.865 ops/s
[info]                  ·gc.alloc.rate:                   821.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.809 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5247.184 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 298402.759 ops/s
[info]                  ·gc.alloc.rate:                   825.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.045 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3502.854 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   295897.604 ±(99.9%) 9530.627 ops/s [Average]
[info]   (min, avg, max) = (292820.725, 295897.604, 298402.759), stdev = 2475.074
[info]   CI (99.9%): [286366.977, 305428.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   818.078 ±(99.9%) 26.526 MB/sec [Average]
[info]   (min, avg, max) = (809.545, 818.078, 825.019), stdev = 6.889
[info]   CI (99.9%): [791.552, 844.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4352.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4352.001, 4352.001, 4352.001), stdev = 0.001
[info]   CI (99.9%): [4352.001, 4352.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.266 ±(99.9%) 0.890 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.559), stdev = 0.231
[info]   CI (99.9%): [≈ 0, 1.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   789.519 ±(99.9%) 694.209 MB/sec [Average]
[info]   (min, avg, max) = (651.969, 789.519, 990.809), stdev = 180.284
[info]   CI (99.9%): [95.310, 1483.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4202.225 ±(99.9%) 3739.705 B/op [Average]
[info]   (min, avg, max) = (3481.504, 4202.225, 5284.771), stdev = 971.189
[info]   CI (99.9%): [462.520, 7941.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Run progress: 24.32% complete, ETA 00:47:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30278.154 ops/s
[info] # Warmup Iteration   2: 38406.367 ops/s
[info] # Warmup Iteration   3: 38460.838 ops/s
[info] Iteration   1: 38466.500 ops/s
[info]                  ·gc.alloc.rate:                   1715.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1645.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67315.990 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 38728.853 ops/s
[info]                  ·gc.alloc.rate:                   1727.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1658.688 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67405.557 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 38704.640 ops/s
[info]                  ·gc.alloc.rate:                   1726.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1670.475 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67934.918 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 38594.075 ops/s
[info]                  ·gc.alloc.rate:                   1721.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1679.141 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68481.648 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 38673.071 ops/s
[info]                  ·gc.alloc.rate:                   1725.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1687.886 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68682.419 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   38633.428 ±(99.9%) 409.158 ops/s [Average]
[info]   (min, avg, max) = (38466.500, 38633.428, 38728.853), stdev = 106.257
[info]   CI (99.9%): [38224.270, 39042.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1723.115 ±(99.9%) 18.657 MB/sec [Average]
[info]   (min, avg, max) = (1715.493, 1723.115, 1727.453), stdev = 4.845
[info]   CI (99.9%): [1704.458, 1741.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   70200.012 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (70200.011, 70200.012, 70200.019), stdev = 0.004
[info]   CI (99.9%): [70199.999, 70200.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.559 ±(99.9%) 4.817 B/op [Average]
[info]   (min, avg, max) = (1.703, 3.559, 5.079), stdev = 1.251
[info]   CI (99.9%): [≈ 0, 8.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1668.241 ±(99.9%) 65.018 MB/sec [Average]
[info]   (min, avg, max) = (1645.016, 1668.241, 1687.886), stdev = 16.885
[info]   CI (99.9%): [1603.223, 1733.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   67964.106 ±(99.9%) 2371.124 B/op [Average]
[info]   (min, avg, max) = (67315.990, 67964.106, 68682.419), stdev = 615.773
[info]   CI (99.9%): [65592.983, 70335.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Run progress: 24.66% complete, ETA 00:46:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65733.934 ops/s
[info] # Warmup Iteration   2: 103549.669 ops/s
[info] # Warmup Iteration   3: 107460.093 ops/s
[info] Iteration   1: 107219.582 ops/s
[info]                  ·gc.alloc.rate:                   1182.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              17360.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.917 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.586 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19302.184 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 106802.125 ops/s
[info]                  ·gc.alloc.rate:                   1177.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              17360.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992.796 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14631.316 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 107630.948 ops/s
[info]                  ·gc.alloc.rate:                   1186.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              17360.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1332.799 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19492.397 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 107701.840 ops/s
[info]                  ·gc.alloc.rate:                   1187.877 MB/sec
[info]                  ·gc.alloc.rate.norm:              17360.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1004.835 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14684.970 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 107765.558 ops/s
[info]                  ·gc.alloc.rate:                   1188.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              17360.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.165 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19633.012 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   107424.011 ±(99.9%) 1570.288 ops/s [Average]
[info]   (min, avg, max) = (106802.125, 107424.011, 107765.558), stdev = 407.799
[info]   CI (99.9%): [105853.723, 108994.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1184.736 ±(99.9%) 17.373 MB/sec [Average]
[info]   (min, avg, max) = (1177.948, 1184.736, 1188.545), stdev = 4.512
[info]   CI (99.9%): [1167.362, 1202.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17360.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17360.004, 17360.004, 17360.004), stdev = 0.001
[info]   CI (99.9%): [17360.003, 17360.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.146), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.100 ±(99.9%) 2.312 B/op [Average]
[info]   (min, avg, max) = (0.609, 1.100, 2.147), stdev = 0.600
[info]   CI (99.9%): [≈ 0, 3.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1197.836 ±(99.9%) 700.957 MB/sec [Average]
[info]   (min, avg, max) = (992.796, 1197.836, 1344.165), stdev = 182.036
[info]   CI (99.9%): [496.879, 1898.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   17548.776 ±(99.9%) 10171.295 B/op [Average]
[info]   (min, avg, max) = (14631.316, 17548.776, 19633.012), stdev = 2641.453
[info]   CI (99.9%): [7377.481, 27720.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Run progress: 25.00% complete, ETA 00:46:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 154571.740 ops/s
[info] # Warmup Iteration   2: 159389.540 ops/s
[info] # Warmup Iteration   3: 150950.162 ops/s
[info] Iteration   1: 157087.916 ops/s
[info]                  ·gc.alloc.rate:      102.196 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 158190.387 ops/s
[info]                  ·gc.alloc.rate:                   102.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2545.055 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 150211.875 ops/s
[info]                  ·gc.alloc.rate:      97.750 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 158340.589 ops/s
[info]                  ·gc.alloc.rate:      103.014 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 157081.453 ops/s
[info]                  ·gc.alloc.rate:                   102.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.753 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2562.940 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   156182.444 ±(99.9%) 13053.230 ops/s [Average]
[info]   (min, avg, max) = (150211.875, 156182.444, 158340.589), stdev = 3389.882
[info]   CI (99.9%): [143129.214, 169235.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   101.609 ±(99.9%) 8.439 MB/sec [Average]
[info]   (min, avg, max) = (97.750, 101.609, 103.014), stdev = 2.192
[info]   CI (99.9%): [93.170, 110.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.003, 1024.003, 1024.003), stdev = 0.001
[info]   CI (99.9%): [1024.002, 1024.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.431 ±(99.9%) 3.640 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.431, 2.121), stdev = 0.945
[info]   CI (99.9%): [≈ 0, 4.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4.288 ±(99.9%) 36.217 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.288, 21.111), stdev = 9.406
[info]   CI (99.9%): [≈ 0, 40.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   102.300 ±(99.9%) 539.400 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.300, 255.753), stdev = 140.080
[info]   CI (99.9%): [≈ 0, 641.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1021.599 ±(99.9%) 5386.651 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1021.599, 2562.940), stdev = 1398.896
[info]   CI (99.9%): [≈ 0, 6408.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 3.000), stdev = 1.414
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Run progress: 25.34% complete, ETA 00:46:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20712.122 ops/s
[info] # Warmup Iteration   2: 39473.304 ops/s
[info] # Warmup Iteration   3: 39283.165 ops/s
[info] Iteration   1: 39455.897 ops/s
[info]                  ·gc.alloc.rate:                   2059.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              82165.577 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1991.875 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79474.212 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 39835.497 ops/s
[info]                  ·gc.alloc.rate:                   2074.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              81952.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2010.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79428.803 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 39718.953 ops/s
[info]                  ·gc.alloc.rate:                   2068.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              81952.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.663 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80164.262 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 39380.838 ops/s
[info]                  ·gc.alloc.rate:                   2051.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              81952.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.778 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81171.661 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 38917.001 ops/s
[info]                  ·gc.alloc.rate:                   2026.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              81952.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.594 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82327.885 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   39461.637 ±(99.9%) 1373.839 ops/s [Average]
[info]   (min, avg, max) = (38917.001, 39461.637, 39835.497), stdev = 356.782
[info]   CI (99.9%): [38087.798, 40835.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2056.007 ±(99.9%) 72.390 MB/sec [Average]
[info]   (min, avg, max) = (2026.301, 2056.007, 2074.300), stdev = 18.799
[info]   CI (99.9%): [1983.617, 2128.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   81994.724 ±(99.9%) 367.775 B/op [Average]
[info]   (min, avg, max) = (81952.010, 81994.724, 82165.577), stdev = 95.510
[info]   CI (99.9%): [81626.949, 82362.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.146), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.980 ±(99.9%) 5.167 B/op [Average]
[info]   (min, avg, max) = (2.496, 3.980, 5.757), stdev = 1.342
[info]   CI (99.9%): [≈ 0, 9.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2018.669 ±(99.9%) 68.585 MB/sec [Average]
[info]   (min, avg, max) = (1991.875, 2018.669, 2035.594), stdev = 17.811
[info]   CI (99.9%): [1950.084, 2087.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   80513.365 ±(99.9%) 4756.684 B/op [Average]
[info]   (min, avg, max) = (79428.803, 80513.365, 82327.885), stdev = 1235.296
[info]   CI (99.9%): [75756.680, 85270.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Run progress: 25.68% complete, ETA 00:46:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64264.002 ops/s
[info] # Warmup Iteration   2: 81990.518 ops/s
[info] # Warmup Iteration   3: 80148.445 ops/s
[info] Iteration   1: 80240.006 ops/s
[info]                  ·gc.alloc.rate:                   616.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              12088.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67.573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12818.107 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 80388.667 ops/s
[info]                  ·gc.alloc.rate:                   617.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              12088.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.406 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12755.225 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 79782.850 ops/s
[info]                  ·gc.alloc.rate:                   612.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              12088.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      650.089 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12825.653 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 80390.901 ops/s
[info]                  ·gc.alloc.rate:                   617.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              12088.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12754.432 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 80242.782 ops/s
[info]                  ·gc.alloc.rate:                   616.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              12088.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12804.083 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   80209.041 ±(99.9%) 960.877 ops/s [Average]
[info]   (min, avg, max) = (79782.850, 80209.041, 80390.901), stdev = 249.537
[info]   CI (99.9%): [79248.164, 81169.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   615.979 ±(99.9%) 7.356 MB/sec [Average]
[info]   (min, avg, max) = (612.700, 615.979, 617.341), stdev = 1.910
[info]   CI (99.9%): [608.622, 623.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12088.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12088.005, 12088.005, 12088.005), stdev = 0.001
[info]   CI (99.9%): [12088.004, 12088.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.722 ±(99.9%) 5.862 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.722, 3.445), stdev = 1.522
[info]   CI (99.9%): [≈ 0, 6.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   14.168 ±(99.9%) 114.974 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.168, 67.573), stdev = 29.858
[info]   CI (99.9%): [≈ 0, 129.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   651.824 ±(99.9%) 5.124 MB/sec [Average]
[info]   (min, avg, max) = (650.089, 651.824, 653.520), stdev = 1.331
[info]   CI (99.9%): [646.700, 656.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   12791.500 ±(99.9%) 132.311 B/op [Average]
[info]   (min, avg, max) = (12754.432, 12791.500, 12825.653), stdev = 34.361
[info]   CI (99.9%): [12659.189, 12923.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Run progress: 26.03% complete, ETA 00:46:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70249.461 ops/s
[info] # Warmup Iteration   2: 102359.687 ops/s
[info] # Warmup Iteration   3: 102398.982 ops/s
[info] Iteration   1: 102065.628 ops/s
[info]                  ·gc.alloc.rate:                   337.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              5200.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7888.896 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 102168.382 ops/s
[info]                  ·gc.alloc.rate:                   337.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              5200.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      320.367 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4935.852 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 102458.727 ops/s
[info]                  ·gc.alloc.rate:                   338.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              5200.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      320.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4921.835 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 102246.649 ops/s
[info]                  ·gc.alloc.rate:                   337.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              5200.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.720 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4968.024 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 102151.372 ops/s
[info]                  ·gc.alloc.rate:                   337.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              5200.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.712 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4972.741 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   102218.152 ±(99.9%) 574.019 ops/s [Average]
[info]   (min, avg, max) = (102065.628, 102218.152, 102458.727), stdev = 149.071
[info]   CI (99.9%): [101644.133, 102792.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   337.696 ±(99.9%) 2.015 MB/sec [Average]
[info]   (min, avg, max) = (337.171, 337.696, 338.546), stdev = 0.523
[info]   CI (99.9%): [335.681, 339.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   5200.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5200.004, 5200.004, 5200.004), stdev = 0.001
[info]   CI (99.9%): [5200.003, 5200.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.384 ±(99.9%) 1.606 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.384, 0.959), stdev = 0.417
[info]   CI (99.9%): [≈ 0, 1.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   359.551 ±(99.9%) 327.155 MB/sec [Average]
[info]   (min, avg, max) = (320.367, 359.551, 511.520), stdev = 84.961
[info]   CI (99.9%): [32.396, 686.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5537.469 ±(99.9%) 5062.294 B/op [Average]
[info]   (min, avg, max) = (4921.835, 5537.469, 7888.896), stdev = 1314.662
[info]   CI (99.9%): [475.175, 10599.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Run progress: 26.37% complete, ETA 00:45:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 100240.465 ops/s
[info] # Warmup Iteration   2: 113527.223 ops/s
[info] # Warmup Iteration   3: 115020.493 ops/s
[info] Iteration   1: 115500.504 ops/s
[info]                  ·gc.alloc.rate:                   353.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.760 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3485.692 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 115335.895 ops/s
[info]                  ·gc.alloc.rate:                   352.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.732 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3490.678 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 113131.286 ops/s
[info]                  ·gc.alloc.rate:                   346.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.483 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4568.979 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 115470.346 ops/s
[info]                  ·gc.alloc.rate:                   353.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.405 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4476.283 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 115807.593 ops/s
[info]                  ·gc.alloc.rate:                   354.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.377 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4436.099 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   115049.125 ±(99.9%) 4181.445 ops/s [Average]
[info]   (min, avg, max) = (113131.286, 115049.125, 115807.593), stdev = 1085.908
[info]   CI (99.9%): [110867.680, 119230.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   352.019 ±(99.9%) 12.610 MB/sec [Average]
[info]   (min, avg, max) = (346.243, 352.019, 354.327), stdev = 3.275
[info]   CI (99.9%): [339.410, 364.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   4816.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4816.004, 4816.004, 4816.004), stdev = 0.001
[info]   CI (99.9%): [4816.003, 4816.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.758 ±(99.9%) 6.394 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.758, 3.728), stdev = 1.661
[info]   CI (99.9%): [≈ 0, 7.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10.542 ±(99.9%) 88.945 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.542, 51.856), stdev = 23.099
[info]   CI (99.9%): [≈ 0, 99.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   298.951 ±(99.9%) 151.907 MB/sec [Average]
[info]   (min, avg, max) = (255.732, 298.951, 328.483), stdev = 39.450
[info]   CI (99.9%): [147.045, 450.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4091.546 ±(99.9%) 2129.011 B/op [Average]
[info]   (min, avg, max) = (3485.692, 4091.546, 4568.979), stdev = 552.897
[info]   CI (99.9%): [1962.535, 6220.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 26.71% complete, ETA 00:45:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102845.508 ops/s
[info] # Warmup Iteration   2: 116084.696 ops/s
[info] # Warmup Iteration   3: 116870.466 ops/s
[info] Iteration   1: 116165.968 ops/s
[info]                  ·gc.alloc.rate:                   263.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.050 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.762 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3465.740 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 116857.140 ops/s
[info]                  ·gc.alloc.rate:                   265.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.844 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3445.161 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 116609.418 ops/s
[info]                  ·gc.alloc.rate:                   264.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.758 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3452.398 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 116552.995 ops/s
[info]                  ·gc.alloc.rate:                   264.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50.463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.707 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4439.155 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 117098.021 ops/s
[info]                  ·gc.alloc.rate:      266.012 MB/sec
[info]                  ·gc.alloc.rate.norm: 3576.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   116656.708 ±(99.9%) 1346.003 ops/s [Average]
[info]   (min, avg, max) = (116165.968, 116656.708, 117098.021), stdev = 349.553
[info]   CI (99.9%): [115310.706, 118002.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   265.036 ±(99.9%) 3.101 MB/sec [Average]
[info]   (min, avg, max) = (263.899, 265.036, 266.012), stdev = 0.805
[info]   CI (99.9%): [261.935, 268.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   3576.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3576.003, 3576.003, 3576.004), stdev = 0.001
[info]   CI (99.9%): [3576.003, 3576.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.762 ±(99.9%) 6.403 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.762, 3.737), stdev = 1.663
[info]   CI (99.9%): [≈ 0, 7.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   10.294 ±(99.9%) 86.474 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.294, 50.463), stdev = 22.457
[info]   CI (99.9%): [≈ 0, 96.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   219.214 ±(99.9%) 487.288 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 219.214, 328.707), stdev = 126.547
[info]   CI (99.9%): [≈ 0, 706.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   2960.491 ±(99.9%) 6580.858 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2960.491, 4439.155), stdev = 1709.028
[info]   CI (99.9%): [≈ 0, 9541.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Run progress: 27.05% complete, ETA 00:45:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5972.047 ops/s
[info] # Warmup Iteration   2: 9645.254 ops/s
[info] # Warmup Iteration   3: 9784.273 ops/s
[info] Iteration   1: 9895.541 ops/s
[info]                  ·gc.alloc.rate:                   1625.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              258488.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1643.352 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 261402.433 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 9783.721 ops/s
[info]                  ·gc.alloc.rate:                   1606.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              258488.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1655.073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 266322.874 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 9850.745 ops/s
[info]                  ·gc.alloc.rate:                   1617.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              258488.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1332.781 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 212950.429 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 9872.801 ops/s
[info]                  ·gc.alloc.rate:                   1621.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              258493.544 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1675.936 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 267214.330 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 9859.871 ops/s
[info]                  ·gc.alloc.rate:                   1619.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              258504.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1683.590 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 268736.143 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   9852.536 ±(99.9%) 161.688 ops/s [Average]
[info]   (min, avg, max) = (9783.721, 9852.536, 9895.541), stdev = 41.990
[info]   CI (99.9%): [9690.848, 10014.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1617.985 ±(99.9%) 27.032 MB/sec [Average]
[info]   (min, avg, max) = (1606.383, 1617.985, 1625.030), stdev = 7.020
[info]   CI (99.9%): [1590.953, 1645.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   258492.343 ±(99.9%) 26.799 B/op [Average]
[info]   (min, avg, max) = (258488.042, 258492.343, 258504.041), stdev = 6.960
[info]   CI (99.9%): [258465.544, 258519.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12.648 ±(99.9%) 21.240 B/op [Average]
[info]   (min, avg, max) = (6.651, 12.648, 20.091), stdev = 5.516
[info]   CI (99.9%): [≈ 0, 33.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1598.146 ±(99.9%) 574.555 MB/sec [Average]
[info]   (min, avg, max) = (1332.781, 1598.146, 1683.590), stdev = 149.210
[info]   CI (99.9%): [1023.592, 2172.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   255325.242 ±(99.9%) 91826.103 B/op [Average]
[info]   (min, avg, max) = (212950.429, 255325.242, 268736.143), stdev = 23846.947
[info]   CI (99.9%): [163499.138, 347151.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Run progress: 27.40% complete, ETA 00:45:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4845.605 ops/s
[info] # Warmup Iteration   2: 10337.702 ops/s
[info] # Warmup Iteration   3: 10496.104 ops/s
[info] Iteration   1: 10516.074 ops/s
[info]                  ·gc.alloc.rate:                   1624.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              243136.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1656.553 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 247963.951 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 10598.679 ops/s
[info]                  ·gc.alloc.rate:                   1637.387 MB/sec
[info]                  ·gc.alloc.rate.norm:              243136.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1670.306 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 248024.179 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 10615.793 ops/s
[info]                  ·gc.alloc.rate:                   1639.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              243136.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1680.234 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 249157.774 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 10461.767 ops/s
[info]                  ·gc.alloc.rate:                   1615.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              243155.742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 203021.309 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 10517.838 ops/s
[info]                  ·gc.alloc.rate:                   1624.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              243168.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.932 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 253049.564 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   10542.030 ±(99.9%) 246.195 ops/s [Average]
[info]   (min, avg, max) = (10461.767, 10542.030, 10615.793), stdev = 63.936
[info]   CI (99.9%): [10295.835, 10788.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1628.418 ±(99.9%) 38.154 MB/sec [Average]
[info]   (min, avg, max) = (1615.875, 1628.418, 1639.626), stdev = 9.909
[info]   CI (99.9%): [1590.264, 1666.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   243146.380 ±(99.9%) 57.034 B/op [Average]
[info]   (min, avg, max) = (243136.038, 243146.380, 243168.039), stdev = 14.812
[info]   CI (99.9%): [243089.346, 243203.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   11.784 ±(99.9%) 25.863 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.784, 15.573), stdev = 6.717
[info]   CI (99.9%): [≈ 0, 37.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1609.438 ±(99.9%) 562.380 MB/sec [Average]
[info]   (min, avg, max) = (1349.164, 1609.438, 1690.932), stdev = 146.048
[info]   CI (99.9%): [1047.058, 2171.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   240243.355 ±(99.9%) 80521.177 B/op [Average]
[info]   (min, avg, max) = (203021.309, 240243.355, 253049.564), stdev = 20911.094
[info]   CI (99.9%): [159722.178, 320764.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Run progress: 27.74% complete, ETA 00:45:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 101909.578 ops/s
[info] # Warmup Iteration   2: 108123.285 ops/s
[info] # Warmup Iteration   3: 108719.105 ops/s
[info] Iteration   1: 108747.003 ops/s
[info]                  ·gc.alloc.rate:                   282.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.744 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3702.047 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 108812.127 ops/s
[info]                  ·gc.alloc.rate:                   283.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3699.870 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 108039.248 ops/s
[info]                  ·gc.alloc.rate:                   281.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.765 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3726.131 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 107925.739 ops/s
[info]                  ·gc.alloc.rate:                   280.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38.487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      331.345 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4832.797 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 108120.843 ops/s
[info]                  ·gc.alloc.rate:                   281.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      331.343 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4824.037 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   108328.992 ±(99.9%) 1608.587 ops/s [Average]
[info]   (min, avg, max) = (107925.739, 108328.992, 108812.127), stdev = 417.745
[info]   CI (99.9%): [106720.405, 109937.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   281.882 ±(99.9%) 4.153 MB/sec [Average]
[info]   (min, avg, max) = (280.829, 281.882, 283.130), stdev = 1.079
[info]   CI (99.9%): [277.728, 286.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.004, 4096.004, 4096.004), stdev = 0.001
[info]   CI (99.9%): [4096.003, 4096.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.546 ±(99.9%) 4.506 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.546, 2.639), stdev = 1.170
[info]   CI (99.9%): [≈ 0, 5.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   7.959 ±(99.9%) 65.726 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.959, 38.487), stdev = 17.069
[info]   CI (99.9%): [≈ 0, 73.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   285.989 ±(99.9%) 159.430 MB/sec [Average]
[info]   (min, avg, max) = (255.744, 285.989, 331.345), stdev = 41.403
[info]   CI (99.9%): [126.559, 445.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4156.977 ±(99.9%) 2360.571 B/op [Average]
[info]   (min, avg, max) = (3699.870, 4156.977, 4832.797), stdev = 613.033
[info]   CI (99.9%): [1796.405, 6517.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Run progress: 28.08% complete, ETA 00:44:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2728.570 ops/s
[info] # Warmup Iteration   2: 5655.262 ops/s
[info] # Warmup Iteration   3: 5854.837 ops/s
[info] Iteration   1: 5921.615 ops/s
[info]                  ·gc.alloc.rate:                   1563.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              415600.080 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1654.777 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 439842.491 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 5964.029 ops/s
[info]                  ·gc.alloc.rate:                   1574.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              415600.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21.974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 352279.347 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 5950.066 ops/s
[info]                  ·gc.alloc.rate:                   1570.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              415600.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.741 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 443851.948 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 5934.853 ops/s
[info]                  ·gc.alloc.rate:                   1566.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              415600.069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 447093.305 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 5962.385 ops/s
[info]                  ·gc.alloc.rate:                   1574.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              415600.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 357085.489 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   5946.589 ±(99.9%) 70.141 ops/s [Average]
[info]   (min, avg, max) = (5921.615, 5946.589, 5964.029), stdev = 18.215
[info]   CI (99.9%): [5876.449, 6016.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1570.169 ±(99.9%) 18.799 MB/sec [Average]
[info]   (min, avg, max) = (1563.572, 1570.169, 1574.734), stdev = 4.882
[info]   CI (99.9%): [1551.369, 1588.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   415600.072 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (415600.068, 415600.072, 415600.080), stdev = 0.005
[info]   CI (99.9%): [415600.053, 415600.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   14.320 ±(99.9%) 24.134 B/op [Average]
[info]   (min, avg, max) = (5.520, 14.320, 21.974), stdev = 6.268
[info]   CI (99.9%): [≈ 0, 38.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1541.190 ±(99.9%) 695.418 MB/sec [Average]
[info]   (min, avg, max) = (1334.728, 1541.190, 1685.686), stdev = 180.598
[info]   CI (99.9%): [845.772, 2236.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   408030.516 ±(99.9%) 187900.641 B/op [Average]
[info]   (min, avg, max) = (352279.347, 408030.516, 447093.305), stdev = 48797.200
[info]   CI (99.9%): [220129.875, 595931.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Run progress: 28.42% complete, ETA 00:44:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16936.452 ops/s
[info] # Warmup Iteration   2: 24947.044 ops/s
[info] # Warmup Iteration   3: 24784.356 ops/s
[info] Iteration   1: 25152.995 ops/s
[info]                  ·gc.alloc.rate:                   1413.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              88480.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.101 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81924.559 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 24396.383 ops/s
[info]                  ·gc.alloc.rate:                   1371.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              88471.783 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.372 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.629 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84981.928 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 25297.464 ops/s
[info]                  ·gc.alloc.rate:                   1421.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              88456.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.800 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82491.128 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 25056.994 ops/s
[info]                  ·gc.alloc.rate:                   1408.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              88456.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1668.350 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 104790.654 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 25249.022 ops/s
[info]                  ·gc.alloc.rate:                   1419.460 MB/sec
[info]                  ·gc.alloc.rate.norm:              88456.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.634 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83668.500 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   25030.572 ±(99.9%) 1410.662 ops/s [Average]
[info]   (min, avg, max) = (24396.383, 25030.572, 25297.464), stdev = 366.344
[info]   CI (99.9%): [23619.910, 26441.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1407.002 ±(99.9%) 78.499 MB/sec [Average]
[info]   (min, avg, max) = (1371.739, 1407.002, 1421.667), stdev = 20.386
[info]   CI (99.9%): [1328.503, 1485.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   88463.970 ±(99.9%) 43.410 B/op [Average]
[info]   (min, avg, max) = (88456.016, 88463.970, 88480.017), stdev = 11.273
[info]   CI (99.9%): [88420.560, 88507.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.083), stdev = 0.011
[info]   CI (99.9%): [0.031, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4.715 ±(99.9%) 2.825 B/op [Average]
[info]   (min, avg, max) = (3.908, 4.715, 5.372), stdev = 0.734
[info]   CI (99.9%): [1.889, 7.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1392.703 ±(99.9%) 595.262 MB/sec [Average]
[info]   (min, avg, max) = (1309.101, 1392.703, 1668.350), stdev = 154.588
[info]   CI (99.9%): [797.440, 1987.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   87571.354 ±(99.9%) 37340.164 B/op [Average]
[info]   (min, avg, max) = (81924.559, 87571.354, 104790.654), stdev = 9697.122
[info]   CI (99.9%): [50231.190, 124911.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Run progress: 28.77% complete, ETA 00:44:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 317463.300 ops/s
[info] # Warmup Iteration   2: 347438.631 ops/s
[info] # Warmup Iteration   3: 345132.800 ops/s
[info] Iteration   1: 348428.383 ops/s
[info]                  ·gc.alloc.rate:                   768.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.080 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2954.693 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 345719.146 ops/s
[info]                  ·gc.alloc.rate:                   762.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.631 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2971.888 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 346421.433 ops/s
[info]                  ·gc.alloc.rate:                   764.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.870 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4451.839 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 348419.942 ops/s
[info]                  ·gc.alloc.rate:                   768.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.179 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2959.393 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 348583.196 ops/s
[info]                  ·gc.alloc.rate:                   769.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.650 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4449.848 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   347514.420 ±(99.9%) 5171.634 ops/s [Average]
[info]   (min, avg, max) = (345719.146, 347514.420, 348583.196), stdev = 1343.057
[info]   CI (99.9%): [342342.786, 352686.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   766.595 ±(99.9%) 11.741 MB/sec [Average]
[info]   (min, avg, max) = (762.457, 766.595, 769.055), stdev = 3.049
[info]   CI (99.9%): [754.855, 778.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3472.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3472.001, 3472.001, 3472.001), stdev = 0.001
[info]   CI (99.9%): [3472.001, 3472.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.302 ±(99.9%) 0.650 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.302, 0.379), stdev = 0.169
[info]   CI (99.9%): [≈ 0, 0.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   785.482 ±(99.9%) 693.513 MB/sec [Average]
[info]   (min, avg, max) = (652.631, 785.482, 985.650), stdev = 180.103
[info]   CI (99.9%): [91.969, 1478.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3557.532 ±(99.9%) 3140.209 B/op [Average]
[info]   (min, avg, max) = (2954.693, 3557.532, 4451.839), stdev = 815.502
[info]   CI (99.9%): [417.323, 6697.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.800, 6.000), stdev = 1.924
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 29.11% complete, ETA 00:44:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 349026.181 ops/s
[info] # Warmup Iteration   2: 379316.212 ops/s
[info] # Warmup Iteration   3: 373733.735 ops/s
[info] Iteration   1: 375006.007 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 374239.437 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 375300.210 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 375450.458 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 376056.495 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   375210.521 ±(99.9%) 2558.663 ops/s [Average]
[info]   (min, avg, max) = (374239.437, 375210.521, 376056.495), stdev = 664.477
[info]   CI (99.9%): [372651.858, 377769.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Run progress: 29.45% complete, ETA 00:43:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17843.372 ops/s
[info] # Warmup Iteration   2: 27552.728 ops/s
[info] # Warmup Iteration   3: 28160.502 ops/s
[info] Iteration   1: 28072.933 ops/s
[info]                  ·gc.alloc.rate:                   1476.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              82792.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1623.849 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91047.378 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 28214.353 ops/s
[info]                  ·gc.alloc.rate:                   1483.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              82792.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.365 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73053.631 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 28186.410 ops/s
[info]                  ·gc.alloc.rate:                   1482.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              82792.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1652.311 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92263.232 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 28081.965 ops/s
[info]                  ·gc.alloc.rate:                   1476.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              82792.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1332.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74668.945 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 28461.100 ops/s
[info]                  ·gc.alloc.rate:                   1497.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              82792.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.151 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74058.949 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   28203.352 ±(99.9%) 604.520 ops/s [Average]
[info]   (min, avg, max) = (28072.933, 28203.352, 28461.100), stdev = 156.992
[info]   CI (99.9%): [27598.832, 28807.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1483.444 ±(99.9%) 31.945 MB/sec [Average]
[info]   (min, avg, max) = (1476.613, 1483.444, 1497.065), stdev = 8.296
[info]   CI (99.9%): [1451.499, 1515.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82792.015 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (82792.014, 82792.015, 82792.018), stdev = 0.002
[info]   CI (99.9%): [82792.009, 82792.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.096, 0.125), stdev = 0.019
[info]   CI (99.9%): [0.024, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5.345 ±(99.9%) 4.020 B/op [Average]
[info]   (min, avg, max) = (4.605, 5.345, 6.967), stdev = 1.044
[info]   CI (99.9%): [1.324, 9.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1451.341 ±(99.9%) 658.919 MB/sec [Average]
[info]   (min, avg, max) = (1309.365, 1451.341, 1652.311), stdev = 171.119
[info]   CI (99.9%): [792.422, 2110.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   81018.427 ±(99.9%) 37492.585 B/op [Average]
[info]   (min, avg, max) = (73053.631, 81018.427, 92263.232), stdev = 9736.705
[info]   CI (99.9%): [43525.842, 118511.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Run progress: 29.79% complete, ETA 00:43:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 108939.697 ops/s
[info] # Warmup Iteration   2: 138005.863 ops/s
[info] # Warmup Iteration   3: 138804.917 ops/s
[info] Iteration   1: 139466.866 ops/s
[info]                  ·gc.alloc.rate:                   2271.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2321.807 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26208.762 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 139528.278 ops/s
[info]                  ·gc.alloc.rate:                   2272.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2344.632 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26452.969 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 137232.893 ops/s
[info]                  ·gc.alloc.rate:                   2235.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.149 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23194.223 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 138760.054 ops/s
[info]                  ·gc.alloc.rate:                   2260.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2369.349 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26876.296 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 139667.586 ops/s
[info]                  ·gc.alloc.rate:                   2275.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2376.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26776.466 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   138931.135 ±(99.9%) 3898.119 ops/s [Average]
[info]   (min, avg, max) = (137232.893, 138931.135, 139667.586), stdev = 1012.329
[info]   CI (99.9%): [135033.016, 142829.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2262.982 ±(99.9%) 63.288 MB/sec [Average]
[info]   (min, avg, max) = (2235.381, 2262.982, 2275.170), stdev = 16.436
[info]   CI (99.9%): [2199.693, 2326.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   25640.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25640.003, 25640.003, 25640.003), stdev = 0.001
[info]   CI (99.9%): [25640.003, 25640.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.121 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.121, 0.146), stdev = 0.017
[info]   CI (99.9%): [0.054, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.368 ±(99.9%) 0.759 B/op [Average]
[info]   (min, avg, max) = (1.173, 1.368, 1.644), stdev = 0.197
[info]   CI (99.9%): [0.609, 2.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2286.790 ±(99.9%) 575.615 MB/sec [Average]
[info]   (min, avg, max) = (2022.149, 2286.790, 2376.015), stdev = 149.485
[info]   CI (99.9%): [1711.175, 2862.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   25901.743 ±(99.9%) 5916.620 B/op [Average]
[info]   (min, avg, max) = (23194.223, 25901.743, 26876.296), stdev = 1536.527
[info]   CI (99.9%): [19985.123, 31818.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Run progress: 30.14% complete, ETA 00:43:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 200777.439 ops/s
[info] # Warmup Iteration   2: 310135.371 ops/s
[info] # Warmup Iteration   3: 319157.081 ops/s
[info] Iteration   1: 319593.205 ops/s
[info]                  ·gc.alloc.rate:                   451.496 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      579.403 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2854.054 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 317051.696 ops/s
[info]                  ·gc.alloc.rate:                   447.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.682 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1607.079 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 316104.994 ops/s
[info]                  ·gc.alloc.rate:                   446.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.705 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1621.879 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 320707.606 ops/s
[info]                  ·gc.alloc.rate:                   453.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.342 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3205.350 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 321641.105 ops/s
[info]                  ·gc.alloc.rate:                   454.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.423 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1602.116 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   319019.721 ±(99.9%) 9115.998 ops/s [Average]
[info]   (min, avg, max) = (316104.994, 319019.721, 321641.105), stdev = 2367.396
[info]   CI (99.9%): [309903.723, 328135.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   450.777 ±(99.9%) 13.097 MB/sec [Average]
[info]   (min, avg, max) = (446.623, 450.777, 454.517), stdev = 3.401
[info]   CI (99.9%): [437.680, 463.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2224.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2224.001, 2224.001, 2224.001), stdev = 0.001
[info]   CI (99.9%): [2224.001, 2224.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.207 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.104), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.225 ±(99.9%) 1.019 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.225, 0.513), stdev = 0.265
[info]   CI (99.9%): [≈ 0, 1.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   441.911 ±(99.9%) 621.484 MB/sec [Average]
[info]   (min, avg, max) = (323.682, 441.911, 653.342), stdev = 161.397
[info]   CI (99.9%): [≈ 0, 1063.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2178.095 ±(99.9%) 3031.609 B/op [Average]
[info]   (min, avg, max) = (1602.116, 2178.095, 3205.350), stdev = 787.299
[info]   CI (99.9%): [≈ 0, 5209.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Run progress: 30.48% complete, ETA 00:43:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 682010.081 ops/s
[info] # Warmup Iteration   2: 711841.025 ops/s
[info] # Warmup Iteration   3: 722072.295 ops/s
[info] Iteration   1: 729276.597 ops/s
[info]                  ·gc.alloc.rate:                   474.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      585.434 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1263.674 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 733536.627 ops/s
[info]                  ·gc.alloc.rate:                   477.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.782 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 707.485 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 725093.078 ops/s
[info]                  ·gc.alloc.rate:                   471.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.077 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1425.688 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 729490.137 ops/s
[info]                  ·gc.alloc.rate:                   474.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.715 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 707.100 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 732872.465 ops/s
[info]                  ·gc.alloc.rate:                   476.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.830 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 703.834 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   730053.781 ±(99.9%) 13002.052 ops/s [Average]
[info]   (min, avg, max) = (725093.078, 730053.781, 733536.627), stdev = 3376.592
[info]   CI (99.9%): [717051.729, 743055.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   475.041 ±(99.9%) 8.406 MB/sec [Average]
[info]   (min, avg, max) = (471.946, 475.041, 477.320), stdev = 2.183
[info]   CI (99.9%): [466.636, 483.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1024.001, 1024.001), stdev = 0.001
[info]   CI (99.9%): [1024.000, 1024.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.664 ±(99.9%) 5.542 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.664, 3.238), stdev = 1.439
[info]   CI (99.9%): [≈ 0, 6.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.434 ±(99.9%) 11.962 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.434, 6.990), stdev = 3.106
[info]   CI (99.9%): [≈ 0, 13.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   445.568 ±(99.9%) 625.230 MB/sec [Average]
[info]   (min, avg, max) = (327.715, 445.568, 657.077), stdev = 162.370
[info]   CI (99.9%): [≈ 0, 1070.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   961.556 ±(99.9%) 1364.690 B/op [Average]
[info]   (min, avg, max) = (703.834, 961.556, 1425.688), stdev = 354.406
[info]   CI (99.9%): [≈ 0, 2326.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 5.000), stdev = 1.924
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Run progress: 30.82% complete, ETA 00:43:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40819.134 ops/s
[info] # Warmup Iteration   2: 69364.561 ops/s
[info] # Warmup Iteration   3: 69364.827 ops/s
[info] Iteration   1: 70645.067 ops/s
[info]                  ·gc.alloc.rate:                   3000.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3021.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67339.130 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 69488.589 ops/s
[info]                  ·gc.alloc.rate:                   2951.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3044.567 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68964.617 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 69605.886 ops/s
[info]                  ·gc.alloc.rate:                   2957.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2716.434 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61406.288 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 70337.823 ops/s
[info]                  ·gc.alloc.rate:                   2987.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3059.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68462.188 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 70850.823 ops/s
[info]                  ·gc.alloc.rate:                   3009.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3063.677 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68053.414 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   70185.637 ±(99.9%) 2357.003 ops/s [Average]
[info]   (min, avg, max) = (69488.589, 70185.637, 70850.823), stdev = 612.106
[info]   CI (99.9%): [67828.635, 72542.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2981.266 ±(99.9%) 99.222 MB/sec [Average]
[info]   (min, avg, max) = (2951.479, 2981.266, 3009.771), stdev = 25.768
[info]   CI (99.9%): [2882.044, 3080.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66856.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66856.006, 66856.006, 66856.006), stdev = 0.001
[info]   CI (99.9%): [66856.005, 66856.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.179 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.125, 0.179, 0.229), stdev = 0.038
[info]   CI (99.9%): [0.033, 0.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4.018 ±(99.9%) 3.354 B/op [Average]
[info]   (min, avg, max) = (2.795, 4.018, 5.186), stdev = 0.871
[info]   CI (99.9%): [0.664, 7.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2981.139 ±(99.9%) 573.280 MB/sec [Average]
[info]   (min, avg, max) = (2716.434, 2981.139, 3063.677), stdev = 148.879
[info]   CI (99.9%): [2407.860, 3554.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   66845.128 ±(99.9%) 11929.556 B/op [Average]
[info]   (min, avg, max) = (61406.288, 66845.128, 68964.617), stdev = 3098.068
[info]   CI (99.9%): [54915.572, 78774.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   44.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.200, 10.000), stdev = 0.837
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Run progress: 31.16% complete, ETA 00:42:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 171311.899 ops/s
[info] # Warmup Iteration   2: 228340.349 ops/s
[info] # Warmup Iteration   3: 228390.161 ops/s
[info] Iteration   1: 231026.464 ops/s
[info]                  ·gc.alloc.rate:                   1624.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              11072.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.567 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1638.781 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11166.506 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 231778.455 ops/s
[info]                  ·gc.alloc.rate:                   1630.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              11072.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1321.549 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8974.637 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 230311.986 ops/s
[info]                  ·gc.alloc.rate:                   1619.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              11072.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.092 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11373.765 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 230995.795 ops/s
[info]                  ·gc.alloc.rate:                   1624.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              11072.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.567 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1674.820 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11412.661 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 231566.947 ops/s
[info]                  ·gc.alloc.rate:                   1629.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              11072.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.359 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11448.008 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   231135.930 ±(99.9%) 2202.891 ops/s [Average]
[info]   (min, avg, max) = (230311.986, 231135.930, 231778.455), stdev = 572.084
[info]   CI (99.9%): [228933.039, 233338.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1625.822 ±(99.9%) 15.834 MB/sec [Average]
[info]   (min, avg, max) = (1619.941, 1625.822, 1630.394), stdev = 4.112
[info]   CI (99.9%): [1609.988, 1641.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11072.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11072.002, 11072.002, 11072.002), stdev = 0.001
[info]   CI (99.9%): [11072.002, 11072.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.539 ±(99.9%) 0.453 B/op [Average]
[info]   (min, avg, max) = (0.424, 0.539, 0.707), stdev = 0.118
[info]   CI (99.9%): [0.085, 0.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1596.720 ±(99.9%) 595.940 MB/sec [Average]
[info]   (min, avg, max) = (1321.549, 1596.720, 1684.359), stdev = 154.764
[info]   CI (99.9%): [1000.780, 2192.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10875.116 ±(99.9%) 4112.507 B/op [Average]
[info]   (min, avg, max) = (8974.637, 10875.116, 11448.008), stdev = 1068.005
[info]   CI (99.9%): [6762.609, 14987.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Run progress: 31.51% complete, ETA 00:42:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 572591.521 ops/s
[info] # Warmup Iteration   2: 849159.840 ops/s
[info] # Warmup Iteration   3: 850303.661 ops/s
[info] Iteration   1: 853820.578 ops/s
[info]                  ·gc.alloc.rate:                   672.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      643.364 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1186.152 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 855657.523 ops/s
[info]                  ·gc.alloc.rate:                   674.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.557 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1191.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 852976.605 ops/s
[info]                  ·gc.alloc.rate:                   671.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      976.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1802.604 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 855924.359 ops/s
[info]                  ·gc.alloc.rate:                   674.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.466 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1205.350 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 848359.214 ops/s
[info]                  ·gc.alloc.rate:                   668.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.761 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1222.256 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   853347.656 ±(99.9%) 11746.164 ops/s [Average]
[info]   (min, avg, max) = (848359.214, 853347.656, 855924.359), stdev = 3050.441
[info]   CI (99.9%): [841601.492, 865093.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   672.264 ±(99.9%) 9.357 MB/sec [Average]
[info]   (min, avg, max) = (668.324, 672.264, 674.309), stdev = 2.430
[info]   CI (99.9%): [662.907, 681.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1240.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1240.000, 1240.000, 1240.001), stdev = 0.001
[info]   CI (99.9%): [1240.000, 1240.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.217 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.146), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.138 ±(99.9%) 0.400 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.138, 0.269), stdev = 0.104
[info]   CI (99.9%): [≈ 0, 0.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   716.387 ±(99.9%) 561.030 MB/sec [Average]
[info]   (min, avg, max) = (643.364, 716.387, 976.789), stdev = 145.698
[info]   CI (99.9%): [155.358, 1277.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1321.476 ±(99.9%) 1037.080 B/op [Average]
[info]   (min, avg, max) = (1186.152, 1321.476, 1802.604), stdev = 269.326
[info]   CI (99.9%): [284.396, 2358.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Run progress: 31.85% complete, ETA 00:42:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1072673.339 ops/s
[info] # Warmup Iteration   2: 1141181.657 ops/s
[info] # Warmup Iteration   3: 1185432.726 ops/s
[info] Iteration   1: 1184387.933 ops/s
[info]                  ·gc.alloc.rate:                   644.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.785 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 870.148 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1187231.193 ops/s
[info]                  ·gc.alloc.rate:                   645.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.656 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 865.427 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1183216.931 ops/s
[info]                  ·gc.alloc.rate:                   643.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.739 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 868.369 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1194582.827 ops/s
[info]                  ·gc.alloc.rate:                   649.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.697 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 860.966 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1191604.268 ops/s
[info]                  ·gc.alloc.rate:                   648.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.317 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 865.345 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1188204.631 ±(99.9%) 18530.245 ops/s [Average]
[info]   (min, avg, max) = (1183216.931, 1188204.631, 1194582.827), stdev = 4812.246
[info]   CI (99.9%): [1169674.386, 1206734.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   646.259 ±(99.9%) 10.601 MB/sec [Average]
[info]   (min, avg, max) = (643.442, 646.259, 649.927), stdev = 2.753
[info]   CI (99.9%): [635.658, 656.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.125), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.094 ±(99.9%) 0.233 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.094, 0.166), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   653.839 ±(99.9%) 4.600 MB/sec [Average]
[info]   (min, avg, max) = (652.656, 653.839, 655.317), stdev = 1.195
[info]   CI (99.9%): [649.239, 658.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   866.051 ±(99.9%) 13.464 B/op [Average]
[info]   (min, avg, max) = (860.966, 866.051, 870.148), stdev = 3.497
[info]   CI (99.9%): [852.587, 879.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 32.19% complete, ETA 00:42:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1032759.196 ops/s
[info] # Warmup Iteration   2: 1108946.063 ops/s
[info] # Warmup Iteration   3: 1110998.405 ops/s
[info] Iteration   1: 1107905.255 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1107427.682 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1102715.354 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1104113.532 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1104251.507 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1105282.666 ±(99.9%) 8717.334 ops/s [Average]
[info]   (min, avg, max) = (1102715.354, 1105282.666, 1107905.255), stdev = 2263.864
[info]   CI (99.9%): [1096565.332, 1114000.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Run progress: 32.53% complete, ETA 00:42:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22711.106 ops/s
[info] # Warmup Iteration   2: 33393.314 ops/s
[info] # Warmup Iteration   3: 33667.747 ops/s
[info] Iteration   1: 33778.051 ops/s
[info]                  ·gc.alloc.rate:                   1826.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              85137.869 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1960.038 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91343.807 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 34115.054 ops/s
[info]                  ·gc.alloc.rate:                   1844.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              85128.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1652.059 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76230.738 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 33989.836 ops/s
[info]                  ·gc.alloc.rate:                   1838.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              85128.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2000.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92658.400 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 33765.414 ops/s
[info]                  ·gc.alloc.rate:                   1826.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              85128.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1679.017 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78262.831 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 33658.324 ops/s
[info]                  ·gc.alloc.rate:                   1820.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              85128.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.521 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78869.811 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   33861.336 ±(99.9%) 715.838 ops/s [Average]
[info]   (min, avg, max) = (33658.324, 33861.336, 34115.054), stdev = 185.901
[info]   CI (99.9%): [33145.498, 34577.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1831.297 ±(99.9%) 38.272 MB/sec [Average]
[info]   (min, avg, max) = (1820.344, 1831.297, 1844.879), stdev = 9.939
[info]   CI (99.9%): [1793.025, 1869.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   85129.984 ±(99.9%) 16.974 B/op [Average]
[info]   (min, avg, max) = (85128.012, 85129.984, 85137.869), stdev = 4.408
[info]   CI (99.9%): [85113.010, 85146.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.679 ±(99.9%) 5.574 B/op [Average]
[info]   (min, avg, max) = (1.941, 3.679, 5.840), stdev = 1.447
[info]   CI (99.9%): [≈ 0, 9.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1795.664 ±(99.9%) 653.459 MB/sec [Average]
[info]   (min, avg, max) = (1652.059, 1795.664, 2000.687), stdev = 169.701
[info]   CI (99.9%): [1142.206, 2449.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   83473.117 ±(99.9%) 30265.348 B/op [Average]
[info]   (min, avg, max) = (76230.738, 83473.117, 92658.400), stdev = 7859.815
[info]   CI (99.9%): [53207.770, 113738.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 8.000), stdev = 1.414
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Run progress: 32.88% complete, ETA 00:41:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 114163.805 ops/s
[info] # Warmup Iteration   2: 194082.873 ops/s
[info] # Warmup Iteration   3: 194580.029 ops/s
[info] Iteration   1: 196076.387 ops/s
[info]                  ·gc.alloc.rate:                   1042.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.352 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7894.543 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 195486.365 ops/s
[info]                  ·gc.alloc.rate:                   1039.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      988.752 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7961.513 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 195405.634 ops/s
[info]                  ·gc.alloc.rate:                   1038.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995.316 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8018.589 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 195312.407 ops/s
[info]                  ·gc.alloc.rate:                   1038.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      999.460 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8054.696 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 190330.671 ops/s
[info]                  ·gc.alloc.rate:                   1012.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.780 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11077.070 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   194522.293 ±(99.9%) 9095.779 ops/s [Average]
[info]   (min, avg, max) = (190330.671, 194522.293, 196076.387), stdev = 2362.145
[info]   CI (99.9%): [185426.514, 203618.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1034.140 ±(99.9%) 47.797 MB/sec [Average]
[info]   (min, avg, max) = (1012.116, 1034.140, 1042.326), stdev = 12.413
[info]   CI (99.9%): [986.343, 1081.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8368.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8368.002, 8368.002, 8368.002), stdev = 0.001
[info]   CI (99.9%): [8368.002, 8368.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.539 ±(99.9%) 1.066 B/op [Average]
[info]   (min, avg, max) = (0.168, 0.539, 0.835), stdev = 0.277
[info]   CI (99.9%): [≈ 0, 1.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1061.332 ±(99.9%) 599.850 MB/sec [Average]
[info]   (min, avg, max) = (983.352, 1061.332, 1339.780), stdev = 155.779
[info]   CI (99.9%): [461.482, 1661.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8601.282 ±(99.9%) 5334.426 B/op [Average]
[info]   (min, avg, max) = (7894.543, 8601.282, 11077.070), stdev = 1385.334
[info]   CI (99.9%): [3266.856, 13935.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Run progress: 33.22% complete, ETA 00:41:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 264196.274 ops/s
[info] # Warmup Iteration   2: 271302.114 ops/s
[info] # Warmup Iteration   3: 273796.126 ops/s
[info] Iteration   1: 280551.462 ops/s
[info]                  ·gc.alloc.rate:                   730.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.817 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      986.763 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5536.207 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 280991.530 ops/s
[info]                  ·gc.alloc.rate:                   731.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.511 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3671.438 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 280947.070 ops/s
[info]                  ·gc.alloc.rate:                   731.225 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.198 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3675.731 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 280112.517 ops/s
[info]                  ·gc.alloc.rate:                   729.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.056 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3690.508 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 278284.414 ops/s
[info]                  ·gc.alloc.rate:                   724.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      988.981 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5592.742 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   280177.398 ±(99.9%) 4297.708 ops/s [Average]
[info]   (min, avg, max) = (278284.414, 280177.398, 280991.530), stdev = 1116.101
[info]   CI (99.9%): [275879.691, 284475.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   729.232 ±(99.9%) 11.102 MB/sec [Average]
[info]   (min, avg, max) = (724.308, 729.232, 731.314), stdev = 2.883
[info]   CI (99.9%): [718.130, 740.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.491 ±(99.9%) 0.863 B/op [Average]
[info]   (min, avg, max) = (0.234, 0.491, 0.817), stdev = 0.224
[info]   CI (99.9%): [≈ 0, 1.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   788.902 ±(99.9%) 699.418 MB/sec [Average]
[info]   (min, avg, max) = (655.511, 788.902, 988.981), stdev = 181.637
[info]   CI (99.9%): [89.484, 1488.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4433.325 ±(99.9%) 3976.988 B/op [Average]
[info]   (min, avg, max) = (3671.438, 4433.325, 5592.742), stdev = 1032.811
[info]   CI (99.9%): [456.338, 8410.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Run progress: 33.56% complete, ETA 00:41:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28949.895 ops/s
[info] # Warmup Iteration   2: 66732.626 ops/s
[info] # Warmup Iteration   3: 66933.476 ops/s
[info] Iteration   1: 66899.477 ops/s
[info]                  ·gc.alloc.rate:                   2736.279 MB/sec
[info]                  ·gc.alloc.rate.norm:              64384.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2682.047 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63107.943 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 66756.218 ops/s
[info]                  ·gc.alloc.rate:                   2730.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              64384.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2702.071 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63715.201 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 65624.916 ops/s
[info]                  ·gc.alloc.rate:                   2684.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              64384.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2711.934 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65052.737 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 66616.943 ops/s
[info]                  ·gc.alloc.rate:                   2725.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              64384.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2718.509 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64210.093 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 66874.282 ops/s
[info]                  ·gc.alloc.rate:                   2736.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              64384.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2721.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64041.758 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   66554.367 ±(99.9%) 2046.632 ops/s [Average]
[info]   (min, avg, max) = (65624.916, 66554.367, 66899.477), stdev = 531.504
[info]   CI (99.9%): [64507.736, 68600.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2722.604 ±(99.9%) 84.685 MB/sec [Average]
[info]   (min, avg, max) = (2684.056, 2722.604, 2736.379), stdev = 21.993
[info]   CI (99.9%): [2637.919, 2807.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   64384.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (64384.006, 64384.006, 64384.007), stdev = 0.001
[info]   CI (99.9%): [64384.005, 64384.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.146), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.266 ±(99.9%) 3.456 B/op [Average]
[info]   (min, avg, max) = (0.980, 2.266, 3.443), stdev = 0.897
[info]   CI (99.9%): [≈ 0, 5.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2707.279 ±(99.9%) 61.592 MB/sec [Average]
[info]   (min, avg, max) = (2682.047, 2707.279, 2721.833), stdev = 15.995
[info]   CI (99.9%): [2645.687, 2768.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   64025.546 ±(99.9%) 2741.643 B/op [Average]
[info]   (min, avg, max) = (63107.943, 64025.546, 65052.737), stdev = 711.996
[info]   CI (99.9%): [61283.904, 66767.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   40.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.000, 8.000), stdev = 0.001
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Run progress: 33.90% complete, ETA 00:41:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 351227.430 ops/s
[info] # Warmup Iteration   2: 567039.042 ops/s
[info] # Warmup Iteration   3: 568959.422 ops/s
[info] Iteration   1: 569272.775 ops/s
[info]                  ·gc.alloc.rate:                   575.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      646.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1786.396 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 567619.209 ops/s
[info]                  ·gc.alloc.rate:                   574.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      650.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1804.546 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 569827.785 ops/s
[info]                  ·gc.alloc.rate:                   576.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.810 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1808.616 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 570826.107 ops/s
[info]                  ·gc.alloc.rate:                   577.506 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.792 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 906.375 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 568787.990 ops/s
[info]                  ·gc.alloc.rate:                   575.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.693 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1822.963 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   569266.773 ±(99.9%) 4592.606 ops/s [Average]
[info]   (min, avg, max) = (567619.209, 569266.773, 570826.107), stdev = 1192.685
[info]   CI (99.9%): [564674.167, 573859.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   575.789 ±(99.9%) 4.916 MB/sec [Average]
[info]   (min, avg, max) = (574.083, 575.789, 577.506), stdev = 1.277
[info]   CI (99.9%): [570.873, 580.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.001, 1592.001), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.231 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.146), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.196 ±(99.9%) 0.638 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.196, 0.403), stdev = 0.166
[info]   CI (99.9%): [≈ 0, 0.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   587.811 ±(99.9%) 557.853 MB/sec [Average]
[info]   (min, avg, max) = (328.792, 587.811, 658.693), stdev = 144.873
[info]   CI (99.9%): [29.958, 1145.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1625.779 ±(99.9%) 1549.386 B/op [Average]
[info]   (min, avg, max) = (906.375, 1625.779, 1822.963), stdev = 402.371
[info]   CI (99.9%): [76.394, 3175.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Run progress: 34.25% complete, ETA 00:41:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 479120.103 ops/s
[info] # Warmup Iteration   2: 520801.027 ops/s
[info] # Warmup Iteration   3: 529098.189 ops/s
[info] Iteration   1: 541729.772 ops/s
[info]                  ·gc.alloc.rate:                   415.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.655 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1486.307 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 533670.271 ops/s
[info]                  ·gc.alloc.rate:                   409.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 968.519 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 543041.586 ops/s
[info]                  ·gc.alloc.rate:                   416.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.348 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 951.801 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 529049.939 ops/s
[info]                  ·gc.alloc.rate:                   406.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.774 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1942.123 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 543648.689 ops/s
[info]                  ·gc.alloc.rate:                   417.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.366 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 944.945 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   538228.051 ±(99.9%) 25090.320 ops/s [Average]
[info]   (min, avg, max) = (529049.939, 538228.051, 543648.689), stdev = 6515.876
[info]   CI (99.9%): [513137.731, 563318.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   413.069 ±(99.9%) 19.310 MB/sec [Average]
[info]   (min, avg, max) = (406.025, 413.069, 417.220), stdev = 5.015
[info]   CI (99.9%): [393.759, 432.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.764 ±(99.9%) 6.286 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.764, 3.683), stdev = 1.632
[info]   CI (99.9%): [≈ 0, 7.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.252 ±(99.9%) 18.543 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.252, 10.865), stdev = 4.815
[info]   CI (99.9%): [≈ 0, 20.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   429.495 ±(99.9%) 570.180 MB/sec [Average]
[info]   (min, avg, max) = (326.366, 429.495, 652.774), stdev = 148.074
[info]   CI (99.9%): [≈ 0, 999.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1258.739 ±(99.9%) 1717.433 B/op [Average]
[info]   (min, avg, max) = (944.945, 1258.739, 1942.123), stdev = 446.012
[info]   CI (99.9%): [≈ 0, 2976.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 6.000), stdev = 2.074
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 34.59% complete, ETA 00:40:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 516308.345 ops/s
[info] # Warmup Iteration   2: 558772.682 ops/s
[info] # Warmup Iteration   3: 559139.448 ops/s
[info] Iteration   1: 551625.403 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 558059.180 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 558414.402 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 558929.335 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 559280.336 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   557261.731 ±(99.9%) 12266.044 ops/s [Average]
[info]   (min, avg, max) = (551625.403, 557261.731, 559280.336), stdev = 3185.453
[info]   CI (99.9%): [544995.687, 569527.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Run progress: 34.93% complete, ETA 00:40:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 167035.580 ops/s
[info] # Warmup Iteration   2: 309450.727 ops/s
[info] # Warmup Iteration   3: 314603.626 ops/s
[info] Iteration   1: 314517.699 ops/s
[info]                  ·gc.alloc.rate:                   866.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.412 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4901.741 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 311209.372 ops/s
[info]                  ·gc.alloc.rate:                   857.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      984.936 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4980.947 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 309707.817 ops/s
[info]                  ·gc.alloc.rate:                   853.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.745 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3347.844 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 314269.917 ops/s
[info]                  ·gc.alloc.rate:                   865.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.499 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4975.602 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 316161.678 ops/s
[info]                  ·gc.alloc.rate:                   871.063 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      665.185 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3311.174 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   313173.297 ±(99.9%) 10152.667 ops/s [Average]
[info]   (min, avg, max) = (309707.817, 313173.297, 316161.678), stdev = 2636.615
[info]   CI (99.9%): [303020.630, 323325.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   862.762 ±(99.9%) 28.006 MB/sec [Average]
[info]   (min, avg, max) = (853.182, 862.762, 871.063), stdev = 7.273
[info]   CI (99.9%): [834.756, 890.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4336.001, 4336.001, 4336.001), stdev = 0.001
[info]   CI (99.9%): [4336.001, 4336.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.250 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.100, 0.167), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.501 ±(99.9%) 1.258 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.501, 0.842), stdev = 0.327
[info]   CI (99.9%): [≈ 0, 1.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   856.355 ±(99.9%) 683.639 MB/sec [Average]
[info]   (min, avg, max) = (658.745, 856.355, 993.499), stdev = 177.539
[info]   CI (99.9%): [172.716, 1539.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4303.462 ±(99.9%) 3426.065 B/op [Average]
[info]   (min, avg, max) = (3311.174, 4303.462, 4980.947), stdev = 889.738
[info]   CI (99.9%): [877.397, 7729.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Run progress: 35.27% complete, ETA 00:40:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7100.670 ops/s
[info] # Warmup Iteration   2: 10532.214 ops/s
[info] # Warmup Iteration   3: 10748.461 ops/s
[info] Iteration   1: 10689.160 ops/s
[info]                  ·gc.alloc.rate:                   1366.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              201264.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1310.643 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 193003.888 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 10622.330 ops/s
[info]                  ·gc.alloc.rate:                   1358.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              201264.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.508 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 195226.217 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 10695.154 ops/s
[info]                  ·gc.alloc.rate:                   1367.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              201264.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1657.957 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 244011.026 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 10517.084 ops/s
[info]                  ·gc.alloc.rate:                   1345.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              201278.481 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334.903 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 199766.737 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 10556.037 ops/s
[info]                  ·gc.alloc.rate:                   1350.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              201280.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.971 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 200021.980 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   10615.953 ±(99.9%) 304.650 ops/s [Average]
[info]   (min, avg, max) = (10517.084, 10615.953, 10695.154), stdev = 79.117
[info]   CI (99.9%): [10311.303, 10920.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1357.583 ±(99.9%) 38.137 MB/sec [Average]
[info]   (min, avg, max) = (1345.005, 1357.583, 1367.508), stdev = 9.904
[info]   CI (99.9%): [1319.446, 1395.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   201270.128 ±(99.9%) 32.172 B/op [Average]
[info]   (min, avg, max) = (201264.038, 201270.128, 201280.039), stdev = 8.355
[info]   CI (99.9%): [201237.956, 201302.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11.722 ±(99.9%) 15.469 B/op [Average]
[info]   (min, avg, max) = (6.207, 11.722, 15.576), stdev = 4.017
[info]   CI (99.9%): [≈ 0, 27.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1392.596 ±(99.9%) 573.288 MB/sec [Average]
[info]   (min, avg, max) = (1310.643, 1392.596, 1657.957), stdev = 148.881
[info]   CI (99.9%): [819.309, 1965.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   206405.969 ±(99.9%) 81765.630 B/op [Average]
[info]   (min, avg, max) = (193003.888, 206405.969, 244011.026), stdev = 21234.274
[info]   CI (99.9%): [124640.339, 288171.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Run progress: 35.62% complete, ETA 00:40:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6254.669 ops/s
[info] # Warmup Iteration   2: 11038.636 ops/s
[info] # Warmup Iteration   3: 11007.626 ops/s
[info] Iteration   1: 11211.121 ops/s
[info]                  ·gc.alloc.rate:                   1328.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              186544.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1319.933 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 185328.842 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 11211.241 ops/s
[info]                  ·gc.alloc.rate:                   1328.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              186544.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.869 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 186561.056 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 11214.839 ops/s
[info]                  ·gc.alloc.rate:                   1329.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              186546.267 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.446 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 187709.781 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 11174.435 ops/s
[info]                  ·gc.alloc.rate:                   1324.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              186577.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.369 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 189225.892 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 11026.727 ops/s
[info]                  ·gc.alloc.rate:                   1307.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              186576.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.720 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 192525.741 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   11167.673 ±(99.9%) 309.983 ops/s [Average]
[info]   (min, avg, max) = (11026.727, 11167.673, 11214.839), stdev = 80.502
[info]   CI (99.9%): [10857.690, 11477.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1323.619 ±(99.9%) 36.399 MB/sec [Average]
[info]   (min, avg, max) = (1307.040, 1323.619, 1329.156), stdev = 9.453
[info]   CI (99.9%): [1287.220, 1360.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   186557.488 ±(99.9%) 67.102 B/op [Average]
[info]   (min, avg, max) = (186544.039, 186557.488, 186577.055), stdev = 17.426
[info]   CI (99.9%): [186490.386, 186624.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.015
[info]   CI (99.9%): [0.006, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   8.799 ±(99.9%) 7.935 B/op [Average]
[info]   (min, avg, max) = (5.863, 8.799, 11.689), stdev = 2.061
[info]   CI (99.9%): [0.864, 16.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1335.667 ±(99.9%) 44.183 MB/sec [Average]
[info]   (min, avg, max) = (1319.933, 1335.667, 1348.720), stdev = 11.474
[info]   CI (99.9%): [1291.484, 1379.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   188270.262 ±(99.9%) 10704.134 B/op [Average]
[info]   (min, avg, max) = (185328.842, 188270.262, 192525.741), stdev = 2779.830
[info]   CI (99.9%): [177566.128, 198974.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 35.96% complete, ETA 00:39:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 134175.026 ops/s
[info] # Warmup Iteration   2: 143857.138 ops/s
[info] # Warmup Iteration   3: 146347.142 ops/s
[info] Iteration   1: 144905.608 ops/s
[info]                  ·gc.alloc.rate:                   942.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.750 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10751.657 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 147547.622 ops/s
[info]                  ·gc.alloc.rate:                   959.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.480 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10566.268 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 144887.322 ops/s
[info]                  ·gc.alloc.rate:                   942.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.411 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10789.099 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 147191.753 ops/s
[info]                  ·gc.alloc.rate:                   957.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.774 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10659.199 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 146609.791 ops/s
[info]                  ·gc.alloc.rate:                   953.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1000.135 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10737.335 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   146228.419 ±(99.9%) 4856.288 ops/s [Average]
[info]   (min, avg, max) = (144887.322, 146228.419, 147547.622), stdev = 1261.163
[info]   CI (99.9%): [141372.131, 151084.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   951.357 ±(99.9%) 31.386 MB/sec [Average]
[info]   (min, avg, max) = (942.649, 951.357, 959.896), stdev = 8.151
[info]   CI (99.9%): [919.971, 982.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10240.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10240.003, 10240.003, 10240.003), stdev = 0.001
[info]   CI (99.9%): [10240.002, 10240.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.104), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.674 ±(99.9%) 1.629 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.674, 1.131), stdev = 0.423
[info]   CI (99.9%): [≈ 0, 2.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   994.110 ±(99.9%) 16.793 MB/sec [Average]
[info]   (min, avg, max) = (989.750, 994.110, 1000.135), stdev = 4.361
[info]   CI (99.9%): [977.317, 1010.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10700.712 ±(99.9%) 341.968 B/op [Average]
[info]   (min, avg, max) = (10566.268, 10700.712, 10789.099), stdev = 88.808
[info]   CI (99.9%): [10358.744, 11042.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Run progress: 36.30% complete, ETA 00:39:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4538.851 ops/s
[info] # Warmup Iteration   2: 8700.341 ops/s
[info] # Warmup Iteration   3: 8815.703 ops/s
[info] Iteration   1: 8905.897 ops/s
[info]                  ·gc.alloc.rate:                   1646.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              291032.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1658.776 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 293161.038 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 8870.985 ops/s
[info]                  ·gc.alloc.rate:                   1640.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              291032.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1671.807 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 296562.772 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 8934.632 ops/s
[info]                  ·gc.alloc.rate:                   1651.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              291032.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1681.137 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 296173.436 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 8853.478 ops/s
[info]                  ·gc.alloc.rate:                   1637.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              291032.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1689.162 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 300185.224 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 8881.072 ops/s
[info]                  ·gc.alloc.rate:                   1642.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              291034.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1693.547 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 300065.315 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   8889.213 ±(99.9%) 122.023 ops/s [Average]
[info]   (min, avg, max) = (8853.478, 8889.213, 8934.632), stdev = 31.689
[info]   CI (99.9%): [8767.190, 9011.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1643.908 ±(99.9%) 21.466 MB/sec [Average]
[info]   (min, avg, max) = (1637.656, 1643.908, 1651.953), stdev = 5.575
[info]   CI (99.9%): [1622.443, 1665.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   291032.450 ±(99.9%) 3.466 B/op [Average]
[info]   (min, avg, max) = (291032.046, 291032.450, 291034.061), stdev = 0.900
[info]   CI (99.9%): [291028.984, 291035.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   7.365 ±(99.9%) 20.059 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.365, 11.079), stdev = 5.209
[info]   CI (99.9%): [≈ 0, 27.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1678.886 ±(99.9%) 53.776 MB/sec [Average]
[info]   (min, avg, max) = (1658.776, 1678.886, 1693.547), stdev = 13.966
[info]   CI (99.9%): [1625.109, 1732.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   297229.557 ±(99.9%) 11372.499 B/op [Average]
[info]   (min, avg, max) = (293161.038, 297229.557, 300185.224), stdev = 2953.402
[info]   CI (99.9%): [285857.058, 308602.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Run progress: 36.64% complete, ETA 00:39:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17148.662 ops/s
[info] # Warmup Iteration   2: 22744.142 ops/s
[info] # Warmup Iteration   3: 22639.400 ops/s
[info] Iteration   1: 22860.357 ops/s
[info]                  ·gc.alloc.rate:                   1042.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              71760.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.363 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67413.371 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 23045.263 ops/s
[info]                  ·gc.alloc.rate:                   1050.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              71760.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.054 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67011.690 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 22613.640 ops/s
[info]                  ·gc.alloc.rate:                   1030.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              71735.386 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.454 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68589.981 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 23106.426 ops/s
[info]                  ·gc.alloc.rate:                   1053.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              71736.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.183 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67447.349 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 23139.900 ops/s
[info]                  ·gc.alloc.rate:                   1054.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              71736.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.227 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90345.268 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   22953.117 ±(99.9%) 840.843 ops/s [Average]
[info]   (min, avg, max) = (22613.640, 22953.117, 23139.900), stdev = 218.364
[info]   CI (99.9%): [22112.274, 23793.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1046.302 ±(99.9%) 38.221 MB/sec [Average]
[info]   (min, avg, max) = (1030.645, 1046.302, 1054.640), stdev = 9.926
[info]   CI (99.9%): [1008.081, 1084.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   71745.492 ±(99.9%) 51.079 B/op [Average]
[info]   (min, avg, max) = (71735.386, 71745.492, 71760.022), stdev = 13.265
[info]   CI (99.9%): [71694.414, 71796.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.083), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.993 ±(99.9%) 5.990 B/op [Average]
[info]   (min, avg, max) = (1.433, 3.993, 5.687), stdev = 1.556
[info]   CI (99.9%): [≈ 0, 9.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1052.856 ±(99.9%) 592.977 MB/sec [Average]
[info]   (min, avg, max) = (979.363, 1052.856, 1328.227), stdev = 153.994
[info]   CI (99.9%): [459.879, 1645.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   72161.532 ±(99.9%) 39207.312 B/op [Average]
[info]   (min, avg, max) = (67011.690, 72161.532, 90345.268), stdev = 10182.014
[info]   CI (99.9%): [32954.220, 111368.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 36.99% complete, ETA 00:39:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 642385.643 ops/s
[info] # Warmup Iteration   2: 707167.967 ops/s
[info] # Warmup Iteration   3: 728791.266 ops/s
[info] Iteration   1: 726494.989 ops/s
[info]                  ·gc.alloc.rate:                   1310.733 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1306.720 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2831.306 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 730781.812 ops/s
[info]                  ·gc.alloc.rate:                   1318.557 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1313.487 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2829.080 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 727233.127 ops/s
[info]                  ·gc.alloc.rate:                   1312.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.799 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2863.079 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 731823.301 ops/s
[info]                  ·gc.alloc.rate:                   1320.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331.075 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2862.417 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 728799.472 ops/s
[info]                  ·gc.alloc.rate:                   1315.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.702 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2890.109 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   729026.540 ±(99.9%) 8734.152 ops/s [Average]
[info]   (min, avg, max) = (726494.989, 729026.540, 731823.301), stdev = 2268.232
[info]   CI (99.9%): [720292.388, 737760.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1315.514 ±(99.9%) 16.098 MB/sec [Average]
[info]   (min, avg, max) = (1310.733, 1315.514, 1320.650), stdev = 4.181
[info]   CI (99.9%): [1299.416, 1331.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2840.001, 2840.001, 2840.001), stdev = 0.001
[info]   CI (99.9%): [2840.000, 2840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.092, 0.125), stdev = 0.019
[info]   CI (99.9%): [0.020, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.198 ±(99.9%) 0.153 B/op [Average]
[info]   (min, avg, max) = (0.179, 0.198, 0.269), stdev = 0.040
[info]   CI (99.9%): [0.044, 0.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1322.557 ±(99.9%) 49.699 MB/sec [Average]
[info]   (min, avg, max) = (1306.720, 1322.557, 1338.702), stdev = 12.907
[info]   CI (99.9%): [1272.858, 1372.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2855.198 ±(99.9%) 97.908 B/op [Average]
[info]   (min, avg, max) = (2829.080, 2855.198, 2890.109), stdev = 25.426
[info]   CI (99.9%): [2757.291, 2953.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 37.33% complete, ETA 00:39:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 540823.058 ops/s
[info] # Warmup Iteration   2: 581584.108 ops/s
[info] # Warmup Iteration   3: 582355.231 ops/s
[info] Iteration   1: 582119.846 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 579428.036 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 582239.092 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 581900.030 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 582090.934 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   581555.588 ±(99.9%) 4603.604 ops/s [Average]
[info]   (min, avg, max) = (579428.036, 581555.588, 582239.092), stdev = 1195.541
[info]   CI (99.9%): [576951.983, 586159.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Run progress: 37.67% complete, ETA 00:38:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16948.303 ops/s
[info] # Warmup Iteration   2: 24657.380 ops/s
[info] # Warmup Iteration   3: 25010.115 ops/s
[info] Iteration   1: 25103.864 ops/s
[info]                  ·gc.alloc.rate:                   1059.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              66408.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      969.896 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60806.383 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 24598.001 ops/s
[info]                  ·gc.alloc.rate:                   1038.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              66490.384 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      973.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62270.122 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 24782.748 ops/s
[info]                  ·gc.alloc.rate:                   1045.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              66392.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1304.148 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82830.186 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 25402.856 ops/s
[info]                  ·gc.alloc.rate:                   1071.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              66392.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.518 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61060.660 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 25200.195 ops/s
[info]                  ·gc.alloc.rate:                   1063.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              66392.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61885.288 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   25017.533 ±(99.9%) 1248.380 ops/s [Average]
[info]   (min, avg, max) = (24598.001, 25017.533, 25402.856), stdev = 324.200
[info]   CI (99.9%): [23769.153, 26265.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1055.666 ±(99.9%) 51.213 MB/sec [Average]
[info]   (min, avg, max) = (1038.984, 1055.666, 1071.566), stdev = 13.300
[info]   CI (99.9%): [1004.453, 1106.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66414.890 ±(99.9%) 164.681 B/op [Average]
[info]   (min, avg, max) = (66392.016, 66414.890, 66490.384), stdev = 42.767
[info]   CI (99.9%): [66250.209, 66579.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.125), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4.458 ±(99.9%) 9.114 B/op [Average]
[info]   (min, avg, max) = (1.290, 4.458, 7.801), stdev = 2.367
[info]   CI (99.9%): [≈ 0, 13.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1044.726 ±(99.9%) 559.428 MB/sec [Average]
[info]   (min, avg, max) = (969.896, 1044.726, 1304.148), stdev = 145.282
[info]   CI (99.9%): [485.298, 1604.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   65770.528 ±(99.9%) 36793.575 B/op [Average]
[info]   (min, avg, max) = (60806.383, 65770.528, 82830.186), stdev = 9555.175
[info]   CI (99.9%): [28976.953, 102564.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Run progress: 38.01% complete, ETA 00:38:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19627.404 ops/s
[info] # Warmup Iteration   2: 27289.208 ops/s
[info] # Warmup Iteration   3: 27512.571 ops/s
[info] Iteration   1: 27870.237 ops/s
[info]                  ·gc.alloc.rate:                   1512.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              85440.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1640.756 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92669.667 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 27655.143 ops/s
[info]                  ·gc.alloc.rate:                   1501.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              85439.436 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1321.351 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75212.393 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 27920.519 ops/s
[info]                  ·gc.alloc.rate:                   1515.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              85440.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1663.964 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93814.622 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 28135.868 ops/s
[info]                  ·gc.alloc.rate:                   1527.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              85440.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1674.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93656.792 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 28099.476 ops/s
[info]                  ·gc.alloc.rate:                   1525.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              85440.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.737 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75367.333 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   27936.249 ±(99.9%) 745.963 ops/s [Average]
[info]   (min, avg, max) = (27655.143, 27936.249, 28135.868), stdev = 193.724
[info]   CI (99.9%): [27190.286, 28682.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1516.454 ±(99.9%) 41.200 MB/sec [Average]
[info]   (min, avg, max) = (1501.022, 1516.454, 1527.477), stdev = 10.699
[info]   CI (99.9%): [1475.254, 1557.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   85439.900 ±(99.9%) 0.999 B/op [Average]
[info]   (min, avg, max) = (85439.436, 85439.900, 85440.020), stdev = 0.259
[info]   CI (99.9%): [85438.901, 85440.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5.396 ±(99.9%) 6.887 B/op [Average]
[info]   (min, avg, max) = (2.351, 5.396, 7.108), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 12.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1529.236 ±(99.9%) 690.281 MB/sec [Average]
[info]   (min, avg, max) = (1321.351, 1529.236, 1674.375), stdev = 179.264
[info]   CI (99.9%): [838.956, 2219.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   86144.161 ±(99.9%) 38192.361 B/op [Average]
[info]   (min, avg, max) = (75212.393, 86144.161, 93814.622), stdev = 9918.435
[info]   CI (99.9%): [47951.800, 124336.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.140
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Run progress: 38.36% complete, ETA 00:38:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18118.207 ops/s
[info] # Warmup Iteration   2: 31817.283 ops/s
[info] # Warmup Iteration   3: 31837.230 ops/s
[info] Iteration   1: 31725.136 ops/s
[info]                  ·gc.alloc.rate:                   1448.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              71884.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1653.941 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82071.809 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 31919.904 ops/s
[info]                  ·gc.alloc.rate:                   1457.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              71856.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1333.428 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65755.651 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 31938.882 ops/s
[info]                  ·gc.alloc.rate:                   1458.676 MB/sec
[info]                  ·gc.alloc.rate.norm:              71856.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.709 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66044.794 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 31805.464 ops/s
[info]                  ·gc.alloc.rate:                   1451.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              71856.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1683.420 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83313.189 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 31776.877 ops/s
[info]                  ·gc.alloc.rate:                   1450.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              71856.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.413 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66927.926 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   31833.253 ±(99.9%) 356.603 ops/s [Average]
[info]   (min, avg, max) = (31725.136, 31833.253, 31938.882), stdev = 92.609
[info]   CI (99.9%): [31476.649, 32189.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1453.460 ±(99.9%) 16.413 MB/sec [Average]
[info]   (min, avg, max) = (1448.650, 1453.460, 1458.676), stdev = 4.262
[info]   CI (99.9%): [1437.047, 1469.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   71861.790 ±(99.9%) 49.739 B/op [Average]
[info]   (min, avg, max) = (71856.013, 71861.790, 71884.897), stdev = 12.917
[info]   CI (99.9%): [71812.051, 71911.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.468 ±(99.9%) 8.209 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.468, 5.132), stdev = 2.132
[info]   CI (99.9%): [≈ 0, 10.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1472.582 ±(99.9%) 690.920 MB/sec [Average]
[info]   (min, avg, max) = (1333.428, 1472.582, 1683.420), stdev = 179.430
[info]   CI (99.9%): [781.662, 2163.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   72822.674 ±(99.9%) 34774.743 B/op [Average]
[info]   (min, avg, max) = (65755.651, 72822.674, 83313.189), stdev = 9030.890
[info]   CI (99.9%): [38047.931, 107597.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Run progress: 38.70% complete, ETA 00:38:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 248858.561 ops/s
[info] # Warmup Iteration   2: 270242.340 ops/s
[info] # Warmup Iteration   3: 271728.243 ops/s
[info] Iteration   1: 267090.810 ops/s
[info]                  ·gc.alloc.rate:                   695.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.724 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3899.883 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 272618.249 ops/s
[info]                  ·gc.alloc.rate:                   709.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.185 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5715.044 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 272684.735 ops/s
[info]                  ·gc.alloc.rate:                   709.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.098 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3810.375 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 272624.275 ops/s
[info]                  ·gc.alloc.rate:                   709.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.118 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3815.059 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 272771.519 ops/s
[info]                  ·gc.alloc.rate:                   709.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.120 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3820.705 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   271557.917 ±(99.9%) 9618.715 ops/s [Average]
[info]   (min, avg, max) = (267090.810, 271557.917, 272771.519), stdev = 2497.950
[info]   CI (99.9%): [261939.202, 281176.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   706.776 ±(99.9%) 25.351 MB/sec [Average]
[info]   (min, avg, max) = (695.000, 706.776, 709.828), stdev = 6.584
[info]   CI (99.9%): [681.425, 732.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.411 ±(99.9%) 0.545 B/op [Average]
[info]   (min, avg, max) = (0.240, 0.411, 0.613), stdev = 0.141
[info]   CI (99.9%): [≈ 0, 0.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   727.049 ±(99.9%) 566.427 MB/sec [Average]
[info]   (min, avg, max) = (660.098, 727.049, 990.185), stdev = 147.099
[info]   CI (99.9%): [160.621, 1293.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4212.213 ±(99.9%) 3238.054 B/op [Average]
[info]   (min, avg, max) = (3810.375, 4212.213, 5715.044), stdev = 840.912
[info]   CI (99.9%): [974.159, 7450.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Run progress: 39.04% complete, ETA 00:38:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9009.259 ops/s
[info] # Warmup Iteration   2: 18057.024 ops/s
[info] # Warmup Iteration   3: 18024.517 ops/s
[info] Iteration   1: 18276.234 ops/s
[info]                  ·gc.alloc.rate:                   1797.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              154840.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1995.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 171856.329 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 18129.946 ops/s
[info]                  ·gc.alloc.rate:                   1783.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              154840.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1675.410 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 145463.681 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 18153.426 ops/s
[info]                  ·gc.alloc.rate:                   1785.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              154840.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.391 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 146051.038 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 18108.346 ops/s
[info]                  ·gc.alloc.rate:                   1781.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              154840.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.553 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 146943.067 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 18289.295 ops/s
[info]                  ·gc.alloc.rate:                   1799.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              154840.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.398 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 175001.505 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   18191.449 ±(99.9%) 327.288 ops/s [Average]
[info]   (min, avg, max) = (18108.346, 18191.449, 18289.295), stdev = 84.996
[info]   CI (99.9%): [17864.162, 18518.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1789.485 ±(99.9%) 32.059 MB/sec [Average]
[info]   (min, avg, max) = (1781.406, 1789.485, 1799.136), stdev = 8.326
[info]   CI (99.9%): [1757.426, 1821.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   154840.024 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (154840.022, 154840.024, 154840.030), stdev = 0.003
[info]   CI (99.9%): [154840.012, 154840.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   7.921 ±(99.9%) 10.482 B/op [Average]
[info]   (min, avg, max) = (5.414, 7.921, 10.843), stdev = 2.722
[info]   CI (99.9%): [≈ 0, 18.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1815.809 ±(99.9%) 700.115 MB/sec [Average]
[info]   (min, avg, max) = (1675.410, 1815.809, 2033.398), stdev = 181.818
[info]   CI (99.9%): [1115.693, 2515.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   157063.124 ±(99.9%) 57722.844 B/op [Average]
[info]   (min, avg, max) = (145463.681, 157063.124, 175001.505), stdev = 14990.439
[info]   CI (99.9%): [99340.280, 214785.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 1.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Run progress: 39.38% complete, ETA 00:37:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39116.871 ops/s
[info] # Warmup Iteration   2: 52796.273 ops/s
[info] # Warmup Iteration   3: 52648.716 ops/s
[info] Iteration   1: 53822.572 ops/s
[info]                  ·gc.alloc.rate:                   1419.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              41528.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.082 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38286.046 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 53796.176 ops/s
[info]                  ·gc.alloc.rate:                   1419.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              41528.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.654 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38537.692 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 53050.102 ops/s
[info]                  ·gc.alloc.rate:                   1399.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              41528.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1658.436 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49209.436 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 52914.844 ops/s
[info]                  ·gc.alloc.rate:                   1396.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              41528.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1335.480 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39724.792 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 52791.888 ops/s
[info]                  ·gc.alloc.rate:                   1392.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              41528.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.724 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40034.264 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   53275.116 ±(99.9%) 1910.971 ops/s [Average]
[info]   (min, avg, max) = (52791.888, 53275.116, 53822.572), stdev = 496.273
[info]   CI (99.9%): [51364.145, 55186.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1405.580 ±(99.9%) 50.505 MB/sec [Average]
[info]   (min, avg, max) = (1392.823, 1405.580, 1419.932), stdev = 13.116
[info]   CI (99.9%): [1355.074, 1456.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   41528.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (41528.008, 41528.008, 41528.008), stdev = 0.001
[info]   CI (99.9%): [41528.007, 41528.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.213 ±(99.9%) 4.280 B/op [Average]
[info]   (min, avg, max) = (1.217, 2.213, 3.654), stdev = 1.112
[info]   CI (99.9%): [≈ 0, 6.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1392.598 ±(99.9%) 574.601 MB/sec [Average]
[info]   (min, avg, max) = (1309.082, 1392.598, 1658.436), stdev = 149.222
[info]   CI (99.9%): [817.997, 1967.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   41158.446 ±(99.9%) 17567.613 B/op [Average]
[info]   (min, avg, max) = (38286.046, 41158.446, 49209.436), stdev = 4562.253
[info]   CI (99.9%): [23590.833, 58726.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.140
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Run progress: 39.73% complete, ETA 00:37:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 947368.966 ops/s
[info] # Warmup Iteration   2: 1138746.403 ops/s
[info] # Warmup Iteration   3: 1149911.916 ops/s
[info] Iteration   1: 1155137.716 ops/s
[info]                  ·gc.alloc.rate:                   1238.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.681 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1335.075 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1151100.086 ops/s
[info]                  ·gc.alloc.rate:                   1234.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1311.669 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1793.865 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1155423.820 ops/s
[info]                  ·gc.alloc.rate:                   1239.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1319.882 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1797.990 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1150892.653 ops/s
[info]                  ·gc.alloc.rate:                   1234.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.149 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1816.429 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1148923.255 ops/s
[info]                  ·gc.alloc.rate:                   1232.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.236 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1371.518 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1152295.506 ±(99.9%) 10998.563 ops/s [Average]
[info]   (min, avg, max) = (1148923.255, 1152295.506, 1155423.820), stdev = 2856.292
[info]   CI (99.9%): [1141296.943, 1163294.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1235.716 ±(99.9%) 11.632 MB/sec [Average]
[info]   (min, avg, max) = (1232.275, 1235.716, 1239.140), stdev = 3.021
[info]   CI (99.9%): [1224.084, 1247.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1688.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1688.000, 1688.000, 1688.000), stdev = 0.001
[info]   CI (99.9%): [1688.000, 1688.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.096, 0.104), stdev = 0.011
[info]   CI (99.9%): [0.052, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.131 ±(99.9%) 0.059 B/op [Average]
[info]   (min, avg, max) = (0.114, 0.131, 0.142), stdev = 0.015
[info]   CI (99.9%): [0.072, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1188.123 ±(99.9%) 695.801 MB/sec [Average]
[info]   (min, avg, max) = (979.681, 1188.123, 1328.149), stdev = 180.697
[info]   CI (99.9%): [492.323, 1883.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1622.975 ±(99.9%) 949.820 B/op [Average]
[info]   (min, avg, max) = (1335.075, 1622.975, 1816.429), stdev = 246.665
[info]   CI (99.9%): [673.156, 2572.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 40.07% complete, ETA 00:37:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 665255.821 ops/s
[info] # Warmup Iteration   2: 716258.173 ops/s
[info] # Warmup Iteration   3: 715780.277 ops/s
[info] Iteration   1: 716381.452 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 714541.279 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 714063.413 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 714064.402 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 703661.780 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   712542.465 ±(99.9%) 19466.635 ops/s [Average]
[info]   (min, avg, max) = (703661.780, 712542.465, 716381.452), stdev = 5055.423
[info]   CI (99.9%): [693075.831, 732009.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Run progress: 40.41% complete, ETA 00:37:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42774.143 ops/s
[info] # Warmup Iteration   2: 58177.895 ops/s
[info] # Warmup Iteration   3: 58505.401 ops/s
[info] Iteration   1: 59094.200 ops/s
[info]                  ·gc.alloc.rate:                   1373.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              36584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1622.095 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43207.966 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 58930.455 ops/s
[info]                  ·gc.alloc.rate:                   1369.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              36584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1306.762 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34905.092 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 58981.960 ops/s
[info]                  ·gc.alloc.rate:                   1370.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              36584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.380 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35157.530 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 58968.013 ops/s
[info]                  ·gc.alloc.rate:                   1370.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              36584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1327.627 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35442.644 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 58793.530 ops/s
[info]                  ·gc.alloc.rate:                   1366.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              36584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1335.707 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35762.107 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   58953.631 ±(99.9%) 417.127 ops/s [Average]
[info]   (min, avg, max) = (58793.530, 58953.631, 59094.200), stdev = 108.326
[info]   CI (99.9%): [58536.505, 59370.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1370.131 ±(99.9%) 9.727 MB/sec [Average]
[info]   (min, avg, max) = (1366.405, 1370.131, 1373.421), stdev = 2.526
[info]   CI (99.9%): [1360.403, 1379.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   36584.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (36584.007, 36584.007, 36584.007), stdev = 0.001
[info]   CI (99.9%): [36584.006, 36584.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.166), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.667 ±(99.9%) 4.113 B/op [Average]
[info]   (min, avg, max) = (1.668, 2.667, 4.445), stdev = 1.068
[info]   CI (99.9%): [≈ 0, 6.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1381.914 ±(99.9%) 518.700 MB/sec [Average]
[info]   (min, avg, max) = (1306.762, 1381.914, 1622.095), stdev = 134.705
[info]   CI (99.9%): [863.214, 1900.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   36895.068 ±(99.9%) 13644.661 B/op [Average]
[info]   (min, avg, max) = (34905.092, 36895.068, 43207.966), stdev = 3543.475
[info]   CI (99.9%): [23250.407, 50539.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Run progress: 40.75% complete, ETA 00:36:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12366.289 ops/s
[info] # Warmup Iteration   2: 16766.346 ops/s
[info] # Warmup Iteration   3: 16993.917 ops/s
[info] Iteration   1: 17007.330 ops/s
[info]                  ·gc.alloc.rate:                   1517.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              140465.629 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1313.379 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 121563.308 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 16681.830 ops/s
[info]                  ·gc.alloc.rate:                   1488.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              140480.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1653.308 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 156023.131 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 16866.857 ops/s
[info]                  ·gc.alloc.rate:                   1505.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              140480.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331.415 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 124250.351 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 16699.267 ops/s
[info]                  ·gc.alloc.rate:                   1490.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              140479.069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.810 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1674.207 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 157801.208 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 16967.465 ops/s
[info]                  ·gc.alloc.rate:                   1514.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              140480.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.426 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 124815.764 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   16844.550 ±(99.9%) 576.595 ops/s [Average]
[info]   (min, avg, max) = (16681.830, 16844.550, 17007.330), stdev = 149.740
[info]   CI (99.9%): [16267.955, 17421.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1503.247 ±(99.9%) 51.329 MB/sec [Average]
[info]   (min, avg, max) = (1488.605, 1503.247, 1517.601), stdev = 13.330
[info]   CI (99.9%): [1451.918, 1554.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   140476.955 ±(99.9%) 24.432 B/op [Average]
[info]   (min, avg, max) = (140465.629, 140476.955, 140480.026), stdev = 6.345
[info]   CI (99.9%): [140452.523, 140501.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6.617 ±(99.9%) 8.621 B/op [Average]
[info]   (min, avg, max) = (3.885, 6.617, 9.810), stdev = 2.239
[info]   CI (99.9%): [≈ 0, 15.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1463.547 ±(99.9%) 705.700 MB/sec [Average]
[info]   (min, avg, max) = (1313.379, 1463.547, 1674.207), stdev = 183.268
[info]   CI (99.9%): [757.847, 2169.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   136890.753 ±(99.9%) 70578.498 B/op [Average]
[info]   (min, avg, max) = (121563.308, 136890.753, 157801.208), stdev = 18329.012
[info]   CI (99.9%): [66312.254, 207469.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 7.000), stdev = 1.304
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Run progress: 41.10% complete, ETA 00:36:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9901.921 ops/s
[info] # Warmup Iteration   2: 17648.015 ops/s
[info] # Warmup Iteration   3: 17646.496 ops/s
[info] Iteration   1: 17767.015 ops/s
[info]                  ·gc.alloc.rate:                   1377.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              122034.280 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1648.668 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 146074.839 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 17875.042 ops/s
[info]                  ·gc.alloc.rate:                   1386.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              122064.567 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.508 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 117156.872 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 17883.059 ops/s
[info]                  ·gc.alloc.rate:                   1386.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              122064.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.368 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 117807.977 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 17852.648 ops/s
[info]                  ·gc.alloc.rate:                   1384.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              122054.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.115 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 118511.698 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 17897.053 ops/s
[info]                  ·gc.alloc.rate:                   1387.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              122032.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 118659.740 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   17854.964 ±(99.9%) 199.197 ops/s [Average]
[info]   (min, avg, max) = (17767.015, 17854.964, 17897.053), stdev = 51.731
[info]   CI (99.9%): [17655.767, 18054.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1384.399 ±(99.9%) 15.840 MB/sec [Average]
[info]   (min, avg, max) = (1377.336, 1384.399, 1387.399), stdev = 4.114
[info]   CI (99.9%): [1368.559, 1400.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   122049.921 ±(99.9%) 60.926 B/op [Average]
[info]   (min, avg, max) = (122032.023, 122049.921, 122064.567), stdev = 15.822
[info]   CI (99.9%): [121988.995, 122110.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.083), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   6.237 ±(99.9%) 6.284 B/op [Average]
[info]   (min, avg, max) = (3.670, 6.237, 7.331), stdev = 1.632
[info]   CI (99.9%): [≈ 0, 12.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1402.144 ±(99.9%) 531.329 MB/sec [Average]
[info]   (min, avg, max) = (1330.508, 1402.144, 1648.668), stdev = 137.984
[info]   CI (99.9%): [870.815, 1933.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   123642.225 ±(99.9%) 48343.139 B/op [Average]
[info]   (min, avg, max) = (117156.872, 123642.225, 146074.839), stdev = 12554.560
[info]   CI (99.9%): [75299.086, 171985.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Run progress: 41.44% complete, ETA 00:36:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 276315.911 ops/s
[info] # Warmup Iteration   2: 295274.132 ops/s
[info] # Warmup Iteration   3: 304937.410 ops/s
[info] Iteration   1: 303439.663 ops/s
[info]                  ·gc.alloc.rate:                   789.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.637 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3427.374 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 301291.661 ops/s
[info]                  ·gc.alloc.rate:                   783.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.295 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5169.024 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 305640.455 ops/s
[info]                  ·gc.alloc.rate:                   795.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.341 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3401.048 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 305290.837 ops/s
[info]                  ·gc.alloc.rate:                   794.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992.461 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5116.915 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 305751.251 ops/s
[info]                  ·gc.alloc.rate:                   795.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.091 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3418.696 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   304282.774 ±(99.9%) 7375.141 ops/s [Average]
[info]   (min, avg, max) = (301291.661, 304282.774, 305751.251), stdev = 1915.301
[info]   CI (99.9%): [296907.633, 311657.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   791.765 ±(99.9%) 19.358 MB/sec [Average]
[info]   (min, avg, max) = (783.930, 791.765, 795.659), stdev = 5.027
[info]   CI (99.9%): [772.407, 811.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4096.001, 4096.001), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.104), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.388 ±(99.9%) 0.696 B/op [Average]
[info]   (min, avg, max) = (0.108, 0.388, 0.544), stdev = 0.181
[info]   CI (99.9%): [≈ 0, 1.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   793.365 ±(99.9%) 694.323 MB/sec [Average]
[info]   (min, avg, max) = (660.341, 793.365, 992.461), stdev = 180.314
[info]   CI (99.9%): [99.042, 1487.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4106.611 ±(99.9%) 3643.819 B/op [Average]
[info]   (min, avg, max) = (3401.048, 4106.611, 5169.024), stdev = 946.288
[info]   CI (99.9%): [462.793, 7750.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Run progress: 41.78% complete, ETA 00:36:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6426.558 ops/s
[info] # Warmup Iteration   2: 12150.560 ops/s
[info] # Warmup Iteration   3: 12134.538 ops/s
[info] Iteration   1: 12411.943 ops/s
[info]                  ·gc.alloc.rate:                   1697.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              215256.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1658.578 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 210348.653 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 12449.954 ops/s
[info]                  ·gc.alloc.rate:                   1702.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              215256.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2007.014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 253744.782 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 12422.683 ops/s
[info]                  ·gc.alloc.rate:                   1698.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              215256.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.369 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 213175.290 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 12260.076 ops/s
[info]                  ·gc.alloc.rate:                   1676.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              215256.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1689.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 216949.707 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 12473.805 ops/s
[info]                  ·gc.alloc.rate:                   1706.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              215256.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694.245 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 213732.668 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   12403.692 ±(99.9%) 322.802 ops/s [Average]
[info]   (min, avg, max) = (12260.076, 12403.692, 12473.805), stdev = 83.831
[info]   CI (99.9%): [12080.890, 12726.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1696.309 ±(99.9%) 44.575 MB/sec [Average]
[info]   (min, avg, max) = (1676.578, 1696.309, 1706.320), stdev = 11.576
[info]   CI (99.9%): [1651.734, 1740.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   215256.048 ±(99.9%) 0.123 B/op [Average]
[info]   (min, avg, max) = (215256.033, 215256.048, 215256.105), stdev = 0.032
[info]   CI (99.9%): [215255.925, 215256.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6.855 ±(99.9%) 15.327 B/op [Average]
[info]   (min, avg, max) = (2.672, 6.855, 13.157), stdev = 3.980
[info]   CI (99.9%): [≈ 0, 22.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1746.395 ±(99.9%) 563.498 MB/sec [Average]
[info]   (min, avg, max) = (1658.578, 1746.395, 2007.014), stdev = 146.339
[info]   CI (99.9%): [1182.897, 2309.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   221590.220 ±(99.9%) 69801.226 B/op [Average]
[info]   (min, avg, max) = (210348.653, 221590.220, 253744.782), stdev = 18127.157
[info]   CI (99.9%): [151788.994, 291391.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Run progress: 42.12% complete, ETA 00:36:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29999.485 ops/s
[info] # Warmup Iteration   2: 39213.694 ops/s
[info] # Warmup Iteration   3: 39487.761 ops/s
[info] Iteration   1: 39019.688 ops/s
[info]                  ·gc.alloc.rate:                   1283.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              51767.483 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1308.082 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52770.032 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 39495.772 ops/s
[info]                  ·gc.alloc.rate:                   1299.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              51768.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1315.231 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52398.274 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 40162.544 ops/s
[info]                  ·gc.alloc.rate:                   1320.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              51768.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1323.497 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51867.576 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 40150.479 ops/s
[info]                  ·gc.alloc.rate:                   1320.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              51768.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1332.183 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52223.822 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 39846.876 ops/s
[info]                  ·gc.alloc.rate:                   1310.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              51768.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.408 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52910.281 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   39735.072 ±(99.9%) 1863.524 ops/s [Average]
[info]   (min, avg, max) = (39019.688, 39735.072, 40162.544), stdev = 483.951
[info]   CI (99.9%): [37871.548, 41598.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1306.929 ±(99.9%) 61.287 MB/sec [Average]
[info]   (min, avg, max) = (1283.231, 1306.929, 1320.956), stdev = 15.916
[info]   CI (99.9%): [1245.642, 1368.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   51767.905 ±(99.9%) 0.909 B/op [Average]
[info]   (min, avg, max) = (51767.483, 51767.905, 51768.011), stdev = 0.236
[info]   CI (99.9%): [51766.996, 51768.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.468 ±(99.9%) 6.125 B/op [Average]
[info]   (min, avg, max) = (1.631, 3.468, 5.755), stdev = 1.591
[info]   CI (99.9%): [≈ 0, 9.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1323.680 ±(99.9%) 48.494 MB/sec [Average]
[info]   (min, avg, max) = (1308.082, 1323.680, 1339.408), stdev = 12.594
[info]   CI (99.9%): [1275.186, 1372.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   52433.997 ±(99.9%) 1617.785 B/op [Average]
[info]   (min, avg, max) = (51867.576, 52433.997, 52910.281), stdev = 420.134
[info]   CI (99.9%): [50816.212, 54051.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Run progress: 42.47% complete, ETA 00:35:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1097804.904 ops/s
[info] # Warmup Iteration   2: 1206156.864 ops/s
[info] # Warmup Iteration   3: 1233377.888 ops/s
[info] Iteration   1: 1236699.914 ops/s
[info]                  ·gc.alloc.rate:                   1125.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.122 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1246.215 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1232125.645 ops/s
[info]                  ·gc.alloc.rate:                   1120.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1310.045 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1673.731 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1231254.405 ops/s
[info]                  ·gc.alloc.rate:                   1120.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      987.462 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1262.380 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1240110.102 ops/s
[info]                  ·gc.alloc.rate:                   1128.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1681.601 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1237571.432 ops/s
[info]                  ·gc.alloc.rate:                   1126.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      999.040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1270.318 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1235552.300 ±(99.9%) 14456.762 ops/s [Average]
[info]   (min, avg, max) = (1231254.405, 1235552.300, 1240110.102), stdev = 3754.375
[info]   CI (99.9%): [1221095.538, 1250009.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1124.137 ±(99.9%) 13.654 MB/sec [Average]
[info]   (min, avg, max) = (1120.142, 1124.137, 1128.418), stdev = 3.546
[info]   CI (99.9%): [1110.483, 1137.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1432.000, 1432.000, 1432.000), stdev = 0.001
[info]   CI (99.9%): [1432.000, 1432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.167), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.122 ±(99.9%) 0.225 B/op [Average]
[info]   (min, avg, max) = (0.053, 0.122, 0.213), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1120.154 ±(99.9%) 694.794 MB/sec [Average]
[info]   (min, avg, max) = (979.122, 1120.154, 1325.103), stdev = 180.436
[info]   CI (99.9%): [425.360, 1814.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1426.849 ±(99.9%) 882.357 B/op [Average]
[info]   (min, avg, max) = (1246.215, 1426.849, 1681.601), stdev = 229.145
[info]   CI (99.9%): [544.492, 2309.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 42.81% complete, ETA 00:35:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1158782.720 ops/s
[info] # Warmup Iteration   2: 1296350.274 ops/s
[info] # Warmup Iteration   3: 1297426.547 ops/s
[info] Iteration   1: 1297255.185 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1297618.401 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1258516.911 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1297531.049 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1294180.138 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1289020.337 ±(99.9%) 65891.431 ops/s [Average]
[info]   (min, avg, max) = (1258516.911, 1289020.337, 1297618.401), stdev = 17111.795
[info]   CI (99.9%): [1223128.906, 1354911.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Run progress: 43.15% complete, ETA 00:35:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25913.499 ops/s
[info] # Warmup Iteration   2: 35963.816 ops/s
[info] # Warmup Iteration   3: 35770.279 ops/s
[info] Iteration   1: 35855.069 ops/s
[info]                  ·gc.alloc.rate:                   1084.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              47621.264 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.827 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      969.721 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42572.267 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 36287.531 ops/s
[info]                  ·gc.alloc.rate:                   1097.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              47616.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1298.225 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56323.329 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 35732.920 ops/s
[info]                  ·gc.alloc.rate:                   1080.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              47616.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.756 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43116.079 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 36326.022 ops/s
[info]                  ·gc.alloc.rate:                   1098.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              47616.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.355 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42697.424 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 35920.459 ops/s
[info]                  ·gc.alloc.rate:                   1086.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              47616.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57965.594 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   36024.400 ±(99.9%) 1027.212 ops/s [Average]
[info]   (min, avg, max) = (35732.920, 36024.400, 36326.022), stdev = 266.764
[info]   CI (99.9%): [34997.188, 37051.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1089.734 ±(99.9%) 30.841 MB/sec [Average]
[info]   (min, avg, max) = (1080.906, 1089.734, 1098.864), stdev = 8.009
[info]   CI (99.9%): [1058.893, 1120.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   47617.062 ±(99.9%) 9.045 B/op [Average]
[info]   (min, avg, max) = (47616.011, 47617.062, 47621.264), stdev = 2.349
[info]   CI (99.9%): [47608.017, 47626.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.092 ±(99.9%) 4.678 B/op [Average]
[info]   (min, avg, max) = (1.806, 3.092, 4.509), stdev = 1.215
[info]   CI (99.9%): [≈ 0, 7.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1110.978 ±(99.9%) 702.575 MB/sec [Average]
[info]   (min, avg, max) = (969.721, 1110.978, 1322.833), stdev = 182.456
[info]   CI (99.9%): [408.403, 1813.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   48534.939 ±(99.9%) 30356.067 B/op [Average]
[info]   (min, avg, max) = (42572.267, 48534.939, 57965.594), stdev = 7883.374
[info]   CI (99.9%): [18178.871, 78891.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 9.000), stdev = 2.608
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Run progress: 43.49% complete, ETA 00:35:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 108307.205 ops/s
[info] # Warmup Iteration   2: 131383.065 ops/s
[info] # Warmup Iteration   3: 132402.476 ops/s
[info] Iteration   1: 133054.880 ops/s
[info]                  ·gc.alloc.rate:                   2282.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1991.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23556.378 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 132179.522 ops/s
[info]                  ·gc.alloc.rate:                   2267.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2344.524 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27915.758 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 131588.743 ops/s
[info]                  ·gc.alloc.rate:                   2256.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2360.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28232.547 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 131365.362 ops/s
[info]                  ·gc.alloc.rate:                   2253.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2370.108 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28401.261 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 130839.689 ops/s
[info]                  ·gc.alloc.rate:                   2244.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.877 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24504.195 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   131805.639 ±(99.9%) 3264.167 ops/s [Average]
[info]   (min, avg, max) = (130839.689, 131805.639, 133054.880), stdev = 847.694
[info]   CI (99.9%): [128541.472, 135069.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   2260.833 ±(99.9%) 55.890 MB/sec [Average]
[info]   (min, avg, max) = (2244.338, 2260.833, 2282.070), stdev = 14.514
[info]   CI (99.9%): [2204.943, 2316.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27000.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27000.003, 27000.003, 27000.003), stdev = 0.001
[info]   CI (99.9%): [27000.003, 27000.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.146), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.244 ±(99.9%) 1.812 B/op [Average]
[info]   (min, avg, max) = (0.744, 1.244, 1.753), stdev = 0.471
[info]   CI (99.9%): [≈ 0, 3.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2220.505 ±(99.9%) 729.614 MB/sec [Average]
[info]   (min, avg, max) = (1991.011, 2220.505, 2370.108), stdev = 189.479
[info]   CI (99.9%): [1490.891, 2950.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   26522.028 ±(99.9%) 8878.763 B/op [Average]
[info]   (min, avg, max) = (23556.378, 26522.028, 28401.261), stdev = 2305.786
[info]   CI (99.9%): [17643.265, 35400.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Run progress: 43.84% complete, ETA 00:35:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 159882.190 ops/s
[info] # Warmup Iteration   2: 250898.608 ops/s
[info] # Warmup Iteration   3: 252934.695 ops/s
[info] Iteration   1: 250234.384 ops/s
[info]                  ·gc.alloc.rate:                   549.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.421 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4072.351 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 248683.693 ops/s
[info]                  ·gc.alloc.rate:                   546.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.467 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4123.040 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 248792.002 ops/s
[info]                  ·gc.alloc.rate:                   546.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.366 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2071.227 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 250966.573 ops/s
[info]                  ·gc.alloc.rate:                   551.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.195 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4114.831 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 252989.733 ops/s
[info]                  ·gc.alloc.rate:                   555.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.672 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4098.493 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   250333.277 ±(99.9%) 6824.516 ops/s [Average]
[info]   (min, avg, max) = (248683.693, 250333.277, 252989.733), stdev = 1772.305
[info]   CI (99.9%): [243508.761, 257157.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   549.657 ±(99.9%) 14.909 MB/sec [Average]
[info]   (min, avg, max) = (546.070, 549.657, 555.416), stdev = 3.872
[info]   CI (99.9%): [534.749, 564.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3456.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3456.002, 3456.002, 3456.002), stdev = 0.001
[info]   CI (99.9%): [3456.001, 3456.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.365 ±(99.9%) 0.961 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.365, 0.648), stdev = 0.250
[info]   CI (99.9%): [≈ 0, 1.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   588.224 ±(99.9%) 561.764 MB/sec [Average]
[info]   (min, avg, max) = (327.366, 588.224, 658.672), stdev = 145.888
[info]   CI (99.9%): [26.460, 1149.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3695.989 ±(99.9%) 3498.216 B/op [Average]
[info]   (min, avg, max) = (2071.227, 3695.989, 4123.040), stdev = 908.476
[info]   CI (99.9%): [197.773, 7194.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Run progress: 44.18% complete, ETA 00:34:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 472585.557 ops/s
[info] # Warmup Iteration   2: 502874.856 ops/s
[info] # Warmup Iteration   3: 510120.221 ops/s
[info] Iteration   1: 504518.657 ops/s
[info]                  ·gc.alloc.rate:                   635.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.408 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2054.092 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 510252.051 ops/s
[info]                  ·gc.alloc.rate:                   643.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2023.929 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 512665.621 ops/s
[info]                  ·gc.alloc.rate:                   646.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.910 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2013.330 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 511491.200 ops/s
[info]                  ·gc.alloc.rate:                   644.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.763 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2021.081 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 511941.745 ops/s
[info]                  ·gc.alloc.rate:                   645.256 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.700 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1010.670 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   510173.855 ±(99.9%) 12633.561 ops/s [Average]
[info]   (min, avg, max) = (504518.657, 510173.855, 512665.621), stdev = 3280.896
[info]   CI (99.9%): [497540.294, 522807.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   643.066 ±(99.9%) 16.002 MB/sec [Average]
[info]   (min, avg, max) = (635.942, 643.066, 646.355), stdev = 4.156
[info]   CI (99.9%): [627.064, 659.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1984.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1984.001, 1984.001, 1984.001), stdev = 0.001
[info]   CI (99.9%): [1984.001, 1984.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.104), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.193 ±(99.9%) 0.466 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.193, 0.325), stdev = 0.121
[info]   CI (99.9%): [≈ 0, 0.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   591.158 ±(99.9%) 564.974 MB/sec [Average]
[info]   (min, avg, max) = (328.700, 591.158, 658.408), stdev = 146.722
[info]   CI (99.9%): [26.184, 1156.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1824.620 ±(99.9%) 1753.105 B/op [Average]
[info]   (min, avg, max) = (1010.670, 1824.620, 2054.092), stdev = 455.276
[info]   CI (99.9%): [71.516, 3577.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Run progress: 44.52% complete, ETA 00:34:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39517.347 ops/s
[info] # Warmup Iteration   2: 67795.545 ops/s
[info] # Warmup Iteration   3: 68265.891 ops/s
[info] Iteration   1: 67538.528 ops/s
[info]                  ·gc.alloc.rate:                   2924.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3022.480 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70452.000 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 68565.308 ops/s
[info]                  ·gc.alloc.rate:                   2982.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              68478.365 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2705.510 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62109.974 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 67977.363 ops/s
[info]                  ·gc.alloc.rate:                   2950.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              68324.914 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3054.232 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70727.600 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 68325.000 ops/s
[info]                  ·gc.alloc.rate:                   2958.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3058.489 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70463.620 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 68471.826 ops/s
[info]                  ·gc.alloc.rate:                   2965.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3063.297 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70417.491 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   68175.605 ±(99.9%) 1618.990 ops/s [Average]
[info]   (min, avg, max) = (67538.528, 68175.605, 68565.308), stdev = 420.446
[info]   CI (99.9%): [66556.615, 69794.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2956.435 ±(99.9%) 82.676 MB/sec [Average]
[info]   (min, avg, max) = (2924.494, 2956.435, 2982.918), stdev = 21.471
[info]   CI (99.9%): [2873.759, 3039.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   68261.460 ±(99.9%) 535.208 B/op [Average]
[info]   (min, avg, max) = (68168.006, 68261.460, 68478.365), stdev = 138.992
[info]   CI (99.9%): [67726.251, 68796.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.150 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.150, 0.208), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.459 ±(99.9%) 3.534 B/op [Average]
[info]   (min, avg, max) = (2.410, 3.459, 4.778), stdev = 0.918
[info]   CI (99.9%): [≈ 0, 6.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2980.802 ±(99.9%) 595.778 MB/sec [Average]
[info]   (min, avg, max) = (2705.510, 2980.802, 3063.297), stdev = 154.722
[info]   CI (99.9%): [2385.024, 3576.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   68834.137 ±(99.9%) 14482.117 B/op [Average]
[info]   (min, avg, max) = (62109.974, 68834.137, 70727.600), stdev = 3760.960
[info]   CI (99.9%): [54352.020, 83316.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   44.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Run progress: 44.86% complete, ETA 00:34:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 139618.730 ops/s
[info] # Warmup Iteration   2: 177007.594 ops/s
[info] # Warmup Iteration   3: 179284.501 ops/s
[info] Iteration   1: 179193.643 ops/s
[info]                  ·gc.alloc.rate:                   1541.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              13544.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1636.094 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14372.190 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 178883.374 ops/s
[info]                  ·gc.alloc.rate:                   1539.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              13544.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1319.359 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11610.339 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 179245.195 ops/s
[info]                  ·gc.alloc.rate:                   1542.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              13544.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1660.820 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14584.596 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 179165.310 ops/s
[info]                  ·gc.alloc.rate:                   1541.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              13544.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.204 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14699.281 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 179620.027 ops/s
[info]                  ·gc.alloc.rate:                   1545.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              13544.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.326 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11790.344 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   179221.510 ±(99.9%) 1014.496 ops/s [Average]
[info]   (min, avg, max) = (178883.374, 179221.510, 179620.027), stdev = 263.461
[info]   CI (99.9%): [178207.014, 180236.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1542.071 ±(99.9%) 8.693 MB/sec [Average]
[info]   (min, avg, max) = (1539.093, 1542.071, 1545.425), stdev = 2.258
[info]   CI (99.9%): [1533.378, 1550.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   13544.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13544.002, 13544.002, 13544.002), stdev = 0.001
[info]   CI (99.9%): [13544.002, 13544.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.015
[info]   CI (99.9%): [0.027, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.731 ±(99.9%) 0.494 B/op [Average]
[info]   (min, avg, max) = (0.549, 0.731, 0.912), stdev = 0.128
[info]   CI (99.9%): [0.237, 1.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1526.961 ±(99.9%) 686.953 MB/sec [Average]
[info]   (min, avg, max) = (1319.359, 1526.961, 1673.204), stdev = 178.399
[info]   CI (99.9%): [840.008, 2213.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   13411.350 ±(99.9%) 6036.363 B/op [Average]
[info]   (min, avg, max) = (11610.339, 13411.350, 14699.281), stdev = 1567.624
[info]   CI (99.9%): [7374.987, 19447.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Run progress: 45.21% complete, ETA 00:34:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 314568.736 ops/s
[info] # Warmup Iteration   2: 487218.046 ops/s
[info] # Warmup Iteration   3: 487413.575 ops/s
[info] Iteration   1: 486964.831 ops/s
[info]                  ·gc.alloc.rate:                   499.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      320.638 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1036.634 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 487626.202 ops/s
[info]                  ·gc.alloc.rate:                   500.555 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      643.342 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2076.976 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 485059.501 ops/s
[info]                  ·gc.alloc.rate:                   497.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.386 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2100.952 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 480097.006 ops/s
[info]                  ·gc.alloc.rate:                   492.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      324.711 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1064.576 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 479896.782 ops/s
[info]                  ·gc.alloc.rate:                   492.666 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.045 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2138.783 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   483928.864 ±(99.9%) 14292.395 ops/s [Average]
[info]   (min, avg, max) = (479896.782, 483928.864, 487626.202), stdev = 3711.690
[info]   CI (99.9%): [469636.470, 498221.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   496.784 ±(99.9%) 14.529 MB/sec [Average]
[info]   (min, avg, max) = (492.666, 496.784, 500.555), stdev = 3.773
[info]   CI (99.9%): [482.255, 511.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1616.001, 1616.001, 1616.001), stdev = 0.001
[info]   CI (99.9%): [1616.001, 1616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.125), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.176 ±(99.9%) 0.625 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.176, 0.403), stdev = 0.162
[info]   CI (99.9%): [≈ 0, 0.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   517.625 ±(99.9%) 685.401 MB/sec [Average]
[info]   (min, avg, max) = (320.638, 517.625, 652.045), stdev = 177.996
[info]   CI (99.9%): [≈ 0, 1203.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1683.584 ±(99.9%) 2226.953 B/op [Average]
[info]   (min, avg, max) = (1036.634, 1683.584, 2138.783), stdev = 578.333
[info]   CI (99.9%): [≈ 0, 3910.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.600, 6.000), stdev = 2.074
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Run progress: 45.55% complete, ETA 00:33:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 562605.802 ops/s
[info] # Warmup Iteration   2: 636002.659 ops/s
[info] # Warmup Iteration   3: 597282.456 ops/s
[info] Iteration   1: 594659.070 ops/s
[info]                  ·gc.alloc.rate:                   465.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.794 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      584.223 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1546.187 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 593356.586 ops/s
[info]                  ·gc.alloc.rate:                   464.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.362 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 871.116 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 593748.839 ops/s
[info]                  ·gc.alloc.rate:                   464.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.850 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1730.487 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 597729.694 ops/s
[info]                  ·gc.alloc.rate:                   467.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.446 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 859.483 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 601411.397 ops/s
[info]                  ·gc.alloc.rate:                   470.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.362 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 854.199 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   596181.117 ±(99.9%) 13053.130 ops/s [Average]
[info]   (min, avg, max) = (593356.586, 596181.117, 601411.397), stdev = 3389.856
[info]   CI (99.9%): [583127.987, 609234.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   466.667 ±(99.9%) 10.180 MB/sec [Average]
[info]   (min, avg, max) = (464.395, 466.667, 470.707), stdev = 2.644
[info]   CI (99.9%): [456.487, 476.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1232.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1232.001, 1232.001), stdev = 0.001
[info]   CI (99.9%): [1232.001, 1232.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.757 ±(99.9%) 6.337 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.757, 3.700), stdev = 1.646
[info]   CI (99.9%): [≈ 0, 7.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.003 ±(99.9%) 16.772 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.003, 9.794), stdev = 4.356
[info]   CI (99.9%): [≈ 0, 18.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   443.648 ±(99.9%) 621.823 MB/sec [Average]
[info]   (min, avg, max) = (326.362, 443.648, 652.850), stdev = 161.486
[info]   CI (99.9%): [≈ 0, 1065.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1172.294 ±(99.9%) 1657.476 B/op [Average]
[info]   (min, avg, max) = (854.199, 1172.294, 1730.487), stdev = 430.441
[info]   CI (99.9%): [≈ 0, 2829.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 5.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 45.89% complete, ETA 00:33:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 590220.557 ops/s
[info] # Warmup Iteration   2: 648184.512 ops/s
[info] # Warmup Iteration   3: 665621.407 ops/s
[info] Iteration   1: 661803.268 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 665938.543 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 664994.491 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 665110.979 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 666332.732 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   664836.003 ±(99.9%) 6875.853 ops/s [Average]
[info]   (min, avg, max) = (661803.268, 664836.003, 666332.732), stdev = 1785.637
[info]   CI (99.9%): [657960.149, 671711.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Run progress: 46.23% complete, ETA 00:33:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20547.653 ops/s
[info] # Warmup Iteration   2: 30177.568 ops/s
[info] # Warmup Iteration   3: 30468.071 ops/s
[info] Iteration   1: 30528.749 ops/s
[info]                  ·gc.alloc.rate:                   1565.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              80703.414 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1626.109 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83841.438 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 30377.753 ops/s
[info]                  ·gc.alloc.rate:                   1556.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              80688.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1311.955 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67990.742 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 30356.782 ops/s
[info]                  ·gc.alloc.rate:                   1556.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              80688.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1655.397 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85807.025 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 30387.245 ops/s
[info]                  ·gc.alloc.rate:                   1557.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              80688.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1668.712 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86444.037 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 30419.063 ops/s
[info]                  ·gc.alloc.rate:                   1559.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              80688.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.444 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69467.341 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   30413.918 ±(99.9%) 261.847 ops/s [Average]
[info]   (min, avg, max) = (30356.782, 30413.918, 30528.749), stdev = 68.001
[info]   CI (99.9%): [30152.071, 30675.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1559.146 ±(99.9%) 13.706 MB/sec [Average]
[info]   (min, avg, max) = (1556.640, 1559.146, 1565.247), stdev = 3.560
[info]   CI (99.9%): [1545.439, 1572.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   80691.094 ±(99.9%) 26.520 B/op [Average]
[info]   (min, avg, max) = (80688.013, 80691.094, 80703.414), stdev = 6.887
[info]   CI (99.9%): [80664.574, 80717.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4.091 ±(99.9%) 7.392 B/op [Average]
[info]   (min, avg, max) = (2.154, 4.091, 6.439), stdev = 1.920
[info]   CI (99.9%): [≈ 0, 11.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1520.923 ±(99.9%) 684.807 MB/sec [Average]
[info]   (min, avg, max) = (1311.955, 1520.923, 1668.712), stdev = 177.842
[info]   CI (99.9%): [836.116, 2205.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   78710.117 ±(99.9%) 35336.030 B/op [Average]
[info]   (min, avg, max) = (67990.742, 78710.117, 86444.037), stdev = 9176.655
[info]   CI (99.9%): [43374.087, 114046.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Run progress: 46.58% complete, ETA 00:33:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5583.885 ops/s
[info] # Warmup Iteration   2: 8322.661 ops/s
[info] # Warmup Iteration   3: 8635.897 ops/s
[info] Iteration   1: 8655.527 ops/s
[info]                  ·gc.alloc.rate:                   1219.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              221800.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.720 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 178517.097 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 8651.662 ops/s
[info]                  ·gc.alloc.rate:                   1219.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              221800.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22.719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1313.457 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 238940.591 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 8588.708 ops/s
[info]                  ·gc.alloc.rate:                   1210.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              221800.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1321.456 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 242185.656 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 8580.910 ops/s
[info]                  ·gc.alloc.rate:                   1209.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              221800.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.732 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 182825.817 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 8600.750 ops/s
[info]                  ·gc.alloc.rate:                   1212.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              221807.866 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334.689 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 244257.387 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   8615.511 ±(99.9%) 136.707 ops/s [Average]
[info]   (min, avg, max) = (8580.910, 8615.511, 8655.527), stdev = 35.502
[info]   CI (99.9%): [8478.804, 8752.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1214.088 ±(99.9%) 19.397 MB/sec [Average]
[info]   (min, avg, max) = (1209.213, 1214.088, 1219.747), stdev = 5.037
[info]   CI (99.9%): [1194.691, 1233.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   221801.613 ±(99.9%) 13.461 B/op [Average]
[info]   (min, avg, max) = (221800.047, 221801.613, 221807.866), stdev = 3.496
[info]   CI (99.9%): [221788.151, 221815.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.125), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11.395 ±(99.9%) 27.247 B/op [Average]
[info]   (min, avg, max) = (3.818, 11.395, 22.719), stdev = 7.076
[info]   CI (99.9%): [≈ 0, 38.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1189.611 ±(99.9%) 705.282 MB/sec [Average]
[info]   (min, avg, max) = (981.720, 1189.611, 1334.689), stdev = 183.159
[info]   CI (99.9%): [484.329, 1894.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   217345.309 ±(99.9%) 129253.281 B/op [Average]
[info]   (min, avg, max) = (178517.097, 217345.309, 244257.387), stdev = 33566.667
[info]   CI (99.9%): [88092.029, 346598.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 46.92% complete, ETA 00:33:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 92326.795 ops/s
[info] # Warmup Iteration   2: 101907.348 ops/s
[info] # Warmup Iteration   3: 103136.584 ops/s
[info] Iteration   1: 102602.749 ops/s
[info]                  ·gc.alloc.rate:                   994.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.535 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15179.057 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 102305.656 ops/s
[info]                  ·gc.alloc.rate:                   990.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.644 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15243.611 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 103180.050 ops/s
[info]                  ·gc.alloc.rate:                   999.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      994.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15165.019 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 102974.042 ops/s
[info]                  ·gc.alloc.rate:                   997.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.439 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15246.554 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 101127.902 ops/s
[info]                  ·gc.alloc.rate:                   979.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.066 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15581.687 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   102438.080 ±(99.9%) 3103.888 ops/s [Average]
[info]   (min, avg, max) = (101127.902, 102438.080, 103180.050), stdev = 806.070
[info]   CI (99.9%): [99334.192, 105541.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   992.322 ±(99.9%) 30.109 MB/sec [Average]
[info]   (min, avg, max) = (979.628, 992.322, 999.491), stdev = 7.819
[info]   CI (99.9%): [962.213, 1022.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15248.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15248.004, 15248.004, 15248.004), stdev = 0.001
[info]   CI (99.9%): [15248.003, 15248.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.083), stdev = 0.009
[info]   CI (99.9%): [0.043, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.216 ±(99.9%) 0.556 B/op [Average]
[info]   (min, avg, max) = (0.958, 1.216, 1.296), stdev = 0.144
[info]   CI (99.9%): [0.660, 1.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   994.547 ±(99.9%) 18.412 MB/sec [Average]
[info]   (min, avg, max) = (989.535, 994.547, 1001.066), stdev = 4.782
[info]   CI (99.9%): [976.135, 1012.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15283.186 ±(99.9%) 658.046 B/op [Average]
[info]   (min, avg, max) = (15165.019, 15283.186, 15581.687), stdev = 170.893
[info]   CI (99.9%): [14625.139, 15941.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Run progress: 47.26% complete, ETA 00:32:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3647.931 ops/s
[info] # Warmup Iteration   2: 7677.503 ops/s
[info] # Warmup Iteration   3: 7818.290 ops/s
[info] Iteration   1: 7809.590 ops/s
[info]                  ·gc.alloc.rate:                   1410.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              284216.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1319.855 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 266036.563 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 7858.146 ops/s
[info]                  ·gc.alloc.rate:                   1418.898 MB/sec
[info]                  ·gc.alloc.rate.norm:              284216.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.689 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 333449.836 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 7921.674 ops/s
[info]                  ·gc.alloc.rate:                   1430.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              284216.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.915 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 266180.038 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 7910.904 ops/s
[info]                  ·gc.alloc.rate:                   1428.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              284216.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.253 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 267676.421 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 7882.746 ops/s
[info]                  ·gc.alloc.rate:                   1423.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              284216.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.565 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 269459.028 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   7876.612 ±(99.9%) 173.035 ops/s [Average]
[info]   (min, avg, max) = (7809.590, 7876.612, 7921.674), stdev = 44.937
[info]   CI (99.9%): [7703.577, 8049.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1422.300 ±(99.9%) 31.675 MB/sec [Average]
[info]   (min, avg, max) = (1410.047, 1422.300, 1430.706), stdev = 8.226
[info]   CI (99.9%): [1390.625, 1453.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   284216.053 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (284216.051, 284216.053, 284216.056), stdev = 0.002
[info]   CI (99.9%): [284216.044, 284216.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.015
[info]   CI (99.9%): [0.006, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   12.473 ±(99.9%) 11.284 B/op [Average]
[info]   (min, avg, max) = (8.389, 12.473, 16.676), stdev = 2.930
[info]   CI (99.9%): [1.189, 23.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1403.855 ±(99.9%) 563.171 MB/sec [Average]
[info]   (min, avg, max) = (1319.855, 1403.855, 1664.689), stdev = 146.254
[info]   CI (99.9%): [840.685, 1967.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   280560.377 ±(99.9%) 113972.986 B/op [Average]
[info]   (min, avg, max) = (266036.563, 280560.377, 333449.836), stdev = 29598.423
[info]   CI (99.9%): [166587.391, 394533.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Run progress: 47.60% complete, ETA 00:32:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12763.100 ops/s
[info] # Warmup Iteration   2: 17563.805 ops/s
[info] # Warmup Iteration   3: 17541.078 ops/s
[info] Iteration   1: 17757.128 ops/s
[info]                  ·gc.alloc.rate:                   885.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              78503.140 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86790.919 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 17603.434 ops/s
[info]                  ·gc.alloc.rate:                   878.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              78552.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.030 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87545.108 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 17943.852 ops/s
[info]                  ·gc.alloc.rate:                   895.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              78552.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.243 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57374.582 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 17972.695 ops/s
[info]                  ·gc.alloc.rate:                   896.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              78536.939 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.410 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86302.191 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 18008.994 ops/s
[info]                  ·gc.alloc.rate:                   898.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              78528.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.447 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86474.194 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   17857.220 ±(99.9%) 662.211 ops/s [Average]
[info]   (min, avg, max) = (17603.434, 17857.220, 18008.994), stdev = 171.974
[info]   CI (99.9%): [17195.009, 18519.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   891.006 ±(99.9%) 33.280 MB/sec [Average]
[info]   (min, avg, max) = (878.459, 891.006, 898.526), stdev = 8.643
[info]   CI (99.9%): [857.725, 924.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   78534.431 ±(99.9%) 78.101 B/op [Average]
[info]   (min, avg, max) = (78503.140, 78534.431, 78552.027), stdev = 20.283
[info]   CI (99.9%): [78456.330, 78612.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.083), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5.881 ±(99.9%) 7.863 B/op [Average]
[info]   (min, avg, max) = (3.638, 5.881, 7.444), stdev = 2.042
[info]   CI (99.9%): [≈ 0, 13.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   917.438 ±(99.9%) 566.803 MB/sec [Average]
[info]   (min, avg, max) = (654.243, 917.438, 989.447), stdev = 147.197
[info]   CI (99.9%): [350.635, 1484.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   80897.399 ±(99.9%) 50667.836 B/op [Average]
[info]   (min, avg, max) = (57374.582, 80897.399, 87545.108), stdev = 13158.276
[info]   CI (99.9%): [30229.563, 131565.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 47.95% complete, ETA 00:32:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 416875.104 ops/s
[info] # Warmup Iteration   2: 467992.955 ops/s
[info] # Warmup Iteration   3: 466896.007 ops/s
[info] Iteration   1: 465899.403 ops/s
[info]                  ·gc.alloc.rate:                   1056.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1305.467 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4410.689 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 471726.633 ops/s
[info]                  ·gc.alloc.rate:                   1069.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.950 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3277.092 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 470623.195 ops/s
[info]                  ·gc.alloc.rate:                   1066.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.432 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3295.959 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 472280.936 ops/s
[info]                  ·gc.alloc.rate:                   1070.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3303.140 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 471721.239 ops/s
[info]                  ·gc.alloc.rate:                   1069.304 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4431.752 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   470450.281 ±(99.9%) 10066.342 ops/s [Average]
[info]   (min, avg, max) = (465899.403, 470450.281, 472280.936), stdev = 2614.197
[info]   CI (99.9%): [460383.940, 480516.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1066.347 ±(99.9%) 22.770 MB/sec [Average]
[info]   (min, avg, max) = (1056.050, 1066.347, 1070.497), stdev = 5.913
[info]   CI (99.9%): [1043.578, 1089.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3568.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3568.001, 3568.001, 3568.001), stdev = 0.001
[info]   CI (99.9%): [3568.001, 3568.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.223 ±(99.9%) 0.477 B/op [Average]
[info]   (min, avg, max) = (0.139, 0.223, 0.417), stdev = 0.124
[info]   CI (99.9%): [≈ 0, 0.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1118.409 ±(99.9%) 698.222 MB/sec [Average]
[info]   (min, avg, max) = (981.950, 1118.409, 1328.164), stdev = 181.326
[info]   CI (99.9%): [420.187, 1816.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3743.726 ±(99.9%) 2381.941 B/op [Average]
[info]   (min, avg, max) = (3277.092, 3743.726, 4431.752), stdev = 618.583
[info]   CI (99.9%): [1361.785, 6125.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 48.29% complete, ETA 00:32:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 400529.314 ops/s
[info] # Warmup Iteration   2: 434197.521 ops/s
[info] # Warmup Iteration   3: 428237.413 ops/s
[info] Iteration   1: 432998.273 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 432749.522 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 432671.532 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 432293.113 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 432162.708 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   432575.030 ±(99.9%) 1317.659 ops/s [Average]
[info]   (min, avg, max) = (432162.708, 432575.030, 432998.273), stdev = 342.192
[info]   CI (99.9%): [431257.371, 433892.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Run progress: 48.63% complete, ETA 00:32:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13194.318 ops/s
[info] # Warmup Iteration   2: 19450.859 ops/s
[info] # Warmup Iteration   3: 19576.890 ops/s
[info] Iteration   1: 19468.523 ops/s
[info]                  ·gc.alloc.rate:                   897.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              72576.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      970.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78456.079 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 19569.006 ops/s
[info]                  ·gc.alloc.rate:                   902.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              72576.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      970.627 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78059.229 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 19544.151 ops/s
[info]                  ·gc.alloc.rate:                   901.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              72576.795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      974.717 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78503.733 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 19716.263 ops/s
[info]                  ·gc.alloc.rate:                   909.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              72576.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78138.054 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 19501.913 ops/s
[info]                  ·gc.alloc.rate:                   899.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              72576.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.218 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52952.954 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   19559.971 ±(99.9%) 367.794 ops/s [Average]
[info]   (min, avg, max) = (19468.523, 19559.971, 19716.263), stdev = 95.515
[info]   CI (99.9%): [19192.177, 19927.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   902.052 ±(99.9%) 16.947 MB/sec [Average]
[info]   (min, avg, max) = (897.974, 902.052, 909.317), stdev = 4.401
[info]   CI (99.9%): [885.105, 918.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   72576.177 ±(99.9%) 1.330 B/op [Average]
[info]   (min, avg, max) = (72576.021, 72576.177, 72576.795), stdev = 0.345
[info]   CI (99.9%): [72574.848, 72577.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.104), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4.017 ±(99.9%) 14.855 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.017, 8.414), stdev = 3.858
[info]   CI (99.9%): [≈ 0, 18.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   910.259 ±(99.9%) 547.004 MB/sec [Average]
[info]   (min, avg, max) = (656.218, 910.259, 979.005), stdev = 142.055
[info]   CI (99.9%): [363.255, 1457.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   73222.010 ±(99.9%) 43637.027 B/op [Average]
[info]   (min, avg, max) = (52952.954, 73222.010, 78503.733), stdev = 11332.397
[info]   CI (99.9%): [29584.983, 116859.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Run progress: 48.97% complete, ETA 00:31:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9542.584 ops/s
[info] # Warmup Iteration   2: 13622.863 ops/s
[info] # Warmup Iteration   3: 13634.745 ops/s
[info] Iteration   1: 13756.360 ops/s
[info]                  ·gc.alloc.rate:                   1382.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              158080.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1640.001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 187591.382 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 13532.204 ops/s
[info]                  ·gc.alloc.rate:                   1359.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              158086.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1319.484 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 153482.271 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 13778.951 ops/s
[info]                  ·gc.alloc.rate:                   1384.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              158112.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1327.415 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 151644.436 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 13782.518 ops/s
[info]                  ·gc.alloc.rate:                   1384.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              158112.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334.844 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 152437.164 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 13605.698 ops/s
[info]                  ·gc.alloc.rate:                   1366.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              158112.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.736 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 155190.481 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   13691.146 ±(99.9%) 442.721 ops/s [Average]
[info]   (min, avg, max) = (13532.204, 13691.146, 13782.518), stdev = 114.973
[info]   CI (99.9%): [13248.425, 14133.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1375.325 ±(99.9%) 44.697 MB/sec [Average]
[info]   (min, avg, max) = (1359.065, 1375.325, 1384.537), stdev = 11.608
[info]   CI (99.9%): [1330.628, 1420.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   158100.500 ±(99.9%) 61.419 B/op [Average]
[info]   (min, avg, max) = (158080.032, 158100.500, 158112.040), stdev = 15.950
[info]   CI (99.9%): [158039.081, 158161.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9.122 ±(99.9%) 18.105 B/op [Average]
[info]   (min, avg, max) = (4.763, 9.122, 16.948), stdev = 4.702
[info]   CI (99.9%): [≈ 0, 27.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1392.696 ±(99.9%) 533.301 MB/sec [Average]
[info]   (min, avg, max) = (1319.484, 1392.696, 1640.001), stdev = 138.496
[info]   CI (99.9%): [859.395, 1925.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   160069.147 ±(99.9%) 59463.614 B/op [Average]
[info]   (min, avg, max) = (151644.436, 160069.147, 187591.382), stdev = 15442.512
[info]   CI (99.9%): [100605.533, 219532.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Run progress: 49.32% complete, ETA 00:31:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7702.390 ops/s
[info] # Warmup Iteration   2: 13739.137 ops/s
[info] # Warmup Iteration   3: 13797.404 ops/s
[info] Iteration   1: 13843.480 ops/s
[info]                  ·gc.alloc.rate:                   1267.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              144056.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      988.828 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112423.160 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 13877.077 ops/s
[info]                  ·gc.alloc.rate:                   1270.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              144059.144 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1326.251 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 150422.568 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 13739.933 ops/s
[info]                  ·gc.alloc.rate:                   1258.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              144088.738 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1335.330 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 152914.154 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 13801.825 ops/s
[info]                  ·gc.alloc.rate:                   1263.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              144088.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.457 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 152986.965 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 13958.920 ops/s
[info]                  ·gc.alloc.rate:                   1277.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              144088.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.994 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 151867.393 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   13844.247 ±(99.9%) 315.831 ops/s [Average]
[info]   (min, avg, max) = (13739.933, 13844.247, 13958.920), stdev = 82.020
[info]   CI (99.9%): [13528.416, 14160.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1267.377 ±(99.9%) 28.505 MB/sec [Average]
[info]   (min, avg, max) = (1258.261, 1267.377, 1277.995), stdev = 7.403
[info]   CI (99.9%): [1238.872, 1295.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   144075.997 ±(99.9%) 64.857 B/op [Average]
[info]   (min, avg, max) = (144056.032, 144075.997, 144088.738), stdev = 16.843
[info]   CI (99.9%): [144011.140, 144140.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   6.629 ±(99.9%) 7.648 B/op [Average]
[info]   (min, avg, max) = (4.694, 6.629, 9.444), stdev = 1.986
[info]   CI (99.9%): [≈ 0, 14.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1267.772 ±(99.9%) 601.179 MB/sec [Average]
[info]   (min, avg, max) = (988.828, 1267.772, 1346.994), stdev = 156.124
[info]   CI (99.9%): [666.593, 1868.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   144122.848 ±(99.9%) 68352.843 B/op [Average]
[info]   (min, avg, max) = (112423.160, 144122.848, 152986.965), stdev = 17751.016
[info]   CI (99.9%): [75770.005, 212475.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Run progress: 49.66% complete, ETA 00:31:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 157508.729 ops/s
[info] # Warmup Iteration   2: 168253.191 ops/s
[info] # Warmup Iteration   3: 169500.021 ops/s
[info] Iteration   1: 170081.449 ops/s
[info]                  ·gc.alloc.rate:                   983.592 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.294 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9156.779 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 169363.230 ops/s
[info]                  ·gc.alloc.rate:                   979.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9208.081 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 170103.180 ops/s
[info]                  ·gc.alloc.rate:                   983.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      994.033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9198.846 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 170323.181 ops/s
[info]                  ·gc.alloc.rate:                   985.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.480 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9217.743 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 170310.627 ops/s
[info]                  ·gc.alloc.rate:                   985.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9252.195 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   170036.333 ±(99.9%) 1512.439 ops/s [Average]
[info]   (min, avg, max) = (169363.230, 170036.333, 170323.181), stdev = 392.776
[info]   CI (99.9%): [168523.895, 171548.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   983.421 ±(99.9%) 8.910 MB/sec [Average]
[info]   (min, avg, max) = (979.487, 983.421, 985.172), stdev = 2.314
[info]   CI (99.9%): [974.511, 992.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9104.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9104.002, 9104.002, 9104.003), stdev = 0.001
[info]   CI (99.9%): [9104.002, 9104.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.732 ±(99.9%) 0.620 B/op [Average]
[info]   (min, avg, max) = (0.577, 0.732, 0.962), stdev = 0.161
[info]   CI (99.9%): [0.112, 1.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   994.519 ±(99.9%) 18.703 MB/sec [Average]
[info]   (min, avg, max) = (989.294, 994.519, 1001.104), stdev = 4.857
[info]   CI (99.9%): [975.816, 1013.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9206.729 ±(99.9%) 132.659 B/op [Average]
[info]   (min, avg, max) = (9156.779, 9206.729, 9252.195), stdev = 34.451
[info]   CI (99.9%): [9074.070, 9339.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Run progress: 50.00% complete, ETA 00:31:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21662.688 ops/s
[info] # Warmup Iteration   2: 28145.912 ops/s
[info] # Warmup Iteration   3: 28633.594 ops/s
[info] Iteration   1: 28514.568 ops/s
[info]                  ·gc.alloc.rate:                   1062.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              58640.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.982 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54046.519 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 28263.701 ops/s
[info]                  ·gc.alloc.rate:                   1052.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              58618.212 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.983 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54639.608 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 28263.660 ops/s
[info]                  ·gc.alloc.rate:                   1052.520 MB/sec
[info]                  ·gc.alloc.rate.norm:              58616.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.773 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73221.162 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 28025.179 ops/s
[info]                  ·gc.alloc.rate:                   1043.733 MB/sec
[info]                  ·gc.alloc.rate.norm:              58616.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.514 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55683.388 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 28661.378 ops/s
[info]                  ·gc.alloc.rate:                   1067.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              58616.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.092 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54734.870 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   28345.697 ±(99.9%) 951.735 ops/s [Average]
[info]   (min, avg, max) = (28025.179, 28345.697, 28661.378), stdev = 247.162
[info]   CI (99.9%): [27393.963, 29297.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1055.729 ±(99.9%) 36.146 MB/sec [Average]
[info]   (min, avg, max) = (1043.733, 1055.729, 1067.794), stdev = 9.387
[info]   CI (99.9%): [1019.584, 1091.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   58621.255 ±(99.9%) 40.557 B/op [Average]
[info]   (min, avg, max) = (58616.014, 58621.255, 58640.019), stdev = 10.533
[info]   CI (99.9%): [58580.697, 58661.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4.398 ±(99.9%) 5.883 B/op [Average]
[info]   (min, avg, max) = (2.298, 4.398, 5.845), stdev = 1.528
[info]   CI (99.9%): [≈ 0, 10.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1052.669 ±(99.9%) 564.929 MB/sec [Average]
[info]   (min, avg, max) = (978.982, 1052.669, 1314.773), stdev = 146.710
[info]   CI (99.9%): [487.739, 1617.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   58465.109 ±(99.9%) 31843.693 B/op [Average]
[info]   (min, avg, max) = (54046.519, 58465.109, 73221.162), stdev = 8269.706
[info]   CI (99.9%): [26621.417, 90308.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 1.000
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Run progress: 50.34% complete, ETA 00:30:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 643539.977 ops/s
[info] # Warmup Iteration   2: 713533.893 ops/s
[info] # Warmup Iteration   3: 746406.537 ops/s
[info] Iteration   1: 738028.484 ops/s
[info]                  ·gc.alloc.rate:                   1012.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.273 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2088.217 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 741000.987 ops/s
[info]                  ·gc.alloc.rate:                   1017.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.714 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2082.731 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 741660.830 ops/s
[info]                  ·gc.alloc.rate:                   1017.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      984.764 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2090.067 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 742339.890 ops/s
[info]                  ·gc.alloc.rate:                   1019.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.139 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2096.635 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 743297.285 ops/s
[info]                  ·gc.alloc.rate:                   1019.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      994.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2105.215 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   741265.495 ±(99.9%) 7698.157 ops/s [Average]
[info]   (min, avg, max) = (738028.484, 741265.495, 743297.285), stdev = 1999.187
[info]   CI (99.9%): [733567.339, 748963.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1017.341 ±(99.9%) 10.389 MB/sec [Average]
[info]   (min, avg, max) = (1012.936, 1017.341, 1019.921), stdev = 2.698
[info]   CI (99.9%): [1006.951, 1027.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2160.001, 2160.001, 2160.001), stdev = 0.001
[info]   CI (99.9%): [2160.000, 2160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.150 ±(99.9%) 0.194 B/op [Average]
[info]   (min, avg, max) = (0.089, 0.150, 0.221), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   985.588 ±(99.9%) 23.467 MB/sec [Average]
[info]   (min, avg, max) = (979.273, 985.588, 994.052), stdev = 6.094
[info]   CI (99.9%): [962.122, 1009.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2092.573 ±(99.9%) 33.260 B/op [Average]
[info]   (min, avg, max) = (2082.731, 2092.573, 2105.215), stdev = 8.638
[info]   CI (99.9%): [2059.313, 2125.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 50.68% complete, ETA 00:30:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 704450.803 ops/s
[info] # Warmup Iteration   2: 769720.328 ops/s
[info] # Warmup Iteration   3: 774473.871 ops/s
[info] Iteration   1: 772618.191 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 772605.878 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 771895.630 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 772966.868 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 777549.981 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   773527.310 ±(99.9%) 8787.970 ops/s [Average]
[info]   (min, avg, max) = (771895.630, 773527.310, 777549.981), stdev = 2282.208
[info]   CI (99.9%): [764739.340, 782315.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Run progress: 51.03% complete, ETA 00:30:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10493.872 ops/s
[info] # Warmup Iteration   2: 27998.901 ops/s
[info] # Warmup Iteration   3: 28001.254 ops/s
[info] Iteration   1: 28285.188 ops/s
[info]                  ·gc.alloc.rate:                   1019.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              56752.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.969 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54597.117 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 28096.228 ops/s
[info]                  ·gc.alloc.rate:                   1013.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              56751.447 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1310.273 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73376.440 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 28306.527 ops/s
[info]                  ·gc.alloc.rate:                   1020.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              56752.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.461 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54797.365 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 28347.112 ops/s
[info]                  ·gc.alloc.rate:                   1022.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              56752.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.718 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55013.995 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 28194.472 ops/s
[info]                  ·gc.alloc.rate:                   1016.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              56752.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995.089 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55535.595 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   28245.905 ±(99.9%) 387.509 ops/s [Average]
[info]   (min, avg, max) = (28096.228, 28245.905, 28347.112), stdev = 100.635
[info]   CI (99.9%): [27858.397, 28633.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   1018.521 ±(99.9%) 13.175 MB/sec [Average]
[info]   (min, avg, max) = (1013.403, 1018.521, 1022.017), stdev = 3.422
[info]   CI (99.9%): [1005.346, 1031.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   56751.901 ±(99.9%) 0.978 B/op [Average]
[info]   (min, avg, max) = (56751.447, 56751.901, 56752.016), stdev = 0.254
[info]   CI (99.9%): [56750.923, 56752.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.083), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.018 ±(99.9%) 6.015 B/op [Average]
[info]   (min, avg, max) = (1.157, 3.018, 4.664), stdev = 1.562
[info]   CI (99.9%): [≈ 0, 9.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1052.502 ±(99.9%) 555.251 MB/sec [Average]
[info]   (min, avg, max) = (980.969, 1052.502, 1310.273), stdev = 144.197
[info]   CI (99.9%): [497.251, 1607.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   58664.102 ±(99.9%) 31698.058 B/op [Average]
[info]   (min, avg, max) = (54597.117, 58664.102, 73376.440), stdev = 8231.885
[info]   CI (99.9%): [26966.044, 90362.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Run progress: 51.37% complete, ETA 00:30:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7994.550 ops/s
[info] # Warmup Iteration   2: 27948.812 ops/s
[info] # Warmup Iteration   3: 28387.057 ops/s
[info] Iteration   1: 28454.710 ops/s
[info]                  ·gc.alloc.rate:                   779.887 MB/sec
[info]                  ·gc.alloc.rate.norm:              43144.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      649.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35941.177 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 27853.108 ops/s
[info]                  ·gc.alloc.rate:                   763.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              43144.517 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.742 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55424.947 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 27858.025 ops/s
[info]                  ·gc.alloc.rate:                   763.555 MB/sec
[info]                  ·gc.alloc.rate.norm:              43144.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37181.678 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 28074.257 ops/s
[info]                  ·gc.alloc.rate:                   769.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              43144.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.553 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37081.053 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 28211.292 ops/s
[info]                  ·gc.alloc.rate:                   773.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              43144.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995.618 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55537.330 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   28090.278 ±(99.9%) 977.758 ops/s [Average]
[info]   (min, avg, max) = (27853.108, 28090.278, 28454.710), stdev = 253.921
[info]   CI (99.9%): [27112.521, 29068.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   770.009 ±(99.9%) 26.834 MB/sec [Average]
[info]   (min, avg, max) = (763.441, 770.009, 779.887), stdev = 6.969
[info]   CI (99.9%): [743.175, 796.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   43144.115 ±(99.9%) 0.865 B/op [Average]
[info]   (min, avg, max) = (43144.014, 43144.115, 43144.517), stdev = 0.225
[info]   CI (99.9%): [43143.250, 43144.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.125), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.798 ±(99.9%) 9.803 B/op [Average]
[info]   (min, avg, max) = (1.151, 2.798, 6.968), stdev = 2.546
[info]   CI (99.9%): [≈ 0, 12.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   789.127 ±(99.9%) 700.191 MB/sec [Average]
[info]   (min, avg, max) = (649.686, 789.127, 995.618), stdev = 181.837
[info]   CI (99.9%): [88.936, 1489.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   44233.237 ±(99.9%) 39582.735 B/op [Average]
[info]   (min, avg, max) = (35941.177, 44233.237, 55537.330), stdev = 10279.511
[info]   CI (99.9%): [4650.501, 83815.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 1.095
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Run progress: 51.71% complete, ETA 00:30:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 185989.741 ops/s
[info] # Warmup Iteration   2: 200824.431 ops/s
[info] # Warmup Iteration   3: 202264.590 ops/s
[info] Iteration   1: 203123.561 ops/s
[info]                  ·gc.alloc.rate:                   528.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      331.334 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2567.800 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 199197.652 ops/s
[info]                  ·gc.alloc.rate:                   518.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5228.959 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 200425.718 ops/s
[info]                  ·gc.alloc.rate:                   521.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.335 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2594.540 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 200960.332 ops/s
[info]                  ·gc.alloc.rate:                   523.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.596 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5164.859 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 204787.848 ops/s
[info]                  ·gc.alloc.rate:                   532.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.139 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5073.449 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   201699.022 ±(99.9%) 8609.005 ops/s [Average]
[info]   (min, avg, max) = (199197.652, 201699.022, 204787.848), stdev = 2235.731
[info]   CI (99.9%): [193090.017, 210308.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   524.879 ±(99.9%) 22.467 MB/sec [Average]
[info]   (min, avg, max) = (518.319, 524.879, 532.957), stdev = 5.834
[info]   CI (99.9%): [502.412, 547.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.002, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.558 ±(99.9%) 4.449 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.558, 2.624), stdev = 1.155
[info]   CI (99.9%): [≈ 0, 5.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4.329 ±(99.9%) 34.469 B/op [Average]
[info]   (min, avg, max) = (0.160, 4.329, 20.339), stdev = 8.952
[info]   CI (99.9%): [≈ 0, 38.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   528.618 ±(99.9%) 695.245 MB/sec [Average]
[info]   (min, avg, max) = (330.335, 528.618, 661.686), stdev = 180.553
[info]   CI (99.9%): [≈ 0, 1223.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4125.922 ±(99.9%) 5434.309 B/op [Average]
[info]   (min, avg, max) = (2567.800, 4125.922, 5228.959), stdev = 1411.273
[info]   CI (99.9%): [≈ 0, 9560.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Run progress: 52.05% complete, ETA 00:29:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4103.944 ops/s
[info] # Warmup Iteration   2: 21692.492 ops/s
[info] # Warmup Iteration   3: 22843.035 ops/s
[info] Iteration   1: 22755.875 ops/s
[info]                  ·gc.alloc.rate:                   1423.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              98448.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.879 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1635.017 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113076.306 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 22839.613 ops/s
[info]                  ·gc.alloc.rate:                   1428.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              98448.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320.736 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91022.860 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 22763.910 ops/s
[info]                  ·gc.alloc.rate:                   1423.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              98448.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.765 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92021.560 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 22558.529 ops/s
[info]                  ·gc.alloc.rate:                   1410.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              98448.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.742 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93411.238 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 22659.699 ops/s
[info]                  ·gc.alloc.rate:                   1417.286 MB/sec
[info]                  ·gc.alloc.rate.norm:              98448.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.470 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 116868.292 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   22715.525 ±(99.9%) 417.983 ops/s [Average]
[info]   (min, avg, max) = (22558.529, 22715.525, 22839.613), stdev = 108.549
[info]   CI (99.9%): [22297.542, 23133.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1420.778 ±(99.9%) 26.146 MB/sec [Average]
[info]   (min, avg, max) = (1410.928, 1420.778, 1428.475), stdev = 6.790
[info]   CI (99.9%): [1394.632, 1446.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   98448.020 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (98448.018, 98448.020, 98448.022), stdev = 0.002
[info]   CI (99.9%): [98448.012, 98448.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.104), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5.771 ±(99.9%) 6.820 B/op [Average]
[info]   (min, avg, max) = (2.879, 5.771, 7.261), stdev = 1.771
[info]   CI (99.9%): [≈ 0, 12.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1461.546 ±(99.9%) 696.615 MB/sec [Average]
[info]   (min, avg, max) = (1320.736, 1461.546, 1682.470), stdev = 180.909
[info]   CI (99.9%): [764.932, 2158.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   101280.051 ±(99.9%) 48516.308 B/op [Average]
[info]   (min, avg, max) = (91022.860, 101280.051, 116868.292), stdev = 12599.531
[info]   CI (99.9%): [52763.743, 149796.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Run progress: 52.40% complete, ETA 00:29:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63039.928 ops/s
[info] # Warmup Iteration   2: 84071.083 ops/s
[info] # Warmup Iteration   3: 84955.134 ops/s
[info] Iteration   1: 84728.299 ops/s
[info]                  ·gc.alloc.rate:                   1306.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              24280.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1307.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24289.091 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 84731.942 ops/s
[info]                  ·gc.alloc.rate:                   1307.460 MB/sec
[info]                  ·gc.alloc.rate.norm:              24280.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1315.279 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24425.199 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 84696.155 ops/s
[info]                  ·gc.alloc.rate:                   1306.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              24280.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1323.679 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24596.212 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 84295.283 ops/s
[info]                  ·gc.alloc.rate:                   1300.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              24280.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1332.399 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24874.002 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 84663.215 ops/s
[info]                  ·gc.alloc.rate:                   1306.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              24280.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.643 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24902.705 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   84622.979 ±(99.9%) 713.470 ops/s [Average]
[info]   (min, avg, max) = (84295.283, 84622.979, 84731.942), stdev = 185.286
[info]   CI (99.9%): [83909.509, 85336.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1305.559 ±(99.9%) 10.873 MB/sec [Average]
[info]   (min, avg, max) = (1300.580, 1305.559, 1307.460), stdev = 2.824
[info]   CI (99.9%): [1294.686, 1316.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   24280.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24280.005, 24280.005, 24280.005), stdev = 0.001
[info]   CI (99.9%): [24280.004, 24280.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.471 ±(99.9%) 2.206 B/op [Average]
[info]   (min, avg, max) = (0.773, 1.471, 2.320), stdev = 0.573
[info]   CI (99.9%): [≈ 0, 3.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1323.688 ±(99.9%) 49.658 MB/sec [Average]
[info]   (min, avg, max) = (1307.437, 1323.688, 1339.643), stdev = 12.896
[info]   CI (99.9%): [1274.029, 1373.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   24617.442 ±(99.9%) 1041.136 B/op [Average]
[info]   (min, avg, max) = (24289.091, 24617.442, 24902.705), stdev = 270.380
[info]   CI (99.9%): [23576.305, 25658.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Run progress: 52.74% complete, ETA 00:29:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 109298.039 ops/s
[info] # Warmup Iteration   2: 184685.039 ops/s
[info] # Warmup Iteration   3: 184691.093 ops/s
[info] Iteration   1: 182812.214 ops/s
[info]                  ·gc.alloc.rate:                   1190.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              10248.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1304.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11234.067 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 186131.270 ops/s
[info]                  ·gc.alloc.rate:                   1211.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              10248.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.434 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11141.342 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 184869.759 ops/s
[info]                  ·gc.alloc.rate:                   1203.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              10248.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      994.684 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8469.796 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 186266.205 ops/s
[info]                  ·gc.alloc.rate:                   1213.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              10248.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334.825 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11274.527 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 187205.281 ops/s
[info]                  ·gc.alloc.rate:                   1218.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              10248.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.467 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11279.467 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   185456.946 ±(99.9%) 6530.698 ops/s [Average]
[info]   (min, avg, max) = (182812.214, 185456.946, 187205.281), stdev = 1696.002
[info]   CI (99.9%): [178926.248, 191987.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1207.518 ±(99.9%) 42.843 MB/sec [Average]
[info]   (min, avg, max) = (1190.188, 1207.518, 1218.795), stdev = 11.126
[info]   CI (99.9%): [1164.675, 1250.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   10248.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10248.002, 10248.002, 10248.002), stdev = 0.001
[info]   CI (99.9%): [10248.002, 10248.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.636 ±(99.9%) 1.031 B/op [Average]
[info]   (min, avg, max) = (0.352, 0.636, 1.056), stdev = 0.268
[info]   CI (99.9%): [≈ 0, 1.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1258.624 ±(99.9%) 570.870 MB/sec [Average]
[info]   (min, avg, max) = (994.684, 1258.624, 1341.467), stdev = 148.253
[info]   CI (99.9%): [687.754, 1829.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10679.840 ±(99.9%) 4762.070 B/op [Average]
[info]   (min, avg, max) = (8469.796, 10679.840, 11279.467), stdev = 1236.694
[info]   CI (99.9%): [5917.770, 15441.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Run progress: 53.08% complete, ETA 00:29:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 414245.657 ops/s
[info] # Warmup Iteration   2: 457769.201 ops/s
[info] # Warmup Iteration   3: 424823.016 ops/s
[info] Iteration   1: 422963.313 ops/s
[info]                  ·gc.alloc.rate:                   468.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      584.473 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2175.032 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 417098.137 ops/s
[info]                  ·gc.alloc.rate:                   462.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.818 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1240.512 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 424051.991 ops/s
[info]                  ·gc.alloc.rate:                   469.993 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.324 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2427.998 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 426858.174 ops/s
[info]                  ·gc.alloc.rate:                   473.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1203.560 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 410774.418 ops/s
[info]                  ·gc.alloc.rate:                   455.304 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2501.295 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   420349.206 ±(99.9%) 24742.960 ops/s [Average]
[info]   (min, avg, max) = (410774.418, 420349.206, 426858.174), stdev = 6425.668
[info]   CI (99.9%): [395606.247, 445092.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   465.854 ±(99.9%) 27.283 MB/sec [Average]
[info]   (min, avg, max) = (455.304, 465.854, 473.049), stdev = 7.085
[info]   CI (99.9%): [438.571, 493.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1744.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1744.001, 1744.001, 1744.001), stdev = 0.001
[info]   CI (99.9%): [1744.001, 1744.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.780 ±(99.9%) 6.310 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.780, 3.711), stdev = 1.639
[info]   CI (99.9%): [≈ 0, 7.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.903 ±(99.9%) 23.479 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.903, 13.809), stdev = 6.098
[info]   CI (99.9%): [≈ 0, 26.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   509.417 ±(99.9%) 648.180 MB/sec [Average]
[info]   (min, avg, max) = (326.458, 509.417, 654.324), stdev = 168.330
[info]   CI (99.9%): [≈ 0, 1157.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1909.679 ±(99.9%) 2462.203 B/op [Average]
[info]   (min, avg, max) = (1203.560, 1909.679, 2501.295), stdev = 639.426
[info]   CI (99.9%): [≈ 0, 4371.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 5.000), stdev = 1.643
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 53.42% complete, ETA 00:29:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 482032.492 ops/s
[info] # Warmup Iteration   2: 528276.886 ops/s
[info] # Warmup Iteration   3: 539057.802 ops/s
[info] Iteration   1: 545160.038 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 546192.266 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 546245.211 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 546152.456 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 546131.186 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   545976.231 ±(99.9%) 1764.858 ops/s [Average]
[info]   (min, avg, max) = (545160.038, 545976.231, 546245.211), stdev = 458.328
[info]   CI (99.9%): [544211.374, 547741.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Run progress: 53.77% complete, ETA 00:28:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83886.833 ops/s
[info] # Warmup Iteration   2: 111804.845 ops/s
[info] # Warmup Iteration   3: 110963.959 ops/s
[info] Iteration   1: 110983.225 ops/s
[info]                  ·gc.alloc.rate:                   1353.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              19200.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1298.517 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18416.041 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 111129.151 ops/s
[info]                  ·gc.alloc.rate:                   1355.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              19200.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1306.669 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18510.109 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 111018.411 ops/s
[info]                  ·gc.alloc.rate:                   1354.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              19200.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1318.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18679.714 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 112241.361 ops/s
[info]                  ·gc.alloc.rate:                   1369.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              19200.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18620.988 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 109884.374 ops/s
[info]                  ·gc.alloc.rate:                   1340.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              19200.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336.043 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19138.220 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   111051.304 ±(99.9%) 3215.771 ops/s [Average]
[info]   (min, avg, max) = (109884.374, 111051.304, 112241.361), stdev = 835.125
[info]   CI (99.9%): [107835.534, 114267.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1354.712 ±(99.9%) 39.495 MB/sec [Average]
[info]   (min, avg, max) = (1340.356, 1354.712, 1369.322), stdev = 10.257
[info]   CI (99.9%): [1315.216, 1394.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   19200.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19200.004, 19200.004, 19200.004), stdev = 0.001
[info]   CI (99.9%): [19200.003, 19200.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.125), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.944 ±(99.9%) 2.464 B/op [Average]
[info]   (min, avg, max) = (0.292, 0.944, 1.771), stdev = 0.640
[info]   CI (99.9%): [≈ 0, 3.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1317.452 ±(99.9%) 58.796 MB/sec [Average]
[info]   (min, avg, max) = (1298.517, 1317.452, 1336.043), stdev = 15.269
[info]   CI (99.9%): [1258.656, 1376.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   18673.014 ±(99.9%) 1074.980 B/op [Average]
[info]   (min, avg, max) = (18416.041, 18673.014, 19138.220), stdev = 279.169
[info]   CI (99.9%): [17598.034, 19747.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Run progress: 54.11% complete, ETA 00:28:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 125865.136 ops/s
[info] # Warmup Iteration   2: 159450.908 ops/s
[info] # Warmup Iteration   3: 161229.057 ops/s
[info] Iteration   1: 160085.135 ops/s
[info]                  ·gc.alloc.rate:                   2694.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              26496.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2670.591 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26262.373 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 159331.513 ops/s
[info]                  ·gc.alloc.rate:                   2681.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              26496.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2694.601 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26623.190 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 160101.553 ops/s
[info]                  ·gc.alloc.rate:                   2694.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              26496.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2708.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26626.635 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 160893.811 ops/s
[info]                  ·gc.alloc.rate:                   2708.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              26496.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2716.341 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26573.118 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 160628.587 ops/s
[info]                  ·gc.alloc.rate:                   2703.947 MB/sec
[info]                  ·gc.alloc.rate.norm:              26496.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2720.270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26655.946 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   160208.120 ±(99.9%) 2311.900 ops/s [Average]
[info]   (min, avg, max) = (159331.513, 160208.120, 160893.811), stdev = 600.393
[info]   CI (99.9%): [157896.220, 162520.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   2696.672 ±(99.9%) 39.635 MB/sec [Average]
[info]   (min, avg, max) = (2681.728, 2696.672, 2708.459), stdev = 10.293
[info]   CI (99.9%): [2657.037, 2736.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   26496.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (26496.003, 26496.003, 26496.003), stdev = 0.001
[info]   CI (99.9%): [26496.002, 26496.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.112, 0.146), stdev = 0.028
[info]   CI (99.9%): [0.005, 0.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.105 ±(99.9%) 1.062 B/op [Average]
[info]   (min, avg, max) = (0.815, 1.105, 1.433), stdev = 0.276
[info]   CI (99.9%): [0.042, 2.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2701.993 ±(99.9%) 77.462 MB/sec [Average]
[info]   (min, avg, max) = (2670.591, 2701.993, 2720.270), stdev = 20.117
[info]   CI (99.9%): [2624.531, 2779.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   26548.252 ±(99.9%) 625.960 B/op [Average]
[info]   (min, avg, max) = (26262.373, 26548.252, 26655.946), stdev = 162.560
[info]   CI (99.9%): [25922.293, 27174.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   40.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.000, 8.000), stdev = 0.001
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Run progress: 54.45% complete, ETA 00:28:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 237055.265 ops/s
[info] # Warmup Iteration   2: 372648.141 ops/s
[info] # Warmup Iteration   3: 377423.174 ops/s
[info] Iteration   1: 375714.676 ops/s
[info]                  ·gc.alloc.rate:                   383.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.717 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1071.536 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 375987.709 ops/s
[info]                  ·gc.alloc.rate:                   384.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.697 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1355.211 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 374967.564 ops/s
[info]                  ·gc.alloc.rate:                   383.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.698 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1358.897 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 359122.114 ops/s
[info]                  ·gc.alloc.rate:                   366.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.712 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1427.615 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 376775.723 ops/s
[info]                  ·gc.alloc.rate:                   384.980 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.163 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2728.160 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   372513.557 ±(99.9%) 28933.423 ops/s [Average]
[info]   (min, avg, max) = (359122.114, 372513.557, 376775.723), stdev = 7513.918
[info]   CI (99.9%): [343580.134, 401446.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   380.541 ±(99.9%) 29.554 MB/sec [Average]
[info]   (min, avg, max) = (366.868, 380.541, 384.980), stdev = 7.675
[info]   CI (99.9%): [350.986, 410.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1608.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1608.001, 1608.001, 1608.001), stdev = 0.001
[info]   CI (99.9%): [1608.001, 1608.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.104), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.176 ±(99.9%) 0.628 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.176, 0.436), stdev = 0.163
[info]   CI (99.9%): [≈ 0, 0.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   376.397 ±(99.9%) 606.664 MB/sec [Average]
[info]   (min, avg, max) = (255.717, 376.397, 653.163), stdev = 157.549
[info]   CI (99.9%): [≈ 0, 983.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1588.284 ±(99.9%) 2509.649 B/op [Average]
[info]   (min, avg, max) = (1071.536, 1588.284, 2728.160), stdev = 651.748
[info]   CI (99.9%): [≈ 0, 4097.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Run progress: 54.79% complete, ETA 00:28:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 862893.125 ops/s
[info] # Warmup Iteration   2: 896292.390 ops/s
[info] # Warmup Iteration   3: 931878.158 ops/s
[info] Iteration   1: 923245.481 ops/s
[info]                  ·gc.alloc.rate:                   319.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.498 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 872.089 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 921189.184 ops/s
[info]                  ·gc.alloc.rate:                   318.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.776 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 437.037 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 921718.311 ops/s
[info]                  ·gc.alloc.rate:                   318.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 563.613 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 924644.334 ops/s
[info]                  ·gc.alloc.rate:                   319.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 561.830 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 928055.312 ops/s
[info]                  ·gc.alloc.rate:                   320.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.356 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 556.929 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   923770.524 ±(99.9%) 10593.386 ops/s [Average]
[info]   (min, avg, max) = (921189.184, 923770.524, 928055.312), stdev = 2751.069
[info]   CI (99.9%): [913177.138, 934363.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   319.281 ±(99.9%) 3.558 MB/sec [Average]
[info]   (min, avg, max) = (318.376, 319.281, 320.734), stdev = 0.924
[info]   CI (99.9%): [315.723, 322.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (544.000, 544.000, 544.000), stdev = 0.001
[info]   CI (99.9%): [544.000, 544.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.673 ±(99.9%) 5.592 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.673, 3.270), stdev = 1.452
[info]   CI (99.9%): [≈ 0, 6.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.149 ±(99.9%) 9.547 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.149, 5.583), stdev = 2.479
[info]   CI (99.9%): [≈ 0, 10.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   351.164 ±(99.9%) 366.388 MB/sec [Average]
[info]   (min, avg, max) = (255.776, 351.164, 511.498), stdev = 95.150
[info]   CI (99.9%): [≈ 0, 717.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   598.300 ±(99.9%) 624.503 B/op [Average]
[info]   (min, avg, max) = (437.037, 598.300, 872.089), stdev = 162.181
[info]   CI (99.9%): [≈ 0, 1222.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 5.000), stdev = 1.673
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Run progress: 55.14% complete, ETA 00:28:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44769.193 ops/s
[info] # Warmup Iteration   2: 75255.664 ops/s
[info] # Warmup Iteration   3: 75320.774 ops/s
[info] Iteration   1: 75949.597 ops/s
[info]                  ·gc.alloc.rate:                   3257.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              67512.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3366.887 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69785.893 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 76131.845 ops/s
[info]                  ·gc.alloc.rate:                   3265.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              67512.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3388.121 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70045.989 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 75195.414 ops/s
[info]                  ·gc.alloc.rate:                   3225.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              67512.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3057.638 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63996.222 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 75321.007 ops/s
[info]                  ·gc.alloc.rate:                   3230.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              67512.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402.242 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71099.335 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 75427.821 ops/s
[info]                  ·gc.alloc.rate:                   3235.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              67512.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3063.177 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63923.662 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   75605.137 ±(99.9%) 1583.123 ops/s [Average]
[info]   (min, avg, max) = (75195.414, 75605.137, 76131.845), stdev = 411.132
[info]   CI (99.9%): [74022.014, 77188.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3242.812 ±(99.9%) 67.467 MB/sec [Average]
[info]   (min, avg, max) = (3225.616, 3242.812, 3265.552), stdev = 17.521
[info]   CI (99.9%): [3175.345, 3310.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67512.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (67512.005, 67512.005, 67512.006), stdev = 0.001
[info]   CI (99.9%): [67512.005, 67512.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.154 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.154, 0.208), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.206 ±(99.9%) 4.006 B/op [Average]
[info]   (min, avg, max) = (1.737, 3.206, 4.303), stdev = 1.040
[info]   CI (99.9%): [≈ 0, 7.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3255.613 ±(99.9%) 687.926 MB/sec [Average]
[info]   (min, avg, max) = (3057.638, 3255.613, 3402.242), stdev = 178.652
[info]   CI (99.9%): [2567.687, 3943.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   67770.220 ±(99.9%) 13527.239 B/op [Average]
[info]   (min, avg, max) = (63923.662, 67770.220, 71099.335), stdev = 3512.981
[info]   CI (99.9%): [54242.981, 81297.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   48.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.600, 10.000), stdev = 0.548
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.200, 11.000), stdev = 0.837
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Run progress: 55.48% complete, ETA 00:27:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 197576.626 ops/s
[info] # Warmup Iteration   2: 252576.036 ops/s
[info] # Warmup Iteration   3: 252374.022 ops/s
[info] Iteration   1: 251849.452 ops/s
[info]                  ·gc.alloc.rate:                   1715.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              10720.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1642.080 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10261.424 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 252654.600 ops/s
[info]                  ·gc.alloc.rate:                   1721.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              10720.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1655.619 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10311.645 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 253094.773 ops/s
[info]                  ·gc.alloc.rate:                   1723.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              10720.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1668.786 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10378.680 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 251809.163 ops/s
[info]                  ·gc.alloc.rate:                   1715.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              10720.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.873 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10494.129 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 251864.989 ops/s
[info]                  ·gc.alloc.rate:                   1715.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              10720.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.450 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10539.665 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   252254.595 ±(99.9%) 2261.943 ops/s [Average]
[info]   (min, avg, max) = (251809.163, 252254.595, 253094.773), stdev = 587.419
[info]   CI (99.9%): [249992.653, 254516.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1718.126 ±(99.9%) 15.501 MB/sec [Average]
[info]   (min, avg, max) = (1715.009, 1718.126, 1723.667), stdev = 4.025
[info]   CI (99.9%): [1702.625, 1733.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10720.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10720.002, 10720.002, 10720.002), stdev = 0.001
[info]   CI (99.9%): [10720.001, 10720.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.442 ±(99.9%) 0.758 B/op [Average]
[info]   (min, avg, max) = (0.130, 0.442, 0.648), stdev = 0.197
[info]   CI (99.9%): [≈ 0, 1.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1666.361 ±(99.9%) 68.639 MB/sec [Average]
[info]   (min, avg, max) = (1642.080, 1666.361, 1686.450), stdev = 17.825
[info]   CI (99.9%): [1597.722, 1735.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10397.109 ±(99.9%) 454.757 B/op [Average]
[info]   (min, avg, max) = (10261.424, 10397.109, 10539.665), stdev = 118.099
[info]   CI (99.9%): [9942.352, 10851.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Run progress: 55.82% complete, ETA 00:27:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 660625.705 ops/s
[info] # Warmup Iteration   2: 1014362.385 ops/s
[info] # Warmup Iteration   3: 972631.778 ops/s
[info] Iteration   1: 991764.549 ops/s
[info]                  ·gc.alloc.rate:                   650.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      643.264 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1021.172 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1013616.794 ops/s
[info]                  ·gc.alloc.rate:                   664.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1005.353 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1022436.587 ops/s
[info]                  ·gc.alloc.rate:                   670.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      650.743 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1001.832 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1006768.531 ops/s
[info]                  ·gc.alloc.rate:                   660.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.109 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1022.621 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1014841.754 ops/s
[info]                  ·gc.alloc.rate:                   665.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.433 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1019.646 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1009885.643 ±(99.9%) 44495.401 ops/s [Average]
[info]   (min, avg, max) = (991764.549, 1009885.643, 1022436.587), stdev = 11555.314
[info]   CI (99.9%): [965390.241, 1054381.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   662.084 ±(99.9%) 29.376 MB/sec [Average]
[info]   (min, avg, max) = (650.085, 662.084, 670.339), stdev = 7.629
[info]   CI (99.9%): [632.708, 691.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1032.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1032.000, 1032.000, 1032.000), stdev = 0.001
[info]   CI (99.9%): [1032.000, 1032.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.125), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.111 ±(99.9%) 0.246 B/op [Average]
[info]   (min, avg, max) = (0.064, 0.111, 0.194), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   650.576 ±(99.9%) 21.397 MB/sec [Average]
[info]   (min, avg, max) = (643.264, 650.576, 657.433), stdev = 5.557
[info]   CI (99.9%): [629.179, 671.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1014.125 ±(99.9%) 37.550 B/op [Average]
[info]   (min, avg, max) = (1001.832, 1014.125, 1022.621), stdev = 9.752
[info]   CI (99.9%): [976.575, 1051.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Run progress: 56.16% complete, ETA 00:27:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1150281.002 ops/s
[info] # Warmup Iteration   2: 1311949.345 ops/s
[info] # Warmup Iteration   3: 1295962.751 ops/s
[info] Iteration   1: 1293291.577 ops/s
[info]                  ·gc.alloc.rate:                   532.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 400.050 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1302049.209 ops/s
[info]                  ·gc.alloc.rate:                   535.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 792.744 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1326031.996 ops/s
[info]                  ·gc.alloc.rate:                   545.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.424 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 775.642 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1316929.025 ops/s
[info]                  ·gc.alloc.rate:                   542.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 390.112 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1282789.530 ops/s
[info]                  ·gc.alloc.rate:                   528.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.910 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 800.973 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1304218.267 ±(99.9%) 67267.628 ops/s [Average]
[info]   (min, avg, max) = (1282789.530, 1304218.267, 1326031.996), stdev = 17469.189
[info]   CI (99.9%): [1236950.640, 1371485.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   536.950 ±(99.9%) 27.547 MB/sec [Average]
[info]   (min, avg, max) = (528.215, 536.950, 545.895), stdev = 7.154
[info]   CI (99.9%): [509.403, 564.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.784 ±(99.9%) 6.172 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.784, 3.650), stdev = 1.603
[info]   CI (99.9%): [≈ 0, 6.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.954 ±(99.9%) 7.512 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.954, 4.442), stdev = 1.951
[info]   CI (99.9%): [≈ 0, 8.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   523.431 ±(99.9%) 688.470 MB/sec [Average]
[info]   (min, avg, max) = (326.416, 523.431, 655.666), stdev = 178.793
[info]   CI (99.9%): [≈ 0, 1211.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   631.904 ±(99.9%) 833.319 B/op [Average]
[info]   (min, avg, max) = (390.112, 631.904, 800.973), stdev = 216.410
[info]   CI (99.9%): [≈ 0, 1465.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 56.51% complete, ETA 00:27:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1207086.740 ops/s
[info] # Warmup Iteration   2: 1321412.815 ops/s
[info] # Warmup Iteration   3: 1313958.717 ops/s
[info] Iteration   1: 1312506.946 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1312644.716 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1243775.973 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1311996.308 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1311957.599 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   1298576.309 ±(99.9%) 117967.649 ops/s [Average]
[info]   (min, avg, max) = (1243775.973, 1298576.309, 1312644.716), stdev = 30635.824
[info]   CI (99.9%): [1180608.660, 1416543.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Run progress: 56.85% complete, ETA 00:26:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27525.776 ops/s
[info] # Warmup Iteration   2: 41108.030 ops/s
[info] # Warmup Iteration   3: 42089.353 ops/s
[info] Iteration   1: 41886.395 ops/s
[info]                  ·gc.alloc.rate:                   2048.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              77000.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1968.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73961.476 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 42169.816 ops/s
[info]                  ·gc.alloc.rate:                   2063.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              77000.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1991.736 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74335.354 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 42367.681 ops/s
[info]                  ·gc.alloc.rate:                   2072.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              77000.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2008.817 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74633.153 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 42052.950 ops/s
[info]                  ·gc.alloc.rate:                   2057.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              77000.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.459 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75665.807 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 42048.791 ops/s
[info]                  ·gc.alloc.rate:                   2057.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              77000.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2367.935 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88636.287 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   42105.127 ±(99.9%) 685.747 ops/s [Average]
[info]   (min, avg, max) = (41886.395, 42105.127, 42367.681), stdev = 178.086
[info]   CI (99.9%): [41419.380, 42790.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2059.742 ±(99.9%) 33.727 MB/sec [Average]
[info]   (min, avg, max) = (2048.883, 2059.742, 2072.523), stdev = 8.759
[info]   CI (99.9%): [2026.015, 2093.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   77000.010 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (77000.010, 77000.010, 77000.013), stdev = 0.001
[info]   CI (99.9%): [77000.005, 77000.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.146), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.733 ±(99.9%) 5.347 B/op [Average]
[info]   (min, avg, max) = (2.337, 3.733, 5.454), stdev = 1.389
[info]   CI (99.9%): [≈ 0, 9.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2071.596 ±(99.9%) 642.535 MB/sec [Average]
[info]   (min, avg, max) = (1968.031, 2071.596, 2367.935), stdev = 166.864
[info]   CI (99.9%): [1429.061, 2714.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   77446.415 ±(99.9%) 24210.244 B/op [Average]
[info]   (min, avg, max) = (73961.476, 77446.415, 88636.287), stdev = 6287.323
[info]   CI (99.9%): [53236.172, 101656.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Run progress: 57.19% complete, ETA 00:26:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32301.251 ops/s
[info] # Warmup Iteration   2: 41108.095 ops/s
[info] # Warmup Iteration   3: 41232.461 ops/s
[info] Iteration   1: 41480.443 ops/s
[info]                  ·gc.alloc.rate:                   827.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.308 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37204.519 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 41625.095 ops/s
[info]                  ·gc.alloc.rate:                   830.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24696.230 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 41239.087 ops/s
[info]                  ·gc.alloc.rate:                   823.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.524 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37460.946 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 41006.377 ops/s
[info]                  ·gc.alloc.rate:                   818.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25183.414 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 41543.364 ops/s
[info]                  ·gc.alloc.rate:                   829.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.321 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37475.280 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   41378.873 ±(99.9%) 974.701 ops/s [Average]
[info]   (min, avg, max) = (41006.377, 41378.873, 41625.095), stdev = 253.127
[info]   CI (99.9%): [40404.172, 42353.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   826.126 ±(99.9%) 19.418 MB/sec [Average]
[info]   (min, avg, max) = (818.716, 826.126, 830.997), stdev = 5.043
[info]   CI (99.9%): [806.708, 845.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31424.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (31424.010, 31424.010, 31424.011), stdev = 0.001
[info]   CI (99.9%): [31424.009, 31424.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.179 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.083, 0.146), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.167 ±(99.9%) 6.790 B/op [Average]
[info]   (min, avg, max) = (0.787, 3.167, 5.529), stdev = 1.763
[info]   CI (99.9%): [≈ 0, 9.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   852.072 ±(99.9%) 694.269 MB/sec [Average]
[info]   (min, avg, max) = (653.083, 852.072, 989.321), stdev = 180.299
[info]   CI (99.9%): [157.804, 1546.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   32404.078 ±(99.9%) 26249.570 B/op [Average]
[info]   (min, avg, max) = (24696.230, 32404.078, 37475.280), stdev = 6816.930
[info]   CI (99.9%): [6154.508, 58653.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Run progress: 57.53% complete, ETA 00:26:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49861.372 ops/s
[info] # Warmup Iteration   2: 82175.345 ops/s
[info] # Warmup Iteration   3: 82938.966 ops/s
[info] Iteration   1: 83605.632 ops/s
[info]                  ·gc.alloc.rate:                   879.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12295.397 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 82402.078 ops/s
[info]                  ·gc.alloc.rate:                   866.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      984.802 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18811.591 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 83057.066 ops/s
[info]                  ·gc.alloc.rate:                   873.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.344 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18789.038 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 82318.088 ops/s
[info]                  ·gc.alloc.rate:                   866.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.047 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12697.585 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 83066.457 ops/s
[info]                  ·gc.alloc.rate:                   873.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1000.070 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18950.853 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   82889.864 ±(99.9%) 2052.369 ops/s [Average]
[info]   (min, avg, max) = (82318.088, 82889.864, 83605.632), stdev = 532.994
[info]   CI (99.9%): [80837.496, 84942.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   872.029 ±(99.9%) 21.493 MB/sec [Average]
[info]   (min, avg, max) = (866.041, 872.029, 879.535), stdev = 5.582
[info]   CI (99.9%): [850.535, 893.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   16560.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16560.005, 16560.005, 16560.005), stdev = 0.001
[info]   CI (99.9%): [16560.004, 16560.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.062), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.710 ±(99.9%) 1.664 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.710, 1.183), stdev = 0.432
[info]   CI (99.9%): [≈ 0, 2.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   858.659 ±(99.9%) 703.915 MB/sec [Average]
[info]   (min, avg, max) = (653.033, 858.659, 1000.070), stdev = 182.805
[info]   CI (99.9%): [154.744, 1562.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   16308.893 ±(99.9%) 13414.433 B/op [Average]
[info]   (min, avg, max) = (12295.397, 16308.893, 18950.853), stdev = 3483.686
[info]   CI (99.9%): [2894.459, 29723.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Run progress: 57.88% complete, ETA 00:26:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 221137.722 ops/s
[info] # Warmup Iteration   2: 242292.420 ops/s
[info] # Warmup Iteration   3: 243871.275 ops/s
[info] Iteration   1: 241569.552 ops/s
[info]                  ·gc.alloc.rate:                   785.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.682 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4279.264 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 242058.732 ops/s
[info]                  ·gc.alloc.rate:                   787.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.808 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6397.401 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 245488.002 ops/s
[info]                  ·gc.alloc.rate:                   798.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.175 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4213.181 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 242941.554 ops/s
[info]                  ·gc.alloc.rate:                   790.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      987.845 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6397.861 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 245508.409 ops/s
[info]                  ·gc.alloc.rate:                   798.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.366 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4232.141 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   243513.250 ±(99.9%) 7229.764 ops/s [Average]
[info]   (min, avg, max) = (241569.552, 243513.250, 245508.409), stdev = 1877.547
[info]   CI (99.9%): [236283.486, 250743.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   792.226 ±(99.9%) 23.936 MB/sec [Average]
[info]   (min, avg, max) = (785.699, 792.226, 798.904), stdev = 6.216
[info]   CI (99.9%): [768.291, 816.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.002, 5120.002, 5120.002), stdev = 0.001
[info]   CI (99.9%): [5120.001, 5120.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.486 ±(99.9%) 1.080 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.486, 0.678), stdev = 0.280
[info]   CI (99.9%): [≈ 0, 1.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   789.175 ±(99.9%) 691.301 MB/sec [Average]
[info]   (min, avg, max) = (656.682, 789.175, 987.845), stdev = 179.529
[info]   CI (99.9%): [97.875, 1480.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5103.970 ±(99.9%) 4548.345 B/op [Average]
[info]   (min, avg, max) = (4213.181, 5103.970, 6397.861), stdev = 1181.191
[info]   CI (99.9%): [555.624, 9652.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 4.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Run progress: 58.22% complete, ETA 00:26:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13965.981 ops/s
[info] # Warmup Iteration   2: 24032.895 ops/s
[info] # Warmup Iteration   3: 24172.419 ops/s
[info] Iteration   1: 24300.606 ops/s
[info]                  ·gc.alloc.rate:                   1109.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              71896.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.661 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63400.363 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 24345.946 ops/s
[info]                  ·gc.alloc.rate:                   1112.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              71896.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.650 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63711.219 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 24437.260 ops/s
[info]                  ·gc.alloc.rate:                   1116.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              71896.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.921 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85200.554 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 24522.241 ops/s
[info]                  ·gc.alloc.rate:                   1120.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              71896.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      998.818 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64109.097 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 24382.204 ops/s
[info]                  ·gc.alloc.rate:                   1113.683 MB/sec
[info]                  ·gc.alloc.rate.norm:              71896.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1003.051 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64753.986 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   24397.651 ±(99.9%) 330.244 ops/s [Average]
[info]   (min, avg, max) = (24300.606, 24397.651, 24522.241), stdev = 85.763
[info]   CI (99.9%): [24067.408, 24727.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1114.447 ±(99.9%) 15.265 MB/sec [Average]
[info]   (min, avg, max) = (1109.801, 1114.447, 1120.138), stdev = 3.964
[info]   CI (99.9%): [1099.182, 1129.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   71896.019 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (71896.017, 71896.019, 71896.022), stdev = 0.002
[info]   CI (99.9%): [71896.010, 71896.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.054, 0.062), stdev = 0.011
[info]   CI (99.9%): [0.010, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.493 ±(99.9%) 2.870 B/op [Average]
[info]   (min, avg, max) = (2.672, 3.493, 4.045), stdev = 0.745
[info]   CI (99.9%): [0.623, 6.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1057.820 ±(99.9%) 571.902 MB/sec [Average]
[info]   (min, avg, max) = (978.661, 1057.820, 1322.921), stdev = 148.521
[info]   CI (99.9%): [485.919, 1629.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   68235.044 ±(99.9%) 36571.431 B/op [Average]
[info]   (min, avg, max) = (63400.363, 68235.044, 85200.554), stdev = 9497.485
[info]   CI (99.9%): [31663.613, 104806.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Run progress: 58.56% complete, ETA 00:25:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41386.019 ops/s
[info] # Warmup Iteration   2: 51823.463 ops/s
[info] # Warmup Iteration   3: 52348.277 ops/s
[info] Iteration   1: 52437.234 ops/s
[info]                  ·gc.alloc.rate:                   1111.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              33360.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1302.911 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39106.425 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 51299.229 ops/s
[info]                  ·gc.alloc.rate:                   1087.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              33360.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30072.885 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 52045.088 ops/s
[info]                  ·gc.alloc.rate:                   1102.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              33360.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.412 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39754.192 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 52413.678 ops/s
[info]                  ·gc.alloc.rate:                   1110.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              33360.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.148 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29764.428 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 52532.684 ops/s
[info]                  ·gc.alloc.rate:                   1113.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              33360.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29876.633 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   52145.582 ±(99.9%) 1957.017 ops/s [Average]
[info]   (min, avg, max) = (51299.229, 52145.582, 52532.684), stdev = 508.231
[info]   CI (99.9%): [50188.565, 54102.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1105.176 ±(99.9%) 41.724 MB/sec [Average]
[info]   (min, avg, max) = (1087.142, 1105.176, 1113.403), stdev = 10.836
[info]   CI (99.9%): [1063.452, 1146.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   33360.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (33360.008, 33360.008, 33360.008), stdev = 0.001
[info]   CI (99.9%): [33360.007, 33360.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.083), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.138 ±(99.9%) 2.181 B/op [Average]
[info]   (min, avg, max) = (1.250, 2.138, 2.555), stdev = 0.566
[info]   CI (99.9%): [≈ 0, 4.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1117.127 ±(99.9%) 673.868 MB/sec [Average]
[info]   (min, avg, max) = (980.021, 1117.127, 1314.412), stdev = 175.001
[info]   CI (99.9%): [443.259, 1790.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   33714.913 ±(99.9%) 20114.261 B/op [Average]
[info]   (min, avg, max) = (29764.428, 33714.913, 39754.192), stdev = 5223.610
[info]   CI (99.9%): [13600.652, 53829.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Run progress: 58.90% complete, ETA 00:25:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52101.915 ops/s
[info] # Warmup Iteration   2: 88371.915 ops/s
[info] # Warmup Iteration   3: 88403.536 ops/s
[info] Iteration   1: 89154.772 ops/s
[info]                  ·gc.alloc.rate:                   1221.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.613 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23212.841 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 88846.716 ops/s
[info]                  ·gc.alloc.rate:                   1216.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.492 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23482.891 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 86925.103 ops/s
[info]                  ·gc.alloc.rate:                   1190.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              21559.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      999.376 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18097.612 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 88954.594 ops/s
[info]                  ·gc.alloc.rate:                   1218.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.451 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23701.360 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 88915.518 ops/s
[info]                  ·gc.alloc.rate:                   1217.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.489 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23817.874 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   88559.341 ±(99.9%) 3545.387 ops/s [Average]
[info]   (min, avg, max) = (86925.103, 88559.341, 89154.772), stdev = 920.726
[info]   CI (99.9%): [85013.954, 92104.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1212.983 ±(99.9%) 48.582 MB/sec [Average]
[info]   (min, avg, max) = (1190.573, 1212.983, 1221.008), stdev = 12.616
[info]   CI (99.9%): [1164.401, 1261.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21560.009 ±(99.9%) 0.073 B/op [Average]
[info]   (min, avg, max) = (21559.982, 21560.009, 21560.027), stdev = 0.019
[info]   CI (99.9%): [21559.936, 21560.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.146), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.626 ±(99.9%) 2.360 B/op [Average]
[info]   (min, avg, max) = (1.102, 1.626, 2.581), stdev = 0.613
[info]   CI (99.9%): [≈ 0, 3.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1264.884 ±(99.9%) 573.404 MB/sec [Average]
[info]   (min, avg, max) = (999.376, 1264.884, 1345.489), stdev = 148.911
[info]   CI (99.9%): [691.480, 1838.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   22462.516 ±(99.9%) 9437.666 B/op [Average]
[info]   (min, avg, max) = (18097.612, 22462.516, 23817.874), stdev = 2450.932
[info]   CI (99.9%): [13024.849, 31900.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Run progress: 59.25% complete, ETA 00:25:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 226108.239 ops/s
[info] # Warmup Iteration   2: 246118.761 ops/s
[info] # Warmup Iteration   3: 244928.079 ops/s
[info] Iteration   1: 242488.816 ops/s
[info]                  ·gc.alloc.rate:                   772.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.145 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4245.720 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 238312.532 ops/s
[info]                  ·gc.alloc.rate:                   759.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.142 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6467.178 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 247626.191 ops/s
[info]                  ·gc.alloc.rate:                   789.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.511 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4153.405 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 247469.401 ops/s
[info]                  ·gc.alloc.rate:                   789.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6250.043 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 244766.513 ops/s
[info]                  ·gc.alloc.rate:                   779.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.387 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4227.784 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   244132.691 ±(99.9%) 14952.761 ops/s [Average]
[info]   (min, avg, max) = (238312.532, 244132.691, 247626.191), stdev = 3883.185
[info]   CI (99.9%): [229179.930, 259085.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   778.090 ±(99.9%) 48.047 MB/sec [Average]
[info]   (min, avg, max) = (759.431, 778.090, 789.234), stdev = 12.478
[info]   CI (99.9%): [730.042, 826.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5016.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5016.002, 5016.002, 5016.002), stdev = 0.001
[info]   CI (99.9%): [5016.001, 5016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.020, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.564 ±(99.9%) 0.448 B/op [Average]
[info]   (min, avg, max) = (0.397, 0.564, 0.687), stdev = 0.116
[info]   CI (99.9%): [0.117, 1.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   785.462 ±(99.9%) 687.856 MB/sec [Average]
[info]   (min, avg, max) = (653.511, 785.462, 983.123), stdev = 178.634
[info]   CI (99.9%): [97.605, 1473.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5068.826 ±(99.9%) 4545.357 B/op [Average]
[info]   (min, avg, max) = (4153.405, 5068.826, 6467.178), stdev = 1180.415
[info]   CI (99.9%): [523.469, 9614.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 59.59% complete, ETA 00:25:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 250136.612 ops/s
[info] # Warmup Iteration   2: 269372.875 ops/s
[info] # Warmup Iteration   3: 274758.501 ops/s
[info] Iteration   1: 274654.689 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 274700.368 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 274704.263 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 274804.022 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 273926.314 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   274557.931 ±(99.9%) 1375.715 ops/s [Average]
[info]   (min, avg, max) = (273926.314, 274557.931, 274804.022), stdev = 357.269
[info]   CI (99.9%): [273182.217, 275933.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Run progress: 59.93% complete, ETA 00:25:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51492.143 ops/s
[info] # Warmup Iteration   2: 70631.926 ops/s
[info] # Warmup Iteration   3: 71990.643 ops/s
[info] Iteration   1: 72434.205 ops/s
[info]                  ·gc.alloc.rate:                   1074.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      969.906 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21073.704 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 72425.875 ops/s
[info]                  ·gc.alloc.rate:                   1074.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      972.503 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21134.808 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 72037.064 ops/s
[info]                  ·gc.alloc.rate:                   1068.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1304.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28495.653 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 72413.821 ops/s
[info]                  ·gc.alloc.rate:                   1073.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.400 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21420.045 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 71916.596 ops/s
[info]                  ·gc.alloc.rate:                   1066.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              23343.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.840 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21685.878 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   72245.512 ±(99.9%) 958.995 ops/s [Average]
[info]   (min, avg, max) = (71916.596, 72245.512, 72434.205), stdev = 249.048
[info]   CI (99.9%): [71286.517, 73204.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1071.468 ±(99.9%) 14.364 MB/sec [Average]
[info]   (min, avg, max) = (1066.600, 1071.468, 1074.397), stdev = 3.730
[info]   CI (99.9%): [1057.104, 1085.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   23344.006 ±(99.9%) 0.075 B/op [Average]
[info]   (min, avg, max) = (23343.978, 23344.006, 23344.033), stdev = 0.019
[info]   CI (99.9%): [23343.931, 23344.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.995 ±(99.9%) 2.344 B/op [Average]
[info]   (min, avg, max) = (1.357, 1.995, 2.729), stdev = 0.609
[info]   CI (99.9%): [≈ 0, 4.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1044.535 ±(99.9%) 559.585 MB/sec [Average]
[info]   (min, avg, max) = (969.906, 1044.535, 1304.028), stdev = 145.323
[info]   CI (99.9%): [484.950, 1604.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   22762.018 ±(99.9%) 12377.852 B/op [Average]
[info]   (min, avg, max) = (21073.704, 22762.018, 28495.653), stdev = 3214.489
[info]   CI (99.9%): [10384.166, 35139.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Run progress: 60.27% complete, ETA 00:24:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59516.922 ops/s
[info] # Warmup Iteration   2: 79116.325 ops/s
[info] # Warmup Iteration   3: 78641.815 ops/s
[info] Iteration   1: 79137.502 ops/s
[info]                  ·gc.alloc.rate:                   1512.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              30080.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1301.448 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25886.513 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 79174.474 ops/s
[info]                  ·gc.alloc.rate:                   1513.486 MB/sec
[info]                  ·gc.alloc.rate.norm:              30080.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1642.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32634.341 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 78522.122 ops/s
[info]                  ·gc.alloc.rate:                   1500.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              30080.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1654.807 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33172.729 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 79828.700 ops/s
[info]                  ·gc.alloc.rate:                   1525.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              30080.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334.436 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26306.664 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 79829.971 ops/s
[info]                  ·gc.alloc.rate:                   1525.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              30080.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.843 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33082.789 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   79298.554 ±(99.9%) 2115.788 ops/s [Average]
[info]   (min, avg, max) = (78522.122, 79298.554, 79829.971), stdev = 549.463
[info]   CI (99.9%): [77182.766, 81414.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1515.537 ±(99.9%) 40.689 MB/sec [Average]
[info]   (min, avg, max) = (1500.528, 1515.537, 1525.843), stdev = 10.567
[info]   CI (99.9%): [1474.848, 1556.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   30080.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (30080.005, 30080.005, 30080.006), stdev = 0.001
[info]   CI (99.9%): [30080.004, 30080.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.736 ±(99.9%) 3.066 B/op [Average]
[info]   (min, avg, max) = (0.821, 1.736, 2.898), stdev = 0.796
[info]   CI (99.9%): [≈ 0, 4.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1522.108 ±(99.9%) 720.775 MB/sec [Average]
[info]   (min, avg, max) = (1301.448, 1522.108, 1677.843), stdev = 187.183
[info]   CI (99.9%): [801.333, 2242.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   30216.607 ±(99.9%) 14514.995 B/op [Average]
[info]   (min, avg, max) = (25886.513, 30216.607, 33172.729), stdev = 3769.498
[info]   CI (99.9%): [15701.612, 44731.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Run progress: 60.62% complete, ETA 00:24:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49699.185 ops/s
[info] # Warmup Iteration   2: 86222.737 ops/s
[info] # Warmup Iteration   3: 86439.695 ops/s
[info] Iteration   1: 85560.987 ops/s
[info]                  ·gc.alloc.rate:                   966.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              17776.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.044 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17993.969 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 86526.844 ops/s
[info]                  ·gc.alloc.rate:                   977.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              17776.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.469 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17927.017 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 86905.086 ops/s
[info]                  ·gc.alloc.rate:                   981.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              17776.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.763 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17944.946 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 86379.461 ops/s
[info]                  ·gc.alloc.rate:                   975.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              17776.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.365 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18175.997 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 86881.705 ops/s
[info]                  ·gc.alloc.rate:                   981.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              17776.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.723 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18142.977 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   86450.817 ±(99.9%) 2104.416 ops/s [Average]
[info]   (min, avg, max) = (85560.987, 86450.817, 86905.086), stdev = 546.510
[info]   CI (99.9%): [84346.400, 88555.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   976.336 ±(99.9%) 24.094 MB/sec [Average]
[info]   (min, avg, max) = (966.197, 976.336, 981.462), stdev = 6.257
[info]   CI (99.9%): [952.241, 1000.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17776.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17776.005, 17776.005, 17776.005), stdev = 0.001
[info]   CI (99.9%): [17776.004, 17776.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.211 ±(99.9%) 2.373 B/op [Average]
[info]   (min, avg, max) = (0.759, 1.211, 2.262), stdev = 0.616
[info]   CI (99.9%): [≈ 0, 3.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   990.673 ±(99.9%) 36.198 MB/sec [Average]
[info]   (min, avg, max) = (978.044, 990.673, 1001.723), stdev = 9.400
[info]   CI (99.9%): [954.475, 1026.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   18036.981 ±(99.9%) 443.130 B/op [Average]
[info]   (min, avg, max) = (17927.017, 18036.981, 18175.997), stdev = 115.080
[info]   CI (99.9%): [17593.851, 18480.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Run progress: 60.96% complete, ETA 00:24:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 96539.509 ops/s
[info] # Warmup Iteration   2: 107428.896 ops/s
[info] # Warmup Iteration   3: 107678.646 ops/s
[info] Iteration   1: 107652.110 ops/s
[info]                  ·gc.alloc.rate:                   1168.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              17080.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1303.388 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19053.597 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 107757.768 ops/s
[info]                  ·gc.alloc.rate:                   1169.266 MB/sec
[info]                  ·gc.alloc.rate.norm:              17080.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.759 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14326.404 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 107511.867 ops/s
[info]                  ·gc.alloc.rate:                   1166.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              17080.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.754 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19250.305 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 107423.928 ops/s
[info]                  ·gc.alloc.rate:                   1165.712 MB/sec
[info]                  ·gc.alloc.rate.norm:              17080.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1324.200 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19402.169 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 106572.982 ops/s
[info]                  ·gc.alloc.rate:                   1156.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              17080.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      999.390 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14756.068 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   107383.731 ±(99.9%) 1813.567 ops/s [Average]
[info]   (min, avg, max) = (106572.982, 107383.731, 107757.768), stdev = 470.978
[info]   CI (99.9%): [105570.164, 109197.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1165.334 ±(99.9%) 19.196 MB/sec [Average]
[info]   (min, avg, max) = (1156.785, 1165.334, 1169.266), stdev = 4.985
[info]   CI (99.9%): [1146.139, 1184.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   17080.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17080.004, 17080.004, 17080.004), stdev = 0.001
[info]   CI (99.9%): [17080.003, 17080.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.037 ±(99.9%) 1.964 B/op [Average]
[info]   (min, avg, max) = (0.609, 1.037, 1.830), stdev = 0.510
[info]   CI (99.9%): [≈ 0, 3.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1184.498 ±(99.9%) 684.484 MB/sec [Average]
[info]   (min, avg, max) = (980.759, 1184.498, 1324.200), stdev = 177.758
[info]   CI (99.9%): [500.014, 1868.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   17357.709 ±(99.9%) 9928.974 B/op [Average]
[info]   (min, avg, max) = (14326.404, 17357.709, 19402.169), stdev = 2578.523
[info]   CI (99.9%): [7428.734, 27286.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Run progress: 61.30% complete, ETA 00:24:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22382.328 ops/s
[info] # Warmup Iteration   2: 43386.987 ops/s
[info] # Warmup Iteration   3: 43568.060 ops/s
[info] Iteration   1: 43805.675 ops/s
[info]                  ·gc.alloc.rate:                   2034.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              73112.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1996.891 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71761.426 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 43175.061 ops/s
[info]                  ·gc.alloc.rate:                   2005.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              73112.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.880 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73418.775 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 43787.617 ops/s
[info]                  ·gc.alloc.rate:                   2033.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              73112.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.891 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72760.582 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 43399.759 ops/s
[info]                  ·gc.alloc.rate:                   2016.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              73112.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.775 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.219 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73690.444 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 43347.592 ops/s
[info]                  ·gc.alloc.rate:                   2013.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              73112.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.151 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73934.330 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   43503.141 ±(99.9%) 1080.539 ops/s [Average]
[info]   (min, avg, max) = (43175.061, 43503.141, 43805.675), stdev = 280.612
[info]   CI (99.9%): [42422.602, 44583.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2020.675 ±(99.9%) 49.513 MB/sec [Average]
[info]   (min, avg, max) = (2005.466, 2020.675, 2034.474), stdev = 12.858
[info]   CI (99.9%): [1971.162, 2070.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73112.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (73112.009, 73112.010, 73112.010), stdev = 0.001
[info]   CI (99.9%): [73112.008, 73112.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.125), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.870 ±(99.9%) 6.347 B/op [Average]
[info]   (min, avg, max) = (0.748, 2.870, 4.553), stdev = 1.648
[info]   CI (99.9%): [≈ 0, 9.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2020.607 ±(99.9%) 60.729 MB/sec [Average]
[info]   (min, avg, max) = (1996.891, 2020.607, 2036.151), stdev = 15.771
[info]   CI (99.9%): [1959.878, 2081.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   73113.112 ±(99.9%) 3363.793 B/op [Average]
[info]   (min, avg, max) = (71761.426, 73113.112, 73934.330), stdev = 873.566
[info]   CI (99.9%): [69749.319, 76476.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Run progress: 61.64% complete, ETA 00:23:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 85865.044 ops/s
[info] # Warmup Iteration   2: 114680.574 ops/s
[info] # Warmup Iteration   3: 115264.942 ops/s
[info] Iteration   1: 117865.603 ops/s
[info]                  ·gc.alloc.rate:                   811.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              10840.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      646.030 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8628.205 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 117249.224 ops/s
[info]                  ·gc.alloc.rate:                   807.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              10840.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      969.043 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13010.515 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 114993.235 ops/s
[info]                  ·gc.alloc.rate:                   792.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              10840.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.244 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8857.263 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 117414.999 ops/s
[info]                  ·gc.alloc.rate:                   808.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              10840.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      974.802 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13067.689 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 117323.542 ops/s
[info]                  ·gc.alloc.rate:                   808.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              10840.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.659 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8766.207 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   116969.320 ±(99.9%) 4352.541 ops/s [Average]
[info]   (min, avg, max) = (114993.235, 116969.320, 117865.603), stdev = 1130.341
[info]   CI (99.9%): [112616.779, 121321.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   805.613 ±(99.9%) 29.663 MB/sec [Average]
[info]   (min, avg, max) = (792.133, 805.613, 811.636), stdev = 7.703
[info]   CI (99.9%): [775.950, 835.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10840.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10840.003, 10840.004, 10840.004), stdev = 0.001
[info]   CI (99.9%): [10840.003, 10840.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.104), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.118 ±(99.9%) 1.299 B/op [Average]
[info]   (min, avg, max) = (0.570, 1.118, 1.397), stdev = 0.337
[info]   CI (99.9%): [≈ 0, 2.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   778.156 ±(99.9%) 681.255 MB/sec [Average]
[info]   (min, avg, max) = (646.030, 778.156, 974.802), stdev = 176.920
[info]   CI (99.9%): [96.900, 1459.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10465.976 ±(99.9%) 9050.685 B/op [Average]
[info]   (min, avg, max) = (8628.205, 10465.976, 13067.689), stdev = 2350.434
[info]   CI (99.9%): [1415.291, 19516.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Run progress: 61.99% complete, ETA 00:23:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 121667.952 ops/s
[info] # Warmup Iteration   2: 169026.908 ops/s
[info] # Warmup Iteration   3: 178459.683 ops/s
[info] Iteration   1: 177418.915 ops/s
[info]                  ·gc.alloc.rate:                   263.286 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.752 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2269.159 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 177892.556 ops/s
[info]                  ·gc.alloc.rate:                   264.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.774 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2263.152 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 177969.960 ops/s
[info]                  ·gc.alloc.rate:                   264.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.834 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2262.160 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 176076.545 ops/s
[info]                  ·gc.alloc.rate:                   261.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.364 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2881.914 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 176280.754 ops/s
[info]                  ·gc.alloc.rate:                   261.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.467 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2878.596 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   177127.746 ±(99.9%) 3444.905 ops/s [Average]
[info]   (min, avg, max) = (176076.545, 177127.746, 177969.960), stdev = 894.631
[info]   CI (99.9%): [173682.842, 180572.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   262.892 ±(99.9%) 5.118 MB/sec [Average]
[info]   (min, avg, max) = (261.300, 262.892, 264.185), stdev = 1.329
[info]   CI (99.9%): [257.775, 268.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2336.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2336.002, 2336.002, 2336.002), stdev = 0.001
[info]   CI (99.9%): [2336.002, 2336.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.260 ±(99.9%) 1.869 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.260, 1.116), stdev = 0.485
[info]   CI (99.9%): [≈ 0, 2.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   282.438 ±(99.9%) 140.526 MB/sec [Average]
[info]   (min, avg, max) = (255.752, 282.438, 322.467), stdev = 36.494
[info]   CI (99.9%): [141.913, 422.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2510.996 ±(99.9%) 1298.045 B/op [Average]
[info]   (min, avg, max) = (2262.160, 2510.996, 2881.914), stdev = 337.098
[info]   CI (99.9%): [1212.951, 3809.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Run progress: 62.33% complete, ETA 00:23:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 712681.029 ops/s
[info] # Warmup Iteration   2: 767986.155 ops/s
[info] # Warmup Iteration   3: 814688.003 ops/s
[info] Iteration   1: 810066.769 ops/s
[info]                  ·gc.alloc.rate:                   1004.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      975.718 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1896.047 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 814531.050 ops/s
[info]                  ·gc.alloc.rate:                   1010.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      977.694 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1889.563 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 806966.743 ops/s
[info]                  ·gc.alloc.rate:                   1000.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.152 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1915.779 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 818403.135 ops/s
[info]                  ·gc.alloc.rate:                   1015.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      987.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1897.963 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 812728.943 ops/s
[info]                  ·gc.alloc.rate:                   1007.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992.197 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1921.539 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   812539.328 ±(99.9%) 16735.289 ops/s [Average]
[info]   (min, avg, max) = (806966.743, 812539.328, 818403.135), stdev = 4346.101
[info]   CI (99.9%): [795804.039, 829274.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1007.663 ±(99.9%) 21.070 MB/sec [Average]
[info]   (min, avg, max) = (1000.722, 1007.663, 1015.155), stdev = 5.472
[info]   CI (99.9%): [986.593, 1028.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.000, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.161 ±(99.9%) 0.246 B/op [Average]
[info]   (min, avg, max) = (0.080, 0.161, 0.241), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   982.962 ±(99.9%) 26.038 MB/sec [Average]
[info]   (min, avg, max) = (975.718, 982.962, 992.197), stdev = 6.762
[info]   CI (99.9%): [956.924, 1009.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1904.178 ±(99.9%) 52.879 B/op [Average]
[info]   (min, avg, max) = (1889.563, 1904.178, 1921.539), stdev = 13.733
[info]   CI (99.9%): [1851.299, 1957.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 62.67% complete, ETA 00:23:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 792611.183 ops/s
[info] # Warmup Iteration   2: 802328.910 ops/s
[info] # Warmup Iteration   3: 848362.709 ops/s
[info] Iteration   1: 839305.267 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 847603.326 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 831846.116 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 836797.198 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 837952.636 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   838700.909 ±(99.9%) 22018.688 ops/s [Average]
[info]   (min, avg, max) = (831846.116, 838700.909, 847603.326), stdev = 5718.183
[info]   CI (99.9%): [816682.221, 860719.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Run progress: 63.01% complete, ETA 00:23:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 157046.555 ops/s
[info] # Warmup Iteration   2: 202259.899 ops/s
[info] # Warmup Iteration   3: 205016.651 ops/s
[info] Iteration   1: 210082.424 ops/s
[info]                  ·gc.alloc.rate:                   686.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      644.392 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4828.135 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 206969.659 ops/s
[info]                  ·gc.alloc.rate:                   676.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      642.224 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4883.129 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 210320.465 ops/s
[info]                  ·gc.alloc.rate:                   687.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      642.345 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4807.718 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 210311.673 ops/s
[info]                  ·gc.alloc.rate:                   687.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      643.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4815.538 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 210460.238 ops/s
[info]                  ·gc.alloc.rate:                   687.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      645.464 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4827.051 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   209628.892 ±(99.9%) 5747.919 ops/s [Average]
[info]   (min, avg, max) = (206969.659, 209628.892, 210460.238), stdev = 1492.716
[info]   CI (99.9%): [203880.973, 215376.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   685.101 ±(99.9%) 18.527 MB/sec [Average]
[info]   (min, avg, max) = (676.534, 685.101, 687.846), stdev = 4.811
[info]   CI (99.9%): [666.574, 703.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5144.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5144.002, 5144.002, 5144.002), stdev = 0.001
[info]   CI (99.9%): [5144.002, 5144.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.104), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.470 ±(99.9%) 1.418 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.470, 0.791), stdev = 0.368
[info]   CI (99.9%): [≈ 0, 1.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   643.568 ±(99.9%) 5.308 MB/sec [Average]
[info]   (min, avg, max) = (642.224, 643.568, 645.464), stdev = 1.379
[info]   CI (99.9%): [638.259, 648.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4832.314 ±(99.9%) 114.127 B/op [Average]
[info]   (min, avg, max) = (4807.718, 4832.314, 4883.129), stdev = 29.638
[info]   CI (99.9%): [4718.187, 4946.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Run progress: 63.36% complete, ETA 00:22:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 111004.618 ops/s
[info] # Warmup Iteration   2: 184363.360 ops/s
[info] # Warmup Iteration   3: 171041.465 ops/s
[info] Iteration   1: 169077.038 ops/s
[info]                  ·gc.alloc.rate:                   898.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.399 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9136.681 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 182354.419 ops/s
[info]                  ·gc.alloc.rate:                   969.439 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.434 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8540.597 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 181902.335 ops/s
[info]                  ·gc.alloc.rate:                   967.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      994.206 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8602.208 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 182900.145 ops/s
[info]                  ·gc.alloc.rate:                   972.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      999.524 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8601.181 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 184432.840 ops/s
[info]                  ·gc.alloc.rate:                   980.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1003.447 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8563.574 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   180133.355 ±(99.9%) 24081.558 ops/s [Average]
[info]   (min, avg, max) = (169077.038, 180133.355, 184432.840), stdev = 6253.904
[info]   CI (99.9%): [156051.797, 204214.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   957.673 ±(99.9%) 128.150 MB/sec [Average]
[info]   (min, avg, max) = (898.833, 957.673, 980.530), stdev = 33.280
[info]   CI (99.9%): [829.524, 1085.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8368.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8368.002, 8368.002, 8368.002), stdev = 0.001
[info]   CI (99.9%): [8368.002, 8368.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.579 ±(99.9%) 1.119 B/op [Average]
[info]   (min, avg, max) = (0.358, 0.579, 1.078), stdev = 0.291
[info]   CI (99.9%): [≈ 0, 1.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   993.602 ±(99.9%) 33.271 MB/sec [Average]
[info]   (min, avg, max) = (981.399, 993.602, 1003.447), stdev = 8.640
[info]   CI (99.9%): [960.331, 1026.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8688.848 ±(99.9%) 969.220 B/op [Average]
[info]   (min, avg, max) = (8540.597, 8688.848, 9136.681), stdev = 251.703
[info]   CI (99.9%): [7719.628, 9658.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Run progress: 63.70% complete, ETA 00:22:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 331362.268 ops/s
[info] # Warmup Iteration   2: 350936.086 ops/s
[info] # Warmup Iteration   3: 353756.408 ops/s
[info] Iteration   1: 352776.184 ops/s
[info]                  ·gc.alloc.rate:                   685.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      663.219 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2958.587 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 352414.577 ops/s
[info]                  ·gc.alloc.rate:                   684.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.667 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2954.146 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 354168.050 ops/s
[info]                  ·gc.alloc.rate:                   687.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.359 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2939.493 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 354711.062 ops/s
[info]                  ·gc.alloc.rate:                   688.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.252 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2937.949 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 353174.544 ops/s
[info]                  ·gc.alloc.rate:                   685.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.718 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2953.593 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   353448.884 ±(99.9%) 3707.367 ops/s [Average]
[info]   (min, avg, max) = (352414.577, 353448.884, 354711.062), stdev = 962.792
[info]   CI (99.9%): [349741.516, 357156.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   686.333 ±(99.9%) 7.048 MB/sec [Average]
[info]   (min, avg, max) = (684.481, 686.333, 688.862), stdev = 1.830
[info]   CI (99.9%): [679.285, 693.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3056.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3056.001, 3056.001, 3056.001), stdev = 0.001
[info]   CI (99.9%): [3056.001, 3056.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.048 ±(99.9%) 0.251 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.048, 0.159), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.216 ±(99.9%) 1.120 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.216, 0.709), stdev = 0.291
[info]   CI (99.9%): [≈ 0, 1.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   662.243 ±(99.9%) 2.913 MB/sec [Average]
[info]   (min, avg, max) = (661.359, 662.243, 663.219), stdev = 0.757
[info]   CI (99.9%): [659.329, 665.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2948.754 ±(99.9%) 36.106 B/op [Average]
[info]   (min, avg, max) = (2937.949, 2948.754, 2958.587), stdev = 9.377
[info]   CI (99.9%): [2912.648, 2984.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Run progress: 64.04% complete, ETA 00:22:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 202371.180 ops/s
[info] # Warmup Iteration   2: 281540.037 ops/s
[info] # Warmup Iteration   3: 291586.260 ops/s
[info] Iteration   1: 293321.773 ops/s
[info]                  ·gc.alloc.rate:                   289.175 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1372.500 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 293556.429 ops/s
[info]                  ·gc.alloc.rate:                   289.439 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.762 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1371.421 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 295747.625 ops/s
[info]                  ·gc.alloc.rate:                   291.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      320.411 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1705.123 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 295451.741 ops/s
[info]                  ·gc.alloc.rate:                   291.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      320.393 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1706.831 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 292176.446 ops/s
[info]                  ·gc.alloc.rate:                   288.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.722 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1738.542 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   294050.803 ±(99.9%) 5817.830 ops/s [Average]
[info]   (min, avg, max) = (292176.446, 294050.803, 295747.625), stdev = 1510.872
[info]   CI (99.9%): [288232.972, 299868.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   289.935 ±(99.9%) 5.794 MB/sec [Average]
[info]   (min, avg, max) = (288.095, 289.935, 291.638), stdev = 1.505
[info]   CI (99.9%): [284.141, 295.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1552.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1552.001, 1552.001, 1552.001), stdev = 0.001
[info]   CI (99.9%): [1552.001, 1552.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.089 ±(99.9%) 0.470 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.089, 0.224), stdev = 0.122
[info]   CI (99.9%): [≈ 0, 0.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   295.003 ±(99.9%) 138.045 MB/sec [Average]
[info]   (min, avg, max) = (255.729, 295.003, 322.722), stdev = 35.850
[info]   CI (99.9%): [156.959, 433.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1578.883 ±(99.9%) 729.167 B/op [Average]
[info]   (min, avg, max) = (1371.421, 1578.883, 1738.542), stdev = 189.362
[info]   CI (99.9%): [849.716, 2308.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Run progress: 64.38% complete, ETA 00:22:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1025302.614 ops/s
[info] # Warmup Iteration   2: 1168710.512 ops/s
[info] # Warmup Iteration   3: 1167666.575 ops/s
[info] Iteration   1: 1183242.736 ops/s
[info]                  ·gc.alloc.rate:                   878.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.409 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 869.213 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1181480.338 ops/s
[info]                  ·gc.alloc.rate:                   877.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.563 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1304.482 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1196472.157 ops/s
[info]                  ·gc.alloc.rate:                   887.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.127 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1292.108 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1195571.151 ops/s
[info]                  ·gc.alloc.rate:                   887.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.874 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 864.667 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1198541.259 ops/s
[info]                  ·gc.alloc.rate:                   889.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      988.784 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1298.558 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1191061.528 ±(99.9%) 30954.644 ops/s [Average]
[info]   (min, avg, max) = (1181480.338, 1191061.528, 1198541.259), stdev = 8038.823
[info]   CI (99.9%): [1160106.884, 1222016.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   883.914 ±(99.9%) 22.612 MB/sec [Average]
[info]   (min, avg, max) = (877.077, 883.914, 889.371), stdev = 5.872
[info]   CI (99.9%): [861.302, 906.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1168.000, 1168.000, 1168.000), stdev = 0.001
[info]   CI (99.9%): [1168.000, 1168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.096, 0.125), stdev = 0.019
[info]   CI (99.9%): [0.024, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.127 ±(99.9%) 0.098 B/op [Average]
[info]   (min, avg, max) = (0.109, 0.127, 0.166), stdev = 0.025
[info]   CI (99.9%): [0.028, 0.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   852.152 ±(99.9%) 692.655 MB/sec [Average]
[info]   (min, avg, max) = (653.409, 852.152, 988.784), stdev = 179.880
[info]   CI (99.9%): [159.497, 1544.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1125.806 ±(99.9%) 910.126 B/op [Average]
[info]   (min, avg, max) = (864.667, 1125.806, 1304.482), stdev = 236.357
[info]   CI (99.9%): [215.680, 2035.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 64.73% complete, ETA 00:22:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1034280.926 ops/s
[info] # Warmup Iteration   2: 1131389.362 ops/s
[info] # Warmup Iteration   3: 1140422.916 ops/s
[info] Iteration   1: 1139653.132 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1140616.352 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1140901.712 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1138803.132 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1139710.976 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1139937.061 ±(99.9%) 3227.149 ops/s [Average]
[info]   (min, avg, max) = (1138803.132, 1139937.061, 1140901.712), stdev = 838.080
[info]   CI (99.9%): [1136709.912, 1143164.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Run progress: 65.07% complete, ETA 00:21:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2908.174 ops/s
[info] # Warmup Iteration   2: 4961.234 ops/s
[info] # Warmup Iteration   3: 5154.156 ops/s
[info] Iteration   1: 5155.953 ops/s
[info]                  ·gc.alloc.rate:                   1017.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              310624.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      969.586 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 295991.984 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5138.056 ops/s
[info]                  ·gc.alloc.rate:                   1014.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              310624.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31.882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      971.907 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 297698.460 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5161.288 ops/s
[info]                  ·gc.alloc.rate:                   1018.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              310624.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      975.090 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 297330.092 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 5174.080 ops/s
[info]                  ·gc.alloc.rate:                   1021.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              310624.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.875 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 298565.553 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5156.243 ops/s
[info]                  ·gc.alloc.rate:                   1017.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              310624.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 402187.964 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   5157.124 ±(99.9%) 49.857 ops/s [Average]
[info]   (min, avg, max) = (5138.056, 5157.124, 5174.080), stdev = 12.948
[info]   CI (99.9%): [5107.267, 5206.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1017.907 ±(99.9%) 10.258 MB/sec [Average]
[info]   (min, avg, max) = (1014.106, 1017.907, 1021.531), stdev = 2.664
[info]   CI (99.9%): [1007.649, 1028.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   310624.082 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (310624.079, 310624.082, 310624.085), stdev = 0.003
[info]   CI (99.9%): [310624.069, 310624.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   24.146 ±(99.9%) 43.837 B/op [Average]
[info]   (min, avg, max) = (12.693, 24.146, 38.117), stdev = 11.384
[info]   CI (99.9%): [≈ 0, 67.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1043.229 ±(99.9%) 591.057 MB/sec [Average]
[info]   (min, avg, max) = (969.586, 1043.229, 1317.686), stdev = 153.496
[info]   CI (99.9%): [452.172, 1634.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   318354.810 ±(99.9%) 180492.459 B/op [Average]
[info]   (min, avg, max) = (295991.984, 318354.810, 402187.964), stdev = 46873.318
[info]   CI (99.9%): [137862.352, 498847.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 65.41% complete, ETA 00:21:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21037.865 ops/s
[info] # Warmup Iteration   2: 30402.301 ops/s
[info] # Warmup Iteration   3: 30619.302 ops/s
[info] Iteration   1: 30568.021 ops/s
[info]                  ·gc.alloc.rate:                   519.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              26744.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4.064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     209.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      583.764 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30061.717 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 31192.933 ops/s
[info]                  ·gc.alloc.rate:                   529.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              26744.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.995 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16553.102 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 30860.400 ops/s
[info]                  ·gc.alloc.rate:                   524.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              26744.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.377 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33224.497 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 30625.690 ops/s
[info]                  ·gc.alloc.rate:                   520.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              26744.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      650.232 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33410.929 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 31091.037 ops/s
[info]                  ·gc.alloc.rate:                   528.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              26744.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.327 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16472.517 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   30867.616 ±(99.9%) 1061.698 ops/s [Average]
[info]   (min, avg, max) = (30568.021, 30867.616, 31192.933), stdev = 275.720
[info]   CI (99.9%): [29805.918, 31929.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   524.451 ±(99.9%) 17.836 MB/sec [Average]
[info]   (min, avg, max) = (519.338, 524.451, 529.925), stdev = 4.632
[info]   CI (99.9%): [506.616, 542.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26744.014 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (26744.013, 26744.014, 26744.018), stdev = 0.002
[info]   CI (99.9%): [26744.007, 26744.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.830 ±(99.9%) 6.964 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.830, 4.064), stdev = 1.808
[info]   CI (99.9%): [≈ 0, 7.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   42.707 ±(99.9%) 358.638 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42.707, 209.305), stdev = 93.137
[info]   CI (99.9%): [≈ 0, 401.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   507.739 ±(99.9%) 645.193 MB/sec [Average]
[info]   (min, avg, max) = (325.327, 507.739, 651.377), stdev = 167.554
[info]   CI (99.9%): [≈ 0, 1152.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   25944.552 ±(99.9%) 33547.829 B/op [Average]
[info]   (min, avg, max) = (16472.517, 25944.552, 33410.929), stdev = 8712.265
[info]   CI (99.9%): [≈ 0, 59492.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 6.000), stdev = 2.168
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Run progress: 65.75% complete, ETA 00:21:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1929.773 ops/s
[info] # Warmup Iteration   2: 4520.092 ops/s
[info] # Warmup Iteration   3: 4507.788 ops/s
[info] Iteration   1: 4613.000 ops/s
[info]                  ·gc.alloc.rate:                   1171.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              399728.095 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.601 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 446695.648 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 4632.631 ops/s
[info]                  ·gc.alloc.rate:                   1176.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              399728.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.232 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 336816.007 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 4656.300 ops/s
[info]                  ·gc.alloc.rate:                   1182.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              399728.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.741 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 449196.719 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 4645.855 ops/s
[info]                  ·gc.alloc.rate:                   1179.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              399728.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.339 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 453096.752 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 4653.753 ops/s
[info]                  ·gc.alloc.rate:                   1181.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              399728.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1007.339 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 340702.728 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   4640.308 ±(99.9%) 68.665 ops/s [Average]
[info]   (min, avg, max) = (4613.000, 4640.308, 4656.300), stdev = 17.832
[info]   CI (99.9%): [4571.643, 4708.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1178.474 ±(99.9%) 16.818 MB/sec [Average]
[info]   (min, avg, max) = (1171.904, 1178.474, 1182.411), stdev = 4.368
[info]   CI (99.9%): [1161.656, 1195.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   399728.091 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (399728.088, 399728.091, 399728.095), stdev = 0.004
[info]   CI (99.9%): [399728.076, 399728.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   12.703 ±(99.9%) 35.348 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.703, 21.154), stdev = 9.180
[info]   CI (99.9%): [≈ 0, 48.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1194.850 ±(99.9%) 688.873 MB/sec [Average]
[info]   (min, avg, max) = (991.232, 1194.850, 1337.339), stdev = 178.898
[info]   CI (99.9%): [505.978, 1883.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   405301.571 ±(99.9%) 234129.885 B/op [Average]
[info]   (min, avg, max) = (336816.007, 405301.571, 453096.752), stdev = 60802.788
[info]   CI (99.9%): [171171.686, 639431.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Run progress: 66.10% complete, ETA 00:21:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10302.453 ops/s
[info] # Warmup Iteration   2: 14076.417 ops/s
[info] # Warmup Iteration   3: 14257.748 ops/s
[info] Iteration   1: 14288.244 ops/s
[info]                  ·gc.alloc.rate:                   895.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              98672.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      968.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 106684.592 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 14203.110 ops/s
[info]                  ·gc.alloc.rate:                   890.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              98697.713 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      968.427 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 107322.927 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 14054.804 ops/s
[info]                  ·gc.alloc.rate:                   881.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              98736.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      972.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 108870.788 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 14280.810 ops/s
[info]                  ·gc.alloc.rate:                   895.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              98736.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      650.820 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71725.741 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 14234.334 ops/s
[info]                  ·gc.alloc.rate:                   893.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              98735.362 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.830 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 108444.175 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   14212.260 ±(99.9%) 364.472 ops/s [Average]
[info]   (min, avg, max) = (14054.804, 14212.260, 14288.244), stdev = 94.652
[info]   CI (99.9%): [13847.789, 14576.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   891.355 ±(99.9%) 22.524 MB/sec [Average]
[info]   (min, avg, max) = (881.630, 891.355, 895.905), stdev = 5.849
[info]   CI (99.9%): [868.831, 913.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   98715.433 ±(99.9%) 112.982 B/op [Average]
[info]   (min, avg, max) = (98672.029, 98715.433, 98736.031), stdev = 29.341
[info]   CI (99.9%): [98602.451, 98828.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8.288 ±(99.9%) 9.992 B/op [Average]
[info]   (min, avg, max) = (4.662, 8.288, 11.465), stdev = 2.595
[info]   CI (99.9%): [≈ 0, 18.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   908.111 ±(99.9%) 554.183 MB/sec [Average]
[info]   (min, avg, max) = (650.820, 908.111, 980.830), stdev = 143.920
[info]   CI (99.9%): [353.928, 1462.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   100609.645 ±(99.9%) 62265.026 B/op [Average]
[info]   (min, avg, max) = (71725.741, 100609.645, 108870.788), stdev = 16170.030
[info]   CI (99.9%): [38344.618, 162874.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 66.44% complete, ETA 00:20:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 239682.332 ops/s
[info] # Warmup Iteration   2: 271839.059 ops/s
[info] # Warmup Iteration   3: 270687.966 ops/s
[info] Iteration   1: 269477.704 ops/s
[info]                  ·gc.alloc.rate:                   950.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      976.045 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5699.480 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 267559.594 ops/s
[info]                  ·gc.alloc.rate:                   943.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      976.884 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5746.379 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 269138.536 ops/s
[info]                  ·gc.alloc.rate:                   949.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.526 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5728.274 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 270541.996 ops/s
[info]                  ·gc.alloc.rate:                   954.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.196 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5731.491 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 268787.376 ops/s
[info]                  ·gc.alloc.rate:                   948.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5792.117 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   269101.041 ±(99.9%) 4171.367 ops/s [Average]
[info]   (min, avg, max) = (267559.594, 269101.041, 270541.996), stdev = 1083.291
[info]   CI (99.9%): [264929.674, 273272.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   949.283 ±(99.9%) 14.791 MB/sec [Average]
[info]   (min, avg, max) = (943.840, 949.283, 954.344), stdev = 3.841
[info]   CI (99.9%): [934.492, 964.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5552.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5552.002, 5552.002, 5552.002), stdev = 0.001
[info]   CI (99.9%): [5552.001, 5552.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.104), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.487 ±(99.9%) 0.579 B/op [Average]
[info]   (min, avg, max) = (0.242, 0.487, 0.612), stdev = 0.150
[info]   CI (99.9%): [≈ 0, 1.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   981.342 ±(99.9%) 21.582 MB/sec [Average]
[info]   (min, avg, max) = (976.045, 981.342, 989.060), stdev = 5.605
[info]   CI (99.9%): [959.760, 1002.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5739.548 ±(99.9%) 130.690 B/op [Average]
[info]   (min, avg, max) = (5699.480, 5739.548, 5792.117), stdev = 33.940
[info]   CI (99.9%): [5608.858, 5870.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 66.78% complete, ETA 00:20:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 269627.310 ops/s
[info] # Warmup Iteration   2: 289359.313 ops/s
[info] # Warmup Iteration   3: 294303.700 ops/s
[info] Iteration   1: 296131.708 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 295940.586 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 295671.299 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 294738.504 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 296198.589 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   295736.137 ±(99.9%) 2287.501 ops/s [Average]
[info]   (min, avg, max) = (294738.504, 295736.137, 296198.589), stdev = 594.057
[info]   CI (99.9%): [293448.636, 298023.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Run progress: 67.12% complete, ETA 00:20:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10405.453 ops/s
[info] # Warmup Iteration   2: 14720.944 ops/s
[info] # Warmup Iteration   3: 15142.751 ops/s
[info] Iteration   1: 15225.600 ops/s
[info]                  ·gc.alloc.rate:                   865.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              89464.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      962.359 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99487.349 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 15271.791 ops/s
[info]                  ·gc.alloc.rate:                   868.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              89464.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      641.477 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66110.952 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 14919.878 ops/s
[info]                  ·gc.alloc.rate:                   848.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              89464.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      965.402 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 101821.916 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 15052.807 ops/s
[info]                  ·gc.alloc.rate:                   855.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              89464.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      971.361 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 101577.318 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 14919.611 ops/s
[info]                  ·gc.alloc.rate:                   847.993 MB/sec
[info]                  ·gc.alloc.rate.norm:              89464.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      650.745 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68654.252 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   15077.938 ±(99.9%) 638.745 ops/s [Average]
[info]   (min, avg, max) = (14919.611, 15077.938, 15271.791), stdev = 165.880
[info]   CI (99.9%): [14439.192, 15716.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   857.045 ±(99.9%) 36.191 MB/sec [Average]
[info]   (min, avg, max) = (847.993, 857.045, 868.073), stdev = 9.399
[info]   CI (99.9%): [820.853, 893.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   89464.028 ±(99.9%) 0.064 B/op [Average]
[info]   (min, avg, max) = (89464.010, 89464.028, 89464.044), stdev = 0.017
[info]   CI (99.9%): [89463.964, 89464.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4.324 ±(99.9%) 13.119 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.324, 8.606), stdev = 3.407
[info]   CI (99.9%): [≈ 0, 17.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   838.269 ±(99.9%) 675.694 MB/sec [Average]
[info]   (min, avg, max) = (641.477, 838.269, 971.361), stdev = 175.475
[info]   CI (99.9%): [162.575, 1513.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   87530.357 ±(99.9%) 70992.801 B/op [Average]
[info]   (min, avg, max) = (66110.952, 87530.357, 101821.916), stdev = 18436.605
[info]   CI (99.9%): [16537.556, 158523.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce
[info] # Run progress: 67.47% complete, ETA 00:20:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 605722.144 ops/s
[info] # Warmup Iteration   2: 910017.429 ops/s
[info] # Warmup Iteration   3: 922845.185 ops/s
[info] Iteration   1: 922542.410 ops/s
[info]                  ·gc.alloc.rate:                   2986.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3008.808 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5133.555 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 928093.295 ops/s
[info]                  ·gc.alloc.rate:                   3005.791 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3037.725 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5150.140 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 914239.731 ops/s
[info]                  ·gc.alloc.rate:                   2959.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3050.853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5253.367 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 922694.666 ops/s
[info]                  ·gc.alloc.rate:                   2988.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2718.450 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4635.916 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 905847.292 ops/s
[info]                  ·gc.alloc.rate:                   2932.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3063.361 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5322.827 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce":
[info]   918683.479 ±(99.9%) 33571.355 ops/s [Average]
[info]   (min, avg, max) = (905847.292, 918683.479, 928093.295), stdev = 8718.374
[info]   CI (99.9%): [885112.124, 952254.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate":
[info]   2974.622 ±(99.9%) 110.306 MB/sec [Average]
[info]   (min, avg, max) = (2932.820, 2974.622, 3005.791), stdev = 28.646
[info]   CI (99.9%): [2864.316, 3084.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5096.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5096.000, 5096.000, 5096.000), stdev = 0.001
[info]   CI (99.9%): [5096.000, 5096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.117, 0.146), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.200 ±(99.9%) 0.232 B/op [Average]
[info]   (min, avg, max) = (0.107, 0.200, 0.253), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2975.839 ±(99.9%) 559.513 MB/sec [Average]
[info]   (min, avg, max) = (2718.450, 2975.839, 3063.361), stdev = 145.304
[info]   CI (99.9%): [2416.326, 3535.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5099.161 ±(99.9%) 1040.714 B/op [Average]
[info]   (min, avg, max) = (4635.916, 5099.161, 5322.827), stdev = 270.270
[info]   CI (99.9%): [4058.447, 6139.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.count":
[info]   44.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.000, 10.000), stdev = 1.225
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala
[info] # Run progress: 67.81% complete, ETA 00:20:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 770277.657 ops/s
[info] # Warmup Iteration   2: 1768983.365 ops/s
[info] # Warmup Iteration   3: 1784167.428 ops/s
[info] Iteration   1: 1781809.340 ops/s
[info]                  ·gc.alloc.rate:                   1675.506 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1652.293 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1459.496 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1772402.521 ops/s
[info]                  ·gc.alloc.rate:                   1666.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1666.913 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1480.346 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1778206.895 ops/s
[info]                  ·gc.alloc.rate:                   1671.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.415 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1485.810 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1781009.956 ops/s
[info]                  ·gc.alloc.rate:                   1674.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.896 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1489.908 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1774137.042 ops/s
[info]                  ·gc.alloc.rate:                   1668.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.506 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1500.701 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala":
[info]   1777513.151 ±(99.9%) 15956.125 ops/s [Average]
[info]   (min, avg, max) = (1772402.521, 1777513.151, 1781809.340), stdev = 4143.755
[info]   CI (99.9%): [1761557.026, 1793469.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1671.348 ±(99.9%) 15.165 MB/sec [Average]
[info]   (min, avg, max) = (1666.523, 1671.348, 1675.506), stdev = 3.938
[info]   CI (99.9%): [1656.183, 1686.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1480.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1480.000, 1480.000, 1480.000), stdev = 0.001
[info]   CI (99.9%): [1480.000, 1480.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.108, 0.146), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.096 ±(99.9%) 0.146 B/op [Average]
[info]   (min, avg, max) = (0.037, 0.096, 0.129), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1675.005 ±(99.9%) 60.390 MB/sec [Average]
[info]   (min, avg, max) = (1652.293, 1675.005, 1691.506), stdev = 15.683
[info]   CI (99.9%): [1614.615, 1735.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1483.252 ±(99.9%) 58.654 B/op [Average]
[info]   (min, avg, max) = (1459.496, 1483.252, 1500.701), stdev = 15.232
[info]   CI (99.9%): [1424.598, 1541.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala
[info] # Run progress: 68.15% complete, ETA 00:19:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8377745.827 ops/s
[info] # Warmup Iteration   2: 8897065.746 ops/s
[info] # Warmup Iteration   3: 8974627.584 ops/s
[info] Iteration   1: 9153524.185 ops/s
[info]                  ·gc.alloc.rate:                   2279.582 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2331.536 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 400.934 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 9161177.735 ops/s
[info]                  ·gc.alloc.rate:                   2281.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2351.546 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 403.989 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 9131221.158 ops/s
[info]                  ·gc.alloc.rate:                   2274.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.533 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 349.167 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 9096503.378 ops/s
[info]                  ·gc.alloc.rate:                   2265.368 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2371.837 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 410.423 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 9122439.706 ops/s
[info]                  ·gc.alloc.rate:                   2271.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2377.200 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 410.170 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala":
[info]   9132973.232 ±(99.9%) 99334.502 ops/s [Average]
[info]   (min, avg, max) = (9096503.378, 9132973.232, 9161177.735), stdev = 25796.855
[info]   CI (99.9%): [9033638.731, 9232307.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2274.521 ±(99.9%) 25.027 MB/sec [Average]
[info]   (min, avg, max) = (2265.368, 2274.521, 2281.759), stdev = 6.499
[info]   CI (99.9%): [2249.494, 2299.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.117, 0.146), stdev = 0.028
[info]   CI (99.9%): [0.009, 0.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.020 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (0.014, 0.020, 0.025), stdev = 0.005
[info]   CI (99.9%): [0.002, 0.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   2291.530 ±(99.9%) 576.778 MB/sec [Average]
[info]   (min, avg, max) = (2025.533, 2291.530, 2377.200), stdev = 149.788
[info]   CI (99.9%): [1714.752, 2868.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   394.937 ±(99.9%) 99.758 B/op [Average]
[info]   (min, avg, max) = (349.167, 394.937, 410.423), stdev = 25.907
[info]   CI (99.9%): [295.179, 494.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson
[info] # Run progress: 68.49% complete, ETA 00:19:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71442.740 ops/s
[info] # Warmup Iteration   2: 322944.038 ops/s
[info] # Warmup Iteration   3: 322817.671 ops/s
[info] Iteration   1: 324398.957 ops/s
[info]                  ·gc.alloc.rate:                   1983.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              9624.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1987.675 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9645.507 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 324204.939 ops/s
[info]                  ·gc.alloc.rate:                   1982.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              9624.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2007.481 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9743.441 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 325026.162 ops/s
[info]                  ·gc.alloc.rate:                   1987.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              9624.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9781.974 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 324379.865 ops/s
[info]                  ·gc.alloc.rate:                   1983.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              9624.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.217 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9844.995 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 324546.749 ops/s
[info]                  ·gc.alloc.rate:                   1984.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              9624.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9865.895 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson":
[info]   324511.334 ±(99.9%) 1202.506 ops/s [Average]
[info]   (min, avg, max) = (324204.939, 324511.334, 325026.162), stdev = 312.287
[info]   CI (99.9%): [323308.829, 325713.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1984.274 ±(99.9%) 6.714 MB/sec [Average]
[info]   (min, avg, max) = (1982.872, 1984.274, 1987.234), stdev = 1.744
[info]   CI (99.9%): [1977.559, 1990.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   9624.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9624.001, 9624.001, 9624.001), stdev = 0.001
[info]   CI (99.9%): [9624.001, 9624.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.125 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.125, 0.208), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.606 ±(99.9%) 0.913 B/op [Average]
[info]   (min, avg, max) = (0.404, 0.606, 1.011), stdev = 0.237
[info]   CI (99.9%): [≈ 0, 1.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2015.691 ±(99.9%) 71.942 MB/sec [Average]
[info]   (min, avg, max) = (1987.675, 2015.691, 2034.229), stdev = 18.683
[info]   CI (99.9%): [1943.749, 2087.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9776.362 ±(99.9%) 338.796 B/op [Average]
[info]   (min, avg, max) = (9645.507, 9776.362, 9865.895), stdev = 87.984
[info]   CI (99.9%): [9437.566, 10115.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce
[info] # Run progress: 68.84% complete, ETA 00:19:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 559050.440 ops/s
[info] # Warmup Iteration   2: 1019399.393 ops/s
[info] # Warmup Iteration   3: 1024488.610 ops/s
[info] Iteration   1: 1029138.969 ops/s
[info]                  ·gc.alloc.rate:                   2264.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              3464.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1981.385 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3030.720 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1007437.485 ops/s
[info]                  ·gc.alloc.rate:                   2217.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              3464.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2335.808 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3649.124 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 1011784.618 ops/s
[info]                  ·gc.alloc.rate:                   2227.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              3464.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2356.080 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3664.390 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1022064.477 ops/s
[info]                  ·gc.alloc.rate:                   2249.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              3464.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3123.522 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1025916.298 ops/s
[info]                  ·gc.alloc.rate:                   2257.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              3464.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2374.177 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3642.681 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce":
[info]   1019268.369 ±(99.9%) 35782.940 ops/s [Average]
[info]   (min, avg, max) = (1007437.485, 1019268.369, 1029138.969), stdev = 9292.716
[info]   CI (99.9%): [983485.430, 1055051.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate":
[info]   2243.209 ±(99.9%) 77.760 MB/sec [Average]
[info]   (min, avg, max) = (2217.310, 2243.209, 2264.650), stdev = 20.194
[info]   CI (99.9%): [2165.449, 2320.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3464.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3464.000, 3464.000, 3464.000), stdev = 0.001
[info]   CI (99.9%): [3464.000, 3464.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.117, 0.167), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.180 ±(99.9%) 0.248 B/op [Average]
[info]   (min, avg, max) = (0.096, 0.180, 0.260), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2215.102 ±(99.9%) 744.074 MB/sec [Average]
[info]   (min, avg, max) = (1981.385, 2215.102, 2374.177), stdev = 193.234
[info]   CI (99.9%): [1471.028, 2959.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3422.087 ±(99.9%) 1219.548 B/op [Average]
[info]   (min, avg, max) = (3030.720, 3422.087, 3664.390), stdev = 316.713
[info]   CI (99.9%): [2202.539, 4641.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 10.000), stdev = 1.949
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala
[info] # Run progress: 69.18% complete, ETA 00:19:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_3b1ae14a/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1466010.852 ops/s
[info] # Warmup Iteration   2: 3750319.336 ops/s
[info] # Warmup Iteration   3: 3773474.159 ops/s
[info] Iteration   1: 3819545.122 ops/s
[info]                  ·gc.alloc.rate:                   2173.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2327.243 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 959.189 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 3847086.444 ops/s
[info]                  ·gc.alloc.rate:                   2190.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.905 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 823.833 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 3836484.435 ops/s
[info]                  ·gc.alloc.rate:                   2183.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2362.544 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 969.315 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 3872448.755 ops/s
[info]                  ·gc.alloc.rate:                   2204.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.771 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 826.303 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 3844717.141 ops/s
[info]                  ·gc.alloc.rate:                   2188.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2376.586 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 972.959 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala":
[info]   3844056.380 ±(99.9%) 73915.338 ops/s [Average]
[info]   (min, avg, max) = (3819545.122, 3844056.380, 3872448.755), stdev = 19195.579
[info]   CI (99.9%): [3770141.041, 3917971.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2188.188 ±(99.9%) 42.368 MB/sec [Average]
[info]   (min, avg, max) = (2173.931, 2188.188, 2204.233), stdev = 11.003
[info]   CI (99.9%): [2145.820, 2230.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   896.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (896.000, 896.000, 896.000), stdev = 0.001
[info]   CI (99.9%): [896.000, 896.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.121 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.121, 0.146), stdev = 0.027
[info]   CI (99.9%): [0.016, 0.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.049 ±(99.9%) 0.043 B/op [Average]
[info]   (min, avg, max) = (0.034, 0.049, 0.060), stdev = 0.011
[info]   CI (99.9%): [0.006, 0.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2222.610 ±(99.9%) 704.350 MB/sec [Average]
[info]   (min, avg, max) = (2013.905, 2222.610, 2376.586), stdev = 182.917
[info]   CI (99.9%): [1518.260, 2926.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   910.320 ±(99.9%) 300.321 B/op [Average]
[info]   (min, avg, max) = (823.833, 910.320, 972.959), stdev = 77.992
[info]   CI (99.9%): [609.999, 1210.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 9.000), stdev = 0.837
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala
[info] # Run progress: 69.52% complete, ETA 00:19:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10951278.665 ops/s
[info] # Warmup Iteration   2: 13068988.689 ops/s
[info] # Warmup Iteration   3: 13340238.265 ops/s
[info] Iteration   1: 13521925.774 ops/s
[info]                  ·gc.alloc.rate:                   824.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76.138 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 13207987.426 ops/s
[info]                  ·gc.alloc.rate:                   805.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.182 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 116.685 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 13064259.563 ops/s
[info]                  ·gc.alloc.rate:                   796.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.359 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78.726 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 13163339.697 ops/s
[info]                  ·gc.alloc.rate:                   802.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.139 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 117.558 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 13118052.746 ops/s
[info]                  ·gc.alloc.rate:                   800.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78.961 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala":
[info]   13215113.041 ±(99.9%) 691624.262 ops/s [Average]
[info]   (min, avg, max) = (13064259.563, 13215113.041, 13521925.774), stdev = 179612.624
[info]   CI (99.9%): [12523488.779, 13906737.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   805.965 ±(99.9%) 42.119 MB/sec [Average]
[info]   (min, avg, max) = (796.720, 805.965, 824.622), stdev = 10.938
[info]   CI (99.9%): [763.846, 848.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.015
[info]   CI (99.9%): [0.027, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.010 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (0.007, 0.010, 0.013), stdev = 0.002
[info]   CI (99.9%): [0.003, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   785.546 ±(99.9%) 687.666 MB/sec [Average]
[info]   (min, avg, max) = (653.359, 785.546, 983.139), stdev = 178.585
[info]   CI (99.9%): [97.880, 1473.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   93.614 ±(99.9%) 82.752 B/op [Average]
[info]   (min, avg, max) = (76.138, 93.614, 117.558), stdev = 21.490
[info]   CI (99.9%): [10.862, 176.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson
[info] # Run progress: 69.86% complete, ETA 00:18:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 140409.168 ops/s
[info] # Warmup Iteration   2: 515048.162 ops/s
[info] # Warmup Iteration   3: 520957.190 ops/s
[info] Iteration   1: 520158.600 ops/s
[info]                  ·gc.alloc.rate:                   1797.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              5440.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1983.905 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6004.394 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 519074.235 ops/s
[info]                  ·gc.alloc.rate:                   1794.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              5440.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1669.636 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5060.545 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 522718.562 ops/s
[info]                  ·gc.alloc.rate:                   1806.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              5440.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.810 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5055.483 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 517716.803 ops/s
[info]                  ·gc.alloc.rate:                   1789.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              5440.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.771 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6154.098 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 521145.073 ops/s
[info]                  ·gc.alloc.rate:                   1801.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              5440.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1693.469 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5113.876 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson":
[info]   520162.655 ±(99.9%) 7372.920 ops/s [Average]
[info]   (min, avg, max) = (517716.803, 520162.655, 522718.562), stdev = 1914.724
[info]   CI (99.9%): [512789.734, 527535.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1798.009 ±(99.9%) 24.464 MB/sec [Average]
[info]   (min, avg, max) = (1789.825, 1798.009, 1806.499), stdev = 6.353
[info]   CI (99.9%): [1773.544, 1822.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5440.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5440.001, 5440.001, 5440.001), stdev = 0.001
[info]   CI (99.9%): [5440.001, 5440.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.104), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.252 ±(99.9%) 0.297 B/op [Average]
[info]   (min, avg, max) = (0.126, 0.252, 0.316), stdev = 0.077
[info]   CI (99.9%): [≈ 0, 0.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1810.118 ±(99.9%) 685.755 MB/sec [Average]
[info]   (min, avg, max) = (1669.636, 1810.118, 2024.771), stdev = 178.088
[info]   CI (99.9%): [1124.363, 2495.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5477.679 ±(99.9%) 2126.216 B/op [Average]
[info]   (min, avg, max) = (5055.483, 5477.679, 6154.098), stdev = 552.171
[info]   CI (99.9%): [3351.463, 7603.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala
[info] # Run progress: 70.21% complete, ETA 00:18:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1065885.903 ops/s
[info] # Warmup Iteration   2: 2043654.269 ops/s
[info] # Warmup Iteration   3: 2068662.529 ops/s
[info] Iteration   1: 2090554.974 ops/s
[info]                  ·gc.alloc.rate:                   1328.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1315.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 989.924 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2093495.230 ops/s
[info]                  ·gc.alloc.rate:                   1329.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.486 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 996.614 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2093760.593 ops/s
[info]                  ·gc.alloc.rate:                   1330.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1333.950 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1002.969 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 2113825.641 ops/s
[info]                  ·gc.alloc.rate:                   1342.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.846 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 998.435 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2108914.991 ops/s
[info]                  ·gc.alloc.rate:                   1339.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.756 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1005.212 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala":
[info]   2100110.286 ±(99.9%) 40432.465 ops/s [Average]
[info]   (min, avg, max) = (2090554.974, 2100110.286, 2113825.641), stdev = 10500.183
[info]   CI (99.9%): [2059677.821, 2140542.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1334.232 ±(99.9%) 25.547 MB/sec [Average]
[info]   (min, avg, max) = (1328.445, 1334.232, 1342.948), stdev = 6.634
[info]   CI (99.9%): [1308.685, 1359.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1000.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1000.000, 1000.000, 1000.000), stdev = 0.001
[info]   CI (99.9%): [1000.000, 1000.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.187), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.084 ±(99.9%) 0.139 B/op [Average]
[info]   (min, avg, max) = (0.047, 0.084, 0.141), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1332.420 ±(99.9%) 48.261 MB/sec [Average]
[info]   (min, avg, max) = (1315.060, 1332.420, 1346.756), stdev = 12.533
[info]   CI (99.9%): [1284.158, 1380.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   998.631 ±(99.9%) 22.946 B/op [Average]
[info]   (min, avg, max) = (989.924, 998.631, 1005.212), stdev = 5.959
[info]   CI (99.9%): [975.685, 1021.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala
[info] # Run progress: 70.55% complete, ETA 00:18:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8421821.695 ops/s
[info] # Warmup Iteration   2: 5114365.237 ops/s
[info] # Warmup Iteration   3: 5210299.983 ops/s
[info] Iteration   1: 5160044.191 ops/s
[info]                  ·gc.alloc.rate:                   681.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 200.142 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5162749.104 ops/s
[info]                  ·gc.alloc.rate:                   682.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.694 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 199.929 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 5172345.123 ops/s
[info]                  ·gc.alloc.rate:                   683.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.344 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 199.756 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 5213351.981 ops/s
[info]                  ·gc.alloc.rate:                   688.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.745 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 198.587 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 5224718.182 ops/s
[info]                  ·gc.alloc.rate:                   690.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.401 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 198.655 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala":
[info]   5186641.716 ±(99.9%) 116253.953 ops/s [Average]
[info]   (min, avg, max) = (5160044.191, 5186641.716, 5224718.182), stdev = 30190.782
[info]   CI (99.9%): [5070387.764, 5302895.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   685.353 ±(99.9%) 15.495 MB/sec [Average]
[info]   (min, avg, max) = (681.822, 685.353, 690.422), stdev = 4.024
[info]   CI (99.9%): [669.858, 700.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   208.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (208.000, 208.000, 208.000), stdev = 0.001
[info]   CI (99.9%): [208.000, 208.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.146), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.022 ±(99.9%) 0.061 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.044), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   657.049 ±(99.9%) 5.880 MB/sec [Average]
[info]   (min, avg, max) = (655.694, 657.049, 659.401), stdev = 1.527
[info]   CI (99.9%): [651.170, 662.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   199.414 ±(99.9%) 2.838 B/op [Average]
[info]   (min, avg, max) = (198.587, 199.414, 200.142), stdev = 0.737
[info]   CI (99.9%): [196.576, 202.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson
[info] # Run progress: 70.89% complete, ETA 00:18:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 111685.810 ops/s
[info] # Warmup Iteration   2: 399198.596 ops/s
[info] # Warmup Iteration   3: 402728.307 ops/s
[info] Iteration   1: 400952.871 ops/s
[info]                  ·gc.alloc.rate:                   1819.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1983.976 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7789.737 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 403919.294 ops/s
[info]                  ·gc.alloc.rate:                   1833.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1669.161 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6504.543 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 402858.913 ops/s
[info]                  ·gc.alloc.rate:                   1828.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.209 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7877.671 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 406100.012 ops/s
[info]                  ·gc.alloc.rate:                   1843.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1688.813 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6544.451 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 403728.510 ops/s
[info]                  ·gc.alloc.rate:                   1832.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.758 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7922.885 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson":
[info]   403511.920 ±(99.9%) 7174.565 ops/s [Average]
[info]   (min, avg, max) = (400952.871, 403511.920, 406100.012), stdev = 1863.212
[info]   CI (99.9%): [396337.355, 410686.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1831.530 ±(99.9%) 33.507 MB/sec [Average]
[info]   (min, avg, max) = (1819.513, 1831.530, 1843.529), stdev = 8.702
[info]   CI (99.9%): [1798.023, 1865.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   7144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7144.001, 7144.001, 7144.001), stdev = 0.001
[info]   CI (99.9%): [7144.001, 7144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.121 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.121, 0.167), stdev = 0.027
[info]   CI (99.9%): [0.016, 0.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.471 ±(99.9%) 0.406 B/op [Average]
[info]   (min, avg, max) = (0.403, 0.471, 0.649), stdev = 0.105
[info]   CI (99.9%): [0.065, 0.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1878.184 ±(99.9%) 703.963 MB/sec [Average]
[info]   (min, avg, max) = (1669.161, 1878.184, 2032.758), stdev = 182.817
[info]   CI (99.9%): [1174.221, 2582.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7327.857 ±(99.9%) 2830.456 B/op [Average]
[info]   (min, avg, max) = (6504.543, 7327.857, 7922.885), stdev = 735.061
[info]   CI (99.9%): [4497.401, 10158.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 8.000), stdev = 1.643
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala
[info] # Run progress: 71.23% complete, ETA 00:17:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_3b1ae14a/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1466039.262 ops/s
[info] # Warmup Iteration   2: 2715909.992 ops/s
[info] # Warmup Iteration   3: 2687043.591 ops/s
[info] Iteration   1: 2745433.127 ops/s
[info]                  ·gc.alloc.rate:                   1450.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.221 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 755.316 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2745675.939 ops/s
[info]                  ·gc.alloc.rate:                   1451.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1659.402 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 951.002 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2749315.191 ops/s
[info]                  ·gc.alloc.rate:                   1453.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 765.367 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2751967.811 ops/s
[info]                  ·gc.alloc.rate:                   1454.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.849 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 768.037 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2729694.204 ops/s
[info]                  ·gc.alloc.rate:                   1442.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.785 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 972.124 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala":
[info]   2744417.255 ±(99.9%) 33368.956 ops/s [Average]
[info]   (min, avg, max) = (2729694.204, 2744417.255, 2751967.811), stdev = 8665.812
[info]   CI (99.9%): [2711048.299, 2777786.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1450.681 ±(99.9%) 17.847 MB/sec [Average]
[info]   (min, avg, max) = (1442.792, 1450.681, 1454.684), stdev = 4.635
[info]   CI (99.9%): [1432.834, 1468.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   832.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (832.000, 832.000, 832.000), stdev = 0.001
[info]   CI (99.9%): [832.000, 832.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.104, 0.146), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.060 ±(99.9%) 0.092 B/op [Average]
[info]   (min, avg, max) = (0.024, 0.060, 0.084), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1468.418 ±(99.9%) 719.530 MB/sec [Average]
[info]   (min, avg, max) = (1317.221, 1468.418, 1685.785), stdev = 186.860
[info]   CI (99.9%): [748.888, 2187.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   842.369 ±(99.9%) 420.366 B/op [Average]
[info]   (min, avg, max) = (755.316, 842.369, 972.124), stdev = 109.168
[info]   CI (99.9%): [422.003, 1262.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala
[info] # Run progress: 71.58% complete, ETA 00:17:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5914211.606 ops/s
[info] # Warmup Iteration   2: 6769448.464 ops/s
[info] # Warmup Iteration   3: 6865165.365 ops/s
[info] Iteration   1: 6860297.636 ops/s
[info]                  ·gc.alloc.rate:                   1046.100 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.186 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 224.648 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6834182.124 ops/s
[info]                  ·gc.alloc.rate:                   1041.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.361 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 225.820 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6911742.161 ops/s
[info]                  ·gc.alloc.rate:                   1053.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1313.438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 299.135 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 6940288.677 ops/s
[info]                  ·gc.alloc.rate:                   1058.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.418 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 224.788 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 6813403.095 ops/s
[info]                  ·gc.alloc.rate:                   1038.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 229.891 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala":
[info]   6871982.739 ±(99.9%) 204152.371 ops/s [Average]
[info]   (min, avg, max) = (6813403.095, 6871982.739, 6940288.677), stdev = 53017.722
[info]   CI (99.9%): [6667830.368, 7076135.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1047.826 ±(99.9%) 31.572 MB/sec [Average]
[info]   (min, avg, max) = (1038.810, 1047.826, 1058.512), stdev = 8.199
[info]   CI (99.9%): [1016.254, 1079.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   240.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (240.000, 240.000, 240.000), stdev = 0.001
[info]   CI (99.9%): [240.000, 240.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.021 ±(99.9%) 0.031 B/op [Average]
[info]   (min, avg, max) = (0.010, 0.021, 0.029), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1051.891 ±(99.9%) 563.619 MB/sec [Average]
[info]   (min, avg, max) = (979.186, 1051.891, 1313.438), stdev = 146.370
[info]   CI (99.9%): [488.272, 1615.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   240.856 ±(99.9%) 125.716 B/op [Average]
[info]   (min, avg, max) = (224.648, 240.856, 299.135), stdev = 32.648
[info]   CI (99.9%): [115.140, 366.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson
[info] # Run progress: 71.92% complete, ETA 00:17:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 277829.181 ops/s
[info] # Warmup Iteration   2: 738831.712 ops/s
[info] # Warmup Iteration   3: 744110.284 ops/s
[info] Iteration   1: 740042.487 ops/s
[info]                  ·gc.alloc.rate:                   2151.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              4576.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2328.987 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4953.618 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 746718.348 ops/s
[info]                  ·gc.alloc.rate:                   2170.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              4576.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4244.349 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 744628.770 ops/s
[info]                  ·gc.alloc.rate:                   2165.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              4576.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2362.867 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4994.077 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 739456.677 ops/s
[info]                  ·gc.alloc.rate:                   2149.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              4576.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.499 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4327.153 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 731432.733 ops/s
[info]                  ·gc.alloc.rate:                   2126.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              4576.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.819 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4383.245 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson":
[info]   740455.803 ±(99.9%) 22717.005 ops/s [Average]
[info]   (min, avg, max) = (731432.733, 740455.803, 746718.348), stdev = 5899.534
[info]   CI (99.9%): [717738.797, 763172.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2152.627 ±(99.9%) 66.338 MB/sec [Average]
[info]   (min, avg, max) = (2126.389, 2152.627, 2170.855), stdev = 17.228
[info]   CI (99.9%): [2086.289, 2218.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4576.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4576.001, 4576.001, 4576.001), stdev = 0.001
[info]   CI (99.9%): [4576.000, 4576.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.146), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.212 ±(99.9%) 0.248 B/op [Average]
[info]   (min, avg, max) = (0.133, 0.212, 0.307), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2154.938 ±(99.9%) 673.780 MB/sec [Average]
[info]   (min, avg, max) = (2013.520, 2154.938, 2362.867), stdev = 174.979
[info]   CI (99.9%): [1481.158, 2828.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4580.488 ±(99.9%) 1396.827 B/op [Average]
[info]   (min, avg, max) = (4244.349, 4580.488, 4994.077), stdev = 362.752
[info]   CI (99.9%): [3183.661, 5977.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 9.000), stdev = 0.894
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 72.26% complete, ETA 00:17:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 468817.308 ops/s
[info] # Warmup Iteration   2: 800789.359 ops/s
[info] # Warmup Iteration   3: 828627.139 ops/s
[info] Iteration   1: 823092.636 ops/s
[info]                  ·gc.alloc.rate:                   2685.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2662.092 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5090.979 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 826493.871 ops/s
[info]                  ·gc.alloc.rate:                   2696.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2688.228 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5119.701 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 824061.186 ops/s
[info]                  ·gc.alloc.rate:                   2689.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2706.258 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5167.975 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 813101.664 ops/s
[info]                  ·gc.alloc.rate:                   2653.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2714.982 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5255.736 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 820342.341 ops/s
[info]                  ·gc.alloc.rate:                   2676.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2718.531 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5215.760 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   821418.339 ±(99.9%) 19810.599 ops/s [Average]
[info]   (min, avg, max) = (813101.664, 821418.339, 826493.871), stdev = 5144.750
[info]   CI (99.9%): [801607.740, 841228.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2680.405 ±(99.9%) 64.849 MB/sec [Average]
[info]   (min, avg, max) = (2653.130, 2680.405, 2696.786), stdev = 16.841
[info]   CI (99.9%): [2615.556, 2745.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5136.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5136.000, 5136.001, 5136.001), stdev = 0.001
[info]   CI (99.9%): [5136.000, 5136.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.121 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.121, 0.167), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.231 ±(99.9%) 0.292 B/op [Average]
[info]   (min, avg, max) = (0.121, 0.231, 0.317), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2698.018 ±(99.9%) 89.543 MB/sec [Average]
[info]   (min, avg, max) = (2662.092, 2698.018, 2718.531), stdev = 23.254
[info]   CI (99.9%): [2608.475, 2787.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5170.030 ±(99.9%) 259.904 B/op [Average]
[info]   (min, avg, max) = (5090.979, 5170.030, 5255.736), stdev = 67.496
[info]   CI (99.9%): [4910.126, 5429.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   40.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.000, 8.000), stdev = 0.001
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 72.60% complete, ETA 00:17:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 282404.458 ops/s
[info] # Warmup Iteration   2: 959061.731 ops/s
[info] # Warmup Iteration   3: 976071.007 ops/s
[info] Iteration   1: 975600.398 ops/s
[info]                  ·gc.alloc.rate:                   1209.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.294 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2112.741 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 967055.713 ops/s
[info]                  ·gc.alloc.rate:                   1199.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.507 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1610.480 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 977459.048 ops/s
[info]                  ·gc.alloc.rate:                   1212.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2138.749 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 963282.675 ops/s
[info]                  ·gc.alloc.rate:                   1194.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336.377 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2183.894 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 964985.034 ops/s
[info]                  ·gc.alloc.rate:                   1196.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1006.379 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1641.603 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   969676.574 ±(99.9%) 24762.665 ops/s [Average]
[info]   (min, avg, max) = (963282.675, 969676.574, 977459.048), stdev = 6430.785
[info]   CI (99.9%): [944913.909, 994439.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1202.522 ±(99.9%) 30.974 MB/sec [Average]
[info]   (min, avg, max) = (1194.476, 1202.522, 1212.443), stdev = 8.044
[info]   CI (99.9%): [1171.548, 1233.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1952.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.000, 1952.000, 1952.000), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.024
[info]   CI (99.9%): [0.004, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.155 ±(99.9%) 0.148 B/op [Average]
[info]   (min, avg, max) = (0.102, 0.155, 0.203), stdev = 0.039
[info]   CI (99.9%): [0.007, 0.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1193.999 ±(99.9%) 690.589 MB/sec [Average]
[info]   (min, avg, max) = (989.507, 1193.999, 1336.377), stdev = 179.344
[info]   CI (99.9%): [503.410, 1884.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1937.493 ±(99.9%) 1099.993 B/op [Average]
[info]   (min, avg, max) = (1610.480, 1937.493, 2183.894), stdev = 285.665
[info]   CI (99.9%): [837.500, 3037.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 72.95% complete, ETA 00:16:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7243559.213 ops/s
[info] # Warmup Iteration   2: 8457913.475 ops/s
[info] # Warmup Iteration   3: 8529208.159 ops/s
[info] Iteration   1: 8554001.763 ops/s
[info]                  ·gc.alloc.rate:                   391.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.551 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94.129 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 8577021.399 ops/s
[info]                  ·gc.alloc.rate:                   392.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332.408 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60.995 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 8605631.835 ops/s
[info]                  ·gc.alloc.rate:                   393.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60.792 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 8589965.419 ops/s
[info]                  ·gc.alloc.rate:                   392.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.370 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60.537 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 8598833.598 ops/s
[info]                  ·gc.alloc.rate:                   393.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.398 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60.475 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   8585090.803 ±(99.9%) 78590.029 ops/s [Average]
[info]   (min, avg, max) = (8554001.763, 8585090.803, 8605631.835), stdev = 20409.581
[info]   CI (99.9%): [8506500.774, 8663680.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   392.728 ±(99.9%) 3.621 MB/sec [Average]
[info]   (min, avg, max) = (391.290, 392.728, 393.679), stdev = 0.940
[info]   CI (99.9%): [389.108, 396.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.644 ±(99.9%) 5.341 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.644, 3.125), stdev = 1.387
[info]   CI (99.9%): [≈ 0, 5.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.118 ±(99.9%) 0.980 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.118, 0.573), stdev = 0.255
[info]   CI (99.9%): [≈ 0, 1.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   367.424 ±(99.9%) 310.268 MB/sec [Average]
[info]   (min, avg, max) = (330.370, 367.424, 511.551), stdev = 80.576
[info]   CI (99.9%): [57.157, 677.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   67.386 ±(99.9%) 57.573 B/op [Average]
[info]   (min, avg, max) = (60.475, 67.386, 94.129), stdev = 14.951
[info]   CI (99.9%): [9.813, 124.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.414
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 73.29% complete, ETA 00:16:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33416.486 ops/s
[info] # Warmup Iteration   2: 291600.198 ops/s
[info] # Warmup Iteration   3: 291928.977 ops/s
[info] Iteration   1: 295449.282 ops/s
[info]                  ·gc.alloc.rate:                   1537.674 MB/sec
[info]                  ·gc.alloc.rate.norm:              8192.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.826 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7004.772 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 293408.702 ops/s
[info]                  ·gc.alloc.rate:                   1526.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              8192.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1658.380 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8897.290 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 293910.136 ops/s
[info]                  ·gc.alloc.rate:                   1529.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              8192.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1671.243 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8950.419 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 293522.990 ops/s
[info]                  ·gc.alloc.rate:                   1527.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              8192.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7207.984 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 292232.093 ops/s
[info]                  ·gc.alloc.rate:                   1520.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              8192.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1687.434 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9089.491 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   293704.641 ±(99.9%) 4463.665 ops/s [Average]
[info]   (min, avg, max) = (292232.093, 293704.641, 295449.282), stdev = 1159.200
[info]   CI (99.9%): [289240.976, 298168.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1528.534 ±(99.9%) 23.399 MB/sec [Average]
[info]   (min, avg, max) = (1520.818, 1528.534, 1537.674), stdev = 6.077
[info]   CI (99.9%): [1505.135, 1551.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8192.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8192.001, 8192.001, 8192.001), stdev = 0.001
[info]   CI (99.9%): [8192.001, 8192.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.446 ±(99.9%) 0.679 B/op [Average]
[info]   (min, avg, max) = (0.223, 0.446, 0.670), stdev = 0.176
[info]   CI (99.9%): [≈ 0, 1.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1535.203 ±(99.9%) 725.333 MB/sec [Average]
[info]   (min, avg, max) = (1314.826, 1535.203, 1687.434), stdev = 188.367
[info]   CI (99.9%): [809.869, 2260.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8229.991 ±(99.9%) 3968.548 B/op [Average]
[info]   (min, avg, max) = (7004.772, 8229.991, 9089.491), stdev = 1030.619
[info]   CI (99.9%): [4261.443, 12198.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 73.63% complete, ETA 00:16:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5479.111 ops/s
[info] # Warmup Iteration   2: 7532.635 ops/s
[info] # Warmup Iteration   3: 7741.559 ops/s
[info] Iteration   1: 7779.136 ops/s
[info]                  ·gc.alloc.rate:                   1871.887 MB/sec
[info]                  ·gc.alloc.rate.norm:              378776.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1968.639 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 398353.766 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 7710.630 ops/s
[info]                  ·gc.alloc.rate:                   1855.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              378776.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1989.866 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 406216.140 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 7744.982 ops/s
[info]                  ·gc.alloc.rate:                   1863.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              378776.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1671.998 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 339802.510 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 7802.196 ops/s
[info]                  ·gc.alloc.rate:                   1877.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              378776.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 407055.483 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 7685.621 ops/s
[info]                  ·gc.alloc.rate:                   1849.480 MB/sec
[info]                  ·gc.alloc.rate.norm:              378776.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1688.450 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 345796.821 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   7744.513 ±(99.9%) 184.094 ops/s [Average]
[info]   (min, avg, max) = (7685.621, 7744.513, 7802.196), stdev = 47.809
[info]   CI (99.9%): [7560.419, 7928.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1863.638 ±(99.9%) 44.355 MB/sec [Average]
[info]   (min, avg, max) = (1849.480, 1863.638, 1877.609), stdev = 11.519
[info]   CI (99.9%): [1819.284, 1907.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   378776.054 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (378776.052, 378776.054, 378776.057), stdev = 0.002
[info]   CI (99.9%): [378776.046, 378776.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.142 ±(99.9%) 0.311 MB/sec [Average]
[info]   (min, avg, max) = (0.067, 0.142, 0.250), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   28.721 ±(99.9%) 62.545 B/op [Average]
[info]   (min, avg, max) = (13.488, 28.721, 50.386), stdev = 16.243
[info]   CI (99.9%): [≈ 0, 91.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1867.349 ±(99.9%) 661.565 MB/sec [Average]
[info]   (min, avg, max) = (1671.998, 1867.349, 2017.791), stdev = 171.806
[info]   CI (99.9%): [1205.783, 2528.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   379444.944 ±(99.9%) 129731.576 B/op [Average]
[info]   (min, avg, max) = (339802.510, 379444.944, 407055.483), stdev = 33690.878
[info]   CI (99.9%): [249713.368, 509176.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 73.97% complete, ETA 00:16:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7136.961 ops/s
[info] # Warmup Iteration   2: 14144.998 ops/s
[info] # Warmup Iteration   3: 14392.745 ops/s
[info] Iteration   1: 14476.304 ops/s
[info]                  ·gc.alloc.rate:                   366.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              39888.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.441 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55615.081 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 14493.375 ops/s
[info]                  ·gc.alloc.rate:                   367.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              39888.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.363 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35010.402 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 14461.276 ops/s
[info]                  ·gc.alloc.rate:                   366.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              39888.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.368 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35087.858 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 14471.394 ops/s
[info]                  ·gc.alloc.rate:                   366.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              39888.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      324.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35280.953 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 14492.328 ops/s
[info]                  ·gc.alloc.rate:                   367.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              39888.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      324.442 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35229.839 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   14478.935 ±(99.9%) 53.200 ops/s [Average]
[info]   (min, avg, max) = (14461.276, 14478.935, 14493.375), stdev = 13.816
[info]   CI (99.9%): [14425.735, 14532.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   366.926 ±(99.9%) 1.433 MB/sec [Average]
[info]   (min, avg, max) = (366.469, 366.926, 367.341), stdev = 0.372
[info]   CI (99.9%): [365.493, 368.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39888.031 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (39888.028, 39888.031, 39888.038), stdev = 0.004
[info]   CI (99.9%): [39888.016, 39888.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.700 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.092, 0.416), stdev = 0.182
[info]   CI (99.9%): [≈ 0, 0.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9.948 ±(99.9%) 76.029 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.948, 45.210), stdev = 19.745
[info]   CI (99.9%): [≈ 0, 85.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   360.997 ±(99.9%) 323.865 MB/sec [Average]
[info]   (min, avg, max) = (322.363, 360.997, 511.441), stdev = 84.107
[info]   CI (99.9%): [37.132, 684.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   39244.826 ±(99.9%) 35240.671 B/op [Average]
[info]   (min, avg, max) = (35010.402, 39244.826, 55615.081), stdev = 9151.890
[info]   CI (99.9%): [4004.156, 74485.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 74.32% complete, ETA 00:16:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18685.338 ops/s
[info] # Warmup Iteration   2: 24277.952 ops/s
[info] # Warmup Iteration   3: 24288.928 ops/s
[info] Iteration   1: 24235.590 ops/s
[info]                  ·gc.alloc.rate:                   414.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.493 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33220.839 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 24264.019 ops/s
[info]                  ·gc.alloc.rate:                   414.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     216.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.742 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21388.047 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 24380.236 ops/s
[info]                  ·gc.alloc.rate:                   416.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.683 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21285.426 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 24340.361 ops/s
[info]                  ·gc.alloc.rate:                   415.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.455 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42384.110 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 24373.411 ops/s
[info]                  ·gc.alloc.rate:                   416.486 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.715 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21163.367 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   24318.723 ±(99.9%) 252.109 ops/s [Average]
[info]   (min, avg, max) = (24235.590, 24318.723, 24380.236), stdev = 65.472
[info]   CI (99.9%): [24066.614, 24570.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   415.555 ±(99.9%) 4.288 MB/sec [Average]
[info]   (min, avg, max) = (414.111, 415.555, 416.584), stdev = 1.114
[info]   CI (99.9%): [411.268, 419.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26896.018 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (26896.017, 26896.018, 26896.021), stdev = 0.002
[info]   CI (99.9%): [26896.011, 26896.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.694 ±(99.9%) 5.708 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.694, 3.345), stdev = 1.482
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   45.013 ±(99.9%) 370.254 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45.013, 216.997), stdev = 96.154
[info]   CI (99.9%): [≈ 0, 415.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   430.818 ±(99.9%) 571.289 MB/sec [Average]
[info]   (min, avg, max) = (327.715, 430.818, 655.455), stdev = 148.362
[info]   CI (99.9%): [≈ 0, 1002.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   27888.358 ±(99.9%) 37016.309 B/op [Average]
[info]   (min, avg, max) = (21163.367, 27888.358, 42384.110), stdev = 9613.018
[info]   CI (99.9%): [≈ 0, 64904.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 6.000), stdev = 2.074
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 74.66% complete, ETA 00:15:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 816.394 ops/s
[info] # Warmup Iteration   2: 2348.081 ops/s
[info] # Warmup Iteration   3: 2358.118 ops/s
[info] Iteration   1: 2350.850 ops/s
[info]                  ·gc.alloc.rate:                   1382.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              925862.276 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1311.655 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 878271.565 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2368.548 ops/s
[info]                  ·gc.alloc.rate:                   1393.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              925856.186 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41.496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1323.069 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 879051.049 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2382.364 ops/s
[info]                  ·gc.alloc.rate:                   1401.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              925856.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1332.658 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 880487.023 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2377.492 ops/s
[info]                  ·gc.alloc.rate:                   1398.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              925856.172 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27.559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1676.097 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1109647.394 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2377.337 ops/s
[info]                  ·gc.alloc.rate:                   1398.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              925856.185 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 891598.264 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   2371.318 ±(99.9%) 48.055 ops/s [Average]
[info]   (min, avg, max) = (2350.850, 2371.318, 2382.364), stdev = 12.480
[info]   CI (99.9%): [2323.263, 2419.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1394.927 ±(99.9%) 28.409 MB/sec [Average]
[info]   (min, avg, max) = (1382.729, 1394.927, 1401.327), stdev = 7.378
[info]   CI (99.9%): [1366.518, 1423.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   925857.398 ±(99.9%) 10.500 B/op [Average]
[info]   (min, avg, max) = (925856.171, 925857.398, 925862.276), stdev = 2.727
[info]   CI (99.9%): [925846.898, 925867.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   19.353 ±(99.9%) 60.660 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.353, 41.496), stdev = 15.753
[info]   CI (99.9%): [≈ 0, 80.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1398.062 ±(99.9%) 600.552 MB/sec [Average]
[info]   (min, avg, max) = (1311.655, 1398.062, 1676.097), stdev = 155.961
[info]   CI (99.9%): [797.510, 1998.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   927811.059 ±(99.9%) 391967.767 B/op [Average]
[info]   (min, avg, max) = (878271.565, 927811.059, 1109647.394), stdev = 101792.784
[info]   CI (99.9%): [535843.292, 1319778.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 75.00% complete, ETA 00:15:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5640.760 ops/s
[info] # Warmup Iteration   2: 7736.061 ops/s
[info] # Warmup Iteration   3: 7877.918 ops/s
[info] Iteration   1: 7875.142 ops/s
[info]                  ·gc.alloc.rate:                   1633.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              326528.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24.960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1634.658 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 326739.849 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 7833.663 ops/s
[info]                  ·gc.alloc.rate:                   1625.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              326528.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1649.295 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 331393.372 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 7959.298 ops/s
[info]                  ·gc.alloc.rate:                   1650.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              326528.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.919 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 263033.070 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 7893.491 ops/s
[info]                  ·gc.alloc.rate:                   1638.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              326528.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.602 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.309 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 333565.374 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 7863.739 ops/s
[info]                  ·gc.alloc.rate:                   1631.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              326528.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37.497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.709 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 336770.881 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   7885.067 ±(99.9%) 180.374 ops/s [Average]
[info]   (min, avg, max) = (7833.663, 7885.067, 7959.298), stdev = 46.843
[info]   CI (99.9%): [7704.692, 8065.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1635.834 ±(99.9%) 37.160 MB/sec [Average]
[info]   (min, avg, max) = (1625.081, 1635.834, 1650.955), stdev = 9.650
[info]   CI (99.9%): [1598.674, 1672.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   326528.053 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (326528.051, 326528.053, 326528.056), stdev = 0.002
[info]   CI (99.9%): [326528.045, 326528.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.112, 0.187), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   22.450 ±(99.9%) 35.265 B/op [Average]
[info]   (min, avg, max) = (16.464, 22.450, 37.497), stdev = 9.158
[info]   CI (99.9%): [≈ 0, 57.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1593.978 ±(99.9%) 573.114 MB/sec [Average]
[info]   (min, avg, max) = (1329.919, 1593.978, 1682.709), stdev = 148.836
[info]   CI (99.9%): [1020.864, 2167.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   318300.509 ±(99.9%) 119793.187 B/op [Average]
[info]   (min, avg, max) = (263033.070, 318300.509, 336770.881), stdev = 31109.910
[info]   CI (99.9%): [198507.323, 438093.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 6.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 75.34% complete, ETA 00:15:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_3b1ae14a/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 24461.797 ops/s
[info] # Warmup Iteration   2: 42006.247 ops/s
[info] # Warmup Iteration   3: 42821.074 ops/s
[info] Iteration   1: 42859.721 ops/s
[info]                  ·gc.alloc.rate:                   620.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.350 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11839.195 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 43225.038 ops/s
[info]                  ·gc.alloc.rate:                   626.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.927 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      648.777 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23624.552 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 42837.517 ops/s
[info]                  ·gc.alloc.rate:                   620.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.849 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23958.082 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 42858.223 ops/s
[info]                  ·gc.alloc.rate:                   621.020 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.845 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24045.869 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 42565.635 ops/s
[info]                  ·gc.alloc.rate:                   616.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.446 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24309.880 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   42869.227 ±(99.9%) 903.028 ops/s [Average]
[info]   (min, avg, max) = (42565.635, 42869.227, 43225.038), stdev = 234.514
[info]   CI (99.9%): [41966.198, 43772.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   621.182 ±(99.9%) 13.058 MB/sec [Average]
[info]   (min, avg, max) = (616.822, 621.182, 626.351), stdev = 3.391
[info]   CI (99.9%): [608.124, 634.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22807.841 ±(99.9%) 0.255 B/op [Average]
[info]   (min, avg, max) = (22807.740, 22807.841, 22807.927), stdev = 0.066
[info]   CI (99.9%): [22807.586, 22808.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.609 ±(99.9%) 2.445 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.609, 1.516), stdev = 0.635
[info]   CI (99.9%): [≈ 0, 3.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   587.066 ±(99.9%) 569.954 MB/sec [Average]
[info]   (min, avg, max) = (322.350, 587.066, 657.446), stdev = 148.015
[info]   CI (99.9%): [17.112, 1157.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   21555.516 ±(99.9%) 20936.360 B/op [Average]
[info]   (min, avg, max) = (11839.195, 21555.516, 24309.880), stdev = 5437.106
[info]   CI (99.9%): [619.155, 42491.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 75.68% complete, ETA 00:15:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53510.352 ops/s
[info] # Warmup Iteration   2: 62296.342 ops/s
[info] # Warmup Iteration   3: 62761.902 ops/s
[info] Iteration   1: 61229.213 ops/s
[info]                  ·gc.alloc.rate:                   462.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              11888.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97.323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      583.834 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15008.767 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 63537.628 ops/s
[info]                  ·gc.alloc.rate:                   479.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              11888.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.030 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8126.769 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 63532.194 ops/s
[info]                  ·gc.alloc.rate:                   479.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              11888.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8086.153 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 62970.596 ops/s
[info]                  ·gc.alloc.rate:                   475.733 MB/sec
[info]                  ·gc.alloc.rate.norm:              11888.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16299.454 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 63538.157 ops/s
[info]                  ·gc.alloc.rate:                   479.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              11888.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.707 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8068.635 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   62961.558 ±(99.9%) 3846.333 ops/s [Average]
[info]   (min, avg, max) = (61229.213, 62961.558, 63538.157), stdev = 998.881
[info]   CI (99.9%): [59115.224, 66807.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   475.557 ±(99.9%) 29.071 MB/sec [Average]
[info]   (min, avg, max) = (462.438, 475.557, 479.883), stdev = 7.550
[info]   CI (99.9%): [446.486, 504.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   11888.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11888.006, 11888.007, 11888.007), stdev = 0.001
[info]   CI (99.9%): [11888.006, 11888.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.782 ±(99.9%) 6.466 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.782, 3.786), stdev = 1.679
[info]   CI (99.9%): [≈ 0, 7.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   20.086 ±(99.9%) 166.273 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.086, 97.323), stdev = 43.181
[info]   CI (99.9%): [≈ 0, 186.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   443.251 ±(99.9%) 621.483 MB/sec [Average]
[info]   (min, avg, max) = (325.707, 443.251, 652.270), stdev = 161.397
[info]   CI (99.9%): [≈ 0, 1064.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11117.956 ±(99.9%) 16041.955 B/op [Average]
[info]   (min, avg, max) = (8068.635, 11117.956, 16299.454), stdev = 4166.045
[info]   CI (99.9%): [≈ 0, 27159.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 5.000), stdev = 1.732
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 76.03% complete, ETA 00:14:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64156.622 ops/s
[info] # Warmup Iteration   2: 76590.609 ops/s
[info] # Warmup Iteration   3: 76877.144 ops/s
[info] Iteration   1: 77100.789 ops/s
[info]                  ·gc.alloc.rate:      1.176 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 76998.932 ops/s
[info]                  ·gc.alloc.rate:      1.174 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 76941.463 ops/s
[info]                  ·gc.alloc.rate:      1.174 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 74538.842 ops/s
[info]                  ·gc.alloc.rate:      1.137 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 74581.169 ops/s
[info]                  ·gc.alloc.rate:      1.138 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   76032.239 ±(99.9%) 5180.090 ops/s [Average]
[info]   (min, avg, max) = (74538.842, 76032.239, 77100.789), stdev = 1345.253
[info]   CI (99.9%): [70852.149, 81212.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.160 ±(99.9%) 0.079 MB/sec [Average]
[info]   (min, avg, max) = (1.137, 1.160, 1.176), stdev = 0.021
[info]   CI (99.9%): [1.081, 1.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   24.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24.005, 24.005, 24.005), stdev = 0.001
[info]   CI (99.9%): [24.005, 24.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 76.37% complete, ETA 00:14:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2481.732 ops/s
[info] # Warmup Iteration   2: 5407.592 ops/s
[info] # Warmup Iteration   3: 5535.537 ops/s
[info] Iteration   1: 5629.307 ops/s
[info]                  ·gc.alloc.rate:                   1655.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              462831.551 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1649.934 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 461347.370 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 5609.053 ops/s
[info]                  ·gc.alloc.rate:                   1649.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              462831.614 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1663.522 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 466812.578 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 5618.161 ops/s
[info]                  ·gc.alloc.rate:                   1651.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              462831.879 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1675.158 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 469340.379 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 5607.957 ops/s
[info]                  ·gc.alloc.rate:                   1648.947 MB/sec
[info]                  ·gc.alloc.rate.norm:              462831.218 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1683.409 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 472504.161 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 5610.465 ops/s
[info]                  ·gc.alloc.rate:                   1649.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              462831.987 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1689.526 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 474026.606 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   5614.989 ±(99.9%) 34.454 ops/s [Average]
[info]   (min, avg, max) = (5607.957, 5614.989, 5629.307), stdev = 8.948
[info]   CI (99.9%): [5580.534, 5649.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1651.016 ±(99.9%) 10.139 MB/sec [Average]
[info]   (min, avg, max) = (1648.947, 1651.016, 1655.242), stdev = 2.633
[info]   CI (99.9%): [1640.877, 1661.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   462831.650 ±(99.9%) 1.161 B/op [Average]
[info]   (min, avg, max) = (462831.218, 462831.650, 462831.987), stdev = 0.301
[info]   CI (99.9%): [462830.489, 462832.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.104), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   17.503 ±(99.9%) 31.768 B/op [Average]
[info]   (min, avg, max) = (11.638, 17.503, 29.153), stdev = 8.250
[info]   CI (99.9%): [≈ 0, 49.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1672.310 ±(99.9%) 61.054 MB/sec [Average]
[info]   (min, avg, max) = (1649.934, 1672.310, 1689.526), stdev = 15.855
[info]   CI (99.9%): [1611.256, 1733.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   468806.219 ±(99.9%) 19332.148 B/op [Average]
[info]   (min, avg, max) = (461347.370, 468806.219, 474026.606), stdev = 5020.497
[info]   CI (99.9%): [449474.071, 488138.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala
[info] # Run progress: 76.71% complete, ETA 00:14:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4902140.323 ops/s
[info] # Warmup Iteration   2: 5789936.824 ops/s
[info] # Warmup Iteration   3: 5976443.319 ops/s
[info] Iteration   1: 5960175.942 ops/s
[info]                  ·gc.alloc.rate:                   1787.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1981.337 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 523.313 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 5891955.374 ops/s
[info]                  ·gc.alloc.rate:                   1767.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.505 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 444.577 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5888175.396 ops/s
[info]                  ·gc.alloc.rate:                   1766.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1674.710 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 447.541 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 5951646.063 ops/s
[info]                  ·gc.alloc.rate:                   1784.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.799 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 534.449 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 5917757.654 ops/s
[info]                  ·gc.alloc.rate:                   1774.429 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.381 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 449.643 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala":
[info]   5921942.086 ±(99.9%) 127726.732 ops/s [Average]
[info]   (min, avg, max) = (5888175.396, 5921942.086, 5960175.942), stdev = 33170.227
[info]   CI (99.9%): [5794215.354, 6049668.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1775.916 ±(99.9%) 37.189 MB/sec [Average]
[info]   (min, avg, max) = (1766.239, 1775.916, 1787.059), stdev = 9.658
[info]   CI (99.9%): [1738.727, 1813.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (472.000, 472.000, 472.000), stdev = 0.001
[info]   CI (99.9%): [472.000, 472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.096, 0.125), stdev = 0.019
[info]   CI (99.9%): [0.024, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.025 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (0.022, 0.025, 0.033), stdev = 0.005
[info]   CI (99.9%): [0.006, 0.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1806.347 ±(99.9%) 687.496 MB/sec [Average]
[info]   (min, avg, max) = (1664.505, 1806.347, 2020.799), stdev = 178.541
[info]   CI (99.9%): [1118.850, 2493.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   479.905 ±(99.9%) 172.964 B/op [Average]
[info]   (min, avg, max) = (444.577, 479.905, 534.449), stdev = 44.918
[info]   CI (99.9%): [306.940, 652.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson
[info] # Run progress: 77.05% complete, ETA 00:14:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 122503.323 ops/s
[info] # Warmup Iteration   2: 357464.806 ops/s
[info] # Warmup Iteration   3: 355708.760 ops/s
[info] Iteration   1: 362800.971 ops/s
[info]                  ·gc.alloc.rate:                   1948.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              8456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1658.283 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7195.744 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 358788.704 ops/s
[info]                  ·gc.alloc.rate:                   1927.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              8456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2007.261 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8804.515 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 361551.007 ops/s
[info]                  ·gc.alloc.rate:                   1942.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              8456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.199 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8795.139 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 356446.692 ops/s
[info]                  ·gc.alloc.rate:                   1914.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              8456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.088 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8960.642 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 362273.235 ops/s
[info]                  ·gc.alloc.rate:                   1946.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              8456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7363.734 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson":
[info]   360372.122 ±(99.9%) 10335.863 ops/s [Average]
[info]   (min, avg, max) = (356446.692, 360372.122, 362800.971), stdev = 2684.191
[info]   CI (99.9%): [350036.259, 370707.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1935.964 ±(99.9%) 55.164 MB/sec [Average]
[info]   (min, avg, max) = (1914.815, 1935.964, 1948.714), stdev = 14.326
[info]   CI (99.9%): [1880.799, 1991.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8456.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8456.001, 8456.001, 8456.001), stdev = 0.001
[info]   CI (99.9%): [8456.001, 8456.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.117, 0.167), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.510 ±(99.9%) 0.649 B/op [Average]
[info]   (min, avg, max) = (0.361, 0.510, 0.731), stdev = 0.169
[info]   CI (99.9%): [≈ 0, 1.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1881.925 ±(99.9%) 724.291 MB/sec [Average]
[info]   (min, avg, max) = (1658.283, 1881.925, 2029.088), stdev = 188.096
[info]   CI (99.9%): [1157.634, 2606.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8223.955 ±(99.9%) 3336.537 B/op [Average]
[info]   (min, avg, max) = (7195.744, 8223.955, 8960.642), stdev = 866.488
[info]   CI (99.9%): [4887.417, 11560.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 8.000), stdev = 0.894
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala
[info] # Run progress: 77.40% complete, ETA 00:14:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2752917.640 ops/s
[info] # Warmup Iteration   2: 3227388.459 ops/s
[info] # Warmup Iteration   3: 3263325.422 ops/s
[info] Iteration   1: 3308627.405 ops/s
[info]                  ·gc.alloc.rate:                   538.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.386 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 156.218 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 3345205.838 ops/s
[info]                  ·gc.alloc.rate:                   543.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.702 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 308.096 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3220209.898 ops/s
[info]                  ·gc.alloc.rate:                   523.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.643 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 319.022 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3349148.373 ops/s
[info]                  ·gc.alloc.rate:                   544.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.410 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 153.389 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 3291524.862 ops/s
[info]                  ·gc.alloc.rate:                   535.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.777 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 312.148 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala":
[info]   3302943.275 ±(99.9%) 201272.466 ops/s [Average]
[info]   (min, avg, max) = (3220209.898, 3302943.275, 3349148.373), stdev = 52269.820
[info]   CI (99.9%): [3101670.809, 3504215.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   537.195 ±(99.9%) 32.763 MB/sec [Average]
[info]   (min, avg, max) = (523.715, 537.195, 544.764), stdev = 8.508
[info]   CI (99.9%): [504.432, 569.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   256.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (256.000, 256.000, 256.000), stdev = 0.001
[info]   CI (99.9%): [256.000, 256.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.773 ±(99.9%) 6.301 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.773, 3.699), stdev = 1.636
[info]   CI (99.9%): [≈ 0, 7.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.368 ±(99.9%) 2.997 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.368, 1.760), stdev = 0.778
[info]   CI (99.9%): [≈ 0, 3.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   522.984 ±(99.9%) 687.523 MB/sec [Average]
[info]   (min, avg, max) = (326.410, 522.984, 654.702), stdev = 178.548
[info]   CI (99.9%): [≈ 0, 1210.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   249.775 ±(99.9%) 334.197 B/op [Average]
[info]   (min, avg, max) = (153.389, 249.775, 319.022), stdev = 86.790
[info]   CI (99.9%): [≈ 0, 583.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson
[info] # Run progress: 77.74% complete, ETA 00:13:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83434.590 ops/s
[info] # Warmup Iteration   2: 333126.866 ops/s
[info] # Warmup Iteration   3: 342402.956 ops/s
[info] Iteration   1: 331173.693 ops/s
[info]                  ·gc.alloc.rate:                   1287.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1312.782 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6238.283 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 342785.277 ops/s
[info]                  ·gc.alloc.rate:                   1333.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1323.379 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6074.535 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 340837.597 ops/s
[info]                  ·gc.alloc.rate:                   1325.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331.522 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6149.005 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 341693.140 ops/s
[info]                  ·gc.alloc.rate:                   1328.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.225 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6168.997 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 339987.553 ops/s
[info]                  ·gc.alloc.rate:                   1322.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.482 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6229.042 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson":
[info]   339295.452 ±(99.9%) 17932.177 ops/s [Average]
[info]   (min, avg, max) = (331173.693, 339295.452, 342785.277), stdev = 4656.929
[info]   CI (99.9%): [321363.275, 357227.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1319.495 ±(99.9%) 69.778 MB/sec [Average]
[info]   (min, avg, max) = (1287.891, 1319.495, 1333.284), stdev = 18.121
[info]   CI (99.9%): [1249.717, 1389.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   6120.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6120.001, 6120.001, 6120.001), stdev = 0.001
[info]   CI (99.9%): [6120.001, 6120.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.347 ±(99.9%) 0.489 B/op [Average]
[info]   (min, avg, max) = (0.198, 0.347, 0.482), stdev = 0.127
[info]   CI (99.9%): [≈ 0, 0.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1330.588 ±(99.9%) 50.317 MB/sec [Average]
[info]   (min, avg, max) = (1312.782, 1330.588, 1346.032), stdev = 13.067
[info]   CI (99.9%): [1280.271, 1380.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6171.972 ±(99.9%) 256.035 B/op [Average]
[info]   (min, avg, max) = (6074.535, 6171.972, 6238.283), stdev = 66.492
[info]   CI (99.9%): [5915.937, 6428.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce
[info] # Run progress: 78.08% complete, ETA 00:13:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 419967.755 ops/s
[info] # Warmup Iteration   2: 611014.582 ops/s
[info] # Warmup Iteration   3: 623398.898 ops/s
[info] Iteration   1: 622898.512 ops/s
[info]                  ·gc.alloc.rate:                   2244.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              5672.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2315.455 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5851.549 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 621279.943 ops/s
[info]                  ·gc.alloc.rate:                   2238.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              5672.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2340.485 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5930.050 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 624146.771 ops/s
[info]                  ·gc.alloc.rate:                   2248.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              5672.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.130 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5094.855 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 621929.211 ops/s
[info]                  ·gc.alloc.rate:                   2241.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              5672.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2367.923 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5992.807 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 617204.132 ops/s
[info]                  ·gc.alloc.rate:                   2225.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              5672.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2376.398 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6057.549 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce":
[info]   621491.714 ±(99.9%) 10123.609 ops/s [Average]
[info]   (min, avg, max) = (617204.132, 621491.714, 624146.771), stdev = 2629.069
[info]   CI (99.9%): [611368.105, 631615.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2239.665 ±(99.9%) 34.612 MB/sec [Average]
[info]   (min, avg, max) = (2225.146, 2239.665, 2248.970), stdev = 8.989
[info]   CI (99.9%): [2205.053, 2274.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5672.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5672.001, 5672.001, 5672.001), stdev = 0.001
[info]   CI (99.9%): [5672.001, 5672.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.201 ±(99.9%) 0.336 B/op [Average]
[info]   (min, avg, max) = (0.105, 0.201, 0.316), stdev = 0.087
[info]   CI (99.9%): [≈ 0, 0.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2284.078 ±(99.9%) 575.629 MB/sec [Average]
[info]   (min, avg, max) = (2020.130, 2284.078, 2376.398), stdev = 149.489
[info]   CI (99.9%): [1708.449, 2859.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5785.362 ±(99.9%) 1515.063 B/op [Average]
[info]   (min, avg, max) = (5094.855, 5785.362, 6057.549), stdev = 393.457
[info]   CI (99.9%): [4270.299, 7300.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala
[info] # Run progress: 78.42% complete, ETA 00:13:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 253847.795 ops/s
[info] # Warmup Iteration   2: 648170.366 ops/s
[info] # Warmup Iteration   3: 653604.997 ops/s
[info] Iteration   1: 652819.468 ops/s
[info]                  ·gc.alloc.rate:                   759.933 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      972.598 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2344.679 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 652135.784 ops/s
[info]                  ·gc.alloc.rate:                   758.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.984 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1573.903 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 654077.046 ops/s
[info]                  ·gc.alloc.rate:                   761.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.817 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1575.673 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 647291.465 ops/s
[info]                  ·gc.alloc.rate:                   753.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      987.485 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2401.187 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 652677.539 ops/s
[info]                  ·gc.alloc.rate:                   759.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.695 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1595.128 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala":
[info]   651800.261 ±(99.9%) 10084.344 ops/s [Average]
[info]   (min, avg, max) = (647291.465, 651800.261, 654077.046), stdev = 2618.872
[info]   CI (99.9%): [641715.916, 661884.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   758.708 ±(99.9%) 11.887 MB/sec [Average]
[info]   (min, avg, max) = (753.408, 758.708, 761.341), stdev = 3.087
[info]   CI (99.9%): [746.821, 770.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1832.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1832.001, 1832.001, 1832.001), stdev = 0.001
[info]   CI (99.9%): [1832.001, 1832.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.207 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.161 ±(99.9%) 0.502 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.161, 0.301), stdev = 0.130
[info]   CI (99.9%): [≈ 0, 0.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   785.716 ±(99.9%) 683.518 MB/sec [Average]
[info]   (min, avg, max) = (651.984, 785.716, 987.485), stdev = 177.507
[info]   CI (99.9%): [102.198, 1469.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1898.114 ±(99.9%) 1671.136 B/op [Average]
[info]   (min, avg, max) = (1573.903, 1898.114, 2401.187), stdev = 433.989
[info]   CI (99.9%): [226.978, 3569.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala
[info] # Run progress: 78.77% complete, ETA 00:13:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3304237.745 ops/s
[info] # Warmup Iteration   2: 3783802.397 ops/s
[info] # Warmup Iteration   3: 3781376.342 ops/s
[info] Iteration   1: 3812772.899 ops/s
[info]                  ·gc.alloc.rate:                   1511.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1645.323 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 679.327 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 3746638.005 ops/s
[info]                  ·gc.alloc.rate:                   1485.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1324.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 556.577 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 3782781.104 ops/s
[info]                  ·gc.alloc.rate:                   1499.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1666.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 693.306 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3823647.897 ops/s
[info]                  ·gc.alloc.rate:                   1515.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.744 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 551.948 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 3823939.731 ops/s
[info]                  ·gc.alloc.rate:                   1515.877 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1683.421 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 692.969 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala":
[info]   3797955.927 ±(99.9%) 127980.807 ops/s [Average]
[info]   (min, avg, max) = (3746638.005, 3797955.927, 3823939.731), stdev = 33236.209
[info]   CI (99.9%): [3669975.120, 3925936.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1505.544 ±(99.9%) 50.658 MB/sec [Average]
[info]   (min, avg, max) = (1485.273, 1505.544, 1515.877), stdev = 13.156
[info]   CI (99.9%): [1454.886, 1556.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   624.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (624.000, 624.000, 624.000), stdev = 0.001
[info]   CI (99.9%): [624.000, 624.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.096, 0.125), stdev = 0.019
[info]   CI (99.9%): [0.024, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.040 ±(99.9%) 0.029 B/op [Average]
[info]   (min, avg, max) = (0.034, 0.040, 0.051), stdev = 0.008
[info]   CI (99.9%): [0.011, 0.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1532.061 ±(99.9%) 702.803 MB/sec [Average]
[info]   (min, avg, max) = (1324.791, 1532.061, 1683.421), stdev = 182.516
[info]   CI (99.9%): [829.258, 2234.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   634.825 ±(99.9%) 284.091 B/op [Average]
[info]   (min, avg, max) = (551.948, 634.825, 693.306), stdev = 73.777
[info]   CI (99.9%): [350.735, 918.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson
[info] # Run progress: 79.11% complete, ETA 00:13:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52514.883 ops/s
[info] # Warmup Iteration   2: 228969.044 ops/s
[info] # Warmup Iteration   3: 231632.172 ops/s
[info] Iteration   1: 232782.610 ops/s
[info]                  ·gc.alloc.rate:                   1619.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1647.967 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11145.098 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 230207.595 ops/s
[info]                  ·gc.alloc.rate:                   1601.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9094.766 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 231809.794 ops/s
[info]                  ·gc.alloc.rate:                   1612.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.178 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11361.186 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 233456.746 ops/s
[info]                  ·gc.alloc.rate:                   1624.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.592 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11344.113 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 233574.019 ops/s
[info]                  ·gc.alloc.rate:                   1625.486 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1689.501 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11383.319 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson":
[info]   232366.153 ±(99.9%) 5373.918 ops/s [Average]
[info]   (min, avg, max) = (230207.595, 232366.153, 233574.019), stdev = 1395.589
[info]   CI (99.9%): [226992.234, 237740.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1616.804 ±(99.9%) 37.603 MB/sec [Average]
[info]   (min, avg, max) = (1601.772, 1616.804, 1625.486), stdev = 9.765
[info]   CI (99.9%): [1579.201, 1654.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10952.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10952.002, 10952.002, 10952.002), stdev = 0.001
[info]   CI (99.9%): [10952.002, 10952.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.451 ±(99.9%) 0.708 B/op [Average]
[info]   (min, avg, max) = (0.281, 0.451, 0.701), stdev = 0.184
[info]   CI (99.9%): [≈ 0, 1.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1604.676 ±(99.9%) 594.050 MB/sec [Average]
[info]   (min, avg, max) = (1330.144, 1604.676, 1689.501), stdev = 154.273
[info]   CI (99.9%): [1010.626, 2198.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10865.696 ±(99.9%) 3829.690 B/op [Average]
[info]   (min, avg, max) = (9094.766, 10865.696, 11383.319), stdev = 994.558
[info]   CI (99.9%): [7036.007, 14695.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce
[info] # Run progress: 79.45% complete, ETA 00:12:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 585426.868 ops/s
[info] # Warmup Iteration   2: 867340.788 ops/s
[info] # Warmup Iteration   3: 874249.278 ops/s
[info] Iteration   1: 882228.702 ops/s
[info]                  ·gc.alloc.rate:                   2026.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2304.533 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4112.251 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 886876.768 ops/s
[info]                  ·gc.alloc.rate:                   2037.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1998.454 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3546.488 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 886486.085 ops/s
[info]                  ·gc.alloc.rate:                   2036.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.504 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3575.270 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 880661.156 ops/s
[info]                  ·gc.alloc.rate:                   2023.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.654 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3617.959 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 877834.240 ops/s
[info]                  ·gc.alloc.rate:                   2017.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.814 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3643.895 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce":
[info]   882817.390 ±(99.9%) 14884.315 ops/s [Average]
[info]   (min, avg, max) = (877834.240, 882817.390, 886876.768), stdev = 3865.409
[info]   CI (99.9%): [867933.075, 897701.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   2028.261 ±(99.9%) 33.417 MB/sec [Average]
[info]   (min, avg, max) = (2017.252, 2028.261, 2037.624), stdev = 8.678
[info]   CI (99.9%): [1994.844, 2061.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3616.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3616.000, 3616.000, 3616.000), stdev = 0.001
[info]   CI (99.9%): [3616.000, 3616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.141 ±(99.9%) 0.155 B/op [Average]
[info]   (min, avg, max) = (0.111, 0.141, 0.186), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2074.792 ±(99.9%) 497.019 MB/sec [Average]
[info]   (min, avg, max) = (1998.454, 2074.792, 2304.533), stdev = 129.074
[info]   CI (99.9%): [1577.772, 2571.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3699.173 ±(99.9%) 900.898 B/op [Average]
[info]   (min, avg, max) = (3546.488, 3699.173, 4112.251), stdev = 233.960
[info]   CI (99.9%): [2798.275, 4600.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala
[info] # Run progress: 79.79% complete, ETA 00:12:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_3b1ae14a/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 518976.989 ops/s
[info] # Warmup Iteration   2: 1570812.433 ops/s
[info] # Warmup Iteration   3: 1587338.796 ops/s
[info] Iteration   1: 1576153.009 ops/s
[info]                  ·gc.alloc.rate:                   1033.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      976.654 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 975.503 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1572884.111 ops/s
[info]                  ·gc.alloc.rate:                   1031.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.421 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 984.167 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1571504.589 ops/s
[info]                  ·gc.alloc.rate:                   1030.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320.076 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1322.276 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1583184.759 ops/s
[info]                  ·gc.alloc.rate:                   1038.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995.739 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 989.692 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1571808.055 ops/s
[info]                  ·gc.alloc.rate:                   1030.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.161 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1002.549 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala":
[info]   1575106.904 ±(99.9%) 18780.128 ops/s [Average]
[info]   (min, avg, max) = (1571504.589, 1575106.904, 1583184.759), stdev = 4877.140
[info]   CI (99.9%): [1556326.776, 1593887.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1032.719 ±(99.9%) 12.809 MB/sec [Average]
[info]   (min, avg, max) = (1030.283, 1032.719, 1038.306), stdev = 3.326
[info]   CI (99.9%): [1019.910, 1045.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1032.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1032.000, 1032.000, 1032.000), stdev = 0.001
[info]   CI (99.9%): [1032.000, 1032.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.100, 0.146), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.100 ±(99.9%) 0.105 B/op [Average]
[info]   (min, avg, max) = (0.083, 0.100, 0.146), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1055.410 ±(99.9%) 570.937 MB/sec [Average]
[info]   (min, avg, max) = (976.654, 1055.410, 1320.076), stdev = 148.270
[info]   CI (99.9%): [484.474, 1626.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1054.838 ±(99.9%) 576.920 B/op [Average]
[info]   (min, avg, max) = (975.503, 1054.838, 1322.276), stdev = 149.824
[info]   CI (99.9%): [477.917, 1631.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala
[info] # Run progress: 80.14% complete, ETA 00:12:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5642699.619 ops/s
[info] # Warmup Iteration   2: 6727533.463 ops/s
[info] # Warmup Iteration   3: 6853518.985 ops/s
[info] Iteration   1: 6938863.908 ops/s
[info]                  ·gc.alloc.rate:                   775.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.756 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 148.071 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6924121.040 ops/s
[info]                  ·gc.alloc.rate:                   774.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.844 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 148.387 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6916241.233 ops/s
[info]                  ·gc.alloc.rate:                   773.286 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 222.920 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6699391.250 ops/s
[info]                  ·gc.alloc.rate:                   749.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.721 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 153.763 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6683634.157 ops/s
[info]                  ·gc.alloc.rate:                   747.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.705 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 154.597 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala":
[info]   6832450.317 ±(99.9%) 496864.598 ops/s [Average]
[info]   (min, avg, max) = (6683634.157, 6832450.317, 6938863.908), stdev = 129034.158
[info]   CI (99.9%): [6335585.719, 7329314.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   764.105 ±(99.9%) 54.974 MB/sec [Average]
[info]   (min, avg, max) = (747.623, 764.105, 775.880), stdev = 14.276
[info]   CI (99.9%): [709.131, 819.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.125), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.018 ±(99.9%) 0.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.028), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   719.292 ±(99.9%) 560.014 MB/sec [Average]
[info]   (min, avg, max) = (652.756, 719.292, 979.437), stdev = 145.434
[info]   CI (99.9%): [159.278, 1279.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   165.548 ±(99.9%) 124.035 B/op [Average]
[info]   (min, avg, max) = (148.071, 165.548, 222.920), stdev = 32.211
[info]   CI (99.9%): [41.513, 289.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson
[info] # Run progress: 80.48% complete, ETA 00:12:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 154393.113 ops/s
[info] # Warmup Iteration   2: 511647.718 ops/s
[info] # Warmup Iteration   3: 523146.937 ops/s
[info] Iteration   1: 520881.936 ops/s
[info]                  ·gc.alloc.rate:                   1796.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              5432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1983.384 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5995.877 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 521874.376 ops/s
[info]                  ·gc.alloc.rate:                   1800.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              5432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.377 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1668.148 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5031.389 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 522700.563 ops/s
[info]                  ·gc.alloc.rate:                   1803.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              5432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.780 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6070.437 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 522583.438 ops/s
[info]                  ·gc.alloc.rate:                   1803.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              5432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.964 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5081.760 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 517586.331 ops/s
[info]                  ·gc.alloc.rate:                   1786.387 MB/sec
[info]                  ·gc.alloc.rate.norm:              5432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1693.363 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5149.134 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson":
[info]   521125.329 ±(99.9%) 8112.042 ops/s [Average]
[info]   (min, avg, max) = (517586.331, 521125.329, 522700.563), stdev = 2106.672
[info]   CI (99.9%): [513013.287, 529237.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1798.245 ±(99.9%) 27.595 MB/sec [Average]
[info]   (min, avg, max) = (1786.387, 1798.245, 1803.777), stdev = 7.166
[info]   CI (99.9%): [1770.650, 1825.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5432.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5432.001, 5432.001, 5432.001), stdev = 0.001
[info]   CI (99.9%): [5432.001, 5432.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.024
[info]   CI (99.9%): [0.004, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.289 ±(99.9%) 0.276 B/op [Average]
[info]   (min, avg, max) = (0.188, 0.289, 0.377), stdev = 0.072
[info]   CI (99.9%): [0.013, 0.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1809.528 ±(99.9%) 670.472 MB/sec [Average]
[info]   (min, avg, max) = (1668.148, 1809.528, 2015.780), stdev = 174.119
[info]   CI (99.9%): [1139.056, 2479.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5465.719 ±(99.9%) 2003.671 B/op [Average]
[info]   (min, avg, max) = (5031.389, 5465.719, 6070.437), stdev = 520.347
[info]   CI (99.9%): [3462.048, 7469.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce
[info] # Run progress: 80.82% complete, ETA 00:11:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 402063.180 ops/s
[info] # Warmup Iteration   2: 633774.079 ops/s
[info] # Warmup Iteration   3: 645988.810 ops/s
[info] Iteration   1: 647781.957 ops/s
[info]                  ·gc.alloc.rate:                   2245.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2315.490 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5626.681 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 645621.942 ops/s
[info]                  ·gc.alloc.rate:                   2238.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2005.119 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4888.103 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 644125.788 ops/s
[info]                  ·gc.alloc.rate:                   2233.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2356.896 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5757.158 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 650917.207 ops/s
[info]                  ·gc.alloc.rate:                   2257.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2368.850 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5726.112 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 651096.646 ops/s
[info]                  ·gc.alloc.rate:                   2256.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.648 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4920.972 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce":
[info]   647908.708 ±(99.9%) 11988.104 ops/s [Average]
[info]   (min, avg, max) = (644125.788, 647908.708, 651096.646), stdev = 3113.273
[info]   CI (99.9%): [635920.604, 659896.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate":
[info]   2246.202 ±(99.9%) 41.318 MB/sec [Average]
[info]   (min, avg, max) = (2233.606, 2246.202, 2257.107), stdev = 10.730
[info]   CI (99.9%): [2204.884, 2287.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5456.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5456.001, 5456.001, 5456.001), stdev = 0.001
[info]   CI (99.9%): [5456.001, 5456.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.233 ±(99.9%) 0.299 B/op [Average]
[info]   (min, avg, max) = (0.151, 0.233, 0.355), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2216.401 ±(99.9%) 694.478 MB/sec [Average]
[info]   (min, avg, max) = (2005.119, 2216.401, 2368.850), stdev = 180.354
[info]   CI (99.9%): [1521.923, 2910.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5383.805 ±(99.9%) 1695.476 B/op [Average]
[info]   (min, avg, max) = (4888.103, 5383.805, 5757.158), stdev = 440.310
[info]   CI (99.9%): [3688.329, 7079.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala
[info] # Run progress: 81.16% complete, ETA 00:11:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4762571.684 ops/s
[info] # Warmup Iteration   2: 5437902.008 ops/s
[info] # Warmup Iteration   3: 5503222.444 ops/s
[info] Iteration   1: 5540747.259 ops/s
[info]                  ·gc.alloc.rate:                   1379.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.637 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 373.516 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 5550110.358 ops/s
[info]                  ·gc.alloc.rate:                   1382.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320.823 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 374.586 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 5556109.960 ops/s
[info]                  ·gc.alloc.rate:                   1383.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.338 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 376.358 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 5547507.717 ops/s
[info]                  ·gc.alloc.rate:                   1381.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1670.595 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 473.983 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 5525713.344 ops/s
[info]                  ·gc.alloc.rate:                   1376.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.457 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 382.693 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala":
[info]   5544037.727 ±(99.9%) 44792.883 ops/s [Average]
[info]   (min, avg, max) = (5525713.344, 5544037.727, 5556109.960), stdev = 11632.569
[info]   CI (99.9%): [5499244.844, 5588830.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1380.647 ±(99.9%) 11.090 MB/sec [Average]
[info]   (min, avg, max) = (1376.130, 1380.647, 1383.545), stdev = 2.880
[info]   CI (99.9%): [1369.557, 1391.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.022 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (0.018, 0.022, 0.030), stdev = 0.005
[info]   CI (99.9%): [0.004, 0.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1395.570 ±(99.9%) 593.461 MB/sec [Average]
[info]   (min, avg, max) = (1314.637, 1395.570, 1670.595), stdev = 154.120
[info]   CI (99.9%): [802.109, 1989.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   396.227 ±(99.9%) 167.935 B/op [Average]
[info]   (min, avg, max) = (373.516, 396.227, 473.983), stdev = 43.612
[info]   CI (99.9%): [228.292, 564.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson
[info] # Run progress: 81.51% complete, ETA 00:11:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 122397.861 ops/s
[info] # Warmup Iteration   2: 380565.216 ops/s
[info] # Warmup Iteration   3: 384738.244 ops/s
[info] Iteration   1: 383284.181 ops/s
[info]                  ·gc.alloc.rate:                   2060.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              8464.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2325.171 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9550.612 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 381504.793 ops/s
[info]                  ·gc.alloc.rate:                   2051.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              8464.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011.909 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8301.027 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 380768.439 ops/s
[info]                  ·gc.alloc.rate:                   2047.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              8464.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.036 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8366.591 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 382211.398 ops/s
[info]                  ·gc.alloc.rate:                   2055.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              8464.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.383 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8365.269 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 379229.808 ops/s
[info]                  ·gc.alloc.rate:                   2039.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              8464.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.768 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8451.598 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson":
[info]   381399.724 ±(99.9%) 5880.303 ops/s [Average]
[info]   (min, avg, max) = (379229.808, 381399.724, 383284.181), stdev = 1527.096
[info]   CI (99.9%): [375519.421, 387280.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2050.950 ±(99.9%) 30.428 MB/sec [Average]
[info]   (min, avg, max) = (2039.757, 2050.950, 2060.627), stdev = 7.902
[info]   CI (99.9%): [2020.522, 2081.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8464.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8464.001, 8464.001, 8464.001), stdev = 0.001
[info]   CI (99.9%): [8464.001, 8464.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.167), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.429 ±(99.9%) 0.700 B/op [Average]
[info]   (min, avg, max) = (0.257, 0.429, 0.687), stdev = 0.182
[info]   CI (99.9%): [≈ 0, 1.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2085.853 ±(99.9%) 516.397 MB/sec [Average]
[info]   (min, avg, max) = (2011.909, 2085.853, 2325.171), stdev = 134.107
[info]   CI (99.9%): [1569.457, 2602.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8607.020 ±(99.9%) 2041.571 B/op [Average]
[info]   (min, avg, max) = (8301.027, 8607.020, 9550.612), stdev = 530.190
[info]   CI (99.9%): [6565.449, 10648.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 8.000), stdev = 1.095
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce
[info] # Run progress: 81.85% complete, ETA 00:11:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 245726.639 ops/s
[info] # Warmup Iteration   2: 466123.608 ops/s
[info] # Warmup Iteration   3: 475822.305 ops/s
[info] Iteration   1: 476061.450 ops/s
[info]                  ·gc.alloc.rate:                   1246.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      975.829 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3226.205 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 475007.440 ops/s
[info]                  ·gc.alloc.rate:                   1243.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1307.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4330.451 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 477211.494 ops/s
[info]                  ·gc.alloc.rate:                   1249.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1315.469 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4339.005 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 474688.575 ops/s
[info]                  ·gc.alloc.rate:                   1242.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.481 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4395.212 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 463765.529 ops/s
[info]                  ·gc.alloc.rate:                   1214.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      999.807 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3392.188 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce":
[info]   473346.898 ±(99.9%) 20973.113 ops/s [Average]
[info]   (min, avg, max) = (463765.529, 473346.898, 477211.494), stdev = 5446.651
[info]   CI (99.9%): [452373.785, 494320.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1239.135 ±(99.9%) 54.299 MB/sec [Average]
[info]   (min, avg, max) = (1214.322, 1239.135, 1249.072), stdev = 14.101
[info]   CI (99.9%): [1184.836, 1293.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4120.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4120.001, 4120.001, 4120.001), stdev = 0.001
[info]   CI (99.9%): [4120.001, 4120.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.146), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.249 ±(99.9%) 0.584 B/op [Average]
[info]   (min, avg, max) = (0.069, 0.249, 0.483), stdev = 0.152
[info]   CI (99.9%): [≈ 0, 0.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1184.747 ±(99.9%) 693.450 MB/sec [Average]
[info]   (min, avg, max) = (975.829, 1184.747, 1325.481), stdev = 180.087
[info]   CI (99.9%): [491.296, 1878.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3936.612 ±(99.9%) 2219.069 B/op [Average]
[info]   (min, avg, max) = (3226.205, 3936.612, 4395.212), stdev = 576.285
[info]   CI (99.9%): [1717.543, 6155.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala
[info] # Run progress: 82.19% complete, ETA 00:11:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2834632.544 ops/s
[info] # Warmup Iteration   2: 3415677.223 ops/s
[info] # Warmup Iteration   3: 3426643.131 ops/s
[info] Iteration   1: 3414867.944 ops/s
[info]                  ·gc.alloc.rate:                   624.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              288.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 302.708 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3433753.267 ops/s
[info]                  ·gc.alloc.rate:                   628.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              288.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.838 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 299.219 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3435668.486 ops/s
[info]                  ·gc.alloc.rate:                   628.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              288.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.855 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 299.046 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3414486.474 ops/s
[info]                  ·gc.alloc.rate:                   624.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              288.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.802 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 300.914 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 3429364.642 ops/s
[info]                  ·gc.alloc.rate:                   627.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              288.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 299.922 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala":
[info]   3425628.162 ±(99.9%) 39490.518 ops/s [Average]
[info]   (min, avg, max) = (3414486.474, 3425628.162, 3435668.486), stdev = 10255.562
[info]   CI (99.9%): [3386137.644, 3465118.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   626.890 ±(99.9%) 7.382 MB/sec [Average]
[info]   (min, avg, max) = (624.786, 626.890, 628.741), stdev = 1.917
[info]   CI (99.9%): [619.508, 634.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   288.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (288.000, 288.000, 288.000), stdev = 0.001
[info]   CI (99.9%): [288.000, 288.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.813 ±(99.9%) 6.374 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.813, 3.774), stdev = 1.655
[info]   CI (99.9%): [≈ 0, 7.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.375 ±(99.9%) 2.938 B/op [Average]
[info]   (min, avg, max) = (0.029, 0.375, 1.740), stdev = 0.763
[info]   CI (99.9%): [≈ 0, 3.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   653.790 ±(99.9%) 6.604 MB/sec [Average]
[info]   (min, avg, max) = (652.802, 653.790, 656.789), stdev = 1.715
[info]   CI (99.9%): [647.186, 660.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   300.362 ±(99.9%) 5.790 B/op [Average]
[info]   (min, avg, max) = (299.046, 300.362, 302.708), stdev = 1.504
[info]   CI (99.9%): [294.572, 306.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson
[info] # Run progress: 82.53% complete, ETA 00:10:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88463.580 ops/s
[info] # Warmup Iteration   2: 327784.400 ops/s
[info] # Warmup Iteration   3: 333124.863 ops/s
[info] Iteration   1: 332332.389 ops/s
[info]                  ·gc.alloc.rate:                   1199.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              5680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1310.680 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6205.506 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 328891.082 ops/s
[info]                  ·gc.alloc.rate:                   1186.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              5680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.564 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4735.492 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 333124.677 ops/s
[info]                  ·gc.alloc.rate:                   1202.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              5680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1327.917 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6274.121 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 332078.776 ops/s
[info]                  ·gc.alloc.rate:                   1198.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              5680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1335.921 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6331.672 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 333766.176 ops/s
[info]                  ·gc.alloc.rate:                   1204.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              5680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1006.054 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4744.752 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson":
[info]   332038.620 ±(99.9%) 7244.656 ops/s [Average]
[info]   (min, avg, max) = (328891.082, 332038.620, 333766.176), stdev = 1881.414
[info]   CI (99.9%): [324793.964, 339283.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1198.316 ±(99.9%) 26.029 MB/sec [Average]
[info]   (min, avg, max) = (1186.936, 1198.316, 1204.359), stdev = 6.760
[info]   CI (99.9%): [1172.286, 1224.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5680.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5680.001, 5680.001, 5680.001), stdev = 0.001
[info]   CI (99.9%): [5680.001, 5680.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.104), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.276 ±(99.9%) 0.679 B/op [Average]
[info]   (min, avg, max) = (0.098, 0.276, 0.491), stdev = 0.176
[info]   CI (99.9%): [≈ 0, 0.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1194.027 ±(99.9%) 690.993 MB/sec [Average]
[info]   (min, avg, max) = (989.564, 1194.027, 1335.921), stdev = 179.449
[info]   CI (99.9%): [503.034, 1885.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5658.309 ±(99.9%) 3232.159 B/op [Average]
[info]   (min, avg, max) = (4735.492, 5658.309, 6331.672), stdev = 839.381
[info]   CI (99.9%): [2426.150, 8890.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 82.88% complete, ETA 00:10:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1064359.813 ops/s
[info] # Warmup Iteration   2: 2069531.221 ops/s
[info] # Warmup Iteration   3: 2102118.509 ops/s
[info] Iteration   1: 2105877.385 ops/s
[info]                  ·gc.alloc.rate:                   3051.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              2280.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3005.346 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2245.808 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 2139356.161 ops/s
[info]                  ·gc.alloc.rate:                   3098.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              2280.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3372.265 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2481.287 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 2127126.854 ops/s
[info]                  ·gc.alloc.rate:                   3080.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              2280.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3051.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2257.941 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 2109728.111 ops/s
[info]                  ·gc.alloc.rate:                   3056.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              2280.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3058.830 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2281.551 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 2119342.384 ops/s
[info]                  ·gc.alloc.rate:                   3069.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              2280.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3063.325 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2275.144 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2120286.179 ±(99.9%) 52034.864 ops/s [Average]
[info]   (min, avg, max) = (2105877.385, 2120286.179, 2139356.161), stdev = 13513.289
[info]   CI (99.9%): [2068251.315, 2172321.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3071.453 ±(99.9%) 73.653 MB/sec [Average]
[info]   (min, avg, max) = (3051.101, 3071.453, 3098.699), stdev = 19.127
[info]   CI (99.9%): [2997.799, 3145.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2280.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2280.000, 2280.000, 2280.000), stdev = 0.001
[info]   CI (99.9%): [2280.000, 2280.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.121 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.121, 0.167), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.090 ±(99.9%) 0.129 B/op [Average]
[info]   (min, avg, max) = (0.046, 0.090, 0.124), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3110.161 ±(99.9%) 571.170 MB/sec [Average]
[info]   (min, avg, max) = (3005.346, 3110.161, 3372.265), stdev = 148.331
[info]   CI (99.9%): [2538.991, 3681.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2308.346 ±(99.9%) 376.206 B/op [Average]
[info]   (min, avg, max) = (2245.808, 2308.346, 2481.287), stdev = 97.699
[info]   CI (99.9%): [1932.141, 2684.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   46.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 83.22% complete, ETA 00:10:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33350.183 ops/s
[info] # Warmup Iteration   2: 300623.414 ops/s
[info] # Warmup Iteration   3: 322000.125 ops/s
[info] Iteration   1: 323016.018 ops/s
[info]                  ·gc.alloc.rate:                   571.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              2784.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      578.716 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2820.559 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 322053.443 ops/s
[info]                  ·gc.alloc.rate:                   569.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              2784.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      648.385 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3169.226 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 323325.223 ops/s
[info]                  ·gc.alloc.rate:                   571.886 MB/sec
[info]                  ·gc.alloc.rate.norm:              2784.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.135 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3174.663 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 321491.847 ops/s
[info]                  ·gc.alloc.rate:                   568.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              2784.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.718 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1599.602 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 313998.996 ops/s
[info]                  ·gc.alloc.rate:                   555.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              2784.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.832 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3292.190 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   320777.105 ±(99.9%) 14862.225 ops/s [Average]
[info]   (min, avg, max) = (313998.996, 320777.105, 323325.223), stdev = 3859.673
[info]   CI (99.9%): [305914.880, 335639.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   567.349 ±(99.9%) 26.108 MB/sec [Average]
[info]   (min, avg, max) = (555.442, 567.349, 571.886), stdev = 6.780
[info]   CI (99.9%): [541.241, 593.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2784.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2784.001, 2784.001, 2784.001), stdev = 0.001
[info]   CI (99.9%): [2784.001, 2784.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.286 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.187), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.326 ±(99.9%) 1.390 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.326, 0.913), stdev = 0.361
[info]   CI (99.9%): [≈ 0, 1.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   572.557 ±(99.9%) 543.404 MB/sec [Average]
[info]   (min, avg, max) = (326.718, 572.557, 656.832), stdev = 141.120
[info]   CI (99.9%): [29.153, 1115.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2811.248 ±(99.9%) 2695.242 B/op [Average]
[info]   (min, avg, max) = (1599.602, 2811.248, 3292.190), stdev = 699.946
[info]   CI (99.9%): [116.006, 5506.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 83.56% complete, ETA 00:10:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 646234.464 ops/s
[info] # Warmup Iteration   2: 703426.131 ops/s
[info] # Warmup Iteration   3: 709882.823 ops/s
[info] Iteration   1: 712396.544 ops/s
[info]                  ·gc.alloc.rate:                   452.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.746 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 565.122 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 694692.664 ops/s
[info]                  ·gc.alloc.rate:                   441.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1504.606 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 694395.378 ops/s
[info]                  ·gc.alloc.rate:                   441.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.321 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 748.877 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 698480.344 ops/s
[info]                  ·gc.alloc.rate:                   443.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 744.458 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 694157.719 ops/s
[info]                  ·gc.alloc.rate:                   440.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.364 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1495.167 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   698824.529 ±(99.9%) 29999.633 ops/s [Average]
[info]   (min, avg, max) = (694157.719, 698824.529, 712396.544), stdev = 7790.810
[info]   CI (99.9%): [668824.896, 728824.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   443.946 ±(99.9%) 19.044 MB/sec [Average]
[info]   (min, avg, max) = (440.997, 443.946, 452.551), stdev = 4.946
[info]   CI (99.9%): [424.902, 462.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1000.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1000.001, 1000.001, 1000.001), stdev = 0.001
[info]   CI (99.9%): [1000.001, 1000.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.666 ±(99.9%) 5.514 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.227), stdev = 1.432
[info]   CI (99.9%): [≈ 0, 6.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.510 ±(99.9%) 12.494 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.510, 7.313), stdev = 3.245
[info]   CI (99.9%): [≈ 0, 14.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   447.963 ±(99.9%) 760.395 MB/sec [Average]
[info]   (min, avg, max) = (255.746, 447.963, 664.010), stdev = 197.472
[info]   CI (99.9%): [≈ 0, 1208.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1011.646 ±(99.9%) 1739.860 B/op [Average]
[info]   (min, avg, max) = (565.122, 1011.646, 1504.606), stdev = 451.836
[info]   CI (99.9%): [≈ 0, 2751.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 83.90% complete, ETA 00:10:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3405842.103 ops/s
[info] # Warmup Iteration   2: 3794637.398 ops/s
[info] # Warmup Iteration   3: 3854062.995 ops/s
[info] Iteration   1: 3864420.276 ops/s
[info]                  ·gc.alloc.rate:                   1257.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 537.444 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3850599.550 ops/s
[info]                  ·gc.alloc.rate:                   1253.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1324.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 540.996 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3815366.974 ops/s
[info]                  ·gc.alloc.rate:                   1241.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.059 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 411.357 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3774305.806 ops/s
[info]                  ·gc.alloc.rate:                   1228.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1335.582 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 556.818 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 3834809.143 ops/s
[info]                  ·gc.alloc.rate:                   1247.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.475 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 550.632 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   3827900.350 ±(99.9%) 135131.691 ops/s [Average]
[info]   (min, avg, max) = (3774305.806, 3827900.350, 3864420.276), stdev = 35093.271
[info]   CI (99.9%): [3692768.658, 3963032.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   1245.409 ±(99.9%) 44.289 MB/sec [Average]
[info]   (min, avg, max) = (1228.081, 1245.409, 1257.527), stdev = 11.502
[info]   CI (99.9%): [1201.120, 1289.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   512.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (512.000, 512.000, 512.000), stdev = 0.001
[info]   CI (99.9%): [512.000, 512.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   0.032 ±(99.9%) 0.059 B/op [Average]
[info]   (min, avg, max) = (0.009, 0.032, 0.051), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   1263.635 ±(99.9%) 574.786 MB/sec [Average]
[info]   (min, avg, max) = (997.059, 1263.635, 1341.475), stdev = 149.270
[info]   CI (99.9%): [688.849, 1838.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   519.449 ±(99.9%) 234.548 B/op [Average]
[info]   (min, avg, max) = (411.357, 519.449, 556.818), stdev = 60.911
[info]   CI (99.9%): [284.901, 753.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 84.25% complete, ETA 00:09:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5800306.428 ops/s
[info] # Warmup Iteration   2: 6039299.601 ops/s
[info] # Warmup Iteration   3: 6551888.910 ops/s
[info] Iteration   1: 6439646.736 ops/s
[info]                  ·gc.alloc.rate:                   556.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      663.643 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 162.161 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6404514.549 ops/s
[info]                  ·gc.alloc.rate:                   553.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.342 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81.196 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 6511807.064 ops/s
[info]                  ·gc.alloc.rate:                   562.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.268 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 159.553 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6271481.365 ops/s
[info]                  ·gc.alloc.rate:                   541.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.449 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 165.500 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6193176.406 ops/s
[info]                  ·gc.alloc.rate:                   535.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.738 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83.794 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   6364125.224 ±(99.9%) 498175.357 ops/s [Average]
[info]   (min, avg, max) = (6193176.406, 6364125.224, 6511807.064), stdev = 129374.558
[info]   CI (99.9%): [5865949.867, 6862300.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   549.954 ±(99.9%) 43.195 MB/sec [Average]
[info]   (min, avg, max) = (535.177, 549.954, 562.799), stdev = 11.218
[info]   CI (99.9%): [506.759, 593.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   136.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (136.000, 136.000, 136.000), stdev = 0.001
[info]   CI (99.9%): [136.000, 136.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   0.669 ±(99.9%) 5.359 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.669, 3.157), stdev = 1.392
[info]   CI (99.9%): [≈ 0, 6.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   0.163 ±(99.9%) 1.309 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.163, 0.771), stdev = 0.340
[info]   CI (99.9%): [≈ 0, 1.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   528.688 ±(99.9%) 698.303 MB/sec [Average]
[info]   (min, avg, max) = (329.738, 528.688, 663.643), stdev = 181.347
[info]   CI (99.9%): [≈ 0, 1226.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   130.441 ±(99.9%) 168.770 B/op [Average]
[info]   (min, avg, max) = (81.196, 130.441, 165.500), stdev = 43.829
[info]   CI (99.9%): [≈ 0, 299.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 84.59% complete, ETA 00:09:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18465.420 ops/s
[info] # Warmup Iteration   2: 189924.691 ops/s
[info] # Warmup Iteration   3: 198589.258 ops/s
[info] Iteration   1: 200135.189 ops/s
[info]                  ·gc.alloc.rate:                   1275.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              10032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10298.902 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 200193.255 ops/s
[info]                  ·gc.alloc.rate:                   1275.975 MB/sec
[info]                  ·gc.alloc.rate.norm:              10032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.484 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7779.546 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 195697.954 ops/s
[info]                  ·gc.alloc.rate:                   1247.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              10032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1327.786 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10679.802 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 200531.909 ops/s
[info]                  ·gc.alloc.rate:                   1278.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              10032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1335.750 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10485.080 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 199674.590 ops/s
[info]                  ·gc.alloc.rate:                   1273.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              10032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.893 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10582.475 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   199246.579 ±(99.9%) 7728.634 ops/s [Average]
[info]   (min, avg, max) = (195697.954, 199246.579, 200531.909), stdev = 2007.102
[info]   CI (99.9%): [191517.945, 206975.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1269.922 ±(99.9%) 49.289 MB/sec [Average]
[info]   (min, avg, max) = (1247.247, 1269.922, 1278.030), stdev = 12.800
[info]   CI (99.9%): [1220.633, 1319.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10032.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10032.002, 10032.002, 10032.002), stdev = 0.001
[info]   CI (99.9%): [10032.002, 10032.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.024, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.757 ±(99.9%) 0.575 B/op [Average]
[info]   (min, avg, max) = (0.490, 0.757, 0.837), stdev = 0.149
[info]   CI (99.9%): [0.182, 1.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1261.032 ±(99.9%) 586.523 MB/sec [Average]
[info]   (min, avg, max) = (989.484, 1261.032, 1342.893), stdev = 152.318
[info]   CI (99.9%): [674.509, 1847.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9965.161 ±(99.9%) 4735.822 B/op [Average]
[info]   (min, avg, max) = (7779.546, 9965.161, 10679.802), stdev = 1229.878
[info]   CI (99.9%): [5229.339, 14700.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce
[info] # Run progress: 84.93% complete, ETA 00:09:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 486703.422 ops/s
[info] # Warmup Iteration   2: 721825.599 ops/s
[info] # Warmup Iteration   3: 726558.671 ops/s
[info] Iteration   1: 734749.995 ops/s
[info]                  ·gc.alloc.rate:                   2808.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              6016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2669.311 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5717.596 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 729000.644 ops/s
[info]                  ·gc.alloc.rate:                   2785.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              6016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2692.634 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5814.460 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 727630.347 ops/s
[info]                  ·gc.alloc.rate:                   2780.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              6016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3046.196 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6590.251 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 730809.279 ops/s
[info]                  ·gc.alloc.rate:                   2792.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              6016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2716.184 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5850.577 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 722181.313 ops/s
[info]                  ·gc.alloc.rate:                   2761.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              6016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2721.935 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5930.490 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce":
[info]   728874.315 ±(99.9%) 17711.643 ops/s [Average]
[info]   (min, avg, max) = (722181.313, 728874.315, 734749.995), stdev = 4599.657
[info]   CI (99.9%): [711162.672, 746585.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2785.903 ±(99.9%) 66.804 MB/sec [Average]
[info]   (min, avg, max) = (2761.182, 2785.903, 2808.623), stdev = 17.349
[info]   CI (99.9%): [2719.100, 2852.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   6016.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6016.001, 6016.001, 6016.001), stdev = 0.001
[info]   CI (99.9%): [6016.000, 6016.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.137 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.137, 0.208), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.297 ±(99.9%) 0.455 B/op [Average]
[info]   (min, avg, max) = (0.178, 0.297, 0.450), stdev = 0.118
[info]   CI (99.9%): [≈ 0, 0.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2769.252 ±(99.9%) 601.525 MB/sec [Average]
[info]   (min, avg, max) = (2669.311, 2769.252, 3046.196), stdev = 156.214
[info]   CI (99.9%): [2167.727, 3370.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5980.675 ±(99.9%) 1344.785 B/op [Average]
[info]   (min, avg, max) = (5717.596, 5980.675, 6590.251), stdev = 349.236
[info]   CI (99.9%): [4635.890, 7325.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.count":
[info]   41.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala
[info] # Run progress: 85.27% complete, ETA 00:09:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3258341.664 ops/s
[info] # Warmup Iteration   2: 3786332.000 ops/s
[info] # Warmup Iteration   3: 3786761.575 ops/s
[info] Iteration   1: 3865334.111 ops/s
[info]                  ·gc.alloc.rate:                   2494.980 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2667.676 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1086.325 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 3854895.119 ops/s
[info]                  ·gc.alloc.rate:                   2488.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2354.523 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 961.303 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 3861724.458 ops/s
[info]                  ·gc.alloc.rate:                   2492.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2705.322 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1102.713 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 3814217.893 ops/s
[info]                  ·gc.alloc.rate:                   2462.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2375.418 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 980.213 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 3873148.594 ops/s
[info]                  ·gc.alloc.rate:                   2500.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2378.492 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 966.520 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala":
[info]   3853864.035 ±(99.9%) 89026.581 ops/s [Average]
[info]   (min, avg, max) = (3814217.893, 3853864.035, 3873148.594), stdev = 23119.920
[info]   CI (99.9%): [3764837.454, 3942890.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2487.692 ±(99.9%) 57.384 MB/sec [Average]
[info]   (min, avg, max) = (2462.143, 2487.692, 2500.257), stdev = 14.903
[info]   CI (99.9%): [2430.307, 2545.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1016.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1016.000, 1016.000, 1016.000), stdev = 0.001
[info]   CI (99.9%): [1016.000, 1016.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.046 ±(99.9%) 0.050 B/op [Average]
[info]   (min, avg, max) = (0.025, 0.046, 0.059), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   2496.286 ±(99.9%) 671.526 MB/sec [Average]
[info]   (min, avg, max) = (2354.523, 2496.286, 2705.322), stdev = 174.393
[info]   CI (99.9%): [1824.761, 3167.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1019.415 ±(99.9%) 266.274 B/op [Average]
[info]   (min, avg, max) = (961.303, 1019.415, 1102.713), stdev = 69.150
[info]   CI (99.9%): [753.141, 1285.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.count":
[info]   37.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson
[info] # Run progress: 85.62% complete, ETA 00:08:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36150.281 ops/s
[info] # Warmup Iteration   2: 277297.389 ops/s
[info] # Warmup Iteration   3: 275858.212 ops/s
[info] Iteration   1: 279305.102 ops/s
[info]                  ·gc.alloc.rate:                   1989.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              11216.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1987.695 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11203.064 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 278692.478 ops/s
[info]                  ·gc.alloc.rate:                   1985.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              11216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2006.765 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11334.798 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 277142.072 ops/s
[info]                  ·gc.alloc.rate:                   1974.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              11216.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.439 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9555.792 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 279230.507 ops/s
[info]                  ·gc.alloc.rate:                   1989.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              11216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.542 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11429.194 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 276995.941 ops/s
[info]                  ·gc.alloc.rate:                   1974.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              11216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.854 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11555.505 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson":
[info]   278273.220 ±(99.9%) 4334.280 ops/s [Average]
[info]   (min, avg, max) = (276995.941, 278273.220, 279305.102), stdev = 1125.599
[info]   CI (99.9%): [273938.940, 282607.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1982.857 ±(99.9%) 30.369 MB/sec [Average]
[info]   (min, avg, max) = (1974.099, 1982.857, 1989.991), stdev = 7.887
[info]   CI (99.9%): [1952.488, 2013.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   11216.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11216.001, 11216.002, 11216.002), stdev = 0.001
[info]   CI (99.9%): [11216.001, 11216.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.024
[info]   CI (99.9%): [0.004, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.542 ±(99.9%) 0.517 B/op [Average]
[info]   (min, avg, max) = (0.352, 0.542, 0.705), stdev = 0.134
[info]   CI (99.9%): [0.025, 1.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1947.659 ±(99.9%) 575.181 MB/sec [Average]
[info]   (min, avg, max) = (1682.439, 1947.659, 2033.854), stdev = 149.373
[info]   CI (99.9%): [1372.478, 2522.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   11015.671 ±(99.9%) 3181.520 B/op [Average]
[info]   (min, avg, max) = (9555.792, 11015.671, 11555.505), stdev = 826.231
[info]   CI (99.9%): [7834.150, 14197.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce
[info] # Run progress: 85.96% complete, ETA 00:08:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 512642.744 ops/s
[info] # Warmup Iteration   2: 805231.829 ops/s
[info] # Warmup Iteration   3: 798622.896 ops/s
[info] Iteration   1: 798375.271 ops/s
[info]                  ·gc.alloc.rate:                   1753.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1967.172 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3877.856 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 808318.600 ops/s
[info]                  ·gc.alloc.rate:                   1774.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1654.756 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3222.491 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 811274.317 ops/s
[info]                  ·gc.alloc.rate:                   1781.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1668.731 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3236.581 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 813142.738 ops/s
[info]                  ·gc.alloc.rate:                   1785.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.744 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3900.858 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 816751.143 ops/s
[info]                  ·gc.alloc.rate:                   1793.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1687.602 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3251.452 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce":
[info]   809572.414 ±(99.9%) 26825.332 ops/s [Average]
[info]   (min, avg, max) = (798375.271, 809572.414, 816751.143), stdev = 6966.453
[info]   CI (99.9%): [782747.082, 836397.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1777.866 ±(99.9%) 59.434 MB/sec [Average]
[info]   (min, avg, max) = (1753.171, 1777.866, 1793.769), stdev = 15.435
[info]   CI (99.9%): [1718.432, 1837.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3456.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3456.000, 3456.001, 3456.001), stdev = 0.001
[info]   CI (99.9%): [3456.000, 3456.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.154 ±(99.9%) 0.281 B/op [Average]
[info]   (min, avg, max) = (0.081, 0.154, 0.243), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1798.801 ±(99.9%) 681.915 MB/sec [Average]
[info]   (min, avg, max) = (1654.756, 1798.801, 2015.744), stdev = 177.091
[info]   CI (99.9%): [1116.886, 2480.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3497.848 ±(99.9%) 1377.132 B/op [Average]
[info]   (min, avg, max) = (3222.491, 3497.848, 3900.858), stdev = 357.637
[info]   CI (99.9%): [2120.715, 4874.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala
[info] # Run progress: 86.30% complete, ETA 00:08:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_3b1ae14a/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 625293.337 ops/s
[info] # Warmup Iteration   2: 1627677.851 ops/s
[info] # Warmup Iteration   3: 1587683.308 ops/s
[info] Iteration   1: 1606997.403 ops/s
[info]                  ·gc.alloc.rate:                   923.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      975.654 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 955.432 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1601320.381 ops/s
[info]                  ·gc.alloc.rate:                   919.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.897 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 964.053 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1642289.221 ops/s
[info]                  ·gc.alloc.rate:                   943.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      987.409 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 946.423 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1645654.928 ops/s
[info]                  ·gc.alloc.rate:                   945.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.420 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 948.293 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1609778.414 ops/s
[info]                  ·gc.alloc.rate:                   924.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.515 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 975.313 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala":
[info]   1621208.070 ±(99.9%) 81004.683 ops/s [Average]
[info]   (min, avg, max) = (1601320.381, 1621208.070, 1645654.928), stdev = 21036.659
[info]   CI (99.9%): [1540203.386, 1702212.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   931.154 ±(99.9%) 46.179 MB/sec [Average]
[info]   (min, avg, max) = (919.796, 931.154, 945.113), stdev = 11.993
[info]   CI (99.9%): [884.975, 977.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   904.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (904.000, 904.000, 904.000), stdev = 0.001
[info]   CI (99.9%): [904.000, 904.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.096, 0.125), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.093 ±(99.9%) 0.171 B/op [Average]
[info]   (min, avg, max) = (0.020, 0.093, 0.123), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   986.579 ±(99.9%) 33.089 MB/sec [Average]
[info]   (min, avg, max) = (975.654, 986.579, 997.515), stdev = 8.593
[info]   CI (99.9%): [953.490, 1019.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   957.903 ±(99.9%) 46.013 B/op [Average]
[info]   (min, avg, max) = (946.423, 957.903, 975.313), stdev = 11.949
[info]   CI (99.9%): [911.889, 1003.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala
[info] # Run progress: 86.64% complete, ETA 00:08:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4045482.993 ops/s
[info] # Warmup Iteration   2: 4511604.904 ops/s
[info] # Warmup Iteration   3: 4525997.372 ops/s
[info] Iteration   1: 4728538.017 ops/s
[info]                  ·gc.alloc.rate:                   360.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.796 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85.139 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 4730907.030 ops/s
[info]                  ·gc.alloc.rate:                   360.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85.098 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 4713495.137 ops/s
[info]                  ·gc.alloc.rate:                   359.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.351 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 109.656 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 4709307.470 ops/s
[info]                  ·gc.alloc.rate:                   359.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.436 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 109.754 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 4722955.885 ops/s
[info]                  ·gc.alloc.rate:                   360.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.835 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 217.543 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala":
[info]   4721040.708 ±(99.9%) 36113.332 ops/s [Average]
[info]   (min, avg, max) = (4709307.470, 4721040.708, 4730907.030), stdev = 9378.518
[info]   CI (99.9%): [4684927.376, 4757154.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   359.943 ±(99.9%) 2.703 MB/sec [Average]
[info]   (min, avg, max) = (359.095, 359.943, 360.644), stdev = 0.702
[info]   CI (99.9%): [357.239, 362.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (120.000, 120.000, 120.000), stdev = 0.001
[info]   CI (99.9%): [120.000, 120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.762 ±(99.9%) 6.382 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.762, 3.727), stdev = 1.657
[info]   CI (99.9%): [≈ 0, 7.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.255 ±(99.9%) 2.131 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.255, 1.245), stdev = 0.554
[info]   CI (99.9%): [≈ 0, 2.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   364.234 ±(99.9%) 636.775 MB/sec [Average]
[info]   (min, avg, max) = (255.751, 364.234, 652.835), stdev = 165.368
[info]   CI (99.9%): [≈ 0, 1001.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   121.438 ±(99.9%) 212.220 B/op [Average]
[info]   (min, avg, max) = (85.098, 121.438, 217.543), stdev = 55.113
[info]   CI (99.9%): [≈ 0, 333.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson
[info] # Run progress: 86.99% complete, ETA 00:08:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 175206.262 ops/s
[info] # Warmup Iteration   2: 501314.464 ops/s
[info] # Warmup Iteration   3: 507860.118 ops/s
[info] Iteration   1: 507463.530 ops/s
[info]                  ·gc.alloc.rate:                   1731.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1652.552 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5124.685 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 502306.577 ops/s
[info]                  ·gc.alloc.rate:                   1712.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2000.108 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6267.850 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 502921.988 ops/s
[info]                  ·gc.alloc.rate:                   1715.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5254.304 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 505003.564 ops/s
[info]                  ·gc.alloc.rate:                   1722.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1687.067 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5256.624 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 500372.498 ops/s
[info]                  ·gc.alloc.rate:                   1706.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1692.343 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5322.008 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson":
[info]   503613.631 ±(99.9%) 10447.483 ops/s [Average]
[info]   (min, avg, max) = (500372.498, 503613.631, 507463.530), stdev = 2713.178
[info]   CI (99.9%): [493166.149, 514061.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1717.767 ±(99.9%) 35.911 MB/sec [Average]
[info]   (min, avg, max) = (1706.968, 1717.767, 1731.014), stdev = 9.326
[info]   CI (99.9%): [1681.855, 1753.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5368.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5368.001, 5368.001, 5368.001), stdev = 0.001
[info]   CI (99.9%): [5368.001, 5368.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.273 ±(99.9%) 0.452 B/op [Average]
[info]   (min, avg, max) = (0.130, 0.273, 0.393), stdev = 0.117
[info]   CI (99.9%): [≈ 0, 0.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1742.164 ±(99.9%) 558.358 MB/sec [Average]
[info]   (min, avg, max) = (1652.552, 1742.164, 2000.108), stdev = 145.004
[info]   CI (99.9%): [1183.806, 2300.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5445.094 ±(99.9%) 1792.372 B/op [Average]
[info]   (min, avg, max) = (5124.685, 5445.094, 6267.850), stdev = 465.473
[info]   CI (99.9%): [3652.722, 7237.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala
[info] # Run progress: 87.33% complete, ETA 00:07:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2961306.806 ops/s
[info] # Warmup Iteration   2: 3446510.625 ops/s
[info] # Warmup Iteration   3: 3539988.589 ops/s
[info] Iteration   1: 3532030.439 ops/s
[info]                  ·gc.alloc.rate:                   1669.347 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1647.422 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 734.229 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3527837.870 ops/s
[info]                  ·gc.alloc.rate:                   1667.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1659.669 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 740.581 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3546569.639 ops/s
[info]                  ·gc.alloc.rate:                   1676.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1670.280 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 741.392 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3543070.729 ops/s
[info]                  ·gc.alloc.rate:                   1674.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1681.397 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 746.881 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3545718.565 ops/s
[info]                  ·gc.alloc.rate:                   1675.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1687.162 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 748.985 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala":
[info]   3539045.449 ±(99.9%) 32909.321 ops/s [Average]
[info]   (min, avg, max) = (3527837.870, 3539045.449, 3546569.639), stdev = 8546.446
[info]   CI (99.9%): [3506136.127, 3571954.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1672.735 ±(99.9%) 15.800 MB/sec [Average]
[info]   (min, avg, max) = (1667.330, 1672.735, 1676.155), stdev = 4.103
[info]   CI (99.9%): [1656.935, 1688.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (744.000, 744.000, 744.000), stdev = 0.001
[info]   CI (99.9%): [744.000, 744.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.035 ±(99.9%) 0.047 B/op [Average]
[info]   (min, avg, max) = (0.028, 0.035, 0.056), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1669.186 ±(99.9%) 62.021 MB/sec [Average]
[info]   (min, avg, max) = (1647.422, 1669.186, 1687.162), stdev = 16.107
[info]   CI (99.9%): [1607.165, 1731.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   742.414 ±(99.9%) 22.333 B/op [Average]
[info]   (min, avg, max) = (734.229, 742.414, 748.985), stdev = 5.800
[info]   CI (99.9%): [720.081, 764.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson
[info] # Run progress: 87.67% complete, ETA 00:07:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 114985.683 ops/s
[info] # Warmup Iteration   2: 302580.969 ops/s
[info] # Warmup Iteration   3: 307803.801 ops/s
[info] Iteration   1: 306762.882 ops/s
[info]                  ·gc.alloc.rate:                   1633.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1651.758 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8477.563 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 309297.479 ops/s
[info]                  ·gc.alloc.rate:                   1647.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1666.197 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8479.494 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 311482.062 ops/s
[info]                  ·gc.alloc.rate:                   1659.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.158 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6778.861 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 307664.002 ops/s
[info]                  ·gc.alloc.rate:                   1639.266 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.726 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8616.505 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 304897.794 ops/s
[info]                  ·gc.alloc.rate:                   1624.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.464 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8725.153 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson":
[info]   308020.844 ±(99.9%) 9640.668 ops/s [Average]
[info]   (min, avg, max) = (304897.794, 308020.844, 311482.062), stdev = 2503.651
[info]   CI (99.9%): [298380.176, 317661.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1640.912 ±(99.9%) 52.248 MB/sec [Average]
[info]   (min, avg, max) = (1624.367, 1640.912, 1659.963), stdev = 13.569
[info]   CI (99.9%): [1588.664, 1693.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8384.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8384.001, 8384.001, 8384.001), stdev = 0.001
[info]   CI (99.9%): [8384.001, 8384.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.125), stdev = 0.027
[info]   CI (99.9%): [0.004, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.554 ±(99.9%) 0.546 B/op [Average]
[info]   (min, avg, max) = (0.316, 0.554, 0.645), stdev = 0.142
[info]   CI (99.9%): [0.008, 1.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1607.061 ±(99.9%) 573.268 MB/sec [Average]
[info]   (min, avg, max) = (1342.158, 1607.061, 1690.464), stdev = 148.876
[info]   CI (99.9%): [1033.792, 2180.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8215.515 ±(99.9%) 3118.103 B/op [Average]
[info]   (min, avg, max) = (6778.861, 8215.515, 8725.153), stdev = 809.761
[info]   CI (99.9%): [5097.413, 11333.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce
[info] # Run progress: 88.01% complete, ETA 00:07:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 214468.098 ops/s
[info] # Warmup Iteration   2: 457281.330 ops/s
[info] # Warmup Iteration   3: 466559.078 ops/s
[info] Iteration   1: 466890.201 ops/s
[info]                  ·gc.alloc.rate:                   1214.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1301.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4387.723 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 457061.787 ops/s
[info]                  ·gc.alloc.rate:                   1189.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.457 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3372.980 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 464128.262 ops/s
[info]                  ·gc.alloc.rate:                   1207.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.257 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4456.902 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 463788.175 ops/s
[info]                  ·gc.alloc.rate:                   1206.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.719 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4489.402 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 465314.750 ops/s
[info]                  ·gc.alloc.rate:                   1211.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.616 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3374.072 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce":
[info]   463436.635 ±(99.9%) 14496.926 ops/s [Average]
[info]   (min, avg, max) = (457061.787, 463436.635, 466890.201), stdev = 3764.806
[info]   CI (99.9%): [448939.709, 477933.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1206.003 ±(99.9%) 37.726 MB/sec [Average]
[info]   (min, avg, max) = (1189.410, 1206.003, 1214.889), stdev = 9.797
[info]   CI (99.9%): [1168.277, 1243.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4096.001, 4096.001), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.269 ±(99.9%) 0.591 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.269, 0.358), stdev = 0.154
[info]   CI (99.9%): [≈ 0, 0.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1183.093 ±(99.9%) 684.962 MB/sec [Average]
[info]   (min, avg, max) = (979.457, 1183.093, 1322.719), stdev = 177.882
[info]   CI (99.9%): [498.131, 1868.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4016.216 ±(99.9%) 2263.566 B/op [Average]
[info]   (min, avg, max) = (3372.980, 4016.216, 4489.402), stdev = 587.841
[info]   CI (99.9%): [1752.650, 6279.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala
[info] # Run progress: 88.36% complete, ETA 00:07:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2402833.645 ops/s
[info] # Warmup Iteration   2: 2896078.555 ops/s
[info] # Warmup Iteration   3: 2909305.955 ops/s
[info] Iteration   1: 2912551.037 ops/s
[info]                  ·gc.alloc.rate:                   592.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 354.916 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2916018.199 ops/s
[info]                  ·gc.alloc.rate:                   592.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.872 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 352.346 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2912589.889 ops/s
[info]                  ·gc.alloc.rate:                   592.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.982 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 352.772 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2904370.706 ops/s
[info]                  ·gc.alloc.rate:                   590.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.442 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 176.884 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2915301.636 ops/s
[info]                  ·gc.alloc.rate:                   592.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.186 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 352.611 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala":
[info]   2912166.293 ±(99.9%) 17830.414 ops/s [Average]
[info]   (min, avg, max) = (2904370.706, 2912166.293, 2916018.199), stdev = 4630.502
[info]   CI (99.9%): [2894335.879, 2929996.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   592.160 ±(99.9%) 3.628 MB/sec [Average]
[info]   (min, avg, max) = (590.567, 592.160, 592.938), stdev = 0.942
[info]   CI (99.9%): [588.532, 595.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   320.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (320.000, 320.000, 320.000), stdev = 0.001
[info]   CI (99.9%): [320.000, 320.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.800 ±(99.9%) 6.400 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.772), stdev = 1.662
[info]   CI (99.9%): [≈ 0, 7.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.432 ±(99.9%) 3.459 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.432, 2.038), stdev = 0.898
[info]   CI (99.9%): [≈ 0, 3.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   588.459 ±(99.9%) 564.047 MB/sec [Average]
[info]   (min, avg, max) = (326.442, 588.459, 656.812), stdev = 146.481
[info]   CI (99.9%): [24.412, 1152.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   317.906 ±(99.9%) 303.586 B/op [Average]
[info]   (min, avg, max) = (176.884, 317.906, 354.916), stdev = 78.840
[info]   CI (99.9%): [14.319, 621.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson
[info] # Run progress: 88.70% complete, ETA 00:07:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 82829.242 ops/s
[info] # Warmup Iteration   2: 345265.079 ops/s
[info] # Warmup Iteration   3: 347999.249 ops/s
[info] Iteration   1: 348436.788 ops/s
[info]                  ·gc.alloc.rate:                   1336.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1311.939 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5927.507 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 349108.739 ops/s
[info]                  ·gc.alloc.rate:                   1339.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.796 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5964.149 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 346394.643 ops/s
[info]                  ·gc.alloc.rate:                   1329.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.284 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331.949 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6050.426 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 348950.062 ops/s
[info]                  ·gc.alloc.rate:                   1339.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.931 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6039.007 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 347130.851 ops/s
[info]                  ·gc.alloc.rate:                   1332.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.385 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6097.812 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson":
[info]   348004.217 ±(99.9%) 4578.545 ops/s [Average]
[info]   (min, avg, max) = (346394.643, 348004.217, 349108.739), stdev = 1189.034
[info]   CI (99.9%): [343425.671, 352582.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1335.579 ±(99.9%) 16.615 MB/sec [Average]
[info]   (min, avg, max) = (1329.654, 1335.579, 1339.620), stdev = 4.315
[info]   CI (99.9%): [1318.963, 1352.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   6040.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6040.001, 6040.001, 6040.001), stdev = 0.001
[info]   CI (99.9%): [6040.001, 6040.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.358 ±(99.9%) 0.594 B/op [Average]
[info]   (min, avg, max) = (0.188, 0.358, 0.563), stdev = 0.154
[info]   CI (99.9%): [≈ 0, 0.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1330.200 ±(99.9%) 50.872 MB/sec [Average]
[info]   (min, avg, max) = (1311.939, 1330.200, 1345.385), stdev = 13.211
[info]   CI (99.9%): [1279.328, 1381.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6015.780 ±(99.9%) 264.877 B/op [Average]
[info]   (min, avg, max) = (5927.507, 6015.780, 6097.812), stdev = 68.788
[info]   CI (99.9%): [5750.903, 6280.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 89.04% complete, ETA 00:06:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 299761.970 ops/s
[info] # Warmup Iteration   2: 652636.275 ops/s
[info] # Warmup Iteration   3: 675515.061 ops/s
[info] Iteration   1: 674597.154 ops/s
[info]                  ·gc.alloc.rate:                   2077.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              4848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2305.347 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5379.772 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 670187.872 ops/s
[info]                  ·gc.alloc.rate:                   2064.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              4848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1997.204 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4690.851 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 667395.795 ops/s
[info]                  ·gc.alloc.rate:                   2056.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              4848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2012.699 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4745.797 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 665717.754 ops/s
[info]                  ·gc.alloc.rate:                   2050.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              4848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.867 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4785.239 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 671874.190 ops/s
[info]                  ·gc.alloc.rate:                   2069.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              4848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.985 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4758.516 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   669954.553 ±(99.9%) 13585.585 ops/s [Average]
[info]   (min, avg, max) = (665717.754, 669954.553, 674597.154), stdev = 3528.133
[info]   CI (99.9%): [656368.968, 683540.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2063.443 ±(99.9%) 41.056 MB/sec [Average]
[info]   (min, avg, max) = (2050.411, 2063.443, 2077.472), stdev = 10.662
[info]   CI (99.9%): [2022.388, 2104.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4848.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4848.001, 4848.001, 4848.001), stdev = 0.001
[info]   CI (99.9%): [4848.001, 4848.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.100, 0.167), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.234 ±(99.9%) 0.503 B/op [Average]
[info]   (min, avg, max) = (0.098, 0.234, 0.391), stdev = 0.131
[info]   CI (99.9%): [≈ 0, 0.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2074.020 ±(99.9%) 500.363 MB/sec [Average]
[info]   (min, avg, max) = (1997.204, 2074.020, 2305.347), stdev = 129.943
[info]   CI (99.9%): [1573.657, 2574.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4872.035 ±(99.9%) 1100.942 B/op [Average]
[info]   (min, avg, max) = (4690.851, 4872.035, 5379.772), stdev = 285.911
[info]   CI (99.9%): [3771.093, 5972.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 89.38% complete, ETA 00:06:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 477417.178 ops/s
[info] # Warmup Iteration   2: 1532623.820 ops/s
[info] # Warmup Iteration   3: 1547133.763 ops/s
[info] Iteration   1: 1541208.810 ops/s
[info]                  ·gc.alloc.rate:                   1166.933 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.231 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1337.355 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1534295.751 ops/s
[info]                  ·gc.alloc.rate:                   1161.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.345 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1015.075 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1520822.708 ops/s
[info]                  ·gc.alloc.rate:                   1151.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.300 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1374.617 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1538831.653 ops/s
[info]                  ·gc.alloc.rate:                   1165.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.452 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1024.342 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1546067.893 ops/s
[info]                  ·gc.alloc.rate:                   1171.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.880 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1365.736 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1536245.363 ±(99.9%) 37007.577 ops/s [Average]
[info]   (min, avg, max) = (1520822.708, 1536245.363, 1546067.893), stdev = 9610.750
[info]   CI (99.9%): [1499237.786, 1573252.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1163.419 ±(99.9%) 28.112 MB/sec [Average]
[info]   (min, avg, max) = (1151.836, 1163.419, 1171.179), stdev = 7.300
[info]   CI (99.9%): [1135.308, 1191.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.090 ±(99.9%) 0.134 B/op [Average]
[info]   (min, avg, max) = (0.064, 0.090, 0.128), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1194.042 ±(99.9%) 699.879 MB/sec [Average]
[info]   (min, avg, max) = (989.345, 1194.042, 1341.880), stdev = 181.756
[info]   CI (99.9%): [494.162, 1893.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1223.425 ±(99.9%) 718.161 B/op [Average]
[info]   (min, avg, max) = (1015.075, 1223.425, 1374.617), stdev = 186.504
[info]   CI (99.9%): [505.264, 1941.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 89.73% complete, ETA 00:06:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6282039.198 ops/s
[info] # Warmup Iteration   2: 6590112.263 ops/s
[info] # Warmup Iteration   3: 7037446.865 ops/s
[info] Iteration   1: 7031924.331 ops/s
[info]                  ·gc.alloc.rate:                   214.429 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.762 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.253 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6995236.640 ops/s
[info]                  ·gc.alloc.rate:                   213.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.717 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.552 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6970295.799 ops/s
[info]                  ·gc.alloc.rate:                   212.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.753 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.758 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7057232.738 ops/s
[info]                  ·gc.alloc.rate:      215.274 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7051561.342 ops/s
[info]                  ·gc.alloc.rate:                   215.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.797 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.092 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   7021250.170 ±(99.9%) 144084.357 ops/s [Average]
[info]   (min, avg, max) = (6970295.799, 7021250.170, 7057232.738), stdev = 37418.250
[info]   CI (99.9%): [6877165.813, 7165334.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   214.116 ±(99.9%) 4.517 MB/sec [Average]
[info]   (min, avg, max) = (212.545, 214.116, 215.274), stdev = 1.173
[info]   CI (99.9%): [209.599, 218.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.009 ±(99.9%) 0.075 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.044), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.002 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204.606 ±(99.9%) 440.429 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.606, 255.797), stdev = 114.378
[info]   CI (99.9%): [≈ 0, 645.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   45.931 ±(99.9%) 98.875 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45.931, 57.758), stdev = 25.678
[info]   CI (99.9%): [≈ 0, 144.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 90.07% complete, ETA 00:06:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37888.785 ops/s
[info] # Warmup Iteration   2: 242852.331 ops/s
[info] # Warmup Iteration   3: 242440.925 ops/s
[info] Iteration   1: 246331.673 ops/s
[info]                  ·gc.alloc.rate:                   1715.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1648.114 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10531.769 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 246981.190 ops/s
[info]                  ·gc.alloc.rate:                   1719.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.327 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10605.590 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 246608.138 ops/s
[info]                  ·gc.alloc.rate:                   1717.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1675.494 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10694.159 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 245838.778 ops/s
[info]                  ·gc.alloc.rate:                   1711.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.192 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12947.541 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 245387.562 ops/s
[info]                  ·gc.alloc.rate:                   1708.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.585 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10850.255 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   246229.468 ±(99.9%) 2420.374 ops/s [Average]
[info]   (min, avg, max) = (245387.562, 246229.468, 246981.190), stdev = 628.563
[info]   CI (99.9%): [243809.094, 248649.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1714.537 ±(99.9%) 17.023 MB/sec [Average]
[info]   (min, avg, max) = (1708.695, 1714.537, 1719.945), stdev = 4.421
[info]   CI (99.9%): [1697.514, 1731.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10960.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10960.002, 10960.002, 10960.002), stdev = 0.001
[info]   CI (99.9%): [10960.001, 10960.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.559 ±(99.9%) 0.763 B/op [Average]
[info]   (min, avg, max) = (0.266, 0.559, 0.801), stdev = 0.198
[info]   CI (99.9%): [≈ 0, 1.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1740.342 ±(99.9%) 609.772 MB/sec [Average]
[info]   (min, avg, max) = (1648.114, 1740.342, 2022.192), stdev = 158.356
[info]   CI (99.9%): [1130.570, 2350.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   11125.863 ±(99.9%) 3947.836 B/op [Average]
[info]   (min, avg, max) = (10531.769, 11125.863, 12947.541), stdev = 1025.240
[info]   CI (99.9%): [7178.027, 15073.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 90.41% complete, ETA 00:05:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 437134.990 ops/s
[info] # Warmup Iteration   2: 912897.953 ops/s
[info] # Warmup Iteration   3: 927531.814 ops/s
[info] Iteration   1: 924562.357 ops/s
[info]                  ·gc.alloc.rate:                   1489.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              2536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1631.984 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2777.704 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 928493.661 ops/s
[info]                  ·gc.alloc.rate:                   1496.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              2536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.808 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2228.444 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 919493.012 ops/s
[info]                  ·gc.alloc.rate:                   1481.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              2536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1655.173 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2833.416 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 931337.649 ops/s
[info]                  ·gc.alloc.rate:                   1500.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              2536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2254.796 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 920539.199 ops/s
[info]                  ·gc.alloc.rate:                   1483.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              2536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.288 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2867.887 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   924885.175 ±(99.9%) 19513.566 ops/s [Average]
[info]   (min, avg, max) = (919493.012, 924885.175, 931337.649), stdev = 5067.611
[info]   CI (99.9%): [905371.610, 944398.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1490.335 ±(99.9%) 31.957 MB/sec [Average]
[info]   (min, avg, max) = (1481.435, 1490.335, 1500.813), stdev = 8.299
[info]   CI (99.9%): [1458.379, 1522.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2536.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2536.000, 2536.000, 2536.000), stdev = 0.001
[info]   CI (99.9%): [2536.000, 2536.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.128 ±(99.9%) 0.248 B/op [Average]
[info]   (min, avg, max) = (0.070, 0.128, 0.212), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1522.730 ±(99.9%) 699.682 MB/sec [Average]
[info]   (min, avg, max) = (1314.808, 1522.730, 1677.288), stdev = 181.705
[info]   CI (99.9%): [823.047, 2222.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2592.449 ±(99.9%) 1239.942 B/op [Average]
[info]   (min, avg, max) = (2228.444, 2592.449, 2867.887), stdev = 322.009
[info]   CI (99.9%): [1352.508, 3832.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 90.75% complete, ETA 00:05:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_3b1ae14a/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 843473.506 ops/s
[info] # Warmup Iteration   2: 2510202.191 ops/s
[info] # Warmup Iteration   3: 2551888.894 ops/s
[info] Iteration   1: 2536472.067 ops/s
[info]                  ·gc.alloc.rate:                   1044.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.630 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 607.362 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2534260.152 ops/s
[info]                  ·gc.alloc.rate:                   1043.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 816.634 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2563397.242 ops/s
[info]                  ·gc.alloc.rate:                   1055.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.376 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 610.017 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2563560.850 ops/s
[info]                  ·gc.alloc.rate:                   1055.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.444 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 612.447 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2510359.224 ops/s
[info]                  ·gc.alloc.rate:                   1033.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1003.223 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 628.768 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2541609.907 ±(99.9%) 86394.269 ops/s [Average]
[info]   (min, avg, max) = (2510359.224, 2541609.907, 2563560.850), stdev = 22436.317
[info]   CI (99.9%): [2455215.638, 2628004.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1046.368 ±(99.9%) 34.932 MB/sec [Average]
[info]   (min, avg, max) = (1033.909, 1046.368, 1055.346), stdev = 9.072
[info]   CI (99.9%): [1011.436, 1081.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.146), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.057 ±(99.9%) 0.097 B/op [Average]
[info]   (min, avg, max) = (0.026, 0.057, 0.090), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1057.483 ±(99.9%) 554.872 MB/sec [Average]
[info]   (min, avg, max) = (978.630, 1057.483, 1314.740), stdev = 144.099
[info]   CI (99.9%): [502.610, 1612.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   655.046 ±(99.9%) 349.314 B/op [Average]
[info]   (min, avg, max) = (607.362, 655.046, 816.634), stdev = 90.716
[info]   CI (99.9%): [305.731, 1004.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 91.10% complete, ETA 00:05:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4218865.549 ops/s
[info] # Warmup Iteration   2: 5963381.452 ops/s
[info] # Warmup Iteration   3: 6006368.117 ops/s
[info] Iteration   1: 5932963.301 ops/s
[info]                  ·gc.alloc.rate:                   663.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.828 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 173.971 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6019906.205 ops/s
[info]                  ·gc.alloc.rate:                   673.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.349 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 170.850 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 6098651.552 ops/s
[info]                  ·gc.alloc.rate:                   681.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.734 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 168.472 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6156215.214 ops/s
[info]                  ·gc.alloc.rate:                   688.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.422 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 167.063 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6093855.296 ops/s
[info]                  ·gc.alloc.rate:                   681.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 169.206 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   6060318.314 ±(99.9%) 331484.420 ops/s [Average]
[info]   (min, avg, max) = (5932963.301, 6060318.314, 6156215.214), stdev = 86085.451
[info]   CI (99.9%): [5728833.894, 6391802.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   677.620 ±(99.9%) 36.963 MB/sec [Average]
[info]   (min, avg, max) = (663.477, 677.620, 688.378), stdev = 9.599
[info]   CI (99.9%): [640.657, 714.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.234 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.083, 0.167), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.022 ±(99.9%) 0.061 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.044), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   654.067 ±(99.9%) 4.976 MB/sec [Average]
[info]   (min, avg, max) = (652.734, 654.067, 655.828), stdev = 1.292
[info]   CI (99.9%): [649.091, 659.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   169.912 ±(99.9%) 10.196 B/op [Average]
[info]   (min, avg, max) = (167.063, 169.912, 173.971), stdev = 2.648
[info]   CI (99.9%): [159.716, 180.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 91.44% complete, ETA 00:05:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4269454.320 ops/s
[info] # Warmup Iteration   2: 6141904.640 ops/s
[info] # Warmup Iteration   3: 6126369.862 ops/s
[info] Iteration   1: 6134928.430 ops/s
[info]                  ·gc.alloc.rate:                   374.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.746 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65.622 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6093754.590 ops/s
[info]                  ·gc.alloc.rate:                   371.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.723 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66.066 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6096261.702 ops/s
[info]                  ·gc.alloc.rate:                   371.800 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.697 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84.871 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6131387.179 ops/s
[info]                  ·gc.alloc.rate:                   373.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 168.347 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6146999.455 ops/s
[info]                  ·gc.alloc.rate:                   374.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.063 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83.742 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   6120666.271 ±(99.9%) 92967.441 ops/s [Average]
[info]   (min, avg, max) = (6093754.590, 6120666.271, 6146999.455), stdev = 24143.349
[info]   CI (99.9%): [6027698.830, 6213633.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   373.283 ±(99.9%) 5.773 MB/sec [Average]
[info]   (min, avg, max) = (371.588, 373.283, 374.938), stdev = 1.499
[info]   CI (99.9%): [367.511, 379.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.777 ±(99.9%) 6.464 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.777, 3.779), stdev = 1.679
[info]   CI (99.9%): [≈ 0, 7.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   0.200 ±(99.9%) 1.669 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.200, 0.976), stdev = 0.433
[info]   CI (99.9%): [≈ 0, 1.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   364.600 ±(99.9%) 641.981 MB/sec [Average]
[info]   (min, avg, max) = (255.723, 364.600, 655.772), stdev = 166.720
[info]   CI (99.9%): [≈ 0, 1006.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   93.730 ±(99.9%) 164.514 B/op [Average]
[info]   (min, avg, max) = (65.622, 93.730, 168.347), stdev = 42.724
[info]   CI (99.9%): [≈ 0, 258.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 91.78% complete, ETA 00:05:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50530.804 ops/s
[info] # Warmup Iteration   2: 337355.371 ops/s
[info] # Warmup Iteration   3: 340567.056 ops/s
[info] Iteration   1: 342494.869 ops/s
[info]                  ·gc.alloc.rate:                   1743.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              8016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1648.587 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7577.903 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 340057.428 ops/s
[info]                  ·gc.alloc.rate:                   1731.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              8016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1998.200 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9249.203 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 341898.721 ops/s
[info]                  ·gc.alloc.rate:                   1741.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              8016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.081 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7721.527 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 340379.275 ops/s
[info]                  ·gc.alloc.rate:                   1733.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              8016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.969 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7792.944 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 342079.816 ops/s
[info]                  ·gc.alloc.rate:                   1742.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              8016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.835 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7780.250 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   341382.022 ±(99.9%) 4197.191 ops/s [Average]
[info]   (min, avg, max) = (340057.428, 341382.022, 342494.869), stdev = 1089.997
[info]   CI (99.9%): [337184.831, 345579.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1738.396 ±(99.9%) 21.225 MB/sec [Average]
[info]   (min, avg, max) = (1731.779, 1738.396, 1743.896), stdev = 5.512
[info]   CI (99.9%): [1717.171, 1759.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8016.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8016.001, 8016.001, 8016.001), stdev = 0.001
[info]   CI (99.9%): [8016.001, 8016.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.403 ±(99.9%) 0.714 B/op [Average]
[info]   (min, avg, max) = (0.193, 0.403, 0.674), stdev = 0.185
[info]   CI (99.9%): [≈ 0, 1.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1739.934 ±(99.9%) 559.432 MB/sec [Average]
[info]   (min, avg, max) = (1648.587, 1739.934, 1998.200), stdev = 145.283
[info]   CI (99.9%): [1180.503, 2299.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8024.365 ±(99.9%) 2656.956 B/op [Average]
[info]   (min, avg, max) = (7577.903, 8024.365, 9249.203), stdev = 690.003
[info]   CI (99.9%): [5367.410, 10681.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Run progress: 92.12% complete, ETA 00:04:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2803673.662 ops/s
[info] # Warmup Iteration   2: 4098097.156 ops/s
[info] # Warmup Iteration   3: 4158547.560 ops/s
[info] Iteration   1: 4179204.032 ops/s
[info]                  ·gc.alloc.rate:                   3143.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3352.630 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1262.854 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 4176486.625 ops/s
[info]                  ·gc.alloc.rate:                   3141.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3041.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1146.221 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 4133000.835 ops/s
[info]                  ·gc.alloc.rate:                   3108.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3053.633 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1163.077 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 4167943.812 ops/s
[info]                  ·gc.alloc.rate:                   3135.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3059.854 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1155.586 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 4134279.038 ops/s
[info]                  ·gc.alloc.rate:                   3111.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.130 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1294.958 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   4158182.868 ±(99.9%) 87760.069 ops/s [Average]
[info]   (min, avg, max) = (4133000.835, 4158182.868, 4179204.032), stdev = 22791.011
[info]   CI (99.9%): [4070422.799, 4245942.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   3127.946 ±(99.9%) 64.097 MB/sec [Average]
[info]   (min, avg, max) = (3108.567, 3127.946, 3143.287), stdev = 16.646
[info]   CI (99.9%): [3063.849, 3192.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1184.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1184.000, 1184.000, 1184.000), stdev = 0.001
[info]   CI (99.9%): [1184.000, 1184.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.125), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.036 ±(99.9%) 0.059 B/op [Average]
[info]   (min, avg, max) = (0.016, 0.036, 0.048), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3182.053 ±(99.9%) 692.278 MB/sec [Average]
[info]   (min, avg, max) = (3041.018, 3182.053, 3403.130), stdev = 179.782
[info]   CI (99.9%): [2489.775, 3874.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1204.539 ±(99.9%) 266.035 B/op [Average]
[info]   (min, avg, max) = (1146.221, 1204.539, 1294.958), stdev = 69.088
[info]   CI (99.9%): [938.504, 1470.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   47.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.600, 10.000), stdev = 1.140
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 92.47% complete, ETA 00:04:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1877616.208 ops/s
[info] # Warmup Iteration   2: 4114624.275 ops/s
[info] # Warmup Iteration   3: 4146169.101 ops/s
[info] Iteration   1: 4154909.111 ops/s
[info]                  ·gc.alloc.rate:                   2153.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              816.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1991.237 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 754.465 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 4123950.621 ops/s
[info]                  ·gc.alloc.rate:                   2137.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              816.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2345.862 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 895.382 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 4126712.147 ops/s
[info]                  ·gc.alloc.rate:                   2139.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              816.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 771.949 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 4175560.082 ops/s
[info]                  ·gc.alloc.rate:                   2164.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              816.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2370.693 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 893.736 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 4143702.737 ops/s
[info]                  ·gc.alloc.rate:                   2148.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              816.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.750 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 773.716 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   4144966.939 ±(99.9%) 81940.681 ops/s [Average]
[info]   (min, avg, max) = (4123950.621, 4144966.939, 4175560.082), stdev = 21279.735
[info]   CI (99.9%): [4063026.258, 4226907.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2148.659 ±(99.9%) 42.238 MB/sec [Average]
[info]   (min, avg, max) = (2137.884, 2148.659, 2164.493), stdev = 10.969
[info]   CI (99.9%): [2106.421, 2190.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   816.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (816.000, 816.000, 816.000), stdev = 0.001
[info]   CI (99.9%): [816.000, 816.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.167), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.041 ±(99.9%) 0.066 B/op [Average]
[info]   (min, avg, max) = (0.024, 0.041, 0.064), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2153.654 ±(99.9%) 722.896 MB/sec [Average]
[info]   (min, avg, max) = (1991.237, 2153.654, 2370.693), stdev = 187.734
[info]   CI (99.9%): [1430.758, 2876.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   817.850 ±(99.9%) 271.206 B/op [Average]
[info]   (min, avg, max) = (754.465, 817.850, 895.382), stdev = 70.431
[info]   CI (99.9%): [546.643, 1089.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.800, 11.000), stdev = 1.924
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 92.81% complete, ETA 00:04:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6078295.931 ops/s
[info] # Warmup Iteration   2: 6423510.075 ops/s
[info] # Warmup Iteration   3: 6666727.450 ops/s
[info] Iteration   1: 6632264.923 ops/s
[info]                  ·gc.alloc.rate:                   707.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 157.280 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6669508.453 ops/s
[info]                  ·gc.alloc.rate:                   712.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.256 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 233.603 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6680118.113 ops/s
[info]                  ·gc.alloc.rate:                   712.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.356 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 155.372 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6654082.882 ops/s
[info]                  ·gc.alloc.rate:                   710.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.090 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 156.141 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6474079.525 ops/s
[info]                  ·gc.alloc.rate:                   690.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.370 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 160.811 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   6622010.779 ±(99.9%) 325885.495 ops/s [Average]
[info]   (min, avg, max) = (6474079.525, 6622010.779, 6680118.113), stdev = 84631.428
[info]   CI (99.9%): [6296125.284, 6947896.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   706.828 ±(99.9%) 35.025 MB/sec [Average]
[info]   (min, avg, max) = (690.938, 706.828, 712.944), stdev = 9.096
[info]   CI (99.9%): [671.803, 741.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (168.000, 168.000, 168.000), stdev = 0.001
[info]   CI (99.9%): [168.000, 168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.016 ±(99.9%) 0.032 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.016, 0.025), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   726.756 ±(99.9%) 567.225 MB/sec [Average]
[info]   (min, avg, max) = (659.356, 726.756, 990.256), stdev = 147.307
[info]   CI (99.9%): [159.530, 1293.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   172.641 ±(99.9%) 131.470 B/op [Average]
[info]   (min, avg, max) = (155.372, 172.641, 233.603), stdev = 34.142
[info]   CI (99.9%): [41.172, 304.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Run progress: 93.15% complete, ETA 00:04:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1743230.853 ops/s
[info] # Warmup Iteration   2: 2708228.575 ops/s
[info] # Warmup Iteration   3: 2784018.600 ops/s
[info] Iteration   1: 2779847.472 ops/s
[info]                  ·gc.alloc.rate:                   1158.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1303.434 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 738.085 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2779504.860 ops/s
[info]                  ·gc.alloc.rate:                   1158.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.054 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 555.607 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2757478.921 ops/s
[info]                  ·gc.alloc.rate:                   1149.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1315.094 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 750.714 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2793044.427 ops/s
[info]                  ·gc.alloc.rate:                   1164.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992.214 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 559.108 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2790205.590 ops/s
[info]                  ·gc.alloc.rate:                   1162.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.817 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 750.749 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   2780016.254 ±(99.9%) 53832.541 ops/s [Average]
[info]   (min, avg, max) = (2757478.921, 2780016.254, 2793044.427), stdev = 13980.140
[info]   CI (99.9%): [2726183.713, 2833848.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1158.599 ±(99.9%) 22.619 MB/sec [Average]
[info]   (min, avg, max) = (1149.174, 1158.599, 1164.162), stdev = 5.874
[info]   CI (99.9%): [1135.980, 1181.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   656.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (656.000, 656.000, 656.000), stdev = 0.001
[info]   CI (99.9%): [656.000, 656.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.146), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.047 ±(99.9%) 0.097 B/op [Average]
[info]   (min, avg, max) = (0.023, 0.047, 0.083), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1184.523 ±(99.9%) 696.777 MB/sec [Average]
[info]   (min, avg, max) = (981.054, 1184.523, 1330.817), stdev = 180.951
[info]   CI (99.9%): [487.745, 1881.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   670.853 ±(99.9%) 399.474 B/op [Average]
[info]   (min, avg, max) = (555.607, 670.853, 750.749), stdev = 103.742
[info]   CI (99.9%): [271.379, 1070.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 93.49% complete, ETA 00:04:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 932381.745 ops/s
[info] # Warmup Iteration   2: 1962477.103 ops/s
[info] # Warmup Iteration   3: 1964944.781 ops/s
[info] Iteration   1: 1969392.997 ops/s
[info]                  ·gc.alloc.rate:                   610.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              488.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      642.009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 513.189 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1961548.883 ops/s
[info]                  ·gc.alloc.rate:                   608.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              488.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      646.261 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 518.461 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1949026.704 ops/s
[info]                  ·gc.alloc.rate:                   604.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              488.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      649.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 524.482 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1972601.041 ops/s
[info]                  ·gc.alloc.rate:                   611.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              488.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.415 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 521.401 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1973340.525 ops/s
[info]                  ·gc.alloc.rate:                   611.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              488.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 523.321 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   1965182.030 ±(99.9%) 39152.231 ops/s [Average]
[info]   (min, avg, max) = (1949026.704, 1965182.030, 1973340.525), stdev = 10167.710
[info]   CI (99.9%): [1926029.799, 2004334.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   609.267 ±(99.9%) 12.213 MB/sec [Average]
[info]   (min, avg, max) = (604.167, 609.267, 611.821), stdev = 3.172
[info]   CI (99.9%): [597.053, 621.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   488.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (488.000, 488.000, 488.000), stdev = 0.001
[info]   CI (99.9%): [488.000, 488.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.104), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.040 ±(99.9%) 0.162 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.084), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   649.424 ±(99.9%) 21.571 MB/sec [Average]
[info]   (min, avg, max) = (642.009, 649.424, 656.103), stdev = 5.602
[info]   CI (99.9%): [627.853, 670.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   520.171 ±(99.9%) 17.401 B/op [Average]
[info]   (min, avg, max) = (513.189, 520.171, 524.482), stdev = 4.519
[info]   CI (99.9%): [502.770, 537.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 93.84% complete, ETA 00:03:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6550240.388 ops/s
[info] # Warmup Iteration   2: 8700390.227 ops/s
[info] # Warmup Iteration   3: 8935799.405 ops/s
[info] Iteration   1: 8973703.014 ops/s
[info]                  ·gc.alloc.rate:                   866.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.368 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 171.980 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 8944811.543 ops/s
[info]                  ·gc.alloc.rate:                   863.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.995 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 114.924 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 8851990.104 ops/s
[info]                  ·gc.alloc.rate:                   854.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.710 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 174.401 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 9003915.836 ops/s
[info]                  ·gc.alloc.rate:                   869.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.161 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 172.216 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 8997839.994 ops/s
[info]                  ·gc.alloc.rate:                   868.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.117 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 115.298 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   8954452.098 ±(99.9%) 238080.437 ops/s [Average]
[info]   (min, avg, max) = (8851990.104, 8954452.098, 9003915.836), stdev = 61828.733
[info]   CI (99.9%): [8716371.661, 9192532.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   864.664 ±(99.9%) 23.141 MB/sec [Average]
[info]   (min, avg, max) = (854.742, 864.664, 869.515), stdev = 6.010
[info]   CI (99.9%): [841.523, 887.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   152.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.000, 152.000), stdev = 0.001
[info]   CI (99.9%): [152.000, 152.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.014 ±(99.9%) 0.021 B/op [Average]
[info]   (min, avg, max) = (0.007, 0.014, 0.022), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   851.670 ±(99.9%) 687.700 MB/sec [Average]
[info]   (min, avg, max) = (652.995, 851.670, 985.161), stdev = 178.593
[info]   CI (99.9%): [163.971, 1539.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   149.764 ±(99.9%) 121.866 B/op [Average]
[info]   (min, avg, max) = (114.924, 149.764, 174.401), stdev = 31.648
[info]   CI (99.9%): [27.898, 271.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 94.18% complete, ETA 00:03:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6285781.678 ops/s
[info] # Warmup Iteration   2: 7940158.259 ops/s
[info] # Warmup Iteration   3: 8231878.978 ops/s
[info] Iteration   1: 8489456.123 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 8445221.771 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 8454751.677 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 8514813.899 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 8506505.709 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   8482149.836 ±(99.9%) 119119.289 ops/s [Average]
[info]   (min, avg, max) = (8445221.771, 8482149.836, 8514813.899), stdev = 30934.901
[info]   CI (99.9%): [8363030.546, 8601269.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 94.52% complete, ETA 00:03:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2431007.740 ops/s
[info] # Warmup Iteration   2: 3462119.940 ops/s
[info] # Warmup Iteration   3: 3465429.498 ops/s
[info] Iteration   1: 3464363.755 ops/s
[info]                  ·gc.alloc.rate:                   1109.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1302.800 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 591.938 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3500976.428 ops/s
[info]                  ·gc.alloc.rate:                   1121.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 440.358 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 3494161.969 ops/s
[info]                  ·gc.alloc.rate:                   1118.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.463 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 443.034 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3507594.592 ops/s
[info]                  ·gc.alloc.rate:                   1123.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 592.419 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3539737.963 ops/s
[info]                  ·gc.alloc.rate:                   1133.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 442.944 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   3501366.941 ±(99.9%) 104259.676 ops/s [Average]
[info]   (min, avg, max) = (3464363.755, 3501366.941, 3539737.963), stdev = 27075.907
[info]   CI (99.9%): [3397107.266, 3605626.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1121.186 ±(99.9%) 33.335 MB/sec [Average]
[info]   (min, avg, max) = (1109.258, 1121.186, 1133.319), stdev = 8.657
[info]   CI (99.9%): [1087.850, 1154.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   504.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
[info]   CI (99.9%): [504.000, 504.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.036 ±(99.9%) 0.030 B/op [Average]
[info]   (min, avg, max) = (0.028, 0.036, 0.047), stdev = 0.008
[info]   CI (99.9%): [0.005, 0.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1116.466 ±(99.9%) 686.732 MB/sec [Average]
[info]   (min, avg, max) = (979.645, 1116.466, 1320.396), stdev = 178.342
[info]   CI (99.9%): [429.734, 1803.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   502.139 ±(99.9%) 316.529 B/op [Average]
[info]   (min, avg, max) = (440.358, 502.139, 592.419), stdev = 82.202
[info]   CI (99.9%): [185.609, 818.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Run progress: 94.86% complete, ETA 00:03:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 571900.325 ops/s
[info] # Warmup Iteration   2: 782622.588 ops/s
[info] # Warmup Iteration   3: 787151.807 ops/s
[info] Iteration   1: 796596.177 ops/s
[info]                  ·gc.alloc.rate:                   1335.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              2640.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.412 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2587.478 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 790302.879 ops/s
[info]                  ·gc.alloc.rate:                   1325.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              2640.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1315.935 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2621.341 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 796015.327 ops/s
[info]                  ·gc.alloc.rate:                   1335.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              2640.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1324.837 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2619.711 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 795886.286 ops/s
[info]                  ·gc.alloc.rate:                   1334.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              2640.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1332.941 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2636.030 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 787497.085 ops/s
[info]                  ·gc.alloc.rate:                   1320.894 MB/sec
[info]                  ·gc.alloc.rate.norm:              2640.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.614 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2677.415 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   793259.551 ±(99.9%) 15826.924 ops/s [Average]
[info]   (min, avg, max) = (787497.085, 793259.551, 796596.177), stdev = 4110.202
[info]   CI (99.9%): [777432.627, 809086.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   1330.447 ±(99.9%) 26.564 MB/sec [Average]
[info]   (min, avg, max) = (1320.894, 1330.447, 1335.991), stdev = 6.899
[info]   CI (99.9%): [1303.883, 1357.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2640.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2640.001, 2640.001, 2640.001), stdev = 0.001
[info]   CI (99.9%): [2640.000, 2640.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.182 ±(99.9%) 0.245 B/op [Average]
[info]   (min, avg, max) = (0.123, 0.182, 0.250), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1324.548 ±(99.9%) 47.192 MB/sec [Average]
[info]   (min, avg, max) = (1309.412, 1324.548, 1339.614), stdev = 12.256
[info]   CI (99.9%): [1277.355, 1371.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2628.395 ±(99.9%) 125.672 B/op [Average]
[info]   (min, avg, max) = (2587.478, 2628.395, 2677.415), stdev = 32.637
[info]   CI (99.9%): [2502.722, 2754.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 95.21% complete, ETA 00:02:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 494138.992 ops/s
[info] # Warmup Iteration   2: 1107934.313 ops/s
[info] # Warmup Iteration   3: 1105246.153 ops/s
[info] Iteration   1: 1101972.057 ops/s
[info]                  ·gc.alloc.rate:                   761.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      646.176 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 922.857 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1116912.936 ops/s
[info]                  ·gc.alloc.rate:                   772.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      649.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 915.201 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1114538.320 ops/s
[info]                  ·gc.alloc.rate:                   770.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1386.076 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1115433.528 ops/s
[info]                  ·gc.alloc.rate:                   771.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.622 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 927.702 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1111124.691 ops/s
[info]                  ·gc.alloc.rate:                   768.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.184 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 935.073 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1111996.306 ±(99.9%) 23079.372 ops/s [Average]
[info]   (min, avg, max) = (1101972.057, 1111996.306, 1116912.936), stdev = 5993.640
[info]   CI (99.9%): [1088916.934, 1135075.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   768.714 ±(99.9%) 15.893 MB/sec [Average]
[info]   (min, avg, max) = (761.808, 768.714, 772.057), stdev = 4.127
[info]   CI (99.9%): [752.822, 784.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1088.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1088.000, 1088.000, 1088.000), stdev = 0.001
[info]   CI (99.9%): [1088.000, 1088.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.104), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.077 ±(99.9%) 0.206 B/op [Average]
[info]   (min, avg, max) = (0.029, 0.077, 0.147), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   718.950 ±(99.9%) 565.231 MB/sec [Average]
[info]   (min, avg, max) = (646.176, 718.950, 981.333), stdev = 146.789
[info]   CI (99.9%): [153.719, 1284.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1017.382 ±(99.9%) 794.130 B/op [Average]
[info]   (min, avg, max) = (915.201, 1017.382, 1386.076), stdev = 206.233
[info]   CI (99.9%): [223.251, 1811.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 95.55% complete, ETA 00:02:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1781731.964 ops/s
[info] # Warmup Iteration   2: 1897839.503 ops/s
[info] # Warmup Iteration   3: 1969066.502 ops/s
[info] Iteration   1: 1971687.584 ops/s
[info]                  ·gc.alloc.rate:                   551.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332.338 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 265.336 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1971160.081 ops/s
[info]                  ·gc.alloc.rate:                   551.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.759 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 529.221 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1962783.730 ops/s
[info]                  ·gc.alloc.rate:                   548.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 529.343 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1970217.949 ops/s
[info]                  ·gc.alloc.rate:                   550.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.717 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 263.411 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1971174.515 ops/s
[info]                  ·gc.alloc.rate:                   551.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.402 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 526.539 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   1969404.772 ±(99.9%) 14397.983 ops/s [Average]
[info]   (min, avg, max) = (1962783.730, 1969404.772, 1971687.584), stdev = 3739.110
[info]   CI (99.9%): [1955006.789, 1983802.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   550.521 ±(99.9%) 3.973 MB/sec [Average]
[info]   (min, avg, max) = (548.691, 550.521, 551.108), stdev = 1.032
[info]   CI (99.9%): [546.548, 554.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   440.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.000, 440.000, 440.000), stdev = 0.001
[info]   CI (99.9%): [440.000, 440.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.662 ±(99.9%) 5.302 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.662, 3.125), stdev = 1.377
[info]   CI (99.9%): [≈ 0, 5.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.529 ±(99.9%) 4.233 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.529, 2.495), stdev = 1.099
[info]   CI (99.9%): [≈ 0, 4.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   528.864 ±(99.9%) 695.449 MB/sec [Average]
[info]   (min, avg, max) = (329.717, 528.864, 662.759), stdev = 180.606
[info]   CI (99.9%): [≈ 0, 1224.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   422.770 ±(99.9%) 556.808 B/op [Average]
[info]   (min, avg, max) = (263.411, 422.770, 529.343), stdev = 144.601
[info]   CI (99.9%): [≈ 0, 979.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Run progress: 95.89% complete, ETA 00:02:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1023563.883 ops/s
[info] # Warmup Iteration   2: 1640297.161 ops/s
[info] # Warmup Iteration   3: 1651104.768 ops/s
[info] Iteration   1: 1646038.613 ops/s
[info]                  ·gc.alloc.rate:                   1338.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              1280.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1305.506 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1248.437 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1664594.156 ops/s
[info]                  ·gc.alloc.rate:                   1353.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              1280.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1312.809 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1241.436 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1653184.441 ops/s
[info]                  ·gc.alloc.rate:                   1344.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              1280.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1323.185 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1259.500 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1663845.904 ops/s
[info]                  ·gc.alloc.rate:                   1353.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              1280.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.909 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1259.009 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1651891.207 ops/s
[info]                  ·gc.alloc.rate:                   1343.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              1280.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.117 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1275.062 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1655910.864 ±(99.9%) 31010.045 ops/s [Average]
[info]   (min, avg, max) = (1646038.613, 1655910.864, 1664594.156), stdev = 8053.210
[info]   CI (99.9%): [1624900.819, 1686920.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1346.644 ±(99.9%) 25.172 MB/sec [Average]
[info]   (min, avg, max) = (1338.512, 1346.644, 1353.590), stdev = 6.537
[info]   CI (99.9%): [1321.473, 1371.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1280.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1280.000, 1280.000, 1280.000), stdev = 0.001
[info]   CI (99.9%): [1280.000, 1280.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.100, 0.146), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.095 ±(99.9%) 0.098 B/op [Average]
[info]   (min, avg, max) = (0.079, 0.095, 0.138), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1322.105 ±(99.9%) 50.830 MB/sec [Average]
[info]   (min, avg, max) = (1305.506, 1322.105, 1338.117), stdev = 13.200
[info]   CI (99.9%): [1271.275, 1372.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1256.689 ±(99.9%) 49.147 B/op [Average]
[info]   (min, avg, max) = (1241.436, 1256.689, 1275.062), stdev = 12.763
[info]   CI (99.9%): [1207.542, 1305.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 96.23% complete, ETA 00:02:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 545492.260 ops/s
[info] # Warmup Iteration   2: 2576602.987 ops/s
[info] # Warmup Iteration   3: 2598589.825 ops/s
[info] Iteration   1: 2606717.990 ops/s
[info]                  ·gc.alloc.rate:                   1046.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              632.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      972.251 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 587.200 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2604397.425 ops/s
[info]                  ·gc.alloc.rate:                   1045.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              632.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.391 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 593.159 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2593848.742 ops/s
[info]                  ·gc.alloc.rate:                   1041.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              632.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      986.758 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 598.814 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2572920.905 ops/s
[info]                  ·gc.alloc.rate:                   1033.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              632.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.727 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 810.889 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2608537.609 ops/s
[info]                  ·gc.alloc.rate:                   1047.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              632.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1000.795 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 603.881 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   2597284.534 ±(99.9%) 56841.234 ops/s [Average]
[info]   (min, avg, max) = (2572920.905, 2597284.534, 2608537.609), stdev = 14761.488
[info]   CI (99.9%): [2540443.301, 2654125.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1042.837 ±(99.9%) 22.393 MB/sec [Average]
[info]   (min, avg, max) = (1033.260, 1042.837, 1047.397), stdev = 5.815
[info]   CI (99.9%): [1020.444, 1065.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   632.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (632.000, 632.000, 632.000), stdev = 0.001
[info]   CI (99.9%): [632.000, 632.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.104), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.038 ±(99.9%) 0.059 B/op [Average]
[info]   (min, avg, max) = (0.025, 0.038, 0.063), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1053.384 ±(99.9%) 587.588 MB/sec [Average]
[info]   (min, avg, max) = (972.251, 1053.384, 1325.727), stdev = 152.595
[info]   CI (99.9%): [465.796, 1640.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   638.788 ±(99.9%) 371.235 B/op [Average]
[info]   (min, avg, max) = (587.200, 638.788, 810.889), stdev = 96.409
[info]   CI (99.9%): [267.553, 1010.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 96.58% complete, ETA 00:02:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1975174.498 ops/s
[info] # Warmup Iteration   2: 2761381.297 ops/s
[info] # Warmup Iteration   3: 2745155.539 ops/s
[info] Iteration   1: 2774921.218 ops/s
[info]                  ·gc.alloc.rate:                   648.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 372.889 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2778293.366 ops/s
[info]                  ·gc.alloc.rate:                   649.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.068 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 370.567 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2731805.404 ops/s
[info]                  ·gc.alloc.rate:                   638.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.698 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 376.105 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2769677.117 ops/s
[info]                  ·gc.alloc.rate:                   647.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 370.961 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2768006.865 ops/s
[info]                  ·gc.alloc.rate:                   647.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.080 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 371.953 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   2764540.794 ±(99.9%) 72215.941 ops/s [Average]
[info]   (min, avg, max) = (2731805.404, 2764540.794, 2778293.366), stdev = 18754.251
[info]   CI (99.9%): [2692324.853, 2836756.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   646.344 ±(99.9%) 17.010 MB/sec [Average]
[info]   (min, avg, max) = (638.634, 646.344, 649.537), stdev = 4.418
[info]   CI (99.9%): [629.333, 663.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   368.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (368.000, 368.000, 368.000), stdev = 0.001
[info]   CI (99.9%): [368.000, 368.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.801 ±(99.9%) 6.317 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.801, 3.736), stdev = 1.640
[info]   CI (99.9%): [≈ 0, 7.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.455 ±(99.9%) 3.582 B/op [Average]
[info]   (min, avg, max) = (0.035, 0.455, 2.119), stdev = 0.930
[info]   CI (99.9%): [≈ 0, 4.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   654.219 ±(99.9%) 7.477 MB/sec [Average]
[info]   (min, avg, max) = (652.698, 654.219, 657.479), stdev = 1.942
[info]   CI (99.9%): [646.742, 661.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   372.495 ±(99.9%) 8.512 B/op [Average]
[info]   (min, avg, max) = (370.567, 372.495, 376.105), stdev = 2.211
[info]   CI (99.9%): [363.983, 381.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 96.92% complete, ETA 00:01:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2109044.572 ops/s
[info] # Warmup Iteration   2: 2814938.012 ops/s
[info] # Warmup Iteration   3: 2771477.196 ops/s
[info] Iteration   1: 2842408.997 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2828785.280 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2850451.434 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2845323.187 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2844393.220 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2842272.424 ±(99.9%) 31201.078 ops/s [Average]
[info]   (min, avg, max) = (2828785.280, 2842272.424, 2850451.434), stdev = 8102.821
[info]   CI (99.9%): [2811071.346, 2873473.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 97.26% complete, ETA 00:01:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1754836.627 ops/s
[info] # Warmup Iteration   2: 2369279.878 ops/s
[info] # Warmup Iteration   3: 2420858.631 ops/s
[info] Iteration   1: 2434176.073 ops/s
[info]                  ·gc.alloc.rate:                   1113.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1301.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 841.597 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2432805.307 ops/s
[info]                  ·gc.alloc.rate:                   1113.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.325 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 633.494 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2440692.164 ops/s
[info]                  ·gc.alloc.rate:                   1116.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.066 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 634.042 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2437021.129 ops/s
[info]                  ·gc.alloc.rate:                   1115.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320.723 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 852.688 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2428169.700 ops/s
[info]                  ·gc.alloc.rate:                   1110.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995.497 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 645.288 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2434572.875 ±(99.9%) 18032.574 ops/s [Average]
[info]   (min, avg, max) = (2428169.700, 2434572.875, 2440692.164), stdev = 4683.002
[info]   CI (99.9%): [2416540.301, 2452605.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1113.795 ±(99.9%) 8.231 MB/sec [Average]
[info]   (min, avg, max) = (1110.758, 1113.795, 1116.342), stdev = 2.137
[info]   CI (99.9%): [1105.564, 1122.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   720.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (720.000, 720.000, 720.000), stdev = 0.001
[info]   CI (99.9%): [720.000, 720.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.104), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.054 ±(99.9%) 0.064 B/op [Average]
[info]   (min, avg, max) = (0.027, 0.054, 0.067), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1116.059 ±(99.9%) 686.838 MB/sec [Average]
[info]   (min, avg, max) = (979.325, 1116.059, 1320.723), stdev = 178.370
[info]   CI (99.9%): [429.221, 1802.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   721.422 ±(99.9%) 442.555 B/op [Average]
[info]   (min, avg, max) = (633.494, 721.422, 852.688), stdev = 114.930
[info]   CI (99.9%): [278.866, 1163.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 97.60% complete, ETA 00:01:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6005.632 ops/s
[info] # Warmup Iteration   2: 8436.656 ops/s
[info] # Warmup Iteration   3: 10696.041 ops/s
[info] Iteration   1: 10745.249 ops/s
[info]                  ·gc.alloc.rate:                   1576.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              230856.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1629.365 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 238605.435 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 10933.458 ops/s
[info]                  ·gc.alloc.rate:                   1602.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              230703.330 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26.970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1641.534 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 236325.153 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 12363.709 ops/s
[info]                  ·gc.alloc.rate:                   1807.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              230152.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1990.220 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 253367.709 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 12337.541 ops/s
[info]                  ·gc.alloc.rate:                   1804.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              230197.866 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1672.407 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 213326.584 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 12402.575 ops/s
[info]                  ·gc.alloc.rate:                   1813.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              230208.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1680.742 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 213307.661 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   11756.506 ±(99.9%) 3235.315 ops/s [Average]
[info]   (min, avg, max) = (10745.249, 11756.506, 12402.575), stdev = 840.201
[info]   CI (99.9%): [8521.192, 14991.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1721.074 ±(99.9%) 464.154 MB/sec [Average]
[info]   (min, avg, max) = (1576.446, 1721.074, 1813.907), stdev = 120.539
[info]   CI (99.9%): [1256.919, 2185.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   230423.461 ±(99.9%) 1271.917 B/op [Average]
[info]   (min, avg, max) = (230152.033, 230423.461, 230856.041), stdev = 330.313
[info]   CI (99.9%): [229151.544, 231695.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.155 MB/sec [Average]
[info]   (min, avg, max) = (0.085, 0.117, 0.187), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   15.935 ±(99.9%) 24.541 B/op [Average]
[info]   (min, avg, max) = (10.747, 15.935, 26.970), stdev = 6.373
[info]   CI (99.9%): [≈ 0, 40.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1722.853 ±(99.9%) 581.295 MB/sec [Average]
[info]   (min, avg, max) = (1629.365, 1722.853, 1990.220), stdev = 150.960
[info]   CI (99.9%): [1141.559, 2304.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   230986.508 ±(99.9%) 67024.489 B/op [Average]
[info]   (min, avg, max) = (213307.661, 230986.508, 253367.709), stdev = 17406.047
[info]   CI (99.9%): [163962.020, 298010.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.200, 13.000), stdev = 3.347
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 97.95% complete, ETA 00:01:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4930.391 ops/s
[info] # Warmup Iteration   2: 14872.446 ops/s
[info] # Warmup Iteration   3: 15171.380 ops/s
[info] Iteration   1: 15302.488 ops/s
[info]                  ·gc.alloc.rate:      216.037 MB/sec
[info]                  ·gc.alloc.rate.norm: 22224.031 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 15126.485 ops/s
[info]                  ·gc.alloc.rate:                   213.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              22224.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.843 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26614.660 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 15250.504 ops/s
[info]                  ·gc.alloc.rate:                   215.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              22224.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.792 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26398.294 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 15246.151 ops/s
[info]                  ·gc.alloc.rate:                   215.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              22224.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26405.219 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 15197.584 ops/s
[info]                  ·gc.alloc.rate:                   214.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              22224.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.338 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33386.671 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   15224.642 ±(99.9%) 255.120 ops/s [Average]
[info]   (min, avg, max) = (15126.485, 15224.642, 15302.488), stdev = 66.254
[info]   CI (99.9%): [14969.522, 15479.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   214.971 ±(99.9%) 3.503 MB/sec [Average]
[info]   (min, avg, max) = (213.636, 214.971, 216.037), stdev = 0.910
[info]   CI (99.9%): [211.468, 218.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   22224.030 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (22224.027, 22224.030, 22224.038), stdev = 0.005
[info]   CI (99.9%): [22224.011, 22224.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.158 ±(99.9%) 1.229 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.158, 0.728), stdev = 0.319
[info]   CI (99.9%): [≈ 0, 1.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   16.379 ±(99.9%) 127.335 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.379, 75.448), stdev = 33.069
[info]   CI (99.9%): [≈ 0, 143.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   217.948 ±(99.9%) 482.090 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 217.948, 322.338), stdev = 125.197
[info]   CI (99.9%): [≈ 0, 700.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   22560.969 ±(99.9%) 49914.835 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22560.969, 33386.671), stdev = 12962.724
[info]   CI (99.9%): [≈ 0, 72475.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 98.29% complete, ETA 00:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16508.055 ops/s
[info] # Warmup Iteration   2: 32847.667 ops/s
[info] # Warmup Iteration   3: 37901.172 ops/s
[info] Iteration   1: 37531.162 ops/s
[info]                  ·gc.alloc.rate:                   348.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              14608.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.756 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10727.120 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 37898.959 ops/s
[info]                  ·gc.alloc.rate:                   351.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              14608.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.627 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21245.947 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 38037.686 ops/s
[info]                  ·gc.alloc.rate:                   353.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              14608.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     139.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13629.504 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 38061.459 ops/s
[info]                  ·gc.alloc.rate:                   353.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              14608.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.323 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13621.269 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 38305.633 ops/s
[info]                  ·gc.alloc.rate:                   355.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              14608.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.695 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13466.442 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   37966.979 ±(99.9%) 1094.517 ops/s [Average]
[info]   (min, avg, max) = (37531.162, 37966.979, 38305.633), stdev = 284.243
[info]   CI (99.9%): [36872.462, 39061.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   352.347 ±(99.9%) 10.143 MB/sec [Average]
[info]   (min, avg, max) = (348.284, 352.347, 355.475), stdev = 2.634
[info]   CI (99.9%): [342.204, 362.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14608.012 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (14608.011, 14608.012, 14608.014), stdev = 0.002
[info]   CI (99.9%): [14608.005, 14608.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.678 ±(99.9%) 5.785 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.678, 3.365), stdev = 1.502
[info]   CI (99.9%): [≈ 0, 6.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   28.052 ±(99.9%) 239.387 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.052, 139.259), stdev = 62.168
[info]   CI (99.9%): [≈ 0, 267.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   350.755 ±(99.9%) 367.090 MB/sec [Average]
[info]   (min, avg, max) = (255.756, 350.755, 511.627), stdev = 95.332
[info]   CI (99.9%): [≈ 0, 717.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14538.056 ±(99.9%) 15200.701 B/op [Average]
[info]   (min, avg, max) = (10727.120, 14538.056, 21245.947), stdev = 3947.574
[info]   CI (99.9%): [≈ 0, 29738.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 5.000), stdev = 1.924
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 98.63% complete, ETA 00:00:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 846.443 ops/s
[info] # Warmup Iteration   2: 2928.172 ops/s
[info] # Warmup Iteration   3: 2670.264 ops/s
[info] Iteration   1: 2997.425 ops/s
[info]                  ·gc.alloc.rate:                   909.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              477762.599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      975.282 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 512221.332 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 3386.731 ops/s
[info]                  ·gc.alloc.rate:                   1028.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              477864.130 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.601 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 455734.404 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3371.846 ops/s
[info]                  ·gc.alloc.rate:                   1023.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              477864.121 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 461647.009 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3356.467 ops/s
[info]                  ·gc.alloc.rate:                   1019.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              477864.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.127 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 465721.423 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3388.859 ops/s
[info]                  ·gc.alloc.rate:                   1028.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              477864.120 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      998.910 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 463971.681 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   3300.266 ±(99.9%) 653.815 ops/s [Average]
[info]   (min, avg, max) = (2997.425, 3300.266, 3388.859), stdev = 169.794
[info]   CI (99.9%): [2646.451, 3954.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1001.907 ±(99.9%) 199.122 MB/sec [Average]
[info]   (min, avg, max) = (909.672, 1001.907, 1028.820), stdev = 51.711
[info]   CI (99.9%): [802.785, 1201.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   477843.820 ±(99.9%) 174.835 B/op [Average]
[info]   (min, avg, max) = (477762.599, 477843.820, 477864.131), stdev = 45.404
[info]   CI (99.9%): [477668.986, 478018.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   7.745 ±(99.9%) 31.168 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.745, 19.344), stdev = 8.094
[info]   CI (99.9%): [≈ 0, 38.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   987.396 ±(99.9%) 36.586 MB/sec [Average]
[info]   (min, avg, max) = (975.282, 987.396, 998.910), stdev = 9.501
[info]   CI (99.9%): [950.810, 1023.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   471859.170 ±(99.9%) 88088.158 B/op [Average]
[info]   (min, avg, max) = (455734.404, 471859.170, 512221.332), stdev = 22876.215
[info]   CI (99.9%): [383771.012, 559947.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.095
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 98.97% complete, ETA 00:00:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_3b1ae14a/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 22539.875 ops/s
[info] # Warmup Iteration   2: 56868.016 ops/s
[info] # Warmup Iteration   3: 55886.939 ops/s
[info] Iteration   1: 56462.611 ops/s
[info]                  ·gc.alloc.rate:                   720.903 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.967 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      646.326 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18020.630 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 56090.146 ops/s
[info]                  ·gc.alloc.rate:                   716.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      974.270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27335.560 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 56315.103 ops/s
[info]                  ·gc.alloc.rate:                   719.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.397 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18263.788 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 56345.185 ops/s
[info]                  ·gc.alloc.rate:                   719.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18327.845 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 56020.231 ops/s
[info]                  ·gc.alloc.rate:                   715.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.988 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.874 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18508.686 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   56246.655 ±(99.9%) 712.091 ops/s [Average]
[info]   (min, avg, max) = (56020.231, 56246.655, 56462.611), stdev = 184.928
[info]   CI (99.9%): [55534.564, 56958.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   718.280 ±(99.9%) 8.655 MB/sec [Average]
[info]   (min, avg, max) = (715.521, 718.280, 720.903), stdev = 2.248
[info]   CI (99.9%): [709.625, 726.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20100.007 ±(99.9%) 0.190 B/op [Average]
[info]   (min, avg, max) = (20099.960, 20100.007, 20100.070), stdev = 0.049
[info]   CI (99.9%): [20099.817, 20100.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.050 ±(99.9%) 4.606 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.050, 2.918), stdev = 1.196
[info]   CI (99.9%): [≈ 0, 5.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   717.785 ±(99.9%) 552.394 MB/sec [Average]
[info]   (min, avg, max) = (646.326, 717.785, 974.270), stdev = 143.455
[info]   CI (99.9%): [165.391, 1270.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   20091.302 ±(99.9%) 15608.320 B/op [Average]
[info]   (min, avg, max) = (18020.630, 20091.302, 27335.560), stdev = 4053.431
[info]   CI (99.9%): [4482.982, 35699.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 99.32% complete, ETA 00:00:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69137.707 ops/s
[info] # Warmup Iteration   2: 88029.971 ops/s
[info] # Warmup Iteration   3: 87434.500 ops/s
[info] Iteration   1: 88552.558 ops/s
[info]                  ·gc.alloc.rate:                   578.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.193 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11662.158 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 88642.409 ops/s
[info]                  ·gc.alloc.rate:                   579.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.425 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5795.590 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 87789.266 ops/s
[info]                  ·gc.alloc.rate:                   573.791 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.087 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11691.848 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 88383.926 ops/s
[info]                  ·gc.alloc.rate:                   577.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.797 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11607.218 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 87506.278 ops/s
[info]                  ·gc.alloc.rate:                   571.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.768 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11741.367 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   88174.887 ±(99.9%) 1925.949 ops/s [Average]
[info]   (min, avg, max) = (87506.278, 88174.887, 88642.409), stdev = 500.163
[info]   CI (99.9%): [86248.939, 90100.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   576.360 ±(99.9%) 12.715 MB/sec [Average]
[info]   (min, avg, max) = (571.968, 576.360, 579.451), stdev = 3.302
[info]   CI (99.9%): [563.645, 589.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10288.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10288.005, 10288.005, 10288.005), stdev = 0.001
[info]   CI (99.9%): [10288.004, 10288.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.822 ±(99.9%) 6.586 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.822, 3.881), stdev = 1.710
[info]   CI (99.9%): [≈ 0, 7.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   14.616 ±(99.9%) 117.038 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.616, 68.976), stdev = 30.395
[info]   CI (99.9%): [≈ 0, 131.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   587.854 ±(99.9%) 562.787 MB/sec [Average]
[info]   (min, avg, max) = (326.425, 587.854, 656.193), stdev = 146.154
[info]   CI (99.9%): [25.067, 1150.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10499.636 ±(99.9%) 10127.543 B/op [Average]
[info]   (min, avg, max) = (5795.590, 10499.636, 11741.367), stdev = 2630.091
[info]   CI (99.9%): [372.093, 20627.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 99.66% complete, ETA 00:00:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 77726.106 ops/s
[info] # Warmup Iteration   2: 96126.016 ops/s
[info] # Warmup Iteration   3: 99075.348 ops/s
[info] Iteration   1: 99787.882 ops/s
[info]                  ·gc.alloc.rate:      12.172 MB/sec
[info]                  ·gc.alloc.rate.norm: 192.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 99829.382 ops/s
[info]                  ·gc.alloc.rate:      12.178 MB/sec
[info]                  ·gc.alloc.rate.norm: 192.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 97104.247 ops/s
[info]                  ·gc.alloc.rate:      11.845 MB/sec
[info]                  ·gc.alloc.rate.norm: 192.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 99392.796 ops/s
[info]                  ·gc.alloc.rate:      12.124 MB/sec
[info]                  ·gc.alloc.rate.norm: 192.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 99514.890 ops/s
[info]                  ·gc.alloc.rate:      12.139 MB/sec
[info]                  ·gc.alloc.rate.norm: 192.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   99125.839 ±(99.9%) 4408.413 ops/s [Average]
[info]   (min, avg, max) = (97104.247, 99125.839, 99829.382), stdev = 1144.851
[info]   CI (99.9%): [94717.427, 103534.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   12.091 ±(99.9%) 0.538 MB/sec [Average]
[info]   (min, avg, max) = (11.845, 12.091, 12.178), stdev = 0.140
[info]   CI (99.9%): [11.554, 12.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   192.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (192.004, 192.004, 192.004), stdev = 0.001
[info]   CI (99.9%): [192.004, 192.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # Run complete. Total time: 01:02:22
[info] Benchmark                                                                                 Mode  Cnt         Score        Error   Units
[info] AdtBenchmark.readCirce                                                                   thrpt    5    778860.331 ±  20750.360   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                    thrpt    5      2058.573 ±     54.693  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                               thrpt    5      4160.001 ±      0.001    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           thrpt    5         0.121 ±      0.191  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      thrpt    5         0.244 ±      0.388    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       thrpt    5      2072.063 ±    495.457  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  thrpt    5      4188.298 ±   1076.960    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                         thrpt    5        31.000               counts
[info] AdtBenchmark.readCirce:·gc.time                                                          thrpt    5        29.000                   ms
[info] AdtBenchmark.readJacksonScala                                                            thrpt    5   1659721.253 ±  12420.998   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                             thrpt    5      1181.065 ±      8.790  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        thrpt    5      1120.000 ±      0.001    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    thrpt    5         0.112 ±      0.209  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.107 ±      0.198    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                thrpt    5      1194.087 ±    713.641  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           thrpt    5      1132.213 ±    672.583    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                  thrpt    5        18.000               counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                   thrpt    5        21.000                   ms
[info] AdtBenchmark.readJsoniterScala                                                           thrpt    5   3471615.815 ± 253960.028   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                            thrpt    5       229.394 ±     16.581  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5       104.000 ±      0.001    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   thrpt    5         0.011 ±      0.053  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.005 ±      0.024    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               thrpt    5       204.639 ±    440.501  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          thrpt    5        93.232 ±    200.818    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                 thrpt    5         4.000               counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                  thrpt    5         9.000                   ms
[info] AdtBenchmark.readPlayJson                                                                thrpt    5    172598.478 ±   6084.776   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                 thrpt    5      1445.728 ±     51.549  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                            thrpt    5     13184.002 ±      0.001    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        thrpt    5         0.071 ±      0.122  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   thrpt    5         0.644 ±      1.096    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    thrpt    5      1465.281 ±    684.459  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               thrpt    5     13361.687 ±   6191.964    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                      thrpt    5        22.000               counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                       thrpt    5        28.000                   ms
[info] AdtBenchmark.writeJacksonScala                                                           thrpt    5   2122235.719 ±  49975.121   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                            thrpt    5       690.401 ±     15.698  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       thrpt    5       512.000 ±      0.001    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   thrpt    5         0.167 ±      0.676  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.124 ±      0.499    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               thrpt    5       719.109 ±    542.523  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          thrpt    5       533.136 ±    397.231    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                 thrpt    5        11.000               counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                  thrpt    5        13.000                   ms
[info] AdtBenchmark.writeJsoniterScala                                                          thrpt    5   6857805.549 ± 508495.634   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                           thrpt    5       348.588 ±     25.891  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5        80.000 ±      0.001    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  thrpt    5         0.751 ±      6.351  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.177 ±      1.500    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              thrpt    5       350.388 ±    367.304  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         thrpt    5        80.383 ±     83.547    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                thrpt    5         6.000               counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                 thrpt    5        12.000                   ms
[info] AdtBenchmark.writePlayJson                                                               thrpt    5    317902.471 ±   9203.024   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                thrpt    5      1037.412 ±     29.121  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                           thrpt    5      5136.001 ±      0.001    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       thrpt    5         0.087 ±      0.105  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  thrpt    5         0.433 ±      0.520    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   thrpt    5      1057.549 ±    596.593  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              thrpt    5      5240.009 ±   3115.207    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                     thrpt    5        16.000               counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                      thrpt    5        20.000                   ms
[info] AnyRefsBenchmark.readCirce                                                               thrpt    5   1600161.435 ±  31048.999   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                thrpt    5      2496.628 ±     48.336  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                           thrpt    5      2456.000 ±      0.001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       thrpt    5         0.112 ±      0.193  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  thrpt    5         0.110 ±      0.188    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   thrpt    5      2491.869 ±    735.240  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              thrpt    5      2450.861 ±    691.648    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                     thrpt    5        37.000               counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                      thrpt    5        37.000                   ms
[info] AnyRefsBenchmark.readJacksonScala                                                        thrpt    5   2639944.712 ±  23602.254   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                         thrpt    5      1851.687 ±     16.028  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    thrpt    5      1104.000 ±      0.001    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                thrpt    5         0.125 ±      0.150  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.074 ±      0.089    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            thrpt    5      1812.778 ±    704.364  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5      1080.635 ±    411.577    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                              thrpt    5        27.000               counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                               thrpt    5        33.000                   ms
[info] AnyRefsBenchmark.readJsoniterScala                                                       thrpt    5  10506052.534 ± 322367.886   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                        thrpt    5      1334.938 ±     41.484  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5       200.000 ±      0.001    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               thrpt    5         0.092 ±      0.122  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.014 ±      0.019    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           thrpt    5      1331.838 ±     38.750  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5       199.541 ±      5.850    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                             thrpt    5        20.000               counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                              thrpt    5        19.000                   ms
[info] AnyRefsBenchmark.readPlayJson                                                            thrpt    5    656231.335 ±  22210.666   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                             thrpt    5      1667.810 ±     57.483  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        thrpt    5      4000.001 ±      0.001    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    thrpt    5         0.100 ±      0.164  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.240 ±      0.397    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                thrpt    5      1672.874 ±     64.849  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5      4012.323 ±    176.802    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                  thrpt    5        25.000               counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                   thrpt    5        30.000                   ms
[info] AnyRefsBenchmark.writeCirce                                                              thrpt    5   1940004.284 ±  62059.929   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                               thrpt    5      1794.686 ±     56.539  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                          thrpt    5      1456.000 ±      0.001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      thrpt    5         0.117 ±      0.209  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 thrpt    5         0.095 ±      0.171    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  thrpt    5      1799.474 ±    727.926  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             thrpt    5      1460.320 ±    608.963    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                    thrpt    5        27.000               counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                     thrpt    5        27.000                   ms
[info] AnyRefsBenchmark.writeJacksonScala                                                       thrpt    5   6319299.779 ± 183201.222   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                        thrpt    5      1734.467 ±     50.304  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   thrpt    5       432.000 ±      0.001    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               thrpt    5         0.125 ±      0.204  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.031 ±      0.051    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           thrpt    5      1740.555 ±    559.643  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5       433.478 ±    136.032    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                             thrpt    5        26.000               counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                              thrpt    5        31.000                   ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                      thrpt    5  21825545.699 ± 453288.225   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       thrpt    5       665.572 ±     13.843  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  thrpt    5        48.000 ±      0.001    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              thrpt    5         0.794 ±      6.300  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.057 ±      0.456    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          thrpt    5       654.232 ±      7.611  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5        47.184 ±      1.329    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                            thrpt    5        10.000               counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                             thrpt    5        12.000                   ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                              thrpt    5  22327765.679 ± 153880.168   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               thrpt    5        ≈ 10⁻⁴               MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          thrpt    5        ≈ 10⁻⁵                 B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    thrpt    5           ≈ 0               counts
[info] AnyRefsBenchmark.writePlayJson                                                           thrpt    5   1436567.709 ±  50917.260   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                            thrpt    5      2110.259 ±     73.998  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       thrpt    5      2312.000 ±      0.001    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   thrpt    5         0.112 ±      0.134  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.123 ±      0.148    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               thrpt    5      2153.432 ±    685.901  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5      2358.287 ±    682.714    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                 thrpt    5        32.000               counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                  thrpt    5        37.000                   ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                    thrpt    5     15575.579 ±    704.818   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      1111.250 ±     50.694  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5    112292.235 ±     26.461    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5         0.067 ±      0.105  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5         6.719 ±     10.402    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5      1054.064 ±    566.474  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5    106490.900 ±  55955.688    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                          thrpt    5        16.000               counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                           thrpt    5        16.000                   ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                             thrpt    5     19208.186 ±    755.318   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                              thrpt    5       679.593 ±     26.283  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                         thrpt    5     55680.173 ±     59.206    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.029 ±      0.072  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         2.377 ±      5.847    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5       722.128 ±    582.821  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5     59142.643 ±  46987.719    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                   thrpt    5        11.000               counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                    thrpt    5        12.000                   ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                            thrpt    5     16463.887 ±    358.002   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5       305.414 ±      6.671  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5     29200.027 ±      0.011    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.680 ±      5.727  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5        65.586 ±    552.683    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5       285.326 ±    713.626  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5     27317.953 ±  68346.813    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                  thrpt    5         5.000               counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                   thrpt    5        13.000                   ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                 thrpt    5     16522.652 ±    635.741   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                  thrpt    5       932.310 ±     36.096  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                             thrpt    5     88808.027 ±      0.009    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         thrpt    5         0.042 ±      0.057  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5         3.971 ±      5.443    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5       927.162 ±    578.559  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5     88270.343 ±  53891.643    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                       thrpt    5        14.000               counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                        thrpt    5        15.000                   ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                   thrpt    5     13506.979 ±    339.370   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      1626.617 ±     41.507  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5    189560.173 ±    126.364    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5         0.079 ±      0.143  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5         9.202 ±     16.516    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5      1661.417 ±     73.913  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5    193616.290 ±   7395.112    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                         thrpt    5        25.000               counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                          thrpt    5        25.000                   ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                            thrpt    5     13110.379 ±    298.684   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                             thrpt    5      1430.703 ±     32.626  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        thrpt    5    171760.032 ±      0.377    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.054 ±      0.224  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         6.479 ±     26.722    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5      1402.041 ±    582.123  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5    168338.230 ±  70697.389    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                  thrpt    5        21.000               counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                   thrpt    5        26.000                   ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                           thrpt    5     14627.545 ±    309.269   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5      1565.796 ±     33.492  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5    168472.050 ±      0.185    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5         0.071 ±      0.176  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5         7.604 ±     18.851    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5      1595.248 ±    554.897  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5    171612.504 ±  58311.893    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5        24.000               counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5        24.000                   ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                   thrpt    5     14791.881 ±    250.731   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    thrpt    5      1533.054 ±     25.958  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               thrpt    5    163136.049 ±      0.182    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space           thrpt    5         0.092 ±      0.122  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm      thrpt    5         9.747 ±     12.990    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space       thrpt    5      1527.532 ±    687.829  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm  thrpt    5    162592.999 ±  74889.327    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                         thrpt    5        23.000               counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                          thrpt    5        22.000                   ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                thrpt    5      4512.950 ±     12.587   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                 thrpt    5      1112.621 ±      3.279  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                            thrpt    5    388048.092 ±      1.177    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        thrpt    5         0.050 ±      0.091  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   thrpt    5        17.416 ±     31.826    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    thrpt    5      1110.779 ±    679.987  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               thrpt    5    387428.831 ± 237910.245    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                      thrpt    5        17.000               counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                       thrpt    5        18.000                   ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                        thrpt    5      8623.314 ±    212.944   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1262.889 ±     30.900  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5    230474.028 ±     17.045    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.071 ±      0.122  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5        12.915 ±     22.111    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5      1259.373 ±    594.125  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5    229901.092 ± 110593.787    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                              thrpt    5        19.000               counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                               thrpt    5        19.000                   ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                 thrpt    5     24733.884 ±   1119.665   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5       915.012 ±     40.452  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     58228.116 ±     63.973    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.062 ±      0.057  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         3.982 ±      3.777    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5       926.021 ±    569.068  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5     58981.526 ±  37394.399    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                       thrpt    5        14.000               counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                        thrpt    5        16.000                   ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                thrpt    5     28336.636 ±    893.760   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       514.320 ±     16.380  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     28568.015 ±      0.006    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.573 ±      4.530  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5        31.707 ±    250.608    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5       462.551 ±    696.453  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5     25725.068 ±  39135.446    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5         7.000               counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5         8.000                   ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                thrpt    5     15076.467 ±    159.104   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5      1504.725 ±     15.138  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5    157088.029 ±      0.305    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.083 ±      0.113  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         8.694 ±     11.872    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5      1538.555 ±    705.109  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5    160631.293 ±  74040.240    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                      thrpt    5        23.000               counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                       thrpt    5        31.000                   ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                               thrpt    5     17966.139 ±    374.257   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5      1569.863 ±     32.747  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5    137528.025 ±      0.013    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.079 ±      0.143  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         6.931 ±     12.547    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5      1529.756 ±    707.435  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5    134074.237 ±  64188.246    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5        23.000               counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5        20.000                   ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5     18228.197 ±    765.088   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5      1532.523 ±     65.071  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5    132320.026 ±      0.018    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space               thrpt    5         0.087 ±      0.105  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm          thrpt    5         7.541 ±      8.909    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space           thrpt    5      1528.103 ±    669.184  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm      thrpt    5    132025.745 ±  61082.237    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5        23.000               counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                              thrpt    5        23.000                   ms
[info] ArrayOfBooleansBenchmark.readCirce                                                       thrpt    5    371750.444 ±  10553.546   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      1880.216 ±     53.261  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5      7960.001 ±      0.001    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.104 ±      0.057  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.440 ±      0.230    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5      1873.898 ±    693.615  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5      7934.562 ±   2992.322    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                             thrpt    5        28.000               counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                              thrpt    5        26.000                   ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                thrpt    5    713648.055 ±  42153.474   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5       591.269 ±     34.882  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5      1304.001 ±      0.001    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.037 ±      0.119  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.082 ±      0.259    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5       588.266 ±    556.111  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5      1299.314 ±   1252.171    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                      thrpt    5         9.000               counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                       thrpt    5        11.000                   ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                               thrpt    5   1693066.630 ±  62821.706   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       327.014 ±     12.217  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5       304.000 ±      0.001    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.669 ±      5.616  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         0.617 ±      5.179    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5       351.037 ±    366.485  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5       326.791 ±    351.319    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         6.000               counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                      thrpt    5        11.000                   ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                    thrpt    5    105158.305 ±   2516.960   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      3819.885 ±     92.093  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5     57176.004 ±      0.001    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5         0.146 ±      0.283  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5         2.182 ±      4.245    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5      3805.198 ±    602.114  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     56956.714 ±   8958.981    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                          thrpt    5        56.000               counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                           thrpt    5        60.000                   ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                      thrpt    5    321952.075 ±   6623.610   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                       thrpt    5       788.747 ±     16.375  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                  thrpt    5      3856.001 ±      0.001    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              thrpt    5         0.058 ±      0.154  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.285 ±      0.751    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          thrpt    5       783.740 ±    694.847  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      3830.161 ±   3364.753    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                            thrpt    5        12.000               counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                             thrpt    5        12.000                   ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                               thrpt    5   1109951.123 ±  37424.044   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                thrpt    5       784.190 ±     26.285  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           thrpt    5      1112.000 ±      0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.071 ±      0.201  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         0.101 ±      0.288    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5       784.548 ±    681.850  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5      1111.592 ±    944.922    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                     thrpt    5        12.000               counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                      thrpt    5        14.000                   ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                              thrpt    5   2440942.662 ±  30160.627   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                               thrpt    5      1128.997 ±     13.937  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          thrpt    5       728.000 ±      0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.092 ±      0.044  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0.059 ±      0.029    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5      1119.991 ±    714.824  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5       722.187 ±    460.767    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                    thrpt    5        17.000               counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                     thrpt    5        16.000                   ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                      thrpt    5   2556449.146 ±  29939.402   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  thrpt    5        ≈ 10⁻⁴                 B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                            thrpt    5           ≈ 0               counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                   thrpt    5    557484.778 ±   5415.581   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                    thrpt    5       657.379 ±      6.398  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                               thrpt    5      1856.001 ±      0.001    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           thrpt    5         0.827 ±      6.763  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5         2.340 ±     19.134    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5       712.931 ±    552.599  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5      2013.399 ±   1576.841    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                         thrpt    5        11.000               counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                          thrpt    5        15.000                   ms
[info] ArrayOfBytesBenchmark.readCirce                                                          thrpt    5    174811.368 ±    922.048   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      2101.563 ±     10.950  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5     18920.002 ±      0.001    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.079 ±      0.067  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.712 ±      0.603    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      2081.243 ±    557.850  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5     18738.001 ±   5090.597    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                thrpt    5        31.000               counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                 thrpt    5        28.000                   ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                   thrpt    5    444539.903 ±   5884.498   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5       368.298 ±      4.911  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5      1304.001 ±      0.001    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.029 ±      0.091  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.103 ±      0.324    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5       362.086 ±    321.572  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5      1282.764 ±   1158.992    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                         thrpt    5         6.000               counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                          thrpt    5         8.000                   ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                  thrpt    5   1083954.915 ±  85011.395   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       209.352 ±     16.286  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5       304.000 ±      0.001    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.005 ±      0.037  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.007 ±      0.053    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5       204.624 ±    440.468  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5       298.021 ±    642.157    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                        thrpt    5         4.000               counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                         thrpt    5        10.000                   ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                       thrpt    5     80796.018 ±    984.532   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      3334.053 ±     41.618  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5     64952.005 ±      0.001    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5         0.187 ±      0.305  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         3.652 ±      5.962    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5      3325.044 ±    575.953  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     64781.222 ±  11666.421    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                             thrpt    5        49.000               counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                              thrpt    5        53.000                   ms
[info] ArrayOfBytesBenchmark.writeCirce                                                         thrpt    5    279894.777 ±   3216.365   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1386.971 ±     15.806  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5      7800.001 ±      0.001    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.079 ±      0.067  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.445 ±      0.376    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      1390.354 ±    595.688  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      7818.601 ±   3327.896    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                               thrpt    5        21.000               counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                thrpt    5        24.000                   ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                 thrpt    5   1890649.512 ±  74748.437   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       509.285 ±     20.009  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5       424.000 ±      0.001    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.772 ±      6.290  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.644 ±      5.245    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5       509.281 ±    651.000  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5       423.490 ±    534.727    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5         8.000               counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5        12.000                   ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5   1832196.620 ±  16293.931   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5        ≈ 10⁻⁴                 B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0               counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                      thrpt    5     47326.565 ±    697.569   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5      1994.596 ±     29.186  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5     66336.009 ±      0.001    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5         0.108 ±      0.154  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5         3.598 ±      5.114    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5      2001.332 ±     99.434  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     66561.579 ±   3716.128    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                            thrpt    5        30.000               counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                             thrpt    5        31.000                   ms
[info] ArrayOfDoublesBenchmark.readCirce                                                        thrpt    5     27096.535 ±    508.395   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1551.718 ±     29.111  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5     90143.898 ±      1.013    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.083 ±      0.113  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5         4.842 ±      6.637    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5      1528.594 ±    689.989  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5     88826.568 ±  41063.311    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                              thrpt    5        23.000               counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                               thrpt    5        22.000                   ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                 thrpt    5     62374.837 ±    889.621   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5      1029.445 ±     15.108  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     25976.007 ±      0.001    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.046 ±      0.067  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         1.156 ±      1.700    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5       994.588 ±     32.647  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5     25096.950 ±    999.364    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                       thrpt    5        15.000               counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                        thrpt    5        18.000                   ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                thrpt    5     83345.367 ±    476.736   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       537.156 ±      3.127  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     10144.005 ±      0.001    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.706 ±      5.539  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5        13.325 ±    104.609    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5       525.418 ±    691.441  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5      9925.067 ±  13091.025    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                      thrpt    5         8.000               counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                       thrpt    5         9.000                   ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                     thrpt    5     34093.172 ±    750.392   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      1736.019 ±     38.373  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5     80152.013 ±      0.005    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5         0.092 ±      0.156  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5         4.231 ±      7.220    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5      1740.510 ±    559.844  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5     80349.402 ±  25152.299    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                           thrpt    5        26.000               counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                            thrpt    5        27.000                   ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                       thrpt    5     38530.354 ±   1881.267   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5       519.212 ±     24.917  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5     21208.011 ±      0.002    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.712 ±      5.862  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5        28.997 ±    238.826    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5       507.213 ±    647.142  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     20770.379 ±  27135.590    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                             thrpt    5         8.000               counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                              thrpt    5        11.000                   ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                thrpt    5     41403.762 ±   2551.273   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5       373.973 ±     22.810  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5     14216.010 ±      0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.029 ±      0.108  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         1.115 ±      4.095    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5       373.490 ±    599.699  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5     14212.587 ±  22962.312    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                      thrpt    5         6.000               counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                       thrpt    5         7.000                   ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                               thrpt    5     46302.125 ±    423.299   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       406.923 ±      3.783  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5     13832.009 ±      0.002    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.780 ±      6.304  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5        26.469 ±    214.029    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5       429.645 ±    569.461  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5     14612.228 ±  19481.025    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5         7.000               counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5        12.000                   ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5     46463.523 ±    339.822   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5       355.165 ±      2.731  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5     12032.009 ±      0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space               thrpt    5         0.761 ±      6.462  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm          thrpt    5        25.738 ±    218.589    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space           thrpt    5       299.195 ±    152.766  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm      thrpt    5     10134.228 ±   5116.028    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5         5.000               counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                              thrpt    5        10.000                   ms
[info] ArrayOfDurationsBenchmark.readCirce                                                      thrpt    5     20069.911 ±    419.200   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                       thrpt    5       752.865 ±     15.948  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                  thrpt    5     59038.825 ±      8.697    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space                              thrpt    5         0.062 ±      0.196  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5         4.901 ±     15.398    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                          thrpt    5       786.987 ±    695.912  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     61713.540 ±  54527.839    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                            thrpt    5        12.000               counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                             thrpt    5        11.000                   ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                               thrpt    5     19764.566 ±    772.080   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                thrpt    5       560.814 ±     22.510  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                           thrpt    5     44663.794 ±     59.951    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.058 ±      0.183  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         4.667 ±     14.787    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5       588.324 ±    561.911  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5     46896.709 ±  45307.576    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                     thrpt    5         9.000               counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                      thrpt    5        10.000                   ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                              thrpt    5     75868.633 ±   1308.845   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5       197.427 ±      3.448  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      4096.005 ±      0.001    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.008 ±      0.040  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0.157 ±      0.837    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5       204.618 ±    440.456  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5      4243.786 ±   9135.515    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                    thrpt    5         4.000               counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                     thrpt    5         9.000                   ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                   thrpt    5     16620.143 ±    302.751   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                    thrpt    5      1055.824 ±     19.261  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                               thrpt    5     99984.117 ±      0.767    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           thrpt    5         0.062 ±      0.080  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5         5.921 ±      7.686    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5      1055.913 ±    552.639  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5    100001.300 ±  52661.858    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                         thrpt    5        16.000               counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                          thrpt    5        18.000                   ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                     thrpt    5     58543.738 ±   1963.410   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                      thrpt    5      1072.129 ±     35.554  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                 thrpt    5     28824.007 ±      0.002    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                             thrpt    5         0.075 ±      0.146  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5         2.020 ±      3.968    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                         thrpt    5      1052.861 ±    564.591  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5     28313.340 ±  15448.216    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                           thrpt    5        16.000               counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                            thrpt    5        17.000                   ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                             thrpt    5    250046.711 ±   6895.994   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5       396.491 ±     10.890  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      2496.002 ±      0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.777 ±      6.220  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         4.883 ±     39.096    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5       429.873 ±    570.121  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5      2705.412 ±   3565.722    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5         7.000               counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5        12.000                   ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                     thrpt    5    336450.195 ±  14365.864   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                      thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                 thrpt    5         0.001 ±      0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                           thrpt    5           ≈ 0               counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                  thrpt    5     80531.547 ±   1746.139   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                   thrpt    5      1098.599 ±     24.312  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                              thrpt    5     21472.005 ±      0.001    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          thrpt    5         0.087 ±      0.036  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5         1.709 ±      0.694    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5      1111.103 ±    679.837  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5     21717.542 ±  13316.062    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                        thrpt    5        17.000               counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                         thrpt    5        17.000                   ms
[info] ArrayOfEnumsBenchmark.readCirce                                                          thrpt    5     27902.868 ±    288.336   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5       579.935 ±      5.494  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5     32711.980 ±     53.365    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.740 ±      5.970  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5        41.895 ±    338.085    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5       585.840 ±    561.451  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5     33050.505 ±  31739.913    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                thrpt    5         9.000               counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                 thrpt    5        12.000                   ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                  thrpt    5    123291.621 ±  10650.205   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       481.239 ±     41.291  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5      6144.003 ±      0.001    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.687 ±      5.601  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         8.577 ±     69.809    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5       510.612 ±    649.558  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      6518.734 ±   8317.664    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                        thrpt    5         8.000               counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                         thrpt    5        11.000                   ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                       thrpt    5     22650.624 ±    563.363   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      1250.841 ±     31.544  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5     86920.027 ±      0.067    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5         0.054 ±      0.044  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         3.759 ±      3.033    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5      1262.780 ±    571.853  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     87727.065 ±  38873.175    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                             thrpt    5        19.000               counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                              thrpt    5        24.000                   ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                         thrpt    5    169749.577 ±    694.561   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5       850.660 ±      3.393  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5      7888.002 ±      0.001    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.071 ±      0.122  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.656 ±      1.127    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5       849.850 ±    684.833  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      7880.858 ±   6358.292    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                               thrpt    5        13.000               counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                thrpt    5        12.000                   ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                 thrpt    5    567739.612 ±  20160.601   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       435.682 ±     15.544  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      1208.001 ±      0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.761 ±      6.332  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         2.102 ±     17.480    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5       443.570 ±    747.171  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5      1227.997 ±   2052.092    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5         7.000               counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5        10.000                   ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5    571548.111 ±   1920.163   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5         0.001 ±      0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0               counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                      thrpt    5    295897.604 ±   9530.627   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5       818.078 ±     26.526  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5      4352.001 ±      0.001    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5         0.050 ±      0.166  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.266 ±      0.890    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5       789.519 ±    694.209  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      4202.225 ±   3739.705    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                            thrpt    5        12.000               counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                             thrpt    5        13.000                   ms
[info] ArrayOfFloatsBenchmark.readCirce                                                         thrpt    5     38633.428 ±    409.158   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      1723.115 ±     18.657  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5     70200.012 ±      0.014    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.087 ±      0.119  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5         3.559 ±      4.817    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      1668.241 ±     65.018  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5     67964.106 ±   2371.124    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                               thrpt    5        25.000               counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                thrpt    5        23.000                   ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                  thrpt    5    107424.011 ±   1570.288   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5      1184.736 ±     17.373  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5     17360.004 ±      0.001    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.075 ±      0.156  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         1.100 ±      2.312    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5      1197.836 ±    700.957  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5     17548.776 ±  10171.295    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                        thrpt    5        18.000               counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                         thrpt    5        21.000                   ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                 thrpt    5    156182.444 ±  13053.230   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       101.609 ±      8.439  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      1024.003 ±      0.001    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.431 ±      3.640  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         4.288 ±     36.217    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5       102.300 ±    539.400  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5      1021.599 ±   5386.651    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         2.000               counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                        thrpt    5         5.000                   ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                      thrpt    5     39461.637 ±   1373.839   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      2056.007 ±     72.390  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5     81994.724 ±    367.775    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5         0.100 ±      0.132  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5         3.980 ±      5.167    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5      2018.669 ±     68.585  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     80513.365 ±   4756.684    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                            thrpt    5        30.000               counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                             thrpt    5        34.000                   ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                        thrpt    5     80209.041 ±    960.877   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5       615.979 ±      7.356  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5     12088.005 ±      0.001    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.722 ±      5.862  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5        14.168 ±    114.974    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5       651.824 ±      5.124  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5     12791.500 ±    132.311    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                              thrpt    5        10.000               counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                               thrpt    5        12.000                   ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                 thrpt    5    102218.152 ±    574.019   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                  thrpt    5       337.696 ±      2.015  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             thrpt    5      5200.004 ±      0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.025 ±      0.105  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.384 ±      1.606    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5       359.551 ±    327.155  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5      5537.469 ±   5062.294    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                       thrpt    5         6.000               counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                        thrpt    5         7.000                   ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                thrpt    5    115049.125 ±   4181.445   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 thrpt    5       352.019 ±     12.610  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            thrpt    5      4816.004 ±      0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.758 ±      6.394  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5        10.542 ±     88.945    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5       298.951 ±    151.907  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5      4091.546 ±   2129.011    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                      thrpt    5         5.000               counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                       thrpt    5        10.000                   ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                        thrpt    5    116656.708 ±   1346.003   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         thrpt    5       265.036 ±      3.101  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    thrpt    5      3576.003 ±      0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                thrpt    5         0.762 ±      6.403  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm           thrpt    5        10.294 ±     86.474    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space            thrpt    5       219.214 ±    487.288  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm       thrpt    5      2960.491 ±   6580.858    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              thrpt    5         4.000               counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                               thrpt    5        10.000                   ms
[info] ArrayOfInstantsBenchmark.readCirce                                                       thrpt    5      9852.536 ±    161.688   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      1617.985 ±     27.032  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5    258492.343 ±     26.799    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.079 ±      0.132  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5        12.648 ±     21.240    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5      1598.146 ±    574.555  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5    255325.242 ±  91826.103    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                             thrpt    5        24.000               counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                              thrpt    5        23.000                   ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                thrpt    5     10542.030 ±    246.195   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5      1628.418 ±     38.154  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5    243146.380 ±     57.034    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.079 ±      0.174  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5        11.784 ±     25.863    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5      1609.438 ±    562.380  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5    240243.355 ±  80521.177    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                      thrpt    5        24.000               counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                       thrpt    5        28.000                   ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                               thrpt    5    108328.992 ±   1608.587   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       281.882 ±      4.153  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      4096.004 ±      0.001    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.546 ±      4.506  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         7.959 ±     65.726    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5       285.989 ±    159.430  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5      4156.977 ±   2360.571    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         5.000               counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                      thrpt    5        11.000                   ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                    thrpt    5      5946.589 ±     70.141   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      1570.169 ±     18.799  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5    415600.072 ±      0.019    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5         0.054 ±      0.091  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5        14.320 ±     24.134    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5      1541.190 ±    695.418  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5    408030.516 ± 187900.641    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                          thrpt    5        23.000               counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                           thrpt    5        25.000                   ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                      thrpt    5     25030.572 ±   1410.662   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                       thrpt    5      1407.002 ±     78.499  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                  thrpt    5     88463.970 ±     43.410    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              thrpt    5         0.075 ±      0.044  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5         4.715 ±      2.825    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          thrpt    5      1392.703 ±    595.262  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     87571.354 ±  37340.164    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                            thrpt    5        21.000               counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                             thrpt    5        22.000                   ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                              thrpt    5    347514.420 ±   5171.634   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                               thrpt    5       766.595 ±     11.741  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      3472.001 ±      0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.067 ±      0.143  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0.302 ±      0.650    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5       785.482 ±    693.513  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5      3557.532 ±   3140.209    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                    thrpt    5        12.000               counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                     thrpt    5        14.000                   ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                      thrpt    5    375210.521 ±   2558.663   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  thrpt    5         0.001 ±      0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                            thrpt    5           ≈ 0               counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                   thrpt    5     28203.352 ±    604.520   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                    thrpt    5      1483.444 ±     31.945  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                               thrpt    5     82792.015 ±      0.006    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           thrpt    5         0.096 ±      0.072  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5         5.345 ±      4.020    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5      1451.341 ±    658.919  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5     81018.427 ±  37492.585    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                         thrpt    5        22.000               counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                          thrpt    5        23.000                   ms
[info] ArrayOfIntsBenchmark.readCirce                                                           thrpt    5    138931.135 ±   3898.119   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                            thrpt    5      2262.982 ±     63.288  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                       thrpt    5     25640.003 ±      0.001    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   thrpt    5         0.121 ±      0.067  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5         1.368 ±      0.759    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               thrpt    5      2286.790 ±    575.615  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5     25901.743 ±   5916.620    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                 thrpt    5        34.000               counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                  thrpt    5        32.000                   ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                    thrpt    5    319019.721 ±   9115.998   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                     thrpt    5       450.777 ±     13.097  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                thrpt    5      2224.001 ±      0.001    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            thrpt    5         0.046 ±      0.207  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.225 ±      1.019    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        thrpt    5       441.911 ±    621.484  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5      2178.095 ±   3031.609    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                          thrpt    5         7.000               counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                           thrpt    5         8.000                   ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                   thrpt    5    730053.781 ±  13002.052   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                    thrpt    5       475.041 ±      8.406  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               thrpt    5      1024.001 ±      0.001    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.664 ±      5.542  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         1.434 ±     11.962    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5       445.568 ±    625.230  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5       961.556 ±   1364.690    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                         thrpt    5         7.000               counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                          thrpt    5         9.000                   ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                        thrpt    5     70185.637 ±   2357.003   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                         thrpt    5      2981.266 ±     99.222  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                    thrpt    5     66856.006 ±      0.001    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                thrpt    5         0.179 ±      0.146  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           thrpt    5         4.018 ±      3.354    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            thrpt    5      2981.139 ±    573.280  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5     66845.128 ±  11929.556    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                              thrpt    5        44.000               counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                               thrpt    5        46.000                   ms
[info] ArrayOfIntsBenchmark.writeCirce                                                          thrpt    5    231135.930 ±   2202.891   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                           thrpt    5      1625.822 ±     15.834  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                      thrpt    5     11072.002 ±      0.001    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.079 ±      0.067  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.539 ±      0.453    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      1596.720 ±    595.940  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5     10875.116 ±   4112.507    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                thrpt    5        24.000               counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                 thrpt    5        25.000                   ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                   thrpt    5    853347.656 ±  11746.164   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                    thrpt    5       672.264 ±      9.357  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               thrpt    5      1240.000 ±      0.001    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.075 ±      0.217  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.138 ±      0.400    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5       716.387 ±    561.030  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5      1321.476 ±   1037.080    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                         thrpt    5        11.000               counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                          thrpt    5        13.000                   ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                  thrpt    5   1188204.631 ±  18530.245   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                   thrpt    5       646.259 ±     10.601  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              thrpt    5       856.000 ±      0.001    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.071 ±      0.176  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.094 ±      0.233    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5       653.839 ±      4.600  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5       866.051 ±     13.464    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                        thrpt    5        10.000               counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                         thrpt    5         9.000                   ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                          thrpt    5   1105282.666 ±   8717.334   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      thrpt    5        ≈ 10⁻³                 B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                thrpt    5           ≈ 0               counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                       thrpt    5     33861.336 ±    715.838   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                        thrpt    5      1831.297 ±     38.272  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                   thrpt    5     85129.984 ±     16.974    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               thrpt    5         0.079 ±      0.119  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         3.679 ±      5.574    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5      1795.664 ±    653.459  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     83473.117 ±  30265.348    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                             thrpt    5        27.000               counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                              thrpt    5        30.000                   ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                               thrpt    5    194522.293 ±   9095.779   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                thrpt    5      1034.140 ±     47.797  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                           thrpt    5      8368.002 ±      0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.067 ±      0.132  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         0.539 ±      1.066    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5      1061.332 ±    599.850  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5      8601.282 ±   5334.426    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                     thrpt    5        16.000               counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                      thrpt    5        19.000                   ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                              thrpt    5    280177.398 ±   4297.708   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5       729.232 ±     11.102  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      4096.002 ±      0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.087 ±      0.154  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0.491 ±      0.863    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5       788.902 ±    699.418  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5      4433.325 ±   3976.988    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                    thrpt    5        12.000               counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                     thrpt    5        12.000                   ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                   thrpt    5     66554.367 ±   2046.632   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                    thrpt    5      2722.604 ±     84.685  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                               thrpt    5     64384.006 ±      0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           thrpt    5         0.096 ±      0.146  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5         2.266 ±      3.456    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5      2707.279 ±     61.592  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5     64025.546 ±   2741.643    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                         thrpt    5        40.000               counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                          thrpt    5        47.000                   ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                              thrpt    5    569266.773 ±   4592.606   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                               thrpt    5       575.789 ±      4.916  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                          thrpt    5      1592.001 ±      0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.071 ±      0.231  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0.196 ±      0.638    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5       587.811 ±    557.853  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5      1625.779 ±   1549.386    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                    thrpt    5         9.000               counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                     thrpt    5        12.000                   ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                             thrpt    5    538228.051 ±  25090.320   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5       413.069 ±     19.310  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      1208.001 ±      0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.764 ±      6.286  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         2.252 ±     18.543    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5       429.495 ±    570.180  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5      1258.739 ±   1717.433    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5         7.000               counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5        12.000                   ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                     thrpt    5    557261.731 ±  12266.044   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                      thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                 thrpt    5         0.001 ±      0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                           thrpt    5           ≈ 0               counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                  thrpt    5    313173.297 ±  10152.667   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                   thrpt    5       862.762 ±     28.006  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                              thrpt    5      4336.001 ±      0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          thrpt    5         0.100 ±      0.250  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.501 ±      1.258    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5       856.355 ±    683.639  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      4303.462 ±   3426.065    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                        thrpt    5        13.000               counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                         thrpt    5        16.000                   ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                 thrpt    5     10615.953 ±    304.650   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                  thrpt    5      1357.583 ±     38.137  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                             thrpt    5    201270.128 ±     32.172    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                         thrpt    5         0.079 ±      0.104  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                    thrpt    5        11.722 ±     15.469    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                     thrpt    5      1392.596 ±    573.288  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                thrpt    5    206405.969 ±  81765.630    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                       thrpt    5        21.000               counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                        thrpt    5        20.000                   ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                          thrpt    5     11167.673 ±    309.983   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                           thrpt    5      1323.619 ±     36.399  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                      thrpt    5    186557.488 ±     67.102    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                  thrpt    5         0.062 ±      0.057  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm             thrpt    5         8.799 ±      7.935    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space              thrpt    5      1335.667 ±     44.183  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm         thrpt    5    188270.262 ±  10704.134    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                thrpt    5        20.000               counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                 thrpt    5        24.000                   ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                         thrpt    5    146228.419 ±   4856.288   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                          thrpt    5       951.357 ±     31.386  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                     thrpt    5     10240.003 ±      0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                 thrpt    5         0.062 ±      0.150  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm            thrpt    5         0.674 ±      1.629    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space             thrpt    5       994.110 ±     16.793  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5     10700.712 ±    341.968    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                               thrpt    5        15.000               counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                thrpt    5        14.000                   ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                              thrpt    5      8889.213 ±    122.023   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                               thrpt    5      1643.908 ±     21.466  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                          thrpt    5    291032.450 ±      3.466    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                      thrpt    5         0.042 ±      0.113  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                 thrpt    5         7.365 ±     20.059    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                  thrpt    5      1678.886 ±     53.776  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm             thrpt    5    297229.557 ±  11372.499    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                    thrpt    5        25.000               counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                     thrpt    5        27.000                   ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                thrpt    5     22953.117 ±    840.843   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                 thrpt    5      1046.302 ±     38.221  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                            thrpt    5     71745.492 ±     51.079    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                        thrpt    5         0.058 ±      0.088  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                   thrpt    5         3.993 ±      5.990    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                    thrpt    5      1052.856 ±    592.977  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm               thrpt    5     72161.532 ±  39207.312    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                      thrpt    5        16.000               counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                       thrpt    5        16.000                   ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                        thrpt    5    729026.540 ±   8734.152   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                         thrpt    5      1315.514 ±     16.098  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                    thrpt    5      2840.001 ±      0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                thrpt    5         0.092 ±      0.072  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm           thrpt    5         0.198 ±      0.153    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space            thrpt    5      1322.557 ±     49.699  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5      2855.198 ±     97.908    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                              thrpt    5        20.000               counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                               thrpt    5        21.000                   ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                thrpt    5    581555.588 ±   4603.604   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                 thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm            thrpt    5         0.001 ±      0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                      thrpt    5           ≈ 0               counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                             thrpt    5     25017.533 ±   1248.380   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                              thrpt    5      1055.666 ±     51.213  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                         thrpt    5     66414.890 ±    164.681    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                     thrpt    5         0.071 ±      0.146  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                thrpt    5         4.458 ±      9.114    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                 thrpt    5      1044.726 ±    559.428  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm            thrpt    5     65770.528 ±  36793.575    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                   thrpt    5        16.000               counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                    thrpt    5        18.000                   ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                     thrpt    5     27936.249 ±    745.963   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                      thrpt    5      1516.454 ±     41.200  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                 thrpt    5     85439.900 ±      0.999    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space                             thrpt    5         0.096 ±      0.122  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5         5.396 ±      6.887    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         thrpt    5      1529.236 ±    690.281  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5     86144.161 ±  38192.361    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                           thrpt    5        23.000               counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                            thrpt    5        22.000                   ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                              thrpt    5     31833.253 ±    356.603   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                               thrpt    5      1453.460 ±     16.413  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                          thrpt    5     71861.790 ±     49.739    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.050 ±      0.166  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         2.468 ±      8.209    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5      1472.582 ±    690.920  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5     72822.674 ±  34774.743    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                    thrpt    5        22.000               counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                     thrpt    5        27.000                   ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                             thrpt    5    271557.917 ±   9618.715   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                              thrpt    5       706.776 ±     25.351  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      4096.002 ±      0.001    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.071 ±      0.091  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         0.411 ±      0.545    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5       727.049 ±    566.427  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5      4212.213 ±   3238.054    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                   thrpt    5        11.000               counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                    thrpt    5        10.000                   ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                  thrpt    5     18191.449 ±    327.288   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                   thrpt    5      1789.485 ±     32.059  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                              thrpt    5    154840.024 ±      0.013    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                          thrpt    5         0.092 ±      0.122  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5         7.921 ±     10.482    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5      1815.809 ±    700.115  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5    157063.124 ±  57722.844    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                        thrpt    5        27.000               counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                         thrpt    5        30.000                   ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                    thrpt    5     53275.116 ±   1910.971   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                     thrpt    5      1405.580 ±     50.505  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                thrpt    5     41528.008 ±      0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                            thrpt    5         0.075 ±      0.146  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5         2.213 ±      4.280    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                        thrpt    5      1392.598 ±    574.601  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     41158.446 ±  17567.613    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                          thrpt    5        21.000               counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                           thrpt    5        22.000                   ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                            thrpt    5   1152295.506 ±  10998.563   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                             thrpt    5      1235.716 ±     11.632  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      1688.000 ±      0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.096 ±      0.044  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         0.131 ±      0.059    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5      1188.123 ±    695.801  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5      1622.975 ±    949.820    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                  thrpt    5        18.000               counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                   thrpt    5        17.000                   ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                    thrpt    5    712542.465 ±  19466.635   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                     thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                thrpt    5         0.001 ±      0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                          thrpt    5           ≈ 0               counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                 thrpt    5     58953.631 ±    417.127   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                  thrpt    5      1370.131 ±      9.727  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                             thrpt    5     36584.007 ±      0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                         thrpt    5         0.100 ±      0.154  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5         2.667 ±      4.113    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5      1381.914 ±    518.700  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5     36895.068 ±  13644.661    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                       thrpt    5        21.000               counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                        thrpt    5        23.000                   ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                     thrpt    5     16844.550 ±    576.595   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                      thrpt    5      1503.247 ±     51.329  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                 thrpt    5    140476.955 ±     24.432    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                             thrpt    5         0.071 ±      0.091  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5         6.617 ±      8.621    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         thrpt    5      1463.547 ±    705.700  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5    136890.753 ±  70578.498    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                           thrpt    5        22.000               counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                            thrpt    5        24.000                   ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                              thrpt    5     17854.964 ±    199.197   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                               thrpt    5      1384.399 ±     15.840  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                          thrpt    5    122049.921 ±     60.926    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.071 ±      0.072  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         6.237 ±      6.284    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5      1402.144 ±    531.329  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5    123642.225 ±  48343.139    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                    thrpt    5        21.000               counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                     thrpt    5        26.000                   ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                             thrpt    5    304282.774 ±   7375.141   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                              thrpt    5       791.765 ±     19.358  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      4096.001 ±      0.001    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.075 ±      0.134  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         0.388 ±      0.696    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5       793.365 ±    694.323  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5      4106.611 ±   3643.819    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                   thrpt    5        12.000               counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                    thrpt    5        11.000                   ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                  thrpt    5     12403.692 ±    322.802   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                   thrpt    5      1696.309 ±     44.575  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                              thrpt    5    215256.048 ±      0.123    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                          thrpt    5         0.054 ±      0.122  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5         6.855 ±     15.327    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5      1746.395 ±    563.498  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5    221590.220 ±  69801.226    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                        thrpt    5        26.000               counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                         thrpt    5        28.000                   ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                    thrpt    5     39735.072 ±   1863.524   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                     thrpt    5      1306.929 ±     61.287  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                thrpt    5     51767.905 ±      0.909    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                            thrpt    5         0.087 ±      0.154  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5         3.468 ±      6.125    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                        thrpt    5      1323.680 ±     48.494  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     52433.997 ±   1617.785    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                          thrpt    5        20.000               counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                           thrpt    5        21.000                   ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                            thrpt    5   1235552.300 ±  14456.762   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                             thrpt    5      1124.137 ±     13.654  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      1432.000 ±      0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.096 ±      0.176  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         0.122 ±      0.225    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5      1120.154 ±    694.794  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5      1426.849 ±    882.357    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                  thrpt    5        17.000               counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                   thrpt    5        17.000                   ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                    thrpt    5   1289020.337 ±  65891.431   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                     thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                thrpt    5        ≈ 10⁻³                 B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                          thrpt    5           ≈ 0               counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                 thrpt    5     36024.400 ±   1027.212   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                  thrpt    5      1089.734 ±     30.841  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                             thrpt    5     47617.062 ±      9.045    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                         thrpt    5         0.071 ±      0.108  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5         3.092 ±      4.678    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5      1110.978 ±    702.575  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5     48534.939 ±  30356.067    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                       thrpt    5        17.000               counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                        thrpt    5        22.000                   ms
[info] ArrayOfLongsBenchmark.readCirce                                                          thrpt    5    131805.639 ±   3264.167   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      2260.833 ±     55.890  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5     27000.003 ±      0.001    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.104 ±      0.150  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5         1.244 ±      1.812    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      2220.505 ±    729.614  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5     26522.028 ±   8878.763    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                thrpt    5        33.000               counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                 thrpt    5        33.000                   ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                   thrpt    5    250333.277 ±   6824.516   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5       549.657 ±     14.909  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5      3456.002 ±      0.001    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.058 ±      0.154  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.365 ±      0.961    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5       588.224 ±    561.764  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5      3695.989 ±   3498.216    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                         thrpt    5         9.000               counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                          thrpt    5        10.000                   ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                  thrpt    5    510173.855 ±  12633.561   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       643.066 ±     16.002  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5      1984.001 ±      0.001    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.062 ±      0.150  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.193 ±      0.466    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5       591.158 ±    564.974  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      1824.620 ±   1753.105    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                        thrpt    5         9.000               counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                         thrpt    5         8.000                   ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                       thrpt    5     68175.605 ±   1618.990   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      2956.435 ±     82.676  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5     68261.460 ±    535.208    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5         0.150 ±      0.154  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         3.459 ±      3.534    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5      2980.802 ±    595.778  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     68834.137 ±  14482.117    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                             thrpt    5        44.000               counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                              thrpt    5        49.000                   ms
[info] ArrayOfLongsBenchmark.writeCirce                                                         thrpt    5    179221.510 ±   1014.496   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1542.071 ±      8.693  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5     13544.002 ±      0.001    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.083 ±      0.057  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.731 ±      0.494    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      1526.961 ±    686.953  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5     13411.350 ±   6036.363    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                               thrpt    5        23.000               counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                thrpt    5        24.000                   ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                  thrpt    5    483928.864 ±  14292.395   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                   thrpt    5       496.784 ±     14.529  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              thrpt    5      1616.001 ±      0.001    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.054 ±      0.193  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.176 ±      0.625    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5       517.625 ±    685.401  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      1683.584 ±   2226.953    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                        thrpt    5         8.000               counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                         thrpt    5        13.000                   ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                 thrpt    5    596181.117 ±  13053.130   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       466.667 ±     10.180  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      1232.001 ±      0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.757 ±      6.337  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         2.003 ±     16.772    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5       443.648 ±    621.823  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5      1172.294 ±   1657.476    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5         7.000               counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5         9.000                   ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5    664836.003 ±   6875.853   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5         0.001 ±      0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0               counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                      thrpt    5     30413.918 ±    261.847   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5      1559.146 ±     13.706  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5     80691.094 ±     26.520    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5         0.079 ±      0.143  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5         4.091 ±      7.392    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5      1520.923 ±    684.807  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     78710.117 ±  35336.030    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                            thrpt    5        23.000               counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                             thrpt    5        23.000                   ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                thrpt    5      8615.511 ±    136.707   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                 thrpt    5      1214.088 ±     19.397  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                            thrpt    5    221801.613 ±     13.461    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                        thrpt    5         0.062 ±      0.150  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                   thrpt    5        11.395 ±     27.247    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                    thrpt    5      1189.611 ±    705.282  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm               thrpt    5    217345.309 ± 129253.281    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                      thrpt    5        18.000               counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                       thrpt    5        17.000                   ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                        thrpt    5    102438.080 ±   3103.888   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                         thrpt    5       992.322 ±     30.109  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                    thrpt    5     15248.004 ±      0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                thrpt    5         0.079 ±      0.036  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm           thrpt    5         1.216 ±      0.556    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space            thrpt    5       994.547 ±     18.412  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5     15283.186 ±    658.046    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                              thrpt    5        15.000               counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                               thrpt    5        13.000                   ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                             thrpt    5      7876.612 ±    173.035   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                              thrpt    5      1422.300 ±     31.675  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                         thrpt    5    284216.053 ±      0.009    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                     thrpt    5         0.062 ±      0.057  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                thrpt    5        12.473 ±     11.284    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                 thrpt    5      1403.855 ±    563.171  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm            thrpt    5    280560.377 ± 113972.986    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                   thrpt    5        21.000               counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                    thrpt    5        23.000                   ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                               thrpt    5     17857.220 ±    662.211   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                thrpt    5       891.006 ±     33.280  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                           thrpt    5     78534.431 ±     78.101    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                       thrpt    5         0.067 ±      0.088  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                  thrpt    5         5.881 ±      7.863    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                   thrpt    5       917.438 ±    566.803  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm              thrpt    5     80897.399 ±  50667.836    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                     thrpt    5        14.000               counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                      thrpt    5        14.000                   ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                       thrpt    5    470450.281 ±  10066.342   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                        thrpt    5      1066.347 ±     22.770  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                   thrpt    5      3568.001 ±      0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space               thrpt    5         0.067 ±      0.143  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm          thrpt    5         0.223 ±      0.477    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space           thrpt    5      1118.409 ±    698.222  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm      thrpt    5      3743.726 ±   2381.941    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                             thrpt    5        17.000               counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                              thrpt    5        15.000                   ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                               thrpt    5    432575.030 ±   1317.659   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm           thrpt    5         0.001 ±      0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                     thrpt    5           ≈ 0               counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                            thrpt    5     19559.971 ±    367.794   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                             thrpt    5       902.052 ±     16.947  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                        thrpt    5     72576.177 ±      1.330    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                    thrpt    5         0.050 ±      0.185  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm               thrpt    5         4.017 ±     14.855    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                thrpt    5       910.259 ±    547.004  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm           thrpt    5     73222.010 ±  43637.027    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                  thrpt    5        14.000               counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                   thrpt    5        15.000                   ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                    thrpt    5     13691.146 ±    442.721   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      1375.325 ±     44.697  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5    158100.500 ±     61.419    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5         0.079 ±      0.154  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5         9.122 ±     18.105    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5      1392.696 ±    533.301  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5    160069.147 ±  59463.614    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                          thrpt    5        21.000               counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                           thrpt    5        19.000                   ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                             thrpt    5     13844.247 ±    315.831   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                              thrpt    5      1267.377 ±     28.505  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                         thrpt    5    144075.997 ±     64.857    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.058 ±      0.067  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         6.629 ±      7.648    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5      1267.772 ±    601.179  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5    144122.848 ±  68352.843    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                   thrpt    5        19.000               counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                    thrpt    5        23.000                   ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                            thrpt    5    170036.333 ±   1512.439   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5       983.421 ±      8.910  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      9104.002 ±      0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.079 ±      0.067  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         0.732 ±      0.620    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5       994.519 ±     18.703  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5      9206.729 ±    132.659    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                  thrpt    5        15.000               counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                   thrpt    5        14.000                   ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                   thrpt    5     28345.697 ±    951.735   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      1055.729 ±     36.146  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5     58621.255 ±     40.557    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5         0.079 ±      0.105  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5         4.398 ±      5.883    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5      1052.669 ±    564.929  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5     58465.109 ±  31843.693    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                         thrpt    5        16.000               counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                          thrpt    5        15.000                   ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                           thrpt    5    741265.495 ±   7698.157   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5      1017.341 ±     10.389  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5      2160.001 ±      0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5         0.071 ±      0.091  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5         0.150 ±      0.194    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5       985.588 ±     23.467  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5      2092.573 ±     33.260    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5        15.000               counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5        14.000                   ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                   thrpt    5    773527.310 ±   8787.970   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               thrpt    5         0.001 ±      0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                         thrpt    5           ≈ 0               counts
[info] ArrayOfPeriodsBenchmark.readCirce                                                        thrpt    5     28245.905 ±    387.509   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1018.521 ±     13.175  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5     56751.901 ±      0.978    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.054 ±      0.108  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5         3.018 ±      6.015    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5      1052.502 ±    555.251  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5     58664.102 ±  31698.058    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                              thrpt    5        16.000               counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                               thrpt    5        17.000                   ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                 thrpt    5     28090.278 ±    977.758   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5       770.009 ±     26.834  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     43144.115 ±      0.865    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.050 ±      0.176  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         2.798 ±      9.803    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5       789.127 ±    700.191  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5     44233.237 ±  39582.735    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                       thrpt    5        12.000               counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                        thrpt    5        14.000                   ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                thrpt    5    201699.022 ±   8609.005   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       524.879 ±     22.467  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5      4096.002 ±      0.001    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.558 ±      4.449  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         4.329 ±     34.469    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5       528.618 ±    695.245  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5      4125.922 ±   5434.309    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5         8.000               counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5         9.000                   ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                     thrpt    5     22715.525 ±    417.983   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      1420.778 ±     26.146  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5     98448.020 ±      0.007    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5         0.083 ±      0.098  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5         5.771 ±      6.820    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5      1461.546 ±    696.615  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5    101280.051 ±  48516.308    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                           thrpt    5        22.000               counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                            thrpt    5        24.000                   ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                       thrpt    5     84622.979 ±    713.470   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5      1305.559 ±     10.873  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5     24280.005 ±      0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.079 ±      0.119  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5         1.471 ±      2.206    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5      1323.688 ±     49.658  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     24617.442 ±   1041.136    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                             thrpt    5        20.000               counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                              thrpt    5        21.000                   ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                thrpt    5    185456.946 ±   6530.698   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5      1207.518 ±     42.843  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5     10248.002 ±      0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.075 ±      0.122  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.636 ±      1.031    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5      1258.624 ±    570.870  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5     10679.840 ±   4762.070    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                      thrpt    5        19.000               counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                       thrpt    5        22.000                   ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                               thrpt    5    420349.206 ±  24742.960   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       465.854 ±     27.283  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      1744.001 ±      0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.780 ±      6.310  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         2.903 ±     23.479    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5       509.417 ±    648.180  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5      1909.679 ±   2462.203    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5         8.000               counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5        11.000                   ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5    545976.231 ±   1764.858   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5         0.001 ±      0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5           ≈ 0               counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                    thrpt    5    111051.304 ±   3215.771   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5      1354.712 ±     39.495  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5     19200.004 ±      0.001    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5         0.067 ±      0.174  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.944 ±      2.464    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5      1317.452 ±     58.796  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     18673.014 ±   1074.980    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                          thrpt    5        20.000               counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                           thrpt    5        20.000                   ms
[info] ArrayOfShortsBenchmark.readCirce                                                         thrpt    5    160208.120 ±   2311.900   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      2696.672 ±     39.635  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5     26496.003 ±      0.001    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.112 ±      0.108  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5         1.105 ±      1.062    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      2701.993 ±     77.462  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5     26548.252 ±    625.960    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                               thrpt    5        40.000               counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                thrpt    5        37.000                   ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                  thrpt    5    372513.557 ±  28933.423   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5       380.541 ±     29.554  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5      1608.001 ±      0.001    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.042 ±      0.150  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.176 ±      0.628    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5       376.397 ±    606.664  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      1588.284 ±   2509.649    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                        thrpt    5         6.000               counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                         thrpt    5         7.000                   ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                 thrpt    5    923770.524 ±  10593.386   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       319.281 ±      3.558  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5       544.000 ±      0.001    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.673 ±      5.592  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         1.149 ±      9.547    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5       351.164 ±    366.388  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5       598.300 ±    624.503    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         6.000               counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                        thrpt    5        12.000                   ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                      thrpt    5     75605.137 ±   1583.123   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      3242.812 ±     67.467  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5     67512.005 ±      0.001    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5         0.154 ±      0.193  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5         3.206 ±      4.006    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5      3255.613 ±    687.926  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     67770.220 ±  13527.239    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                            thrpt    5        48.000               counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                             thrpt    5        51.000                   ms
[info] ArrayOfShortsBenchmark.writeCirce                                                        thrpt    5    252254.595 ±   2261.943   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5      1718.126 ±     15.501  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5     10720.002 ±      0.001    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.071 ±      0.122  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.442 ±      0.758    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5      1666.361 ±     68.639  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5     10397.109 ±    454.757    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                              thrpt    5        25.000               counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                               thrpt    5        22.000                   ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                 thrpt    5   1009885.643 ±  44495.401   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                  thrpt    5       662.084 ±     29.376  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             thrpt    5      1032.000 ±      0.001    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.071 ±      0.156  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.111 ±      0.246    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5       650.576 ±     21.397  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5      1014.125 ±     37.550    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                       thrpt    5        10.000               counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                        thrpt    5        11.000                   ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                thrpt    5   1304218.267 ±  67267.628   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 thrpt    5       536.950 ±     27.547  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            thrpt    5       648.000 ±      0.001    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.784 ±      6.172  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.954 ±      7.512    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5       523.431 ±    688.470  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5       631.904 ±    833.319    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                      thrpt    5         8.000               counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                       thrpt    5        10.000                   ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                        thrpt    5   1298576.309 ± 117967.649   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    thrpt    5        ≈ 10⁻⁴                 B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              thrpt    5           ≈ 0               counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                     thrpt    5     42105.127 ±    685.747   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                      thrpt    5      2059.742 ±     33.727  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                 thrpt    5     77000.010 ±      0.005    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             thrpt    5         0.100 ±      0.143  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5         3.733 ±      5.347    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5      2071.596 ±    642.535  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5     77446.415 ±  24210.244    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                           thrpt    5        31.000               counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                            thrpt    5        32.000                   ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                          thrpt    5     41378.873 ±    974.701   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5       826.126 ±     19.418  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5     31424.010 ±      0.001    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.083 ±      0.179  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5         3.167 ±      6.790    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5       852.072 ±    694.269  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5     32404.078 ±  26249.570    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                thrpt    5        13.000               counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                 thrpt    5        12.000                   ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                   thrpt    5     82889.864 ±   2052.369   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5       872.029 ±     21.493  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5     16560.005 ±      0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.037 ±      0.088  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.710 ±      1.664    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5       858.659 ±    703.915  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5     16308.893 ±  13414.433    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                         thrpt    5        13.000               counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                          thrpt    5        17.000                   ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                  thrpt    5    243513.250 ±   7229.764   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       792.226 ±     23.936  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5      5120.002 ±      0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.075 ±      0.166  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.486 ±      1.080    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5       789.175 ±    691.301  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      5103.970 ±   4548.345    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                        thrpt    5        12.000               counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                         thrpt    5        12.000                   ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                       thrpt    5     24397.651 ±    330.244   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      1114.447 ±     15.265  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5     71896.019 ±      0.009    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5         0.054 ±      0.044  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         3.493 ±      2.870    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5      1057.820 ±    571.902  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     68235.044 ±  36571.431    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                             thrpt    5        16.000               counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                              thrpt    5        18.000                   ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                         thrpt    5     52145.582 ±   1957.017   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1105.176 ±     41.724  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5     33360.008 ±      0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.071 ±      0.072  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5         2.138 ±      2.181    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      1117.127 ±    673.868  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5     33714.913 ±  20114.261    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                               thrpt    5        17.000               counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                thrpt    5        17.000                   ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                  thrpt    5     88559.341 ±   3545.387   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                   thrpt    5      1212.983 ±     48.582  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              thrpt    5     21560.009 ±      0.073    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.092 ±      0.134  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         1.626 ±      2.360    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5      1264.884 ±    573.404  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5     22462.516 ±   9437.666    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                        thrpt    5        19.000               counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                         thrpt    5        22.000                   ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                 thrpt    5    244132.691 ±  14952.761   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       778.090 ±     48.047  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      5016.002 ±      0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.087 ±      0.067  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.564 ±      0.448    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5       785.462 ±    687.856  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5      5068.826 ±   4545.357    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5        12.000               counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5        11.000                   ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5    274557.931 ±   1375.715   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5         0.001 ±      0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0               counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                      thrpt    5     72245.512 ±    958.995   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5      1071.468 ±     14.364  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5     23344.006 ±      0.075    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5         0.092 ±      0.108  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5         1.995 ±      2.344    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5      1044.535 ±    559.585  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     22762.018 ±  12377.852    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                            thrpt    5        16.000               counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                             thrpt    5        21.000                   ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                        thrpt    5     79298.554 ±   2115.788   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1515.537 ±     40.689  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5     30080.005 ±      0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.087 ±      0.154  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5         1.736 ±      3.066    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5      1522.108 ±    720.775  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5     30216.607 ±  14514.995    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                              thrpt    5        23.000               counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                               thrpt    5        23.000                   ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                 thrpt    5     86450.817 ±   2104.416   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5       976.336 ±     24.094  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     17776.005 ±      0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.067 ±      0.132  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         1.211 ±      2.373    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5       990.673 ±     36.198  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5     18036.981 ±    443.130    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                       thrpt    5        15.000               counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                        thrpt    5        17.000                   ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                thrpt    5    107383.731 ±   1813.567   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5      1165.334 ±     19.196  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     17080.004 ±      0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.071 ±      0.134  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         1.037 ±      1.964    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5      1184.498 ±    684.484  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5     17357.709 ±   9928.974    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5        18.000               counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5        18.000                   ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                     thrpt    5     43503.141 ±   1080.539   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      2020.675 ±     49.513  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5     73112.010 ±      0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5         0.079 ±      0.174  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5         2.870 ±      6.347    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5      2020.607 ±     60.729  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5     73113.112 ±   3363.793    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                           thrpt    5        30.000               counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                            thrpt    5        35.000                   ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                       thrpt    5    116969.320 ±   4352.541   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5       805.613 ±     29.663  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5     10840.004 ±      0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.083 ±      0.098  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5         1.118 ±      1.299    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5       778.156 ±    681.255  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     10465.976 ±   9050.685    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                             thrpt    5        12.000               counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                              thrpt    5        13.000                   ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                thrpt    5    177127.746 ±   3444.905   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5       262.892 ±      5.118  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5      2336.002 ±      0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.029 ±      0.209  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.260 ±      1.869    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5       282.438 ±    140.526  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5      2510.996 ±   1298.045    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                      thrpt    5         5.000               counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                       thrpt    5         7.000                   ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                               thrpt    5    812539.328 ±  16735.289   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5      1007.663 ±     21.070  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      1952.001 ±      0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.083 ±      0.127  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         0.161 ±      0.246    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5       982.962 ±     26.038  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5      1904.178 ±     52.879    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5        15.000               counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5        14.000                   ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5    838700.909 ±  22018.688   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5        ≈ 10⁻³                 B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5           ≈ 0               counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                    thrpt    5    209628.892 ±   5747.919   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5       685.101 ±     18.527  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5      5144.002 ±      0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5         0.062 ±      0.188  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.470 ±      1.418    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5       643.568 ±      5.308  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5      4832.314 ±    114.127    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                          thrpt    5        10.000               counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                           thrpt    5        11.000                   ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                             thrpt    5    180133.355 ±  24081.558   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                              thrpt    5       957.673 ±    128.150  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                         thrpt    5      8368.002 ±      0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.067 ±      0.132  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         0.579 ±      1.119    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5       993.602 ±     33.271  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5      8688.848 ±    969.220    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                   thrpt    5        15.000               counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                    thrpt    5        18.000                   ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                            thrpt    5    353448.884 ±   3707.367   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5       686.333 ±      7.048  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      3056.001 ±      0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.048 ±      0.251  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         0.216 ±      1.120    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5       662.243 ±      2.913  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5      2948.754 ±     36.106    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                  thrpt    5        10.000               counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                   thrpt    5        10.000                   ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                            thrpt    5    294050.803 ±   5817.830   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                             thrpt    5       289.935 ±      5.794  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        thrpt    5      1552.001 ±      0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.017 ±      0.088  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         0.089 ±      0.470    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5       295.003 ±    138.045  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5      1578.883 ±    729.167    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                  thrpt    5         5.000               counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                   thrpt    5         7.000                   ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                           thrpt    5   1191061.528 ±  30954.644   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5       883.914 ±     22.612  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5      1168.000 ±      0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5         0.096 ±      0.072  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5         0.127 ±      0.098    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5       852.152 ±    692.655  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5      1125.806 ±    910.126    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5        13.000               counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5        11.000                   ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                   thrpt    5   1139937.061 ±   3227.149   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               thrpt    5        ≈ 10⁻³                 B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                         thrpt    5           ≈ 0               counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                 thrpt    5      5157.124 ±     49.857   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                  thrpt    5      1017.907 ±     10.258  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                             thrpt    5    310624.082 ±      0.013    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                         thrpt    5         0.079 ±      0.143  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                    thrpt    5        24.146 ±     43.837    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                     thrpt    5      1043.229 ±    591.057  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                thrpt    5    318354.810 ± 180492.459    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                       thrpt    5        16.000               counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                        thrpt    5        17.000                   ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                         thrpt    5     30867.616 ±   1061.698   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                          thrpt    5       524.451 ±     17.836  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                     thrpt    5     26744.014 ±      0.008    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                 thrpt    5         0.830 ±      6.964  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm            thrpt    5        42.707 ±    358.638    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space             thrpt    5       507.739 ±    645.193  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5     25944.552 ±  33547.829    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                               thrpt    5         8.000               counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                thrpt    5        11.000                   ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                              thrpt    5      4640.308 ±     68.665   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                               thrpt    5      1178.474 ±     16.818  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                          thrpt    5    399728.091 ±      0.015    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                      thrpt    5         0.037 ±      0.104  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                 thrpt    5        12.703 ±     35.348    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                  thrpt    5      1194.850 ±    688.873  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm             thrpt    5    405301.571 ± 234129.885    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                    thrpt    5        18.000               counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                     thrpt    5        22.000                   ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                thrpt    5     14212.260 ±    364.472   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                 thrpt    5       891.355 ±     22.524  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                            thrpt    5     98715.433 ±    112.982    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                        thrpt    5         0.075 ±      0.091  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                   thrpt    5         8.288 ±      9.992    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                    thrpt    5       908.111 ±    554.183  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm               thrpt    5    100609.645 ±  62265.026    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                      thrpt    5        14.000               counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                       thrpt    5        15.000                   ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                        thrpt    5    269101.041 ±   4171.367   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                         thrpt    5       949.283 ±     14.791  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                    thrpt    5      5552.002 ±      0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                thrpt    5         0.083 ±      0.098  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm           thrpt    5         0.487 ±      0.579    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space            thrpt    5       981.342 ±     21.582  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5      5739.548 ±    130.690    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                              thrpt    5        15.000               counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                               thrpt    5        14.000                   ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                thrpt    5    295736.137 ±   2287.501   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                 thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm            thrpt    5         0.001 ±      0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                      thrpt    5           ≈ 0               counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                             thrpt    5     15077.938 ±    638.745   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                              thrpt    5       857.045 ±     36.191  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                         thrpt    5     89464.028 ±      0.064    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                     thrpt    5         0.042 ±      0.127  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                thrpt    5         4.324 ±     13.119    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                 thrpt    5       838.269 ±    675.694  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm            thrpt    5     87530.357 ±  70992.801    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                   thrpt    5        13.000               counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                    thrpt    5        14.000                   ms
[info] ArraysBenchmark.readCirce                                                                thrpt    5    918683.479 ±  33571.355   ops/s
[info] ArraysBenchmark.readCirce:·gc.alloc.rate                                                 thrpt    5      2974.622 ±    110.306  MB/sec
[info] ArraysBenchmark.readCirce:·gc.alloc.rate.norm                                            thrpt    5      5096.000 ±      0.001    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        thrpt    5         0.117 ±      0.134  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   thrpt    5         0.200 ±      0.232    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    thrpt    5      2975.839 ±    559.513  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               thrpt    5      5099.161 ±   1040.714    B/op
[info] ArraysBenchmark.readCirce:·gc.count                                                      thrpt    5        44.000               counts
[info] ArraysBenchmark.readCirce:·gc.time                                                       thrpt    5        40.000                   ms
[info] ArraysBenchmark.readJacksonScala                                                         thrpt    5   1777513.151 ±  15956.125   ops/s
[info] ArraysBenchmark.readJacksonScala:·gc.alloc.rate                                          thrpt    5      1671.348 ±     15.165  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     thrpt    5      1480.000 ±      0.001    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 thrpt    5         0.108 ±      0.164  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.096 ±      0.146    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             thrpt    5      1675.005 ±     60.390  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      1483.252 ±     58.654    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.count                                               thrpt    5        25.000               counts
[info] ArraysBenchmark.readJacksonScala:·gc.time                                                thrpt    5        30.000                   ms
[info] ArraysBenchmark.readJsoniterScala                                                        thrpt    5   9132973.232 ±  99334.502   ops/s
[info] ArraysBenchmark.readJsoniterScala:·gc.alloc.rate                                         thrpt    5      2274.521 ±     25.027  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    thrpt    5       392.000 ±      0.001    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                thrpt    5         0.117 ±      0.108  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.020 ±      0.018    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            thrpt    5      2291.530 ±    576.778  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5       394.937 ±     99.758    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.count                                              thrpt    5        34.000               counts
[info] ArraysBenchmark.readJsoniterScala:·gc.time                                               thrpt    5        30.000                   ms
[info] ArraysBenchmark.readPlayJson                                                             thrpt    5    324511.334 ±   1202.506   ops/s
[info] ArraysBenchmark.readPlayJson:·gc.alloc.rate                                              thrpt    5      1984.274 ±      6.714  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.alloc.rate.norm                                         thrpt    5      9624.001 ±      0.001    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     thrpt    5         0.125 ±      0.188  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0.606 ±      0.913    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 thrpt    5      2015.691 ±     71.942  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            thrpt    5      9776.362 ±    338.796    B/op
[info] ArraysBenchmark.readPlayJson:·gc.count                                                   thrpt    5        30.000               counts
[info] ArraysBenchmark.readPlayJson:·gc.time                                                    thrpt    5        34.000                   ms
[info] ArraysBenchmark.writeCirce                                                               thrpt    5   1019268.369 ±  35782.940   ops/s
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate                                                thrpt    5      2243.209 ±     77.760  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate.norm                                           thrpt    5      3464.000 ±      0.001    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       thrpt    5         0.117 ±      0.156  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  thrpt    5         0.180 ±      0.248    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   thrpt    5      2215.102 ±    744.074  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              thrpt    5      3422.087 ±   1219.548    B/op
[info] ArraysBenchmark.writeCirce:·gc.count                                                     thrpt    5        33.000               counts
[info] ArraysBenchmark.writeCirce:·gc.time                                                      thrpt    5        33.000                   ms
[info] ArraysBenchmark.writeJacksonScala                                                        thrpt    5   3844056.380 ±  73915.338   ops/s
[info] ArraysBenchmark.writeJacksonScala:·gc.alloc.rate                                         thrpt    5      2188.188 ±     42.368  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    thrpt    5       896.000 ±      0.001    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                thrpt    5         0.121 ±      0.105  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.049 ±      0.043    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            thrpt    5      2222.610 ±    704.350  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5       910.320 ±    300.321    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.count                                              thrpt    5        33.000               counts
[info] ArraysBenchmark.writeJacksonScala:·gc.time                                               thrpt    5        39.000                   ms
[info] ArraysBenchmark.writeJsoniterScala                                                       thrpt    5  13215113.041 ± 691624.262   ops/s
[info] ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate                                        thrpt    5       805.965 ±     42.119  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5        96.000 ±      0.001    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               thrpt    5         0.083 ±      0.057  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.010 ±      0.007    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           thrpt    5       785.546 ±    687.666  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5        93.614 ±     82.752    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.count                                             thrpt    5        12.000               counts
[info] ArraysBenchmark.writeJsoniterScala:·gc.time                                              thrpt    5        11.000                   ms
[info] ArraysBenchmark.writePlayJson                                                            thrpt    5    520162.655 ±   7372.920   ops/s
[info] ArraysBenchmark.writePlayJson:·gc.alloc.rate                                             thrpt    5      1798.009 ±     24.464  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.alloc.rate.norm                                        thrpt    5      5440.001 ±      0.001    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    thrpt    5         0.083 ±      0.098  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.252 ±      0.297    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                thrpt    5      1810.118 ±    685.755  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5      5477.679 ±   2126.216    B/op
[info] ArraysBenchmark.writePlayJson:·gc.count                                                  thrpt    5        27.000               counts
[info] ArraysBenchmark.writePlayJson:·gc.time                                                   thrpt    5        32.000                   ms
[info] BitSetsBenchmark.readJacksonScala                                                        thrpt    5   2100110.286 ±  40432.465   ops/s
[info] BitSetsBenchmark.readJacksonScala:·gc.alloc.rate                                         thrpt    5      1334.232 ±     25.547  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    thrpt    5      1000.000 ±      0.001    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                thrpt    5         0.112 ±      0.185  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.084 ±      0.139    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            thrpt    5      1332.420 ±     48.261  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5       998.631 ±     22.946    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.count                                              thrpt    5        20.000               counts
[info] BitSetsBenchmark.readJacksonScala:·gc.time                                               thrpt    5        27.000                   ms
[info] BitSetsBenchmark.readJsoniterScala                                                       thrpt    5   5186641.716 ± 116253.953   ops/s
[info] BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate                                        thrpt    5       685.353 ±     15.495  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5       208.000 ±      0.001    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               thrpt    5         0.071 ±      0.201  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.022 ±      0.061    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           thrpt    5       657.049 ±      5.880  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5       199.414 ±      2.838    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.count                                             thrpt    5        10.000               counts
[info] BitSetsBenchmark.readJsoniterScala:·gc.time                                              thrpt    5        10.000                   ms
[info] BitSetsBenchmark.readPlayJson                                                            thrpt    5    403511.920 ±   7174.565   ops/s
[info] BitSetsBenchmark.readPlayJson:·gc.alloc.rate                                             thrpt    5      1831.530 ±     33.507  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        thrpt    5      7144.001 ±      0.001    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    thrpt    5         0.121 ±      0.105  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.471 ±      0.406    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                thrpt    5      1878.184 ±    703.963  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5      7327.857 ±   2830.456    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.count                                                  thrpt    5        28.000               counts
[info] BitSetsBenchmark.readPlayJson:·gc.time                                                   thrpt    5        34.000                   ms
[info] BitSetsBenchmark.writeJacksonScala                                                       thrpt    5   2744417.255 ±  33368.956   ops/s
[info] BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate                                        thrpt    5      1450.681 ±     17.847  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   thrpt    5       832.000 ±      0.001    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               thrpt    5         0.104 ±      0.160  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.060 ±      0.092    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           thrpt    5      1468.418 ±    719.530  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5       842.369 ±    420.366    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.count                                             thrpt    5        22.000               counts
[info] BitSetsBenchmark.writeJacksonScala:·gc.time                                              thrpt    5        27.000                   ms
[info] BitSetsBenchmark.writeJsoniterScala                                                      thrpt    5   6871982.739 ± 204152.371   ops/s
[info] BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       thrpt    5      1047.826 ±     31.572  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  thrpt    5       240.000 ±      0.001    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              thrpt    5         0.092 ±      0.134  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.021 ±      0.031    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          thrpt    5      1051.891 ±    563.619  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5       240.856 ±    125.716    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.count                                            thrpt    5        16.000               counts
[info] BitSetsBenchmark.writeJsoniterScala:·gc.time                                             thrpt    5        17.000                   ms
[info] BitSetsBenchmark.writePlayJson                                                           thrpt    5    740455.803 ±  22717.005   ops/s
[info] BitSetsBenchmark.writePlayJson:·gc.alloc.rate                                            thrpt    5      2152.627 ±     66.338  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       thrpt    5      4576.001 ±      0.001    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   thrpt    5         0.100 ±      0.119  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.212 ±      0.248    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               thrpt    5      2154.938 ±    673.780  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5      4580.488 ±   1396.827    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.count                                                 thrpt    5        32.000               counts
[info] BitSetsBenchmark.writePlayJson:·gc.time                                                  thrpt    5        38.000                   ms
[info] ExtractFieldsBenchmark.readCirce                                                         thrpt    5    821418.339 ±  19810.599   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      2680.405 ±     64.849  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5      5136.001 ±      0.001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.121 ±      0.154  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.231 ±      0.292    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      2698.018 ±     89.543  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      5170.030 ±    259.904    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                               thrpt    5        40.000               counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                thrpt    5        37.000                   ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                  thrpt    5    969676.574 ±  24762.665   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5      1202.522 ±     30.974  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5      1952.000 ±      0.001    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.096 ±      0.091  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.155 ±      0.148    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5      1193.999 ±    690.589  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      1937.493 ±   1099.993    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                        thrpt    5        18.000               counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                         thrpt    5        22.000                   ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                 thrpt    5   8585090.803 ±  78590.029   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       392.728 ±      3.621  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5        72.000 ±      0.001    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.644 ±      5.341  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.118 ±      0.980    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5       367.424 ±    310.268  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5        67.386 ±     57.573    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         6.000               counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                        thrpt    5        10.000                   ms
[info] ExtractFieldsBenchmark.readPlayJson                                                      thrpt    5    293704.641 ±   4463.665   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      1528.534 ±     23.399  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5      8192.001 ±      0.001    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5         0.083 ±      0.127  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.446 ±      0.679    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5      1535.203 ±    725.333  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      8229.991 ±   3968.548    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                            thrpt    5        23.000               counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                             thrpt    5        28.000                   ms
[info] GoogleMapsAPIBenchmark.readCirce                                                         thrpt    5      7744.513 ±    184.094   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      1863.638 ±     44.355  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5    378776.054 ±      0.009    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.142 ±      0.311  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5        28.721 ±     62.545    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      1867.349 ±    661.565  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5    379444.944 ± 129731.576    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                               thrpt    5        28.000               counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                thrpt    5        30.000                   ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                  thrpt    5     14478.935 ±     53.200   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5       366.926 ±      1.433  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5     39888.031 ±      0.015    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.092 ±      0.700  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         9.948 ±     76.029    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5       360.997 ±    323.865  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5     39244.826 ±  35240.671    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                        thrpt    5         6.000               counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                         thrpt    5         8.000                   ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                 thrpt    5     24318.723 ±    252.109   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       415.555 ±      4.288  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5     26896.018 ±      0.007    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.694 ±      5.708  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5        45.013 ±    370.254    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5       430.818 ±    571.289  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5     27888.358 ±  37016.309    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         7.000               counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                        thrpt    5        12.000                   ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                      thrpt    5      2371.318 ±     48.055   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      1394.927 ±     28.409  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5    925857.398 ±     10.500    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5         0.029 ±      0.091  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5        19.353 ±     60.660    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5      1398.062 ±    600.552  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5    927811.059 ± 391967.767    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                            thrpt    5        21.000               counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                             thrpt    5        28.000                   ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                        thrpt    5      7885.067 ±    180.374   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5      1635.834 ±     37.160  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5    326528.053 ±      0.008    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.112 ±      0.176  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5        22.450 ±     35.265    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5      1593.978 ±    573.114  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5    318300.509 ± 119793.187    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                              thrpt    5        24.000               counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                               thrpt    5        25.000                   ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                 thrpt    5     42869.227 ±    903.028   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                  thrpt    5       621.182 ±     13.058  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             thrpt    5     22807.841 ±      0.255    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.017 ±      0.067  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.609 ±      2.445    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5       587.066 ±    569.954  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5     21555.516 ±  20936.360    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                       thrpt    5         9.000               counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                        thrpt    5        10.000                   ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                thrpt    5     62961.558 ±   3846.333   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                 thrpt    5       475.557 ±     29.071  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     11888.007 ±      0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.782 ±      6.466  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5        20.086 ±    166.273    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5       443.251 ±    621.483  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5     11117.956 ±  16041.955    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                      thrpt    5         7.000               counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                       thrpt    5        10.000                   ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                        thrpt    5     76032.239 ±   5180.090   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         thrpt    5         1.160 ±      0.079  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    thrpt    5        24.005 ±      0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                              thrpt    5           ≈ 0               counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                     thrpt    5      5614.989 ±     34.454   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                      thrpt    5      1651.016 ±     10.139  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                 thrpt    5    462831.650 ±      1.161    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             thrpt    5         0.062 ±      0.113  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5        17.503 ±     31.768    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5      1672.310 ±     61.054  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5    468806.219 ±  19332.148    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                           thrpt    5        25.000               counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                            thrpt    5        31.000                   ms
[info] IntAndLongMapsBenchmark.readJsoniterScala                                                thrpt    5   5921942.086 ± 127726.732   ops/s
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5      1775.916 ±     37.189  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5       472.000 ±      0.001    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.096 ±      0.072  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.025 ±      0.019    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5      1806.347 ±    687.496  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5       479.905 ±    172.964    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5        27.000               counts
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5        25.000                   ms
[info] IntAndLongMapsBenchmark.readPlayJson                                                     thrpt    5    360372.122 ±  10335.863   ops/s
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      1935.964 ±     55.164  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5      8456.001 ±      0.001    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5         0.117 ±      0.146  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.510 ±      0.649    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5      1881.925 ±    724.291  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5      8223.955 ±   3336.537    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.count                                           thrpt    5        28.000               counts
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.time                                            thrpt    5        33.000                   ms
[info] IntAndLongMapsBenchmark.writeJsoniterScala                                               thrpt    5   3302943.275 ± 201272.466   ops/s
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       537.195 ±     32.763  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5       256.000 ±      0.001    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.773 ±      6.301  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         0.368 ±      2.997    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5       522.984 ±    687.523  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5       249.775 ±    334.197    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5         8.000               counts
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5         9.000                   ms
[info] IntAndLongMapsBenchmark.writePlayJson                                                    thrpt    5    339295.452 ±  17932.177   ops/s
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5      1319.495 ±     69.778  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5      6120.001 ±      0.001    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5         0.075 ±      0.108  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.347 ±      0.489    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5      1330.588 ±     50.317  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5      6171.972 ±    256.035    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.count                                          thrpt    5        20.000               counts
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.time                                           thrpt    5        24.000                   ms
[info] IterablesBenchmark.readCirce                                                             thrpt    5    621491.714 ±  10123.609   ops/s
[info] IterablesBenchmark.readCirce:·gc.alloc.rate                                              thrpt    5      2239.665 ±     34.612  MB/sec
[info] IterablesBenchmark.readCirce:·gc.alloc.rate.norm                                         thrpt    5      5672.001 ±      0.001    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     thrpt    5         0.079 ±      0.132  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0.201 ±      0.336    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 thrpt    5      2284.078 ±    575.629  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            thrpt    5      5785.362 ±   1515.063    B/op
[info] IterablesBenchmark.readCirce:·gc.count                                                   thrpt    5        34.000               counts
[info] IterablesBenchmark.readCirce:·gc.time                                                    thrpt    5        30.000                   ms
[info] IterablesBenchmark.readJacksonScala                                                      thrpt    5    651800.261 ±  10084.344   ops/s
[info] IterablesBenchmark.readJacksonScala:·gc.alloc.rate                                       thrpt    5       758.708 ±     11.887  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  thrpt    5      1832.001 ±      0.001    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              thrpt    5         0.067 ±      0.207  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.161 ±      0.502    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          thrpt    5       785.716 ±    683.518  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      1898.114 ±   1671.136    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.count                                            thrpt    5        12.000               counts
[info] IterablesBenchmark.readJacksonScala:·gc.time                                             thrpt    5        15.000                   ms
[info] IterablesBenchmark.readJsoniterScala                                                     thrpt    5   3797955.927 ± 127980.807   ops/s
[info] IterablesBenchmark.readJsoniterScala:·gc.alloc.rate                                      thrpt    5      1505.544 ±     50.658  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 thrpt    5       624.000 ±      0.001    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             thrpt    5         0.096 ±      0.072  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.040 ±      0.029    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         thrpt    5      1532.061 ±    702.803  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5       634.825 ±    284.091    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.count                                           thrpt    5        23.000               counts
[info] IterablesBenchmark.readJsoniterScala:·gc.time                                            thrpt    5        21.000                   ms
[info] IterablesBenchmark.readPlayJson                                                          thrpt    5    232366.153 ±   5373.918   ops/s
[info] IterablesBenchmark.readPlayJson:·gc.alloc.rate                                           thrpt    5      1616.804 ±     37.603  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.alloc.rate.norm                                      thrpt    5     10952.002 ±      0.001    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  thrpt    5         0.067 ±      0.105  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.451 ±      0.708    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              thrpt    5      1604.676 ±    594.050  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5     10865.696 ±   3829.690    B/op
[info] IterablesBenchmark.readPlayJson:·gc.count                                                thrpt    5        24.000               counts
[info] IterablesBenchmark.readPlayJson:·gc.time                                                 thrpt    5        29.000                   ms
[info] IterablesBenchmark.writeCirce                                                            thrpt    5    882817.390 ±  14884.315   ops/s
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate                                             thrpt    5      2028.261 ±     33.417  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                        thrpt    5      3616.000 ±      0.001    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    thrpt    5         0.079 ±      0.088  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.141 ±      0.155    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                thrpt    5      2074.792 ±    497.019  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5      3699.173 ±    900.898    B/op
[info] IterablesBenchmark.writeCirce:·gc.count                                                  thrpt    5        31.000               counts
[info] IterablesBenchmark.writeCirce:·gc.time                                                   thrpt    5        29.000                   ms
[info] IterablesBenchmark.writeJacksonScala                                                     thrpt    5   1575106.904 ±  18780.128   ops/s
[info] IterablesBenchmark.writeJacksonScala:·gc.alloc.rate                                      thrpt    5      1032.719 ±     12.809  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 thrpt    5      1032.000 ±      0.001    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             thrpt    5         0.100 ±      0.104  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.100 ±      0.105    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         thrpt    5      1055.410 ±    570.937  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5      1054.838 ±    576.920    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.count                                           thrpt    5        16.000               counts
[info] IterablesBenchmark.writeJacksonScala:·gc.time                                            thrpt    5        19.000                   ms
[info] IterablesBenchmark.writeJsoniterScala                                                    thrpt    5   6832450.317 ± 496864.598   ops/s
[info] IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate                                     thrpt    5       764.105 ±     54.974  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                thrpt    5       176.000 ±      0.001    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            thrpt    5         0.079 ±      0.191  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.018 ±      0.044    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        thrpt    5       719.292 ±    560.014  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5       165.548 ±    124.035    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.count                                          thrpt    5        11.000               counts
[info] IterablesBenchmark.writeJsoniterScala:·gc.time                                           thrpt    5        11.000                   ms
[info] IterablesBenchmark.writePlayJson                                                         thrpt    5    521125.329 ±   8112.042   ops/s
[info] IterablesBenchmark.writePlayJson:·gc.alloc.rate                                          thrpt    5      1798.245 ±     27.595  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.alloc.rate.norm                                     thrpt    5      5432.001 ±      0.001    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 thrpt    5         0.096 ±      0.091  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.289 ±      0.276    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             thrpt    5      1809.528 ±    670.472  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      5465.719 ±   2003.671    B/op
[info] IterablesBenchmark.writePlayJson:·gc.count                                               thrpt    5        27.000               counts
[info] IterablesBenchmark.writePlayJson:·gc.time                                                thrpt    5        31.000                   ms
[info] MapsBenchmark.readCirce                                                                  thrpt    5    647908.708 ±  11988.104   ops/s
[info] MapsBenchmark.readCirce:·gc.alloc.rate                                                   thrpt    5      2246.202 ±     41.318  MB/sec
[info] MapsBenchmark.readCirce:·gc.alloc.rate.norm                                              thrpt    5      5456.001 ±      0.001    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          thrpt    5         0.096 ±      0.122  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     thrpt    5         0.233 ±      0.299    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      thrpt    5      2216.401 ±    694.478  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 thrpt    5      5383.805 ±   1695.476    B/op
[info] MapsBenchmark.readCirce:·gc.count                                                        thrpt    5        33.000               counts
[info] MapsBenchmark.readCirce:·gc.time                                                         thrpt    5        31.000                   ms
[info] MapsBenchmark.readJsoniterScala                                                          thrpt    5   5544037.727 ±  44792.883   ops/s
[info] MapsBenchmark.readJsoniterScala:·gc.alloc.rate                                           thrpt    5      1380.647 ±     11.090  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5       392.000 ±      0.001    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  thrpt    5         0.079 ±      0.067  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.022 ±      0.019    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              thrpt    5      1395.570 ±    593.461  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         thrpt    5       396.227 ±    167.935    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.count                                                thrpt    5        21.000               counts
[info] MapsBenchmark.readJsoniterScala:·gc.time                                                 thrpt    5        19.000                   ms
[info] MapsBenchmark.readPlayJson                                                               thrpt    5    381399.724 ±   5880.303   ops/s
[info] MapsBenchmark.readPlayJson:·gc.alloc.rate                                                thrpt    5      2050.950 ±     30.428  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           thrpt    5      8464.001 ±      0.001    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       thrpt    5         0.104 ±      0.170  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  thrpt    5         0.429 ±      0.700    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   thrpt    5      2085.853 ±    516.397  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              thrpt    5      8607.020 ±   2041.571    B/op
[info] MapsBenchmark.readPlayJson:·gc.count                                                     thrpt    5        31.000               counts
[info] MapsBenchmark.readPlayJson:·gc.time                                                      thrpt    5        36.000                   ms
[info] MapsBenchmark.writeCirce                                                                 thrpt    5    473346.898 ±  20973.113   ops/s
[info] MapsBenchmark.writeCirce:·gc.alloc.rate                                                  thrpt    5      1239.135 ±     54.299  MB/sec
[info] MapsBenchmark.writeCirce:·gc.alloc.rate.norm                                             thrpt    5      4120.001 ±      0.001    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         thrpt    5         0.075 ±      0.176  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    thrpt    5         0.249 ±      0.584    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     thrpt    5      1184.747 ±    693.450  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                thrpt    5      3936.612 ±   2219.069    B/op
[info] MapsBenchmark.writeCirce:·gc.count                                                       thrpt    5        18.000               counts
[info] MapsBenchmark.writeCirce:·gc.time                                                        thrpt    5        17.000                   ms
[info] MapsBenchmark.writeJsoniterScala                                                         thrpt    5   3425628.162 ±  39490.518   ops/s
[info] MapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          thrpt    5       626.890 ±      7.382  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     thrpt    5       288.000 ±      0.001    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 thrpt    5         0.813 ±      6.374  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.375 ±      2.938    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             thrpt    5       653.790 ±      6.604  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        thrpt    5       300.362 ±      5.790    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.count                                               thrpt    5        10.000               counts
[info] MapsBenchmark.writeJsoniterScala:·gc.time                                                thrpt    5        12.000                   ms
[info] MapsBenchmark.writePlayJson                                                              thrpt    5    332038.620 ±   7244.656   ops/s
[info] MapsBenchmark.writePlayJson:·gc.alloc.rate                                               thrpt    5      1198.316 ±     26.029  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          thrpt    5      5680.001 ±      0.001    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      thrpt    5         0.058 ±      0.143  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 thrpt    5         0.276 ±      0.679    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  thrpt    5      1194.027 ±    690.993  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             thrpt    5      5658.309 ±   3232.159    B/op
[info] MapsBenchmark.writePlayJson:·gc.count                                                    thrpt    5        18.000               counts
[info] MapsBenchmark.writePlayJson:·gc.time                                                     thrpt    5        22.000                   ms
[info] MissingReqFieldBenchmark.readCirce                                                       thrpt    5   2120286.179 ±  52034.864   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      3071.453 ±     73.653  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5      2280.000 ±      0.001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.121 ±      0.174  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.090 ±      0.129    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5      3110.161 ±    571.170  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5      2308.346 ±    376.206    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                             thrpt    5        46.000               counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                              thrpt    5        43.000                   ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                thrpt    5    320777.105 ±  14862.225   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5       567.349 ±     26.108  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5      2784.001 ±      0.001    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.067 ±      0.286  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.326 ±      1.390    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5       572.557 ±    543.404  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5      2811.248 ±   2695.242    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                      thrpt    5         9.000               counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                       thrpt    5        12.000                   ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                               thrpt    5    698824.529 ±  29999.633   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       443.946 ±     19.044  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      1000.001 ±      0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.666 ±      5.514  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         1.510 ±     12.494    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5       447.963 ±    760.395  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5      1011.646 ±   1739.860    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         7.000               counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                      thrpt    5        10.000                   ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                           thrpt    5   3827900.350 ± 135131.691   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                            thrpt    5      1245.409 ±     44.289  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                       thrpt    5       512.000 ±      0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                   thrpt    5         0.079 ±      0.143  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm              thrpt    5         0.032 ±      0.059    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space               thrpt    5      1263.635 ±    574.786  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm          thrpt    5       519.449 ±    234.548    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                 thrpt    5        19.000               counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                  thrpt    5        17.000                   ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                     thrpt    5   6364125.224 ± 498175.357   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                      thrpt    5       549.954 ±     43.195  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                 thrpt    5       136.000 ±      0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space             thrpt    5         0.669 ±      5.359  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm        thrpt    5         0.163 ±      1.309    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space         thrpt    5       528.688 ±    698.303  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm    thrpt    5       130.441 ±    168.770    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                           thrpt    5         8.000               counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                            thrpt    5         9.000                   ms
[info] MissingReqFieldBenchmark.readPlayJson                                                    thrpt    5    199246.579 ±   7728.634   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      1269.922 ±     49.289  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5     10032.002 ±      0.001    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5         0.096 ±      0.072  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.757 ±      0.575    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5      1261.032 ±    586.523  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5      9965.161 ±   4735.822    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                          thrpt    5        19.000               counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                           thrpt    5        23.000                   ms
[info] MutableIterablesBenchmark.readCirce                                                      thrpt    5    728874.315 ±  17711.643   ops/s
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate                                       thrpt    5      2785.903 ±     66.804  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm                                  thrpt    5      6016.001 ±      0.001    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                              thrpt    5         0.137 ±      0.209  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.297 ±      0.455    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                          thrpt    5      2769.252 ±    601.525  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      5980.675 ±   1344.785    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.count                                            thrpt    5        41.000               counts
[info] MutableIterablesBenchmark.readCirce:·gc.time                                             thrpt    5        38.000                   ms
[info] MutableIterablesBenchmark.readJsoniterScala                                              thrpt    5   3853864.035 ±  89026.581   ops/s
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5      2487.692 ±     57.384  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      1016.000 ±      0.001    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.112 ±      0.122  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0.046 ±      0.050    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5      2496.286 ±    671.526  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5      1019.415 ±    266.274    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.count                                    thrpt    5        37.000               counts
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.time                                     thrpt    5        34.000                   ms
[info] MutableIterablesBenchmark.readPlayJson                                                   thrpt    5    278273.220 ±   4334.280   ops/s
[info] MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate                                    thrpt    5      1982.857 ±     30.369  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate.norm                               thrpt    5     11216.002 ±      0.001    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           thrpt    5         0.096 ±      0.091  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.542 ±      0.517    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5      1947.659 ±    575.181  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5     11015.671 ±   3181.520    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.count                                         thrpt    5        29.000               counts
[info] MutableIterablesBenchmark.readPlayJson:·gc.time                                          thrpt    5        35.000                   ms
[info] MutableIterablesBenchmark.writeCirce                                                     thrpt    5    809572.414 ±  26825.332   ops/s
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate                                      thrpt    5      1777.866 ±     59.434  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                 thrpt    5      3456.001 ±      0.001    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                             thrpt    5         0.079 ±      0.143  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.154 ±      0.281    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                         thrpt    5      1798.801 ±    681.915  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5      3497.848 ±   1377.132    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.count                                           thrpt    5        27.000               counts
[info] MutableIterablesBenchmark.writeCirce:·gc.time                                            thrpt    5        25.000                   ms
[info] MutableIterablesBenchmark.writeJacksonScala                                              thrpt    5   1621208.070 ±  81004.683   ops/s
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate                               thrpt    5       931.154 ±     46.179  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                          thrpt    5       904.000 ±      0.001    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.096 ±      0.176  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0.093 ±      0.171    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5       986.579 ±     33.089  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5       957.903 ±     46.013    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.count                                    thrpt    5        15.000               counts
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.time                                     thrpt    5        18.000                   ms
[info] MutableIterablesBenchmark.writeJsoniterScala                                             thrpt    5   4721040.708 ±  36113.332   ops/s
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5       359.943 ±      2.703  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5       120.000 ±      0.001    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.762 ±      6.382  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         0.255 ±      2.131    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5       364.234 ±    636.775  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5       121.438 ±    212.220    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5         6.000               counts
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5        11.000                   ms
[info] MutableIterablesBenchmark.writePlayJson                                                  thrpt    5    503613.631 ±  10447.483   ops/s
[info] MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate                                   thrpt    5      1717.767 ±     35.911  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate.norm                              thrpt    5      5368.001 ±      0.001    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          thrpt    5         0.087 ±      0.143  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.273 ±      0.452    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5      1742.164 ±    558.358  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      5445.094 ±   1792.372    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.count                                        thrpt    5        26.000               counts
[info] MutableIterablesBenchmark.writePlayJson:·gc.time                                         thrpt    5        30.000                   ms
[info] MutableMapsBenchmark.readJsoniterScala                                                   thrpt    5   3539045.449 ±  32909.321   ops/s
[info] MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate                                    thrpt    5      1672.735 ±     15.800  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               thrpt    5       744.000 ±      0.001    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.079 ±      0.104  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.035 ±      0.047    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5      1669.186 ±     62.021  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5       742.414 ±     22.333    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.count                                         thrpt    5        25.000               counts
[info] MutableMapsBenchmark.readJsoniterScala:·gc.time                                          thrpt    5        23.000                   ms
[info] MutableMapsBenchmark.readPlayJson                                                        thrpt    5    308020.844 ±   9640.668   ops/s
[info] MutableMapsBenchmark.readPlayJson:·gc.alloc.rate                                         thrpt    5      1640.912 ±     52.248  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                    thrpt    5      8384.001 ±      0.001    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                thrpt    5         0.108 ±      0.104  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.554 ±      0.546    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            thrpt    5      1607.061 ±    573.268  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5      8215.515 ±   3118.103    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.count                                              thrpt    5        24.000               counts
[info] MutableMapsBenchmark.readPlayJson:·gc.time                                               thrpt    5        28.000                   ms
[info] MutableMapsBenchmark.writeCirce                                                          thrpt    5    463436.635 ±  14496.926   ops/s
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate                                           thrpt    5      1206.003 ±     37.726  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm                                      thrpt    5      4096.001 ±      0.001    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.079 ±      0.174  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.269 ±      0.591    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      1183.093 ±    684.962  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5      4016.216 ±   2263.566    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.count                                                thrpt    5        18.000               counts
[info] MutableMapsBenchmark.writeCirce:·gc.time                                                 thrpt    5        18.000                   ms
[info] MutableMapsBenchmark.writeJsoniterScala                                                  thrpt    5   2912166.293 ±  17830.414   ops/s
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                   thrpt    5       592.160 ±      3.628  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              thrpt    5       320.000 ±      0.001    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.800 ±      6.400  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.432 ±      3.459    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5       588.459 ±    564.047  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5       317.906 ±    303.586    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.count                                        thrpt    5         9.000               counts
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.time                                         thrpt    5        11.000                   ms
[info] MutableMapsBenchmark.writePlayJson                                                       thrpt    5    348004.217 ±   4578.545   ops/s
[info] MutableMapsBenchmark.writePlayJson:·gc.alloc.rate                                        thrpt    5      1335.579 ±     16.615  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                   thrpt    5      6040.001 ±      0.001    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               thrpt    5         0.079 ±      0.132  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.358 ±      0.594    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5      1330.200 ±     50.872  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5      6015.780 ±    264.877    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.count                                             thrpt    5        20.000               counts
[info] MutableMapsBenchmark.writePlayJson:·gc.time                                              thrpt    5        23.000                   ms
[info] PrimitivesBenchmark.readCirce                                                            thrpt    5    669954.553 ±  13585.585   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                             thrpt    5      2063.443 ±     41.056  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                        thrpt    5      4848.001 ±      0.001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    thrpt    5         0.100 ±      0.215  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.234 ±      0.503    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                thrpt    5      2074.020 ±    500.363  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5      4872.035 ±   1100.942    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                  thrpt    5        31.000               counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                   thrpt    5        28.000                   ms
[info] PrimitivesBenchmark.readJacksonScala                                                     thrpt    5   1536245.363 ±  37007.577   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                      thrpt    5      1163.419 ±     28.112  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 thrpt    5      1192.000 ±      0.001    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             thrpt    5         0.087 ±      0.132  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.090 ±      0.134    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         thrpt    5      1194.042 ±    699.879  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5      1223.425 ±    718.161    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                           thrpt    5        18.000               counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                            thrpt    5        22.000                   ms
[info] PrimitivesBenchmark.readJsoniterScala                                                    thrpt    5   7021250.170 ± 144084.357   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                     thrpt    5       214.116 ±      4.517  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                thrpt    5        48.000 ±      0.001    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            thrpt    5         0.009 ±      0.075  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.002 ±      0.017    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        thrpt    5       204.606 ±    440.429  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5        45.931 ±     98.875    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                          thrpt    5         4.000               counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                           thrpt    5        10.000                   ms
[info] PrimitivesBenchmark.readPlayJson                                                         thrpt    5    246229.468 ±   2420.374   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                          thrpt    5      1714.537 ±     17.023  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                     thrpt    5     10960.002 ±      0.001    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 thrpt    5         0.087 ±      0.119  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.559 ±      0.763    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             thrpt    5      1740.342 ±    609.772  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5     11125.863 ±   3947.836    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                               thrpt    5        26.000               counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                thrpt    5        31.000                   ms
[info] PrimitivesBenchmark.writeCirce                                                           thrpt    5    924885.175 ±  19513.566   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                            thrpt    5      1490.335 ±     31.957  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                       thrpt    5      2536.000 ±      0.001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   thrpt    5         0.075 ±      0.146  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.128 ±      0.248    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               thrpt    5      1522.730 ±    699.682  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5      2592.449 ±   1239.942    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                 thrpt    5        23.000               counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                  thrpt    5        22.000                   ms
[info] PrimitivesBenchmark.writeJacksonScala                                                    thrpt    5   2541609.907 ±  86394.269   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                     thrpt    5      1046.368 ±     34.932  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                thrpt    5       648.000 ±      0.001    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            thrpt    5         0.092 ±      0.156  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.057 ±      0.097    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        thrpt    5      1057.483 ±    554.872  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5       655.046 ±    349.314    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                          thrpt    5        16.000               counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                           thrpt    5        18.000                   ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                   thrpt    5   6060318.314 ± 331484.420   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                    thrpt    5       677.620 ±     36.963  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               thrpt    5       176.000 ±      0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.083 ±      0.234  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.022 ±      0.061    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5       654.067 ±      4.976  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5       169.912 ±     10.196    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                         thrpt    5        10.000               counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                          thrpt    5         9.000                   ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                           thrpt    5   6120666.271 ±  92967.441   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            thrpt    5       373.283 ±      5.773  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       thrpt    5        96.000 ±      0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                   thrpt    5         0.777 ±      6.464  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm              thrpt    5         0.200 ±      1.669    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space               thrpt    5       364.600 ±    641.981  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm          thrpt    5        93.730 ±    164.514    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 thrpt    5         6.000               counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                  thrpt    5        11.000                   ms
[info] PrimitivesBenchmark.writePlayJson                                                        thrpt    5    341382.022 ±   4197.191   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                         thrpt    5      1738.396 ±     21.225  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                    thrpt    5      8016.001 ±      0.001    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                thrpt    5         0.087 ±      0.154  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.403 ±      0.714    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            thrpt    5      1739.934 ±    559.432  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5      8024.365 ±   2656.956    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                              thrpt    5        26.000               counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                               thrpt    5        30.000                   ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                    thrpt    5   4158182.868 ±  87760.069   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      3127.946 ±     64.097  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5      1184.000 ±      0.001    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5         0.096 ±      0.156  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.036 ±      0.059    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5      3182.053 ±    692.278  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5      1204.539 ±    266.035    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                          thrpt    5        47.000               counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                           thrpt    5        43.000                   ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                             thrpt    5   4144966.939 ±  81940.681   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                              thrpt    5      2148.659 ±     42.238  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                         thrpt    5       816.000 ±      0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.108 ±      0.174  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         0.041 ±      0.066    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5      2153.654 ±    722.896  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5       817.850 ±    271.206    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                   thrpt    5        32.000               counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                    thrpt    5        39.000                   ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                            thrpt    5   6622010.779 ± 325885.495   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5       706.828 ±     35.025  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5       168.000 ±      0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.067 ±      0.132  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         0.016 ±      0.032    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5       726.756 ±    567.225  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5       172.641 ±    131.470    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                  thrpt    5        11.000               counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                   thrpt    5        10.000                   ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                   thrpt    5   2780016.254 ±  53832.541   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      1158.599 ±     22.619  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5       656.000 ±      0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5         0.083 ±      0.170  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.047 ±      0.097    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5      1184.523 ±    696.777  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5       670.853 ±    399.474    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                         thrpt    5        18.000               counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                          thrpt    5        17.000                   ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                            thrpt    5   1965182.030 ±  39152.231   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                             thrpt    5       609.267 ±     12.213  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        thrpt    5       488.000 ±      0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.050 ±      0.201  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         0.040 ±      0.162    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5       649.424 ±     21.571  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5       520.171 ±     17.401    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                  thrpt    5        10.000               counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                   thrpt    5        10.000                   ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                           thrpt    5   8954452.098 ± 238080.437   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5       864.664 ±     23.141  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5       152.000 ±      0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5         0.079 ±      0.119  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5         0.014 ±      0.021    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5       851.670 ±    687.700  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5       149.764 ±    121.866    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5        13.000               counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5        12.000                   ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                   thrpt    5   8482149.836 ± 119119.289   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    thrpt    5        ≈ 10⁻⁴               MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               thrpt    5        ≈ 10⁻⁴                 B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                         thrpt    5           ≈ 0               counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                thrpt    5   3501366.941 ± 104259.676   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                 thrpt    5      1121.186 ±     33.335  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                            thrpt    5       504.000 ±      0.001    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        thrpt    5         0.079 ±      0.067  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.036 ±      0.030    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    thrpt    5      1116.466 ±    686.732  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               thrpt    5       502.139 ±    316.529    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                      thrpt    5        17.000               counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                       thrpt    5        17.000                   ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                 thrpt    5    793259.551 ±  15826.924   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                  thrpt    5      1330.447 ±     26.564  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                             thrpt    5      2640.001 ±      0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                         thrpt    5         0.092 ±      0.122  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.182 ±      0.245    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                     thrpt    5      1324.548 ±     47.192  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                thrpt    5      2628.395 ±    125.672    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                       thrpt    5        20.000               counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                        thrpt    5        19.000                   ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                          thrpt    5   1111996.306 ±  23079.372   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                           thrpt    5       768.714 ±     15.893  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                      thrpt    5      1088.000 ±      0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                  thrpt    5         0.054 ±      0.146  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm             thrpt    5         0.077 ±      0.206    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space              thrpt    5       718.950 ±    565.231  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm         thrpt    5      1017.382 ±    794.130    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                thrpt    5        11.000               counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                 thrpt    5        13.000                   ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                         thrpt    5   1969404.772 ±  14397.983   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                          thrpt    5       550.521 ±      3.973  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                     thrpt    5       440.000 ±      0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                 thrpt    5         0.662 ±      5.302  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm            thrpt    5         0.529 ±      4.233    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space             thrpt    5       528.864 ±    695.449  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5       422.770 ±    556.808    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                               thrpt    5         8.000               counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                thrpt    5         8.000                   ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                thrpt    5   1655910.864 ±  31010.045   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                 thrpt    5      1346.644 ±     25.172  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                            thrpt    5      1280.000 ±      0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                        thrpt    5         0.100 ±      0.104  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.095 ±      0.098    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                    thrpt    5      1322.105 ±     50.830  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm               thrpt    5      1256.689 ±     49.147    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                      thrpt    5        20.000               counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                       thrpt    5        20.000                   ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                         thrpt    5   2597284.534 ±  56841.234   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                          thrpt    5      1042.837 ±     22.393  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                     thrpt    5       632.000 ±      0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                 thrpt    5         0.062 ±      0.098  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm            thrpt    5         0.038 ±      0.059    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space             thrpt    5      1053.384 ±    587.588  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5       638.788 ±    371.235    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                               thrpt    5        16.000               counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                thrpt    5        18.000                   ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                        thrpt    5   2764540.794 ±  72215.941   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                         thrpt    5       646.344 ±     17.010  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                    thrpt    5       368.000 ±      0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                thrpt    5         0.801 ±      6.317  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm           thrpt    5         0.455 ±      3.582    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space            thrpt    5       654.219 ±      7.477  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5       372.495 ±      8.512    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                              thrpt    5        10.000               counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                               thrpt    5        11.000                   ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                thrpt    5   2842272.424 ±  31201.078   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                 thrpt    5        ≈ 10⁻⁴               MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm            thrpt    5        ≈ 10⁻⁴                 B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                      thrpt    5           ≈ 0               counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                             thrpt    5   2434572.875 ±  18032.574   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                              thrpt    5      1113.795 ±      8.231  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                         thrpt    5       720.000 ±      0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                     thrpt    5         0.083 ±      0.098  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                thrpt    5         0.054 ±      0.064    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                 thrpt    5      1116.059 ±    686.838  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm            thrpt    5       721.422 ±    442.555    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                   thrpt    5        17.000               counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                    thrpt    5        17.000                   ms
[info] TwitterAPIBenchmark.readCirce                                                            thrpt    5     11756.506 ±   3235.315   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                             thrpt    5      1721.074 ±    464.154  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                        thrpt    5    230423.461 ±   1271.917    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    thrpt    5         0.117 ±      0.155  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5        15.935 ±     24.541    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                thrpt    5      1722.853 ±    581.295  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5    230986.508 ±  67024.489    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                  thrpt    5        26.000               counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                   thrpt    5        36.000                   ms
[info] TwitterAPIBenchmark.readJacksonScala                                                     thrpt    5     15224.642 ±    255.120   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                      thrpt    5       214.971 ±      3.503  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 thrpt    5     22224.030 ±      0.019    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             thrpt    5         0.158 ±      1.229  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5        16.379 ±    127.335    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         thrpt    5       217.948 ±    482.090  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5     22560.969 ±  49914.835    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                           thrpt    5         4.000               counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                            thrpt    5         6.000                   ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                    thrpt    5     37966.979 ±   1094.517   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                     thrpt    5       352.347 ±     10.143  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                thrpt    5     14608.012 ±      0.006    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            thrpt    5         0.678 ±      5.785  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5        28.052 ±    239.387    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        thrpt    5       350.755 ±    367.090  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     14538.056 ±  15200.701    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                          thrpt    5         6.000               counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                           thrpt    5        11.000                   ms
[info] TwitterAPIBenchmark.readPlayJson                                                         thrpt    5      3300.266 ±    653.815   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                          thrpt    5      1001.907 ±    199.122  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                     thrpt    5    477843.820 ±    174.835    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 thrpt    5         0.017 ±      0.067  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            thrpt    5         7.745 ±     31.168    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             thrpt    5       987.396 ±     36.586  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5    471859.170 ±  88088.158    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                               thrpt    5        15.000               counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                thrpt    5        21.000                   ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                    thrpt    5     56246.655 ±    712.091   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                     thrpt    5       718.280 ±      8.655  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                thrpt    5     20100.007 ±      0.190    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            thrpt    5         0.037 ±      0.164  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5         1.050 ±      4.606    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        thrpt    5       717.785 ±    552.394  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     20091.302 ±  15608.320    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                          thrpt    5        11.000               counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                           thrpt    5        14.000                   ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                   thrpt    5     88174.887 ±   1925.949   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                    thrpt    5       576.360 ±     12.715  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               thrpt    5     10288.005 ±      0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.822 ±      6.586  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5        14.616 ±    117.038    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5       587.854 ±    562.787  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5     10499.636 ±  10127.543    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                         thrpt    5         9.000               counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                          thrpt    5        10.000                   ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                           thrpt    5     99125.839 ±   4408.413   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            thrpt    5        12.091 ±      0.538  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       thrpt    5       192.004 ±      0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 thrpt    5           ≈ 0               counts
[info] Benchmark result is saved to jdk9.json
[success] Total time: 3792 s, completed Feb 24, 2018, 8:45:25 PM
