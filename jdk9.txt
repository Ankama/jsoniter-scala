[info] Loading settings from idea.sbt,build.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.5 on 4 projects.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed Apr 10, 2018 12:36:42 AM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1026:69: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble: Double = java.lang.Double.parseDouble(new String(buf, 0, mark, head - mark))
[warn]                                                                     ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:444:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:452:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:941:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] four warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.22.3-SNAPSHOT.jar ...
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.22.3-SNAPSHOT.jar ...
[info] Compiling 52 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:16:48: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:57: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "bd");
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         _bd = in.readBigDecimal(_bd);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       _os = d1(in, _os)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:66: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Arrays':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Arrays] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Array[Int]] = new Array[Array[Int]](0);
[info]       private[this] val v1: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private[this] val v2: Array[Int] = new Array[Int](0);
[info]       private[this] def d1(in: JsonReader, default: Array[Array[Int]]): Array[Array[Int]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Array[Int]](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, JsoniterCodecs.this.intArrayCodec.decodeValue(in, v2));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = if (in.isNextToken('{'))
[info]         {
[info]           var _aa: Array[Array[Int]] = v0;
[info]           var _a: Array[BigInt] = v1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3104 => if (in.isCharBufEqualsTo(l, "aa"))
[info]                       _aa = d1(in, _aa)
[info]                     else
[info]                       in.skip()
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       _a = JsoniterCodecs.this.bigIntArrayCodec.decodeValue(in, _a)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Arrays(aa = _aa, a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: Array[Array[Int]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             JsoniterCodecs.this.intArrayCodec.encodeValue(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.aa;
[info]           if (v.length.>(0))
[info]             {
[info]               out.writeNonEscapedAsciiKey("aa");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.a;
[info]           if (v.length.>(0))
[info]             {
[info]               out.writeNonEscapedAsciiKey("a");
[info]               JsoniterCodecs.this.bigIntArrayCodec.encodeValue(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val arraysCodec: JsonValueCodec[Arrays] = make[Arrays](CodecMakerConfig())
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.BitSets':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.BitSets] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = BitSet.newBuilder;
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               BitSet.empty;
[info]             do 
[info]               x.add(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = if (in.isNextToken('{'))
[info]         {
[info]           var _bs: scala.collection.immutable.BitSet = BitSet.empty;
[info]           var _mbs: scala.collection.mutable.BitSet = BitSet.empty;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3153 => if (in.isCharBufEqualsTo(l, "bs"))
[info]                       _bs = d1(in, _bs)
[info]                     else
[info]                       in.skip()
[info]                     case 107902 => if (in.isCharBufEqualsTo(l, "mbs"))
[info]                       _mbs = d2(in, _mbs)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.BitSets(bs = _bs, mbs = _mbs)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.bs;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("bs");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mbs;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mbs");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetsCodec: JsonValueCodec[BitSets] = make[BitSets](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:122: Generated JSON codec for type 'scala.collection.mutable.ArrayBuffer[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.ArrayBuffer[Boolean]] {
[info]       def nullValue: scala.collection.mutable.ArrayBuffer[Boolean] = ArrayBuffer.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               ArrayBuffer.empty[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayBufferCodec: JsonValueCodec[mutable.ArrayBuffer[Boolean]] = make[mutable.ArrayBuffer[Boolean]](CodecMakerConfig())
[info]                                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:85: Generated JSON codec for type 'List[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[List[Boolean]] {
[info]       def nullValue: List[Boolean] = List.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: List[Boolean]): List[Boolean] = d0(in, default);
[info]       def encodeValue(x: List[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: List[Boolean]): List[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: List[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var l = x;
[info]         while (l.isEmpty.`unary_!`) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(l.head);
[info]             l = l.tail
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanListCodec: JsonValueCodec[List[Boolean]] = make[List[Boolean]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:91: Generated JSON codec for type 'scala.collection.immutable.Vector[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Vector[Boolean]] {
[info]       def nullValue: scala.collection.immutable.Vector[Boolean] = Vector.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanVectorCodec: JsonValueCodec[Vector[Boolean]] = make[Vector[Boolean]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:79: Generated JSON codec for type 'Array[Char]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Char]] {
[info]       def nullValue: Array[Char] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Char]): Array[Char] = d0(in, default);
[info]       def encodeValue(x: Array[Char], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Char] = new Array[Char](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Char]): Array[Char] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Char](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readChar());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Char], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val charArrayCodec: JsonValueCodec[Array[Char]] = make[Array[Char]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Double] = new Array[Double](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Float] = new Array[Float](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Int] = new Array[Int](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Short] = new Array[Short](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Long] = new Array[Long](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:75: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Iterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Iterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.immutable.Vector[String]): scala.collection.immutable.Vector[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: scala.collection.immutable.HashSet[Long]): scala.collection.immutable.HashSet[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = HashSet.newBuilder[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: List[scala.collection.immutable.HashSet[Long]]): List[scala.collection.immutable.HashSet[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[scala.collection.immutable.HashSet[Long]];
[info]             do 
[info]               x.+=(d4(in, HashSet.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.immutable.Vector[String] = Vector.empty[String];
[info]           var _s: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]           var _ls: List[scala.collection.immutable.HashSet[Long]] = List.empty[scala.collection.immutable.HashSet[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Iterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.immutable.Vector[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: scala.collection.immutable.HashSet[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: List[scala.collection.immutable.HashSet[Long]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var l = x;
[info]         while (l.isEmpty.`unary_!`) 
[info]           {
[info]             out.writeComma();
[info]             e4(l.head, out);
[info]             l = l.tail
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.l;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("l");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.s;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("s");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.ls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("ls");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val iterablesCodec: JsonValueCodec[Iterables] = make[Iterables](CodecMakerConfig())
[info]                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:60: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Maps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Maps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Maps = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.immutable.HashMap[String,Double]): scala.collection.immutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[String, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: scala.collection.immutable.HashMap[Long,Double]): scala.collection.immutable.HashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[Long, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]]): scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), d3(in, HashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Maps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.immutable.HashMap[String,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: scala.collection.immutable.HashMap[Long,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.m;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("m");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mm;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mm");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapsCodec: JsonValueCodec[Maps] = make[Maps](CodecMakerConfig())
[info]                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "i");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:96: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[String]): scala.collection.mutable.ArrayBuffer[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               ArrayBuffer.empty[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.mutable.TreeSet[Int]): scala.collection.mutable.TreeSet[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               TreeSet.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: scala.collection.mutable.Set[Long]): scala.collection.mutable.Set[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Set.empty[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]]): scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = ResizableArray.newBuilder[scala.collection.mutable.Set[Long]];
[info]             do 
[info]               x.+=(d4(in, Set.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.mutable.ArrayBuffer[String] = ArrayBuffer.empty[String];
[info]           var _s: scala.collection.mutable.TreeSet[Int] = TreeSet.empty[Int];
[info]           var _ls: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = ResizableArray.empty[scala.collection.mutable.Set[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.mutable.ArrayBuffer[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.mutable.TreeSet[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: scala.collection.mutable.Set[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e4(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.l;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("l");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.s;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("s");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.ls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("ls");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableIterablesCodec: JsonValueCodec[MutableIterables] = make[MutableIterables](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:81: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.mutable.HashMap[String,Double]): scala.collection.mutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               HashMap.empty[String, Double];
[info]             do 
[info]               x.update(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: scala.collection.mutable.OpenHashMap[Long,Double]): scala.collection.mutable.OpenHashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               OpenHashMap.empty[Long, Double];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]]): scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]             do 
[info]               x.update(in.readKeyAsInt(), d3(in, OpenHashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.mutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.mutable.HashMap[String,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: scala.collection.mutable.OpenHashMap[Long,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.m;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("m");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mm;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mm");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapsCodec: JsonValueCodec[MutableMaps] = make[MutableMaps](CodecMakerConfig())
[info]                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:53:90: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.immutable.IntMap[Double]): scala.collection.immutable.IntMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: scala.collection.immutable.LongMap[Double]): scala.collection.immutable.LongMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = LongMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]]): scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]             do 
[info]               x.update(in.readKeyAsLong(), d3(in, LongMap.empty[Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.IntMap[Double] = IntMap.empty[Double];
[info]           var _mm: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.immutable.IntMap[Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: scala.collection.immutable.LongMap[Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.m;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("m");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mm;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mm");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intAndLongMapsCodec: JsonValueCodec[IntAndLongMaps] = make[IntAndLongMaps](CodecMakerConfig())
[info]                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:54:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var req0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readByte();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readShort();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         _bl = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         _ch = in.readChar();
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         _dbl = in.readDouble();
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         _f = in.readFloat();
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:55:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "l");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:56:65: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("a");
[info]       private[this] val r1: Array[String] = Array("b");
[info]       private[this] val r2: Array[String] = Array("l", "r");
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         _a = in.readInt();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readString(_b);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = JsoniterCodecs.this.adtCodec.decodeValue(in, _l);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         _r = JsoniterCodecs.this.adtCodec.decodeValue(in, _r);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:57:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("status");
[info]       private[this] val r1: Array[String] = Array("distance", "duration", "status");
[info]       private[this] val r2: Array[String] = Array("text", "value");
[info]       private[this] def d1(in: JsonReader, default: IndexedSeq[String]): IndexedSeq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         _value = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         _distance = d6(in, _distance);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         _duration = d6(in, _duration);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       _elements = d4(in, _elements)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _origin_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _rows: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       _destination_addresses = d1(in, _destination_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       _origin_addresses = d1(in, _origin_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       _rows = d2(in, _rows)
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: IndexedSeq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:58:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] val r1: Array[String] = Array("screen_name", "name", "id", "id_str");
[info]       private[this] val r2: Array[String] = Array("url", "expanded_url", "display_url");
[info]       private[this] val r3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private[this] val r4: Array[String] = Array("url", "description");
[info]       private[this] val r5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         _expanded_url = in.readString(_expanded_url);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         _display_url = in.readString(_display_url);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       _hashtags = d3(in, _hashtags)
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       _symbols = d3(in, _symbols)
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       _user_mentions = d4(in, _user_mentions)
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = d12(in, _url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = d12(in, _description);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r4(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var req0 = -1;
[info]           var req1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         _location = in.readString(_location);
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = in.readString(_description);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d11(in, _entities);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         _protected = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         _followers_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         _friends_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         _listed_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         _favourites_count = in.readInt();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         _utc_offset = in.readInt();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         _time_zone = in.readString(_time_zone);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         _geo_enabled = in.readBoolean();
[info]                         req0.&=(-65537)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         _verified = in.readBoolean();
[info]                         req0.&=(-131073)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         _statuses_count = in.readInt();
[info]                         req0.&=(-262145)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-524289)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         _contributors_enabled = in.readBoolean();
[info]                         req0.&=(-1048577)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         _is_translator = in.readBoolean();
[info]                         req0.&=(-2097153)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         _is_translation_enabled = in.readBoolean();
[info]                         req0.&=(-4194305)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         _profile_background_color = in.readString(_profile_background_color);
[info]                         req0.&=(-8388609)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url);
[info]                         req0.&=(-16777217)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https);
[info]                         req0.&=(-33554433)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         _profile_background_tile = in.readBoolean();
[info]                         req0.&=(-67108865)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         _profile_image_url = in.readString(_profile_image_url);
[info]                         req0.&=(-134217729)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https);
[info]                         req0.&=(-268435457)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         _profile_banner_url = in.readString(_profile_banner_url);
[info]                         req0.&=(-536870913)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         _profile_link_color = in.readString(_profile_link_color);
[info]                         req0.&=(-1073741825)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color);
[info]                         req0.&=(2147483647)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color);
[info]                         req1.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         _profile_text_color = in.readString(_profile_text_color);
[info]                         req1.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         _profile_use_background_image = in.readBoolean();
[info]                         req1.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         _has_extended_profile = in.readBoolean();
[info]                         req1.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         _default_profile = in.readBoolean();
[info]                         req1.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         _default_profile_image = in.readBoolean();
[info]                         req1.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         _following = in.readBoolean();
[info]                         req1.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         _follow_request_sent = in.readBoolean();
[info]                         req1.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         _notifications = in.readBoolean();
[info]                         req1.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         _translator_type = in.readString(_translator_type);
[info]                         req1.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r3(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           if (req1.!=(0))
[info]             in.requiredFieldError(r3(Integer.numberOfTrailingZeros(req1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 32767;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r5(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 65535;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         _retweeted_status = d13(in, _retweeted_status);
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           out.writeVal(x.expanded_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           out.writeVal(x.display_url)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           out.writeVal(x.location)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           out.writeVal(x.description)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           out.writeVal(x.time_zone)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           out.writeVal(x.profile_background_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           out.writeVal(x.profile_background_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           out.writeVal(x.profile_background_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           out.writeVal(x.profile_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           out.writeVal(x.profile_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           out.writeVal(x.profile_banner_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           out.writeVal(x.profile_link_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           out.writeVal(x.profile_sidebar_border_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           out.writeVal(x.profile_sidebar_fill_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           out.writeVal(x.profile_text_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           out.writeVal(x.translator_type)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:17:18: local val v1 in value arraysFormat is never used
[warn]     implicit val v1: Format[Array[BigInt]] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:23:18: local val v1 in value bitSetsFormat is never used
[warn]     implicit val v1: Reads[BitSet] = Reads[BitSet](js => JsSuccess(BitSet(js.as[Array[Int]]: _*)))
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:24:18: local val v2 in value bitSetsFormat is never used
[warn]     implicit val v2: Reads[mutable.BitSet] =
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:31:18: local val v1 in value mapsFormat is never used
[warn]     implicit val v1: OFormat[HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:34:18: local val v2 in value mapsFormat is never used
[warn]     implicit val v2: OFormat[Map[Int, HashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:46:18: local val v1 in value mutableMapsFormat is never used
[warn]     implicit val v1: OFormat[mutable.HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:49:18: local val v2 in value mutableMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.Map[Int, mutable.OpenHashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:66:18: local val v1 in value intAndLongMapsFormat is never used
[warn]     implicit val v1: OFormat[IntMap[Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:71:18: local val v2 in value intAndLongMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.LongMap[LongMap[Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:83:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:90:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:91:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:92:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:97:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:98:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:99:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:103:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:104:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:105:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:106:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:107:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:108:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:109:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 23 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.22.3-SNAPSHOT.jar ...
[info] Compiling 45 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
Processing 351 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 573 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.22.3-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.22.3-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -jvm /usr/lib/jvm/java-9-oracle/bin/java -prof gc -rf json -rff jdk9.json .*Benchmark.*
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 00:52:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 368021.645 ops/s
[info] # Warmup Iteration   2: 711386.228 ops/s
[info] # Warmup Iteration   3: 712456.857 ops/s
[info] Iteration   1: 705754.574 ops/s
[info]                  ·gc.alloc.rate:                                  1865.087 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4160.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.123 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.275 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1694.397 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3779.284 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                8.913 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 721191.455 ops/s
[info]                  ·gc.alloc.rate:                                  1906.086 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4160.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.276 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4457.231 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 722304.648 ops/s
[info]                  ·gc.alloc.rate:            1909.737 MB/sec
[info]                  ·gc.alloc.rate.norm:       4160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.472 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3708.513 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 714527.447 ops/s
[info]                  ·gc.alloc.rate:                                  1888.339 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4160.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.056 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4498.639 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 714164.855 ops/s
[info]                  ·gc.alloc.rate:                                  1887.289 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4160.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.978 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4500.969 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   715588.596 ±(99.9%) 25568.279 ops/s [Average]
[info]   (min, avg, max) = (705754.574, 715588.596, 722304.648), stdev = 6640.001
[info]   CI (99.9%): [690020.317, 741156.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   1891.308 ±(99.9%) 68.627 MB/sec [Average]
[info]   (min, avg, max) = (1865.087, 1891.308, 1909.737), stdev = 17.822
[info]   CI (99.9%): [1822.681, 1959.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4160.001, 4160.001, 4160.001), stdev = 0.001
[info]   CI (99.9%): [4160.001, 4160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.208 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.123), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.059 ±(99.9%) 0.464 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.059, 0.275), stdev = 0.121
[info]   CI (99.9%): [≈ 0, 0.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1904.636 ±(99.9%) 724.910 MB/sec [Average]
[info]   (min, avg, max) = (1694.397, 1904.636, 2042.276), stdev = 188.257
[info]   CI (99.9%): [1179.726, 2629.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4188.927 ±(99.9%) 1568.734 B/op [Average]
[info]   (min, avg, max) = (3708.513, 4188.927, 4500.969), stdev = 407.395
[info]   CI (99.9%): [2620.194, 5757.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.783 ±(99.9%) 15.349 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.783, 8.913), stdev = 3.986
[info]   CI (99.9%): [≈ 0, 17.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 10.000), stdev = 2.387
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.25% complete, ETA 01:24:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 389882.081 ops/s
[info] # Warmup Iteration   2: 1407545.118 ops/s
[info] # Warmup Iteration   3: 1461461.342 ops/s
[info] Iteration   1: 1455666.961 ops/s
[info]                  ·gc.alloc.rate:                   1035.718 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1452.691 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.720 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 1459157.236 ops/s
[info]                  ·gc.alloc.rate:            1038.158 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1086.394 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   3: 1463499.151 ops/s
[info]                  ·gc.alloc.rate:                   1041.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.646 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1088.166 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.015 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 1469084.918 ops/s
[info]                  ·gc.alloc.rate:                                  1045.330 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.175 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.188 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.116 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1094.057 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 1477382.493 ops/s
[info]                  ·gc.alloc.rate:            1051.309 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.183 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1087.906 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1464958.152 ±(99.9%) 32984.311 ops/s [Average]
[info]   (min, avg, max) = (1455666.961, 1464958.152, 1477382.493), stdev = 8565.921
[info]   CI (99.9%): [1431973.841, 1497942.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1042.351 ±(99.9%) 23.732 MB/sec [Average]
[info]   (min, avg, max) = (1035.718, 1042.351, 1051.309), stdev = 6.163
[info]   CI (99.9%): [1018.620, 1066.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.035 ±(99.9%) 0.302 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.175), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.038 ±(99.9%) 0.323 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.188), stdev = 0.084
[info]   CI (99.9%): [≈ 0, 0.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1080.865 ±(99.9%) 565.562 MB/sec [Average]
[info]   (min, avg, max) = (1007.007, 1080.865, 1343.373), stdev = 146.875
[info]   CI (99.9%): [515.303, 1646.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1161.843 ±(99.9%) 626.175 B/op [Average]
[info]   (min, avg, max) = (1086.394, 1161.843, 1452.691), stdev = 162.616
[info]   CI (99.9%): [535.668, 1788.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.147 ±(99.9%) 8.412 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.147, 5.015), stdev = 2.184
[info]   CI (99.9%): [≈ 0, 9.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.800, 19.000), stdev = 7.259
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.50% complete, ETA 01:23:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2354521.868 ops/s
[info] # Warmup Iteration   2: 3223747.731 ops/s
[info] # Warmup Iteration   3: 3251168.569 ops/s
[info] Iteration   1: 3316034.333 ops/s
[info]                  ·gc.alloc.rate:                   219.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        159.668 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.316 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3309530.218 ops/s
[info]                  ·gc.alloc.rate:            218.722 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.115 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 160.295 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   3: 3310842.875 ops/s
[info]                  ·gc.alloc.rate:      218.739 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3331744.350 ops/s
[info]                  ·gc.alloc.rate:            220.129 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.029 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 159.229 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 3337114.615 ops/s
[info]                  ·gc.alloc.rate:            220.563 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.137 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 158.968 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   3321053.278 ±(99.9%) 48497.046 ops/s [Average]
[info]   (min, avg, max) = (3309530.218, 3321053.278, 3337114.615), stdev = 12594.529
[info]   CI (99.9%): [3272556.232, 3369550.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   219.447 ±(99.9%) 3.263 MB/sec [Average]
[info]   (min, avg, max) = (218.722, 219.447, 220.563), stdev = 0.847
[info]   CI (99.9%): [216.184, 222.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   269.526 ±(99.9%) 580.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.526, 337.137), stdev = 150.670
[info]   CI (99.9%): [≈ 0, 849.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   127.632 ±(99.9%) 274.744 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 127.632, 160.295), stdev = 71.350
[info]   CI (99.9%): [≈ 0, 402.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.063 ±(99.9%) 0.544 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.063, 0.316), stdev = 0.141
[info]   CI (99.9%): [≈ 0, 0.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0.76% complete, ETA 01:23:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14763.435 ops/s
[info] # Warmup Iteration   2: 155232.409 ops/s
[info] # Warmup Iteration   3: 156980.853 ops/s
[info] Iteration   1: 161519.445 ops/s
[info]                  ·gc.alloc.rate:                   1343.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              13088.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.712 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13098.518 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.333 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 12.982 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 161107.266 ops/s
[info]                  ·gc.alloc.rate:                   1339.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              13088.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.940 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13171.463 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.328 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 52.061 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 162085.994 ops/s
[info]                  ·gc.alloc.rate:                                  1347.637 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13088.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.139 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.351 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.361 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13221.285 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 164072.954 ops/s
[info]                  ·gc.alloc.rate:                                  1364.725 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13088.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.913 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13061.033 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 163766.209 ops/s
[info]                  ·gc.alloc.rate:            1361.533 MB/sec
[info]                  ·gc.alloc.rate.norm:       13088.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.291 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13085.673 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   162510.374 ±(99.9%) 5148.043 ops/s [Average]
[info]   (min, avg, max) = (161107.266, 162510.374, 164072.954), stdev = 1336.930
[info]   CI (99.9%): [157362.331, 167658.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1351.385 ±(99.9%) 42.998 MB/sec [Average]
[info]   (min, avg, max) = (1339.399, 1351.385, 1364.725), stdev = 11.166
[info]   CI (99.9%): [1308.387, 1394.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13088.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13088.002, 13088.003, 13088.003), stdev = 0.001
[info]   CI (99.9%): [13088.002, 13088.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.238 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.139), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.275 ±(99.9%) 2.316 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.275, 1.351), stdev = 0.601
[info]   CI (99.9%): [≈ 0, 2.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1355.443 ±(99.9%) 32.362 MB/sec [Average]
[info]   (min, avg, max) = (1344.712, 1355.443, 1361.913), stdev = 8.404
[info]   CI (99.9%): [1323.081, 1387.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   13127.595 ±(99.9%) 256.406 B/op [Average]
[info]   (min, avg, max) = (13061.033, 13127.595, 13221.285), stdev = 66.588
[info]   CI (99.9%): [12871.189, 13384.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 8.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 5.328), stdev = 2.307
[info]   CI (99.9%): [≈ 0, 10.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   13.009 ±(99.9%) 86.806 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.009, 52.061), stdev = 22.543
[info]   CI (99.9%): [≈ 0, 99.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 9.200, 18.000), stdev = 7.155
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 1.01% complete, ETA 01:23:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 174478.845 ops/s
[info] # Warmup Iteration   2: 542398.915 ops/s
[info] # Warmup Iteration   3: 544543.664 ops/s
[info] Iteration   1: 544157.785 ops/s
[info]                  ·gc.alloc.rate:                                  1739.391 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5032.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.036 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.103 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1688.203 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4883.917 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                9.633 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   2: 551795.632 ops/s
[info]                  ·gc.alloc.rate:                                  1763.819 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5032.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.107 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.306 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.623 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4854.563 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 550916.773 ops/s
[info]                  ·gc.alloc.rate:            1761.157 MB/sec
[info]                  ·gc.alloc.rate.norm:       5032.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.757 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4862.280 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 545668.867 ops/s
[info]                  ·gc.alloc.rate:                                  1744.626 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5032.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.953 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4908.920 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 550607.741 ops/s
[info]                  ·gc.alloc.rate:                                  1760.117 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5032.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4864.991 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   548629.360 ±(99.9%) 13329.436 ops/s [Average]
[info]   (min, avg, max) = (544157.785, 548629.360, 551795.632), stdev = 3461.612
[info]   CI (99.9%): [535299.924, 561958.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   1753.822 ±(99.9%) 42.453 MB/sec [Average]
[info]   (min, avg, max) = (1739.391, 1753.822, 1763.819), stdev = 11.025
[info]   CI (99.9%): [1711.369, 1796.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5032.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5032.001, 5032.001, 5032.001), stdev = 0.001
[info]   CI (99.9%): [5032.001, 5032.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.175 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.107), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.086 ±(99.9%) 0.499 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.086, 0.306), stdev = 0.130
[info]   CI (99.9%): [≈ 0, 0.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1699.047 ±(99.9%) 23.347 MB/sec [Average]
[info]   (min, avg, max) = (1688.203, 1699.047, 1701.953), stdev = 6.063
[info]   CI (99.9%): [1675.700, 1722.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4874.934 ±(99.9%) 84.137 B/op [Average]
[info]   (min, avg, max) = (4854.563, 4874.934, 4908.920), stdev = 21.850
[info]   CI (99.9%): [4790.797, 4959.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.927 ±(99.9%) 16.589 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.927, 9.633), stdev = 4.308
[info]   CI (99.9%): [≈ 0, 18.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 15.000), stdev = 4.827
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.26% complete, ETA 01:23:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_3eb5d47b/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 427426.906 ops/s
[info] # Warmup Iteration   2: 1671841.529 ops/s
[info] # Warmup Iteration   3: 1698632.295 ops/s
[info] Iteration   1: 1717962.939 ops/s
[info]                  ·gc.alloc.rate:            611.180 MB/sec
[info]                  ·gc.alloc.rate.norm:       560.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.686 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 307.576 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 1709608.228 ops/s
[info]                  ·gc.alloc.rate:            608.318 MB/sec
[info]                  ·gc.alloc.rate.norm:       560.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.508 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 618.170 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 1705450.649 ops/s
[info]                  ·gc.alloc.rate:            606.771 MB/sec
[info]                  ·gc.alloc.rate.norm:       560.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.402 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 619.649 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 1742468.465 ops/s
[info]                  ·gc.alloc.rate:            619.931 MB/sec
[info]                  ·gc.alloc.rate.norm:       560.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.417 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 606.509 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 1742029.117 ops/s
[info]                  ·gc.alloc.rate:            619.790 MB/sec
[info]                  ·gc.alloc.rate.norm:       560.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.407 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 606.638 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   1723503.880 ±(99.9%) 68139.813 ops/s [Average]
[info]   (min, avg, max) = (1705450.649, 1723503.880, 1742468.465), stdev = 17695.693
[info]   CI (99.9%): [1655364.066, 1791643.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   613.198 ±(99.9%) 24.199 MB/sec [Average]
[info]   (min, avg, max) = (606.771, 613.198, 619.931), stdev = 6.284
[info]   CI (99.9%): [588.999, 637.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   560.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (560.000, 560.000, 560.000), stdev = 0.001
[info]   CI (99.9%): [560.000, 560.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   604.284 ±(99.9%) 578.177 MB/sec [Average]
[info]   (min, avg, max) = (335.686, 604.284, 671.508), stdev = 150.151
[info]   CI (99.9%): [26.107, 1182.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   551.708 ±(99.9%) 526.054 B/op [Average]
[info]   (min, avg, max) = (307.576, 551.708, 619.649), stdev = 136.615
[info]   CI (99.9%): [25.655, 1077.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.400, 10.000), stdev = 1.949
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.51% complete, ETA 01:22:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8179923.037 ops/s
[info] # Warmup Iteration   2: 7508120.733 ops/s
[info] # Warmup Iteration   3: 7600290.556 ops/s
[info] Iteration   1: 7606643.460 ops/s
[info]                  ·gc.alloc.rate:            386.732 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.437 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69.596 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 7641485.638 ops/s
[info]                  ·gc.alloc.rate:            388.445 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.413 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69.284 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 7602503.820 ops/s
[info]                  ·gc.alloc.rate:            386.384 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.688 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 139.279 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 7759104.148 ops/s
[info]                  ·gc.alloc.rate:                   394.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        68.237 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 8081752.137 ops/s
[info]                  ·gc.alloc.rate:            410.715 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 65.642 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   7738297.840 ±(99.9%) 778599.942 ops/s [Average]
[info]   (min, avg, max) = (7602503.820, 7738297.840, 8081752.137), stdev = 202199.932
[info]   CI (99.9%): [6959697.899, 8516897.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   393.322 ±(99.9%) 39.405 MB/sec [Average]
[info]   (min, avg, max) = (386.384, 393.322, 410.715), stdev = 10.233
[info]   CI (99.9%): [353.917, 432.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   403.779 ±(99.9%) 578.848 MB/sec [Average]
[info]   (min, avg, max) = (336.353, 403.779, 672.688), stdev = 150.325
[info]   CI (99.9%): [≈ 0, 982.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   82.408 ±(99.9%) 122.566 B/op [Average]
[info]   (min, avg, max) = (65.642, 82.408, 139.279), stdev = 31.830
[info]   CI (99.9%): [≈ 0, 204.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.027 ±(99.9%) 0.233 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.135), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 1.76% complete, ETA 01:22:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8563024.165 ops/s
[info] # Warmup Iteration   2: 6831597.084 ops/s
[info] # Warmup Iteration   3: 6540251.839 ops/s
[info] Iteration   1: 6624514.493 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6667243.519 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6641522.096 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6646251.979 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6973578.740 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc":
[info]   6710622.165 ±(99.9%) 569064.527 ops/s [Average]
[info]   (min, avg, max) = (6624514.493, 6710622.165, 6973578.740), stdev = 147784.251
[info]   CI (99.9%): [6141557.638, 7279686.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 2.02% complete, ETA 01:22:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30907.853 ops/s
[info] # Warmup Iteration   2: 290067.677 ops/s
[info] # Warmup Iteration   3: 304276.103 ops/s
[info] Iteration   1: 302134.491 ops/s
[info]                  ·gc.alloc.rate:            955.088 MB/sec
[info]                  ·gc.alloc.rate.norm:       4976.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.029 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5246.610 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 301187.609 ops/s
[info]                  ·gc.alloc.rate:            952.063 MB/sec
[info]                  ·gc.alloc.rate.norm:       4976.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1006.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5263.121 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   3: 302576.939 ops/s
[info]                  ·gc.alloc.rate:            956.503 MB/sec
[info]                  ·gc.alloc.rate.norm:       4976.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5239.017 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   4: 301217.826 ops/s
[info]                  ·gc.alloc.rate:                                  952.481 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4976.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.169 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.881 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5307.862 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                24.364 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 305237.521 ops/s
[info]                  ·gc.alloc.rate:                                  964.981 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4976.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.044 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.227 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.083 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5265.291 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   302470.877 ±(99.9%) 6384.303 ops/s [Average]
[info]   (min, avg, max) = (301187.609, 302470.877, 305237.521), stdev = 1657.983
[info]   CI (99.9%): [296086.574, 308855.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   956.223 ±(99.9%) 20.136 MB/sec [Average]
[info]   (min, avg, max) = (952.063, 956.223, 964.981), stdev = 5.229
[info]   CI (99.9%): [936.087, 976.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4976.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4976.001, 4976.001, 4976.001), stdev = 0.001
[info]   CI (99.9%): [4976.001, 4976.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.042 ±(99.9%) 0.281 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.169), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.221 ±(99.9%) 1.468 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.221, 0.881), stdev = 0.381
[info]   CI (99.9%): [≈ 0, 1.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1011.635 ±(99.9%) 25.249 MB/sec [Average]
[info]   (min, avg, max) = (1006.998, 1011.635, 1021.083), stdev = 6.557
[info]   CI (99.9%): [986.386, 1036.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   5264.380 ±(99.9%) 102.823 B/op [Average]
[info]   (min, avg, max) = (5239.017, 5264.380, 5307.862), stdev = 26.703
[info]   CI (99.9%): [5161.557, 5367.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.664), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   4.873 ±(99.9%) 41.956 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.873, 24.364), stdev = 10.896
[info]   CI (99.9%): [≈ 0, 46.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   57.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 11.400, 14.000), stdev = 3.578
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 2.27% complete, ETA 01:22:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 829684.396 ops/s
[info] # Warmup Iteration   2: 1427066.239 ops/s
[info] # Warmup Iteration   3: 1441919.306 ops/s
[info] Iteration   1: 1455035.116 ops/s
[info]                  ·gc.alloc.rate:                                  2285.552 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.077 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.083 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.981 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2577.377 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 1462412.219 ops/s
[info]                  ·gc.alloc.rate:            2296.689 MB/sec
[info]                  ·gc.alloc.rate.norm:       2472.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.187 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2198.071 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 1449181.941 ops/s
[info]                  ·gc.alloc.rate:            2276.496 MB/sec
[info]                  ·gc.alloc.rate.norm:       2472.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2382.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2587.649 B/op
[info]                  ·gc.count:                 7.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 1451374.246 ops/s
[info]                  ·gc.alloc.rate:                                  2279.398 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.544 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2583.861 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 1465737.756 ops/s
[info]                  ·gc.alloc.rate:                                  2301.925 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.531 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2558.561 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1456748.256 ±(99.9%) 27360.954 ops/s [Average]
[info]   (min, avg, max) = (1449181.941, 1456748.256, 1465737.756), stdev = 7105.553
[info]   CI (99.9%): [1429387.301, 1484109.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2288.012 ±(99.9%) 42.258 MB/sec [Average]
[info]   (min, avg, max) = (2276.496, 2288.012, 2301.925), stdev = 10.974
[info]   CI (99.9%): [2245.754, 2330.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2472.000, 2472.000, 2472.000), stdev = 0.001
[info]   CI (99.9%): [2472.000, 2472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.130 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.077), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.018 ±(99.9%) 0.141 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2314.648 ±(99.9%) 586.494 MB/sec [Average]
[info]   (min, avg, max) = (2042.187, 2314.648, 2382.998), stdev = 152.311
[info]   CI (99.9%): [1728.154, 2901.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2501.104 ±(99.9%) 653.722 B/op [Average]
[info]   (min, avg, max) = (2198.071, 2501.104, 2587.649), stdev = 169.769
[info]   CI (99.9%): [1847.382, 3154.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava
[info] # Run progress: 2.52% complete, ETA 01:21:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.916 ops/s
[info] # Warmup Iteration   2: 8839421.219 ops/s
[info] # Warmup Iteration   3: 9674156.418 ops/s
[info] Iteration   1: 9644403.240 ops/s
[info]                  ·gc.alloc.rate:                   1176.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1334.128 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        217.745 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.109 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Iteration   2: 9859321.537 ops/s
[info]                  ·gc.alloc.rate:                   1202.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1334.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        212.994 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.106 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   3: 8903923.026 ops/s
[info]                  ·gc.alloc.rate:                                  1086.066 MB/sec
[info]                  ·gc.alloc.rate.norm:                             192.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.476 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.084 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1011.734 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       178.859 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     6.661 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.177 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 8880750.515 ops/s
[info]                  ·gc.alloc.rate:                                  1083.314 MB/sec
[info]                  ·gc.alloc.rate.norm:                             192.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.122 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.127 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       180.978 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 8875003.798 ops/s
[info]                  ·gc.alloc.rate:            1082.494 MB/sec
[info]                  ·gc.alloc.rate.norm:       192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 181.095 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava":
[info]   9232680.423 ±(99.9%) 1848773.730 ops/s [Average]
[info]   (min, avg, max) = (8875003.798, 9232680.423, 9859321.537), stdev = 480120.667
[info]   CI (99.9%): [7383906.694, 11081454.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1126.168 ±(99.9%) 225.454 MB/sec [Average]
[info]   (min, avg, max) = (1082.494, 1126.168, 1202.576), stdev = 58.550
[info]   CI (99.9%): [900.713, 1351.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (192.000, 192.000, 192.000), stdev = 0.001
[info]   CI (99.9%): [192.000, 192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.119 ±(99.9%) 0.793 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.119, 0.476), stdev = 0.206
[info]   CI (99.9%): [≈ 0, 0.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.021 ±(99.9%) 0.140 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.084), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   1144.415 ±(99.9%) 666.932 MB/sec [Average]
[info]   (min, avg, max) = (1011.734, 1144.415, 1334.128), stdev = 173.200
[info]   CI (99.9%): [477.483, 1811.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   194.334 ±(99.9%) 74.303 B/op [Average]
[info]   (min, avg, max) = (178.859, 194.334, 217.745), stdev = 19.296
[info]   CI (99.9%): [120.031, 268.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 10.972 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 6.661), stdev = 2.849
[info]   CI (99.9%): [≈ 0, 12.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.279 ±(99.9%) 1.946 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.279, 1.177), stdev = 0.505
[info]   CI (99.9%): [≈ 0, 2.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.time":
[info]   57.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 11.400, 22.000), stdev = 9.127
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.77% complete, ETA 01:21:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 667454.688 ops/s
[info] # Warmup Iteration   2: 2142960.873 ops/s
[info] # Warmup Iteration   3: 2135145.851 ops/s
[info] Iteration   1: 2160095.564 ops/s
[info]                  ·gc.alloc.rate:                   1514.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.914 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        979.348 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.485 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 2169153.507 ops/s
[info]                  ·gc.alloc.rate:                                  1521.251 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.092 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.067 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1696.919 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1231.486 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.383 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 2194030.002 ops/s
[info]                  ·gc.alloc.rate:            1539.054 MB/sec
[info]                  ·gc.alloc.rate.norm:       1104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.608 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 976.714 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 2201294.905 ops/s
[info]                  ·gc.alloc.rate:                                  1543.959 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.833 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1216.887 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 2164412.156 ops/s
[info]                  ·gc.alloc.rate:            1518.457 MB/sec
[info]                  ·gc.alloc.rate.norm:       1104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.792 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 990.096 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   2177797.227 ±(99.9%) 71596.787 ops/s [Average]
[info]   (min, avg, max) = (2160095.564, 2177797.227, 2201294.905), stdev = 18593.458
[info]   CI (99.9%): [2106200.440, 2249394.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1527.538 ±(99.9%) 50.291 MB/sec [Average]
[info]   (min, avg, max) = (1514.968, 1527.538, 1543.959), stdev = 13.060
[info]   CI (99.9%): [1477.247, 1577.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.158 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.092), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.014 ±(99.9%) 0.115 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.067), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1493.213 ±(99.9%) 725.262 MB/sec [Average]
[info]   (min, avg, max) = (1343.914, 1493.213, 1701.833), stdev = 188.348
[info]   CI (99.9%): [767.951, 2218.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1078.906 ±(99.9%) 511.432 B/op [Average]
[info]   (min, avg, max) = (976.714, 1078.906, 1231.486), stdev = 132.817
[info]   CI (99.9%): [567.474, 1590.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.774 ±(99.9%) 5.675 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.774, 3.383), stdev = 1.474
[info]   CI (99.9%): [≈ 0, 6.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.000, 19.000), stdev = 6.519
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 3.02% complete, ETA 01:21:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8799344.945 ops/s
[info] # Warmup Iteration   2: 9898973.397 ops/s
[info] # Warmup Iteration   3: 10020877.290 ops/s
[info] Iteration   1: 10276221.673 ops/s
[info]                  ·gc.alloc.rate:            1305.685 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.075 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 206.493 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 9801149.607 ops/s
[info]                  ·gc.alloc.rate:                                  1245.247 MB/sec
[info]                  ·gc.alloc.rate.norm:                             200.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.142 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1354.670 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       217.574 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.535 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 9613447.520 ops/s
[info]                  ·gc.alloc.rate:                                  1221.640 MB/sec
[info]                  ·gc.alloc.rate.norm:                             200.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.609 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       222.915 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 9450560.898 ops/s
[info]                  ·gc.alloc.rate:                                  1200.984 MB/sec
[info]                  ·gc.alloc.rate.norm:                             200.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.236 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       170.067 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 9565980.182 ops/s
[info]                  ·gc.alloc.rate:            1215.461 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.379 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 224.010 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   9741471.976 ±(99.9%) 1249733.507 ops/s [Average]
[info]   (min, avg, max) = (9450560.898, 9741471.976, 10276221.673), stdev = 324551.823
[info]   CI (99.9%): [8491738.469, 10991205.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1237.803 ±(99.9%) 158.526 MB/sec [Average]
[info]   (min, avg, max) = (1200.984, 1237.803, 1305.685), stdev = 41.169
[info]   CI (99.9%): [1079.278, 1396.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   200.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (200.000, 200.000, 200.000), stdev = 0.001
[info]   CI (99.9%): [200.000, 200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.244 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.142), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.005 ±(99.9%) 0.039 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.023), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1289.394 ±(99.9%) 577.628 MB/sec [Average]
[info]   (min, avg, max) = (1021.236, 1289.394, 1361.609), stdev = 150.008
[info]   CI (99.9%): [711.766, 1867.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   208.212 ±(99.9%) 86.349 B/op [Average]
[info]   (min, avg, max) = (170.067, 208.212, 224.010), stdev = 22.425
[info]   CI (99.9%): [121.863, 294.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.107 ±(99.9%) 0.921 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.107, 0.535), stdev = 0.239
[info]   CI (99.9%): [≈ 0, 1.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 11.000), stdev = 3.647
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 3.27% complete, ETA 01:21:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 101445.965 ops/s
[info] # Warmup Iteration   2: 561948.243 ops/s
[info] # Warmup Iteration   3: 575093.320 ops/s
[info] Iteration   1: 574751.154 ops/s
[info]                  ·gc.alloc.rate:                   1479.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              4048.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1674.432 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4580.029 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.817 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   2: 576665.274 ops/s
[info]                  ·gc.alloc.rate:                                  1483.268 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4048.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.168 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.458 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3703.494 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                12.727 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 593310.233 ops/s
[info]                  ·gc.alloc.rate:                                  1526.116 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4048.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.705 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3611.904 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 587612.748 ops/s
[info]                  ·gc.alloc.rate:            1511.650 MB/sec
[info]                  ·gc.alloc.rate.norm:       4048.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.318 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4558.584 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 579515.071 ops/s
[info]                  ·gc.alloc.rate:                                  1490.696 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4048.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3697.704 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   582370.896 ±(99.9%) 30192.365 ops/s [Average]
[info]   (min, avg, max) = (574751.154, 582370.896, 593310.233), stdev = 7840.861
[info]   CI (99.9%): [552178.531, 612563.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1498.331 ±(99.9%) 76.369 MB/sec [Average]
[info]   (min, avg, max) = (1479.925, 1498.331, 1526.116), stdev = 19.833
[info]   CI (99.9%): [1421.962, 1574.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   4048.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4048.001, 4048.001, 4048.001), stdev = 0.001
[info]   CI (99.9%): [4048.001, 4048.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.288 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.168), stdev = 0.075
[info]   CI (99.9%): [≈ 0, 0.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.093 ±(99.9%) 0.787 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.093, 0.458), stdev = 0.204
[info]   CI (99.9%): [≈ 0, 0.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1491.437 ±(99.9%) 693.342 MB/sec [Average]
[info]   (min, avg, max) = (1357.034, 1491.437, 1702.318), stdev = 180.059
[info]   CI (99.9%): [798.095, 2184.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4030.343 ±(99.9%) 1899.897 B/op [Average]
[info]   (min, avg, max) = (3611.904, 4030.343, 4580.029), stdev = 493.397
[info]   CI (99.9%): [2130.446, 5930.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.823 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.032
[info]   CI (99.9%): [≈ 0, 8.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.909 ±(99.9%) 21.350 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.909, 12.727), stdev = 5.545
[info]   CI (99.9%): [≈ 0, 24.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.800, 23.000), stdev = 8.258
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 3.53% complete, ETA 01:21:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 876346.015 ops/s
[info] # Warmup Iteration   2: 1682062.164 ops/s
[info] # Warmup Iteration   3: 1729127.167 ops/s
[info] Iteration   1: 1749126.264 ops/s
[info]                  ·gc.alloc.rate:                   1644.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.150 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1213.118 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.997 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 1769362.034 ops/s
[info]                  ·gc.alloc.rate:                                  1663.578 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1480.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.140 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.125 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.719 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1513.933 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 1744233.629 ops/s
[info]                  ·gc.alloc.rate:            1640.012 MB/sec
[info]                  ·gc.alloc.rate.norm:       1480.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.823 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1535.781 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 1766683.753 ops/s
[info]                  ·gc.alloc.rate:                                  1661.735 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1480.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1516.196 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 1747441.838 ops/s
[info]                  ·gc.alloc.rate:                                  1643.117 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1480.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.876 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1532.926 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   1755369.504 ±(99.9%) 45137.890 ops/s [Average]
[info]   (min, avg, max) = (1744233.629, 1755369.504, 1769362.034), stdev = 11722.167
[info]   CI (99.9%): [1710231.614, 1800507.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1650.636 ±(99.9%) 42.830 MB/sec [Average]
[info]   (min, avg, max) = (1640.012, 1650.636, 1663.578), stdev = 11.123
[info]   CI (99.9%): [1607.806, 1693.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1480.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1480.000, 1480.000, 1480.000), stdev = 0.001
[info]   CI (99.9%): [1480.000, 1480.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.241 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.140), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.025 ±(99.9%) 0.214 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.125), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1631.189 ±(99.9%) 609.263 MB/sec [Average]
[info]   (min, avg, max) = (1348.150, 1631.189, 1702.375), stdev = 158.224
[info]   CI (99.9%): [1021.926, 2240.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1462.391 ±(99.9%) 537.884 B/op [Average]
[info]   (min, avg, max) = (1213.118, 1462.391, 1535.781), stdev = 139.687
[info]   CI (99.9%): [924.507, 2000.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.599 ±(99.9%) 5.161 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.599, 2.997), stdev = 1.340
[info]   CI (99.9%): [≈ 0, 5.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 13.000), stdev = 3.899
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava
[info] # Run progress: 3.78% complete, ETA 01:21:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.911 ops/s
[info] # Warmup Iteration   2: 16473090.321 ops/s
[info] # Warmup Iteration   3: 17209205.300 ops/s
[info] Iteration   1: 17980207.079 ops/s
[info]                  ·gc.alloc.rate:            548.333 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.710 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 29.212 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 18270008.121 ops/s
[info]                  ·gc.alloc.rate:            557.179 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.434 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57.498 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 17634846.247 ops/s
[info]                  ·gc.alloc.rate:                   537.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             666.676 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        59.508 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 18159876.996 ops/s
[info]                  ·gc.alloc.rate:            553.789 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28.924 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 18104746.969 ops/s
[info]                  ·gc.alloc.rate:            552.064 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 58.024 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava":
[info]   18029937.083 ±(99.9%) 940623.420 ops/s [Average]
[info]   (min, avg, max) = (17634846.247, 18029937.083, 18270008.121), stdev = 244276.915
[info]   CI (99.9%): [17089313.663, 18970560.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   549.823 ±(99.9%) 28.746 MB/sec [Average]
[info]   (min, avg, max) = (537.747, 549.823, 557.179), stdev = 7.465
[info]   CI (99.9%): [521.077, 578.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   533.776 ±(99.9%) 703.273 MB/sec [Average]
[info]   (min, avg, max) = (333.703, 533.776, 667.434), stdev = 182.638
[info]   CI (99.9%): [≈ 0, 1237.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   46.633 ±(99.9%) 61.811 B/op [Average]
[info]   (min, avg, max) = (28.924, 46.633, 59.508), stdev = 16.052
[info]   CI (99.9%): [≈ 0, 108.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.102 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.059), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.800, 10.000), stdev = 2.588
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 4.03% complete, ETA 01:20:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_3eb5d47b/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1130292.794 ops/s
[info] # Warmup Iteration   2: 4519352.756 ops/s
[info] # Warmup Iteration   3: 4655260.138 ops/s
[info] Iteration   1: 4614255.622 ops/s
[info]                  ·gc.alloc.rate:            1266.247 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1342.586 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 458.044 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 4499164.846 ops/s
[info]                  ·gc.alloc.rate:                   1234.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1006.907 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        352.330 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.398 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 4520221.569 ops/s
[info]                  ·gc.alloc.rate:                                  1240.697 MB/sec
[info]                  ·gc.alloc.rate.norm:                             432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.196 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.068 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1360.885 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       473.849 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.232 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 4462095.500 ops/s
[info]                  ·gc.alloc.rate:            1224.584 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.389 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 480.261 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 4469418.091 ops/s
[info]                  ·gc.alloc.rate:                                  1226.633 MB/sec
[info]                  ·gc.alloc.rate.norm:                             432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       359.594 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   4513031.126 ±(99.9%) 235699.906 ops/s [Average]
[info]   (min, avg, max) = (4462095.500, 4513031.126, 4614255.622), stdev = 61210.517
[info]   CI (99.9%): [4277331.220, 4748731.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1238.551 ±(99.9%) 64.560 MB/sec [Average]
[info]   (min, avg, max) = (1224.584, 1238.551, 1266.247), stdev = 16.766
[info]   CI (99.9%): [1173.991, 1303.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.000, 432.000), stdev = 0.001
[info]   CI (99.9%): [432.000, 432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.040 ±(99.9%) 0.337 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.196), stdev = 0.087
[info]   CI (99.9%): [≈ 0, 0.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.014 ±(99.9%) 0.117 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.068), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1218.562 ±(99.9%) 720.002 MB/sec [Average]
[info]   (min, avg, max) = (1006.907, 1218.562, 1361.389), stdev = 186.982
[info]   CI (99.9%): [498.560, 1938.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   424.816 ±(99.9%) 244.225 B/op [Average]
[info]   (min, avg, max) = (352.330, 424.816, 480.261), stdev = 63.424
[info]   CI (99.9%): [180.591, 669.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.326 ±(99.9%) 2.340 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.326, 1.398), stdev = 0.608
[info]   CI (99.9%): [≈ 0, 2.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.400, 18.000), stdev = 7.127
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 4.28% complete, ETA 01:20:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13864571.706 ops/s
[info] # Warmup Iteration   2: 21511371.082 ops/s
[info] # Warmup Iteration   3: 21252885.050 ops/s
[info] Iteration   1: 21687597.068 ops/s
[info]                  ·gc.alloc.rate:            661.295 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.645 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 48.824 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 21840247.385 ops/s
[info]                  ·gc.alloc.rate:            665.948 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.660 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 48.484 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 21895610.302 ops/s
[info]                  ·gc.alloc.rate:            667.658 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.683 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 48.361 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 21860374.328 ops/s
[info]                  ·gc.alloc.rate:                   666.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        48.439 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 21697866.724 ops/s
[info]                  ·gc.alloc.rate:            661.736 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.470 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 48.851 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   21796339.161 ±(99.9%) 372363.728 ops/s [Average]
[info]   (min, avg, max) = (21687597.068, 21796339.161, 21895610.302), stdev = 96701.678
[info]   CI (99.9%): [21423975.433, 22168702.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   664.653 ±(99.9%) 11.291 MB/sec [Average]
[info]   (min, avg, max) = (661.295, 664.653, 667.658), stdev = 2.932
[info]   CI (99.9%): [653.362, 675.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   672.836 ±(99.9%) 1.370 MB/sec [Average]
[info]   (min, avg, max) = (672.645, 672.836, 673.470), stdev = 0.356
[info]   CI (99.9%): [671.466, 674.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   48.592 ±(99.9%) 0.881 B/op [Average]
[info]   (min, avg, max) = (48.361, 48.592, 48.851), stdev = 0.229
[info]   CI (99.9%): [47.711, 49.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.083 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.048), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 4.53% complete, ETA 01:20:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15009234.685 ops/s
[info] # Warmup Iteration   2: 20487892.075 ops/s
[info] # Warmup Iteration   3: 19195245.917 ops/s
[info] Iteration   1: 20542883.498 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 20528078.479 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 20546834.934 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 20493616.955 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 20286530.956 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   20479588.964 ±(99.9%) 423341.616 ops/s [Average]
[info]   (min, avg, max) = (20286530.956, 20479588.964, 20546834.934), stdev = 109940.473
[info]   CI (99.9%): [20056247.348, 20902930.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 4.79% complete, ETA 01:20:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 221062.058 ops/s
[info] # Warmup Iteration   2: 1247111.290 ops/s
[info] # Warmup Iteration   3: 1268034.781 ops/s
[info] Iteration   1: 1254400.802 ops/s
[info]                  ·gc.alloc.rate:                                  1830.451 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2296.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.035 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.043 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2024.272 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2539.117 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     5.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                6.686 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        21.000 ms
[info] Iteration   2: 1275567.080 ops/s
[info]                  ·gc.alloc.rate:                                  1860.663 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2296.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.040 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.865 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2100.049 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 1250304.042 ops/s
[info]                  ·gc.alloc.rate:                                  1824.576 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2296.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.000 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2570.859 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 1280397.309 ops/s
[info]                  ·gc.alloc.rate:                                  1867.856 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2296.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.929 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2092.039 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 1260808.443 ops/s
[info]                  ·gc.alloc.rate:                                  1838.933 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2296.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.966 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2549.497 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1264295.535 ±(99.9%) 50652.521 ops/s [Average]
[info]   (min, avg, max) = (1250304.042, 1264295.535, 1280397.309), stdev = 13154.299
[info]   CI (99.9%): [1213643.014, 1314948.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1844.496 ±(99.9%) 72.859 MB/sec [Average]
[info]   (min, avg, max) = (1824.576, 1844.496, 1867.856), stdev = 18.921
[info]   CI (99.9%): [1771.637, 1917.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2296.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2296.000, 2296.000, 2296.000), stdev = 0.001
[info]   CI (99.9%): [2296.000, 2296.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.076 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.016, 0.040), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.020 ±(99.9%) 0.094 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.020, 0.050), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1902.606 ±(99.9%) 706.105 MB/sec [Average]
[info]   (min, avg, max) = (1701.865, 1902.606, 2043.000), stdev = 183.373
[info]   CI (99.9%): [1196.502, 2608.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2370.312 ±(99.9%) 965.160 B/op [Average]
[info]   (min, avg, max) = (2092.039, 2370.312, 2570.859), stdev = 250.649
[info]   CI (99.9%): [1405.152, 3335.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 9.180 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 5.331), stdev = 2.384
[info]   CI (99.9%): [≈ 0, 10.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.337 ±(99.9%) 11.514 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.337, 6.686), stdev = 2.990
[info]   CI (99.9%): [≈ 0, 12.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.200, 21.000), stdev = 7.155
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce
[info] # Run progress: 5.04% complete, ETA 01:20:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 269217.669 ops/s
[info] # Warmup Iteration   2: 325691.846 ops/s
[info] # Warmup Iteration   3: 329232.836 ops/s
[info] Iteration   1: 327321.987 ops/s
[info]                  ·gc.alloc.rate:                                  1801.608 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8664.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.057 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.276 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1698.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8167.627 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                16.015 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 334720.881 ops/s
[info]                  ·gc.alloc.rate:                                  1842.185 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8664.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.545 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8002.556 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 335118.222 ops/s
[info]                  ·gc.alloc.rate:                                  1845.174 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8664.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.866 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9592.265 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 334291.121 ops/s
[info]                  ·gc.alloc.rate:            1840.112 MB/sec
[info]                  ·gc.alloc.rate.norm:       8664.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.867 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8013.087 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 334231.730 ops/s
[info]                  ·gc.alloc.rate:                                  1839.976 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8664.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.371 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9617.028 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce":
[info]   333136.788 ±(99.9%) 12592.654 ops/s [Average]
[info]   (min, avg, max) = (327321.987, 333136.788, 335118.222), stdev = 3270.272
[info]   CI (99.9%): [320544.135, 345729.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1833.811 ±(99.9%) 69.791 MB/sec [Average]
[info]   (min, avg, max) = (1801.608, 1833.811, 1845.174), stdev = 18.124
[info]   CI (99.9%): [1764.020, 1903.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8664.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8664.001, 8664.001, 8664.001), stdev = 0.001
[info]   CI (99.9%): [8664.001, 8664.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.095 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.057), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.064 ±(99.9%) 0.458 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.064, 0.276), stdev = 0.119
[info]   CI (99.9%): [≈ 0, 0.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1837.408 ±(99.9%) 721.363 MB/sec [Average]
[info]   (min, avg, max) = (1698.391, 1837.408, 2042.866), stdev = 187.336
[info]   CI (99.9%): [1116.045, 2558.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8678.513 ±(99.9%) 3265.375 B/op [Average]
[info]   (min, avg, max) = (8002.556, 8678.513, 9617.028), stdev = 848.008
[info]   CI (99.9%): [5413.138, 11943.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.203 ±(99.9%) 27.579 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.203, 16.015), stdev = 7.162
[info]   CI (99.9%): [≈ 0, 30.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 7.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala
[info] # Run progress: 5.29% complete, ETA 01:19:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 210048.113 ops/s
[info] # Warmup Iteration   2: 419865.741 ops/s
[info] # Warmup Iteration   3: 423138.603 ops/s
[info] Iteration   1: 441739.037 ops/s
[info]                  ·gc.alloc.rate:            588.282 MB/sec
[info]                  ·gc.alloc.rate.norm:       2096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.721 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1196.146 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 423924.651 ops/s
[info]                  ·gc.alloc.rate:                   564.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              2096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.578 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2492.947 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.473 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 433839.052 ops/s
[info]                  ·gc.alloc.rate:                   577.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              2096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.132 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2438.408 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.417 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 436911.545 ops/s
[info]                  ·gc.alloc.rate:            581.771 MB/sec
[info]                  ·gc.alloc.rate.norm:       2096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2421.255 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 440133.052 ops/s
[info]                  ·gc.alloc.rate:            586.088 MB/sec
[info]                  ·gc.alloc.rate.norm:       2096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.702 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1200.556 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala":
[info]   435309.467 ±(99.9%) 27156.539 ops/s [Average]
[info]   (min, avg, max) = (423924.651, 435309.467, 441739.037), stdev = 7052.467
[info]   CI (99.9%): [408152.928, 462466.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   579.707 ±(99.9%) 35.980 MB/sec [Average]
[info]   (min, avg, max) = (564.644, 579.707, 588.282), stdev = 9.344
[info]   CI (99.9%): [543.727, 615.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2096.001, 2096.001, 2096.001), stdev = 0.001
[info]   CI (99.9%): [2096.001, 2096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   537.436 ±(99.9%) 709.092 MB/sec [Average]
[info]   (min, avg, max) = (335.702, 537.436, 672.132), stdev = 184.149
[info]   CI (99.9%): [≈ 0, 1246.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1949.862 ±(99.9%) 2643.641 B/op [Average]
[info]   (min, avg, max) = (1196.146, 1949.862, 2492.947), stdev = 686.545
[info]   CI (99.9%): [≈ 0, 4593.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.978 ±(99.9%) 5.157 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.978, 2.473), stdev = 1.339
[info]   CI (99.9%): [≈ 0, 6.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 9.000), stdev = 2.490
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala
[info] # Run progress: 5.54% complete, ETA 01:19:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 954194.961 ops/s
[info] # Warmup Iteration   2: 1046557.269 ops/s
[info] # Warmup Iteration   3: 1060763.334 ops/s
[info] Iteration   1: 1055488.149 ops/s
[info]                  ·gc.alloc.rate:            702.648 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.946 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1005.192 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 1051462.439 ops/s
[info]                  ·gc.alloc.rate:            700.036 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.016 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1009.048 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 1057803.366 ops/s
[info]                  ·gc.alloc.rate:            704.255 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.011 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1002.994 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 1058491.431 ops/s
[info]                  ·gc.alloc.rate:            704.754 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.065 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1002.365 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 1041507.945 ops/s
[info]                  ·gc.alloc.rate:                   693.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.265 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1018.708 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.033 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala":
[info]   1052950.666 ±(99.9%) 26805.453 ops/s [Average]
[info]   (min, avg, max) = (1041507.945, 1052950.666, 1058491.431), stdev = 6961.291
[info]   CI (99.9%): [1026145.213, 1079756.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   701.069 ±(99.9%) 17.465 MB/sec [Average]
[info]   (min, avg, max) = (693.653, 701.069, 704.754), stdev = 4.536
[info]   CI (99.9%): [683.604, 718.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1048.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1048.000, 1048.000, 1048.000), stdev = 0.001
[info]   CI (99.9%): [1048.000, 1048.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   674.061 ±(99.9%) 0.469 MB/sec [Average]
[info]   (min, avg, max) = (673.946, 674.061, 674.265), stdev = 0.122
[info]   CI (99.9%): [673.591, 674.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1007.661 ±(99.9%) 25.823 B/op [Average]
[info]   (min, avg, max) = (1002.365, 1007.661, 1018.708), stdev = 6.706
[info]   CI (99.9%): [981.839, 1033.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.007 ±(99.9%) 8.667 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.007, 5.033), stdev = 2.251
[info]   CI (99.9%): [≈ 0, 9.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson
[info] # Run progress: 5.79% complete, ETA 01:19:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61026.953 ops/s
[info] # Warmup Iteration   2: 97362.129 ops/s
[info] # Warmup Iteration   3: 102093.706 ops/s
[info] Iteration   1: 100705.362 ops/s
[info]                  ·gc.alloc.rate:                                  3488.856 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54512.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       53197.615 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 101860.589 ops/s
[info]                  ·gc.alloc.rate:                                  3528.006 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54512.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.081 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3744.113 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       57851.120 B/op
[info]                  ·gc.count:                                       11.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 101620.282 ops/s
[info]                  ·gc.alloc.rate:                                  3520.083 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54512.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.061 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.315 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       52719.220 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 101847.802 ops/s
[info]                  ·gc.alloc.rate:                                  3527.041 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54512.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.041 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3743.860 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       57863.047 B/op
[info]                  ·gc.count:                                       11.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   5: 102204.862 ops/s
[info]                  ·gc.alloc.rate:                                  3540.925 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54512.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.061 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.907 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       52418.029 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson":
[info]   101647.779 ±(99.9%) 2182.117 ops/s [Average]
[info]   (min, avg, max) = (100705.362, 101647.779, 102204.862), stdev = 566.689
[info]   CI (99.9%): [99465.662, 103829.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3520.982 ±(99.9%) 74.981 MB/sec [Average]
[info]   (min, avg, max) = (3488.856, 3520.982, 3540.925), stdev = 19.472
[info]   CI (99.9%): [3446.001, 3595.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   54512.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (54512.004, 54512.004, 54512.004), stdev = 0.001
[info]   CI (99.9%): [54512.004, 54512.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.004 MB/sec [Average]
[info]   (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁵, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.059 ±(99.9%) 0.058 B/op [Average]
[info]   (min, avg, max) = (0.041, 0.059, 0.081), stdev = 0.015
[info]   CI (99.9%): [0.001, 0.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3540.385 ±(99.9%) 715.687 MB/sec [Average]
[info]   (min, avg, max) = (3404.315, 3540.385, 3744.113), stdev = 185.862
[info]   CI (99.9%): [2824.699, 4256.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   54809.806 ±(99.9%) 10764.974 B/op [Average]
[info]   (min, avg, max) = (52418.029, 54809.806, 57863.047), stdev = 2795.630
[info]   CI (99.9%): [44044.832, 65574.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   52.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (10.000, 10.400, 11.000), stdev = 0.548
[info]   CI (99.9%): [52.000, 52.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 10.000), stdev = 0.837
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce
[info] # Run progress: 6.05% complete, ETA 01:19:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 264143.475 ops/s
[info] # Warmup Iteration   2: 329576.405 ops/s
[info] # Warmup Iteration   3: 331882.802 ops/s
[info] Iteration   1: 328711.300 ops/s
[info]                  ·gc.alloc.rate:            813.522 MB/sec
[info]                  ·gc.alloc.rate.norm:       3896.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.944 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4841.466 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 330887.186 ops/s
[info]                  ·gc.alloc.rate:            819.177 MB/sec
[info]                  ·gc.alloc.rate.norm:       3896.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.141 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3206.209 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 328108.504 ops/s
[info]                  ·gc.alloc.rate:            812.295 MB/sec
[info]                  ·gc.alloc.rate.norm:       3896.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.225 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4850.125 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 332726.980 ops/s
[info]                  ·gc.alloc.rate:                   823.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              3896.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3188.655 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.754 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 339574.941 ops/s
[info]                  ·gc.alloc.rate:                                  840.524 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3896.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.094 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.435 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.070 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4732.869 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce":
[info]   332001.782 ±(99.9%) 17761.641 ops/s [Average]
[info]   (min, avg, max) = (328108.504, 332001.782, 339574.941), stdev = 4612.642
[info]   CI (99.9%): [314240.141, 349763.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   821.817 ±(99.9%) 43.881 MB/sec [Average]
[info]   (min, avg, max) = (812.295, 821.817, 840.524), stdev = 11.396
[info]   CI (99.9%): [777.936, 865.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3896.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3896.001, 3896.001, 3896.001), stdev = 0.001
[info]   CI (99.9%): [3896.001, 3896.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.162 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.094), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.087 ±(99.9%) 0.749 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.087, 0.435), stdev = 0.195
[info]   CI (99.9%): [≈ 0, 0.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   878.284 ±(99.9%) 717.939 MB/sec [Average]
[info]   (min, avg, max) = (674.041, 878.284, 1021.070), stdev = 186.447
[info]   CI (99.9%): [160.345, 1596.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4163.865 ±(99.9%) 3401.887 B/op [Average]
[info]   (min, avg, max) = (3188.655, 4163.865, 4850.125), stdev = 883.459
[info]   CI (99.9%): [761.977, 7565.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.151 ±(99.9%) 27.130 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.151, 15.754), stdev = 7.046
[info]   CI (99.9%): [≈ 0, 30.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 10.000), stdev = 2.881
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala
[info] # Run progress: 6.30% complete, ETA 01:19:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 359693.317 ops/s
[info] # Warmup Iteration   2: 619022.019 ops/s
[info] # Warmup Iteration   3: 629933.865 ops/s
[info] Iteration   1: 638697.246 ops/s
[info]                  ·gc.alloc.rate:            477.148 MB/sec
[info]                  ·gc.alloc.rate.norm:       1176.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.320 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1654.566 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 627699.490 ops/s
[info]                  ·gc.alloc.rate:            468.878 MB/sec
[info]                  ·gc.alloc.rate.norm:       1176.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.625 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 841.788 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 623329.303 ops/s
[info]                  ·gc.alloc.rate:            465.842 MB/sec
[info]                  ·gc.alloc.rate.norm:       1176.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.779 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 847.660 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 642394.515 ops/s
[info]                  ·gc.alloc.rate:            479.923 MB/sec
[info]                  ·gc.alloc.rate.norm:       1176.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1645.084 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 644330.071 ops/s
[info]                  ·gc.alloc.rate:            481.405 MB/sec
[info]                  ·gc.alloc.rate.norm:       1176.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.683 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 820.024 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala":
[info]   635290.125 ±(99.9%) 35734.331 ops/s [Average]
[info]   (min, avg, max) = (623329.303, 635290.125, 644330.071), stdev = 9280.092
[info]   CI (99.9%): [599555.795, 671024.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   474.639 ±(99.9%) 26.579 MB/sec [Average]
[info]   (min, avg, max) = (465.842, 474.639, 481.405), stdev = 6.902
[info]   CI (99.9%): [448.060, 501.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1176.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1176.001, 1176.001, 1176.001), stdev = 0.001
[info]   CI (99.9%): [1176.001, 1176.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   469.952 ±(99.9%) 707.897 MB/sec [Average]
[info]   (min, avg, max) = (335.625, 469.952, 671.355), stdev = 183.839
[info]   CI (99.9%): [≈ 0, 1177.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1161.824 ±(99.9%) 1715.896 B/op [Average]
[info]   (min, avg, max) = (820.024, 1161.824, 1654.566), stdev = 445.613
[info]   CI (99.9%): [≈ 0, 2877.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 9.000), stdev = 2.588
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala
[info] # Run progress: 6.55% complete, ETA 01:18:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2105500.091 ops/s
[info] # Warmup Iteration   2: 2344165.025 ops/s
[info] # Warmup Iteration   3: 2350999.715 ops/s
[info] Iteration   1: 2343743.260 ops/s
[info]                  ·gc.alloc.rate:            1083.861 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.884 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 677.641 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 2358078.485 ops/s
[info]                  ·gc.alloc.rate:                   1090.480 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.620 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        674.019 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.445 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 2322387.387 ops/s
[info]                  ·gc.alloc.rate:                                  1074.096 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.114 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.077 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.406 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       920.022 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.709 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 2396012.332 ops/s
[info]                  ·gc.alloc.rate:            1108.160 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.060 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 670.780 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 2357757.038 ops/s
[info]                  ·gc.alloc.rate:            1090.393 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 681.673 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala":
[info]   2355595.700 ±(99.9%) 103460.075 ops/s [Average]
[info]   (min, avg, max) = (2322387.387, 2355595.700, 2396012.332), stdev = 26868.253
[info]   CI (99.9%): [2252135.625, 2459055.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1089.398 ±(99.9%) 47.901 MB/sec [Average]
[info]   (min, avg, max) = (1074.096, 1089.398, 1108.160), stdev = 12.440
[info]   CI (99.9%): [1041.496, 1137.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.196 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.114), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.015 ±(99.9%) 0.133 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.077), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1083.595 ±(99.9%) 589.837 MB/sec [Average]
[info]   (min, avg, max) = (1008.884, 1083.595, 1357.406), stdev = 153.179
[info]   CI (99.9%): [493.759, 1673.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   724.827 ±(99.9%) 420.464 B/op [Average]
[info]   (min, avg, max) = (670.780, 724.827, 920.022), stdev = 109.193
[info]   CI (99.9%): [304.363, 1145.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.631 ±(99.9%) 4.534 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.631, 2.709), stdev = 1.177
[info]   CI (99.9%): [≈ 0, 5.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.800, 13.000), stdev = 4.658
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 6.80% complete, ETA 01:18:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2274865.915 ops/s
[info] # Warmup Iteration   2: 2521065.103 ops/s
[info] # Warmup Iteration   3: 2517347.615 ops/s
[info] Iteration   1: 2516136.803 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2516488.292 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2515502.773 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2515921.231 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2515551.575 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2515920.135 ±(99.9%) 1587.400 ops/s [Average]
[info]   (min, avg, max) = (2515502.773, 2515920.135, 2516488.292), stdev = 412.243
[info]   CI (99.9%): [2514332.735, 2517507.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson
[info] # Run progress: 7.05% complete, ETA 01:18:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 324996.208 ops/s
[info] # Warmup Iteration   2: 429691.482 ops/s
[info] # Warmup Iteration   3: 440045.613 ops/s
[info] Iteration   1: 446296.962 ops/s
[info]                  ·gc.alloc.rate:            641.909 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.692 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2372.572 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 433247.401 ops/s
[info]                  ·gc.alloc.rate:            623.152 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1222.035 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 446841.787 ops/s
[info]                  ·gc.alloc.rate:            642.791 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.795 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2369.679 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 441686.339 ops/s
[info]                  ·gc.alloc.rate:            635.247 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.675 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2397.391 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 432770.041 ops/s
[info]                  ·gc.alloc.rate:            622.496 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2446.712 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson":
[info]   440168.506 ±(99.9%) 26330.737 ops/s [Average]
[info]   (min, avg, max) = (432770.041, 440168.506, 446841.787), stdev = 6838.009
[info]   CI (99.9%): [413837.769, 466499.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   633.119 ±(99.9%) 37.902 MB/sec [Average]
[info]   (min, avg, max) = (622.496, 633.119, 642.791), stdev = 9.843
[info]   CI (99.9%): [595.217, 671.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2264.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2264.001, 2264.001, 2264.001), stdev = 0.001
[info]   CI (99.9%): [2264.001, 2264.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   605.450 ±(99.9%) 579.243 MB/sec [Average]
[info]   (min, avg, max) = (336.358, 605.450, 672.795), stdev = 150.428
[info]   CI (99.9%): [26.208, 1184.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2161.678 ±(99.9%) 2026.144 B/op [Average]
[info]   (min, avg, max) = (1222.035, 2161.678, 2446.712), stdev = 526.183
[info]   CI (99.9%): [135.533, 4187.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 8.000), stdev = 1.789
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Run progress: 7.30% complete, ETA 01:18:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15285.331 ops/s
[info] # Warmup Iteration   2: 19385.733 ops/s
[info] # Warmup Iteration   3: 19661.557 ops/s
[info] Iteration   1: 19734.277 ops/s
[info]                  ·gc.alloc.rate:            1234.655 MB/sec
[info]                  ·gc.alloc.rate.norm:       98480.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.983 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 80639.261 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 19817.433 ops/s
[info]                  ·gc.alloc.rate:                                  1239.713 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98480.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.041 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.253 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.230 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       107338.717 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                264.511 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 19896.548 ops/s
[info]                  ·gc.alloc.rate:                                  1244.816 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98480.026 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.032 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.555 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       107697.570 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 20077.934 ops/s
[info]                  ·gc.alloc.rate:                                  1256.483 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98480.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.753 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.277 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80045.165 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 20037.048 ops/s
[info]                  ·gc.alloc.rate:                                  1253.696 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98480.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.879 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.462 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       106945.229 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   19912.648 ±(99.9%) 557.800 ops/s [Average]
[info]   (min, avg, max) = (19734.277, 19912.648, 20077.934), stdev = 144.859
[info]   CI (99.9%): [19354.847, 20470.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1245.872 ±(99.9%) 35.431 MB/sec [Average]
[info]   (min, avg, max) = (1234.655, 1245.872, 1256.483), stdev = 9.201
[info]   CI (99.9%): [1210.441, 1281.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   98480.029 ±(99.9%) 0.057 B/op [Average]
[info]   (min, avg, max) = (98480.020, 98480.029, 98480.055), stdev = 0.015
[info]   CI (99.9%): [98479.971, 98480.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.066 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.041), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.488 ±(99.9%) 5.229 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.488, 3.253), stdev = 1.358
[info]   CI (99.9%): [≈ 0, 6.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1221.256 ±(99.9%) 721.360 MB/sec [Average]
[info]   (min, avg, max) = (1010.983, 1221.256, 1361.462), stdev = 187.335
[info]   CI (99.9%): [499.896, 1942.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   96533.188 ±(99.9%) 56928.528 B/op [Average]
[info]   (min, avg, max) = (80045.165, 96533.188, 107697.570), stdev = 14784.158
[info]   CI (99.9%): [39604.660, 153461.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   52.902 ±(99.9%) 455.505 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 52.902, 264.511), stdev = 118.293
[info]   CI (99.9%): [≈ 0, 508.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 11.000), stdev = 4.025
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Run progress: 7.56% complete, ETA 01:18:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18972.597 ops/s
[info] # Warmup Iteration   2: 30694.664 ops/s
[info] # Warmup Iteration   3: 31135.298 ops/s
[info] Iteration   1: 30943.302 ops/s
[info]                  ·gc.alloc.rate:            775.801 MB/sec
[info]                  ·gc.alloc.rate.norm:       39454.960 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.836 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 34218.474 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 30425.674 ops/s
[info]                  ·gc.alloc.rate:            762.811 MB/sec
[info]                  ·gc.alloc.rate.norm:       39456.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.791 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 34799.782 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 30796.390 ops/s
[info]                  ·gc.alloc.rate:            772.095 MB/sec
[info]                  ·gc.alloc.rate.norm:       39456.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.822 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 34382.889 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 31241.762 ops/s
[info]                  ·gc.alloc.rate:                   783.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              39456.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        50806.287 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 234.904 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 31570.695 ops/s
[info]                  ·gc.alloc.rate:                                  791.368 MB/sec
[info]                  ·gc.alloc.rate.norm:                             39456.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.108 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.398 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.705 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       33938.582 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   30995.565 ±(99.9%) 1676.873 ops/s [Average]
[info]   (min, avg, max) = (30425.674, 30995.565, 31570.695), stdev = 435.478
[info]   CI (99.9%): [29318.692, 32672.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   777.030 ±(99.9%) 41.747 MB/sec [Average]
[info]   (min, avg, max) = (762.811, 777.030, 791.368), stdev = 10.842
[info]   CI (99.9%): [735.283, 818.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39455.803 ±(99.9%) 1.815 B/op [Average]
[info]   (min, avg, max) = (39454.960, 39455.803, 39456.014), stdev = 0.471
[info]   CI (99.9%): [39453.988, 39457.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.186 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.108), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.080 ±(99.9%) 9.295 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.080, 5.398), stdev = 2.414
[info]   CI (99.9%): [≈ 0, 10.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   741.499 ±(99.9%) 574.550 MB/sec [Average]
[info]   (min, avg, max) = (672.791, 741.499, 1008.342), stdev = 149.209
[info]   CI (99.9%): [166.949, 1316.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   37629.203 ±(99.9%) 28390.078 B/op [Average]
[info]   (min, avg, max) = (33938.582, 37629.203, 50806.287), stdev = 7372.813
[info]   CI (99.9%): [9239.125, 66019.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   46.981 ±(99.9%) 404.518 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.981, 234.904), stdev = 105.052
[info]   CI (99.9%): [≈ 0, 451.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.200, 13.000), stdev = 3.962
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Run progress: 7.81% complete, ETA 01:18:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29029.609 ops/s
[info] # Warmup Iteration   2: 32008.974 ops/s
[info] # Warmup Iteration   3: 32560.452 ops/s
[info] Iteration   1: 31200.950 ops/s
[info]                  ·gc.alloc.rate:            419.142 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.044 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 34002.785 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 31953.701 ops/s
[info]                  ·gc.alloc.rate:            429.259 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.056 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16602.399 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 32384.566 ops/s
[info]                  ·gc.alloc.rate:            435.022 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16380.965 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 32638.113 ops/s
[info]                  ·gc.alloc.rate:            438.504 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.070 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16253.008 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 32406.488 ops/s
[info]                  ·gc.alloc.rate:            435.295 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 32739.692 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   32116.764 ±(99.9%) 2189.089 ops/s [Average]
[info]   (min, avg, max) = (31200.950, 32116.764, 32638.113), stdev = 568.500
[info]   CI (99.9%): [29927.674, 34305.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   431.444 ±(99.9%) 29.426 MB/sec [Average]
[info]   (min, avg, max) = (419.142, 431.444, 438.504), stdev = 7.642
[info]   CI (99.9%): [402.018, 460.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   21144.014 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (21144.013, 21144.014, 21144.016), stdev = 0.002
[info]   CI (99.9%): [21144.007, 21144.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.843 ±(99.9%) 710.720 MB/sec [Average]
[info]   (min, avg, max) = (337.026, 471.843, 674.044), stdev = 184.572
[info]   CI (99.9%): [≈ 0, 1182.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   23195.770 ±(99.9%) 35812.752 B/op [Average]
[info]   (min, avg, max) = (16253.008, 23195.770, 34002.785), stdev = 9300.458
[info]   CI (99.9%): [≈ 0, 59008.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.200, 7.000), stdev = 2.168
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Run progress: 8.06% complete, ETA 01:17:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12624.133 ops/s
[info] # Warmup Iteration   2: 24416.006 ops/s
[info] # Warmup Iteration   3: 25103.017 ops/s
[info] Iteration   1: 25195.240 ops/s
[info]                  ·gc.alloc.rate:                   1335.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              83400.087 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.255 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        84010.910 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 41.610 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 25413.960 ops/s
[info]                  ·gc.alloc.rate:                                  1346.429 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83400.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.108 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.675 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.263 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83823.377 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                247.510 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 25829.685 ops/s
[info]                  ·gc.alloc.rate:                                  1368.558 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83400.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.031 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.893 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82960.687 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 25246.497 ops/s
[info]                  ·gc.alloc.rate:                                  1337.881 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83400.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.473 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.558 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       84876.023 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 25191.155 ops/s
[info]                  ·gc.alloc.rate:                                  1335.104 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83400.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.737 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.752 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85064.667 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   25375.307 ±(99.9%) 1038.393 ops/s [Average]
[info]   (min, avg, max) = (25191.155, 25375.307, 25829.685), stdev = 269.667
[info]   CI (99.9%): [24336.914, 26413.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1344.689 ±(99.9%) 54.317 MB/sec [Average]
[info]   (min, avg, max) = (1335.104, 1344.689, 1368.558), stdev = 14.106
[info]   CI (99.9%): [1290.372, 1399.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   83400.031 ±(99.9%) 0.121 B/op [Average]
[info]   (min, avg, max) = (83400.016, 83400.031, 83400.087), stdev = 0.031
[info]   CI (99.9%): [83399.911, 83400.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.108), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.955 ±(99.9%) 10.507 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.955, 6.675), stdev = 2.729
[info]   CI (99.9%): [≈ 0, 12.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1356.636 ±(99.9%) 28.134 MB/sec [Average]
[info]   (min, avg, max) = (1345.255, 1356.636, 1361.752), stdev = 7.306
[info]   CI (99.9%): [1328.502, 1384.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   84147.133 ±(99.9%) 3281.066 B/op [Average]
[info]   (min, avg, max) = (82960.687, 84147.133, 85064.667), stdev = 852.082
[info]   CI (99.9%): [80866.067, 87428.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   57.824 ±(99.9%) 414.166 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 57.824, 247.510), stdev = 107.558
[info]   CI (99.9%): [≈ 0, 471.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 17.000), stdev = 6.229
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Run progress: 8.31% complete, ETA 01:17:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17652.145 ops/s
[info] # Warmup Iteration   2: 26652.078 ops/s
[info] # Warmup Iteration   3: 26678.016 ops/s
[info] Iteration   1: 26678.957 ops/s
[info]                  ·gc.alloc.rate:                                  1618.532 MB/sec
[info]                  ·gc.alloc.rate.norm:                             95504.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.023 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.360 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1688.210 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       99615.506 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                196.480 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   2: 27077.597 ops/s
[info]                  ·gc.alloc.rate:                                  1642.775 MB/sec
[info]                  ·gc.alloc.rate.norm:                             95502.563 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.066 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.810 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.536 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       98918.612 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 27473.474 ops/s
[info]                  ·gc.alloc.rate:                                  1666.669 MB/sec
[info]                  ·gc.alloc.rate.norm:                             95504.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.786 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.506 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       97500.243 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 26906.750 ops/s
[info]                  ·gc.alloc.rate:                                  1633.250 MB/sec
[info]                  ·gc.alloc.rate.norm:                             95504.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.310 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.520 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       99554.520 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 27280.655 ops/s
[info]                  ·gc.alloc.rate:                                  1655.199 MB/sec
[info]                  ·gc.alloc.rate.norm:                             95504.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.832 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.749 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       98189.909 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   27083.487 ±(99.9%) 1195.995 ops/s [Average]
[info]   (min, avg, max) = (26678.957, 27083.487, 27473.474), stdev = 310.596
[info]   CI (99.9%): [25887.491, 28279.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1643.285 ±(99.9%) 72.101 MB/sec [Average]
[info]   (min, avg, max) = (1618.532, 1643.285, 1666.669), stdev = 18.724
[info]   CI (99.9%): [1571.184, 1715.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   95503.725 ±(99.9%) 2.500 B/op [Average]
[info]   (min, avg, max) = (95502.563, 95503.725, 95504.015), stdev = 0.649
[info]   CI (99.9%): [95501.225, 95506.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.092 MB/sec [Average]
[info]   (min, avg, max) = (0.005, 0.024, 0.066), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.420 ±(99.9%) 5.342 B/op [Average]
[info]   (min, avg, max) = (0.310, 1.420, 3.810), stdev = 1.387
[info]   CI (99.9%): [≈ 0, 6.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1699.104 ±(99.9%) 23.503 MB/sec [Average]
[info]   (min, avg, max) = (1688.210, 1699.104, 1702.520), stdev = 6.104
[info]   CI (99.9%): [1675.601, 1722.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   98755.758 ±(99.9%) 3497.632 B/op [Average]
[info]   (min, avg, max) = (97500.243, 98755.758, 99615.506), stdev = 908.324
[info]   CI (99.9%): [95258.126, 102253.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   39.296 ±(99.9%) 338.351 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 39.296, 196.480), stdev = 87.869
[info]   CI (99.9%): [≈ 0, 377.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 15.000), stdev = 4.722
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Run progress: 8.56% complete, ETA 01:17:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12134.440 ops/s
[info] # Warmup Iteration   2: 27604.802 ops/s
[info] # Warmup Iteration   3: 27656.263 ops/s
[info] Iteration   1: 27424.425 ops/s
[info]                  ·gc.alloc.rate:                   1501.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              86208.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        77145.589 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 267.601 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 27957.515 ops/s
[info]                  ·gc.alloc.rate:                                  1531.039 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86208.071 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.064 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.576 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.614 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       95812.591 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 28157.651 ops/s
[info]                  ·gc.alloc.rate:                                  1542.077 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86208.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.454 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76105.722 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 27949.891 ops/s
[info]                  ·gc.alloc.rate:                                  1530.635 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86208.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.224 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.653 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       95840.011 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 28216.986 ops/s
[info]                  ·gc.alloc.rate:                                  1545.896 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86208.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.056 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.838 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75943.921 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   27941.294 ±(99.9%) 1202.836 ops/s [Average]
[info]   (min, avg, max) = (27424.425, 27941.294, 28216.986), stdev = 312.373
[info]   CI (99.9%): [26738.457, 29144.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1530.307 ±(99.9%) 66.410 MB/sec [Average]
[info]   (min, avg, max) = (1501.889, 1530.307, 1545.896), stdev = 17.246
[info]   CI (99.9%): [1463.898, 1596.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   86208.026 ±(99.9%) 0.096 B/op [Average]
[info]   (min, avg, max) = (86208.014, 86208.026, 86208.071), stdev = 0.025
[info]   CI (99.9%): [86207.931, 86208.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.064), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.862 ±(99.9%) 5.882 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.862, 3.576), stdev = 1.527
[info]   CI (99.9%): [≈ 0, 6.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1494.096 ±(99.9%) 730.047 MB/sec [Average]
[info]   (min, avg, max) = (1344.007, 1494.096, 1701.653), stdev = 189.591
[info]   CI (99.9%): [764.049, 2224.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   84169.567 ±(99.9%) 41013.534 B/op [Average]
[info]   (min, avg, max) = (75943.921, 84169.567, 95840.011), stdev = 10651.084
[info]   CI (99.9%): [43156.033, 125183.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   53.520 ±(99.9%) 460.825 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 53.520, 267.601), stdev = 119.675
[info]   CI (99.9%): [≈ 0, 514.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 19.000), stdev = 6.542
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Run progress: 8.82% complete, ETA 01:17:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23520.357 ops/s
[info] # Warmup Iteration   2: 30841.622 ops/s
[info] # Warmup Iteration   3: 30886.667 ops/s
[info] Iteration   1: 30804.407 ops/s
[info]                  ·gc.alloc.rate:                                  1589.646 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81224.065 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.071 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.631 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1349.514 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68954.363 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                204.208 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   2: 31322.661 ops/s
[info]                  ·gc.alloc.rate:                                  1617.033 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81224.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.075 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.775 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.521 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85518.121 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 31213.369 ops/s
[info]                  ·gc.alloc.rate:                                  1610.632 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81224.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.116 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85816.704 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 31328.450 ops/s
[info]                  ·gc.alloc.rate:                                  1616.578 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81224.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.053 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.663 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85499.016 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 31375.110 ops/s
[info]                  ·gc.alloc.rate:                                  1619.418 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81224.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.132 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68298.950 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   31208.800 ±(99.9%) 899.961 ops/s [Average]
[info]   (min, avg, max) = (30804.407, 31208.800, 31375.110), stdev = 233.717
[info]   CI (99.9%): [30308.839, 32108.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1610.662 ±(99.9%) 46.921 MB/sec [Average]
[info]   (min, avg, max) = (1589.646, 1610.662, 1619.418), stdev = 12.185
[info]   CI (99.9%): [1563.741, 1657.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   81224.024 ±(99.9%) 0.089 B/op [Average]
[info]   (min, avg, max) = (81224.013, 81224.024, 81224.065), stdev = 0.023
[info]   CI (99.9%): [81223.934, 81224.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.030, 0.075), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.541 ±(99.9%) 7.602 B/op [Average]
[info]   (min, avg, max) = (0.053, 1.541, 3.775), stdev = 1.974
[info]   CI (99.9%): [≈ 0, 9.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1563.425 ±(99.9%) 730.659 MB/sec [Average]
[info]   (min, avg, max) = (1349.514, 1563.425, 1702.521), stdev = 189.750
[info]   CI (99.9%): [832.765, 2294.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   78817.431 ±(99.9%) 35836.402 B/op [Average]
[info]   (min, avg, max) = (68298.950, 78817.431, 85816.704), stdev = 9306.600
[info]   CI (99.9%): [42981.029, 114653.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   40.842 ±(99.9%) 351.659 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.842, 204.208), stdev = 91.325
[info]   CI (99.9%): [≈ 0, 392.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 11.000), stdev = 3.209
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 9.07% complete, ETA 01:17:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24016.289 ops/s
[info] # Warmup Iteration   2: 31253.529 ops/s
[info] # Warmup Iteration   3: 31431.735 ops/s
[info] Iteration   1: 31390.972 ops/s
[info]                  ·gc.alloc.rate:                                  1558.861 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78168.063 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.065 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.278 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1685.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       84528.645 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                200.384 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   2: 32149.667 ops/s
[info]                  ·gc.alloc.rate:                                  1597.293 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78168.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.082 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.489 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83316.074 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 32036.810 ops/s
[info]                  ·gc.alloc.rate:                                  1590.955 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78168.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66885.824 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 32059.725 ops/s
[info]                  ·gc.alloc.rate:            1592.635 MB/sec
[info]                  ·gc.alloc.rate.norm:       78168.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 83552.524 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 31941.782 ops/s
[info]                  ·gc.alloc.rate:                                  1586.430 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78168.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.258 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83863.760 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   31915.791 ±(99.9%) 1165.052 ops/s [Average]
[info]   (min, avg, max) = (31390.972, 31915.791, 32149.667), stdev = 302.560
[info]   CI (99.9%): [30750.739, 33080.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1585.235 ±(99.9%) 58.711 MB/sec [Average]
[info]   (min, avg, max) = (1558.861, 1585.235, 1597.293), stdev = 15.247
[info]   CI (99.9%): [1526.524, 1643.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   78168.023 ±(99.9%) 0.086 B/op [Average]
[info]   (min, avg, max) = (78168.013, 78168.023, 78168.063), stdev = 0.022
[info]   CI (99.9%): [78167.936, 78168.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.153 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.082), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.514 ±(99.9%) 7.567 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.514, 4.013), stdev = 1.965
[info]   CI (99.9%): [≈ 0, 9.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   1630.778 ±(99.9%) 580.669 MB/sec [Average]
[info]   (min, avg, max) = (1361.329, 1630.778, 1702.489), stdev = 150.798
[info]   CI (99.9%): [1050.109, 2211.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   80429.365 ±(99.9%) 29206.181 B/op [Average]
[info]   (min, avg, max) = (66885.824, 80429.365, 84528.645), stdev = 7584.752
[info]   CI (99.9%): [51223.184, 109635.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   40.077 ±(99.9%) 345.073 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.077, 200.384), stdev = 89.614
[info]   CI (99.9%): [≈ 0, 385.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 14.000), stdev = 4.472
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Run progress: 9.32% complete, ETA 01:16:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4390.839 ops/s
[info] # Warmup Iteration   2: 7509.707 ops/s
[info] # Warmup Iteration   3: 7970.631 ops/s
[info] Iteration   1: 7955.128 ops/s
[info]                  ·gc.alloc.rate:            1034.880 MB/sec
[info]                  ·gc.alloc.rate.norm:       204776.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.834 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 199622.096 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 7937.313 ops/s
[info]                  ·gc.alloc.rate:                   1032.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              204776.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.290 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        199967.762 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 132.079 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 8012.013 ops/s
[info]                  ·gc.alloc.rate:                                  1042.283 MB/sec
[info]                  ·gc.alloc.rate.norm:                             204776.051 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.093 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 18.312 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1349.262 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       265087.968 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                785.058 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   4: 8162.989 ops/s
[info]                  ·gc.alloc.rate:                                  1061.904 MB/sec
[info]                  ·gc.alloc.rate.norm:                             204776.054 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.023 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.397 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.920 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       196872.873 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 8123.468 ops/s
[info]                  ·gc.alloc.rate:            1057.219 MB/sec
[info]                  ·gc.alloc.rate.norm:       204776.054 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.294 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 197817.746 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   8038.182 ±(99.9%) 387.980 ops/s [Average]
[info]   (min, avg, max) = (7937.313, 8038.182, 8162.989), stdev = 100.757
[info]   CI (99.9%): [7650.202, 8426.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1045.764 ±(99.9%) 50.841 MB/sec [Average]
[info]   (min, avg, max) = (1032.534, 1045.764, 1061.904), stdev = 13.203
[info]   CI (99.9%): [994.923, 1096.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   204776.053 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (204776.051, 204776.053, 204776.055), stdev = 0.002
[info]   CI (99.9%): [204776.046, 204776.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.155 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.093), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   4.542 ±(99.9%) 30.535 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.542, 18.312), stdev = 7.930
[info]   CI (99.9%): [≈ 0, 35.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1081.720 ±(99.9%) 576.412 MB/sec [Average]
[info]   (min, avg, max) = (1008.290, 1081.720, 1349.262), stdev = 149.692
[info]   CI (99.9%): [505.308, 1658.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   211873.689 ±(99.9%) 114652.981 B/op [Average]
[info]   (min, avg, max) = (196872.873, 211873.689, 265087.968), stdev = 29775.015
[info]   CI (99.9%): [97220.708, 326526.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   183.427 ±(99.9%) 1313.647 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 183.427, 785.058), stdev = 341.150
[info]   CI (99.9%): [≈ 0, 1497.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 13.000), stdev = 5.128
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Run progress: 9.57% complete, ETA 01:16:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13818.759 ops/s
[info] # Warmup Iteration   2: 19710.899 ops/s
[info] # Warmup Iteration   3: 19803.118 ops/s
[info] Iteration   1: 19975.263 ops/s
[info]                  ·gc.alloc.rate:                   1526.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              120240.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.233 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        106222.113 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 262.406 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 20220.803 ops/s
[info]                  ·gc.alloc.rate:                                  1544.521 MB/sec
[info]                  ·gc.alloc.rate.norm:                             120240.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.105 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.142 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.560 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       132465.349 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 19807.584 ops/s
[info]                  ·gc.alloc.rate:                                  1513.079 MB/sec
[info]                  ·gc.alloc.rate.norm:                             120240.026 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.659 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.404 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       108186.833 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 19781.767 ops/s
[info]                  ·gc.alloc.rate:                                  1511.588 MB/sec
[info]                  ·gc.alloc.rate.norm:                             120240.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.316 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.312 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       135411.255 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 20331.508 ops/s
[info]                  ·gc.alloc.rate:                                  1553.060 MB/sec
[info]                  ·gc.alloc.rate.norm:                             120240.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.184 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       105399.033 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   20023.385 ±(99.9%) 945.526 ops/s [Average]
[info]   (min, avg, max) = (19781.767, 20023.385, 20331.508), stdev = 245.550
[info]   CI (99.9%): [19077.859, 20968.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1529.681 ±(99.9%) 71.579 MB/sec [Average]
[info]   (min, avg, max) = (1511.588, 1529.681, 1553.060), stdev = 18.589
[info]   CI (99.9%): [1458.102, 1601.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   120240.026 ±(99.9%) 0.028 B/op [Average]
[info]   (min, avg, max) = (120240.021, 120240.026, 120240.038), stdev = 0.007
[info]   CI (99.9%): [120239.998, 120240.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.105), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.860 ±(99.9%) 13.554 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.860, 8.142), stdev = 3.520
[info]   CI (99.9%): [≈ 0, 15.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1494.975 ±(99.9%) 727.790 MB/sec [Average]
[info]   (min, avg, max) = (1348.233, 1494.975, 1702.312), stdev = 189.005
[info]   CI (99.9%): [767.186, 2222.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   117536.917 ±(99.9%) 57923.948 B/op [Average]
[info]   (min, avg, max) = (105399.033, 117536.917, 135411.255), stdev = 15042.665
[info]   CI (99.9%): [59612.969, 175460.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   52.481 ±(99.9%) 451.880 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 52.481, 262.406), stdev = 117.352
[info]   CI (99.9%): [≈ 0, 504.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 14.000), stdev = 4.472
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Run progress: 9.82% complete, ETA 01:16:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26007.284 ops/s
[info] # Warmup Iteration   2: 40129.296 ops/s
[info] # Warmup Iteration   3: 40488.338 ops/s
[info] Iteration   1: 40526.433 ops/s
[info]                  ·gc.alloc.rate:                   999.539 MB/sec
[info]                  ·gc.alloc.rate.norm:              38823.202 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.642 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        39137.939 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 51.736 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 40473.197 ops/s
[info]                  ·gc.alloc.rate:            998.171 MB/sec
[info]                  ·gc.alloc.rate.norm:       38824.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.991 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39244.859 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 40604.918 ops/s
[info]                  ·gc.alloc.rate:                                  1001.464 MB/sec
[info]                  ·gc.alloc.rate.norm:                             38824.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.093 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.615 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.000 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       39271.252 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                154.916 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 41143.107 ops/s
[info]                  ·gc.alloc.rate:                                  1014.942 MB/sec
[info]                  ·gc.alloc.rate.norm:                             38824.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.053 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.180 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       39062.648 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 39866.252 ops/s
[info]                  ·gc.alloc.rate:            983.201 MB/sec
[info]                  ·gc.alloc.rate.norm:       38824.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.926 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40313.663 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   40522.781 ±(99.9%) 1748.818 ops/s [Average]
[info]   (min, avg, max) = (39866.252, 40522.781, 41143.107), stdev = 454.162
[info]   CI (99.9%): [38773.964, 42271.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   999.463 ±(99.9%) 43.468 MB/sec [Average]
[info]   (min, avg, max) = (983.201, 999.463, 1014.942), stdev = 11.288
[info]   CI (99.9%): [955.995, 1042.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   38823.849 ±(99.9%) 1.392 B/op [Average]
[info]   (min, avg, max) = (38823.202, 38823.849, 38824.012), stdev = 0.361
[info]   CI (99.9%): [38822.457, 38825.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.093), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.129 ±(99.9%) 6.333 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.129, 3.615), stdev = 1.645
[info]   CI (99.9%): [≈ 0, 7.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1014.348 ±(99.9%) 24.763 MB/sec [Average]
[info]   (min, avg, max) = (1007.642, 1014.348, 1021.180), stdev = 6.431
[info]   CI (99.9%): [989.585, 1039.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   39406.072 ±(99.9%) 1980.111 B/op [Average]
[info]   (min, avg, max) = (39062.648, 39406.072, 40313.663), stdev = 514.228
[info]   CI (99.9%): [37425.961, 41386.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   41.330 ±(99.9%) 259.273 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41.330, 154.916), stdev = 67.332
[info]   CI (99.9%): [≈ 0, 300.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.000, 13.000), stdev = 5.148
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Run progress: 10.08% complete, ETA 01:16:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52736.240 ops/s
[info] # Warmup Iteration   2: 58601.462 ops/s
[info] # Warmup Iteration   3: 59282.052 ops/s
[info] Iteration   1: 59486.237 ops/s
[info]                  ·gc.alloc.rate:            768.454 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.988 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17836.102 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 59219.966 ops/s
[info]                  ·gc.alloc.rate:            765.018 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.982 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26874.308 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 58441.627 ops/s
[info]                  ·gc.alloc.rate:            755.018 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18154.675 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 59398.486 ops/s
[info]                  ·gc.alloc.rate:            767.511 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.147 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17862.222 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 59418.762 ops/s
[info]                  ·gc.alloc.rate:                                  767.594 MB/sec
[info]                  ·gc.alloc.rate.norm:                             20336.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.060 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.577 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            677.334 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17944.735 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                88.224 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   59193.016 ±(99.9%) 1661.220 ops/s [Average]
[info]   (min, avg, max) = (58441.627, 59193.016, 59486.237), stdev = 431.413
[info]   CI (99.9%): [57531.796, 60854.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   764.719 ±(99.9%) 21.458 MB/sec [Average]
[info]   (min, avg, max) = (755.018, 764.719, 768.454), stdev = 5.573
[info]   CI (99.9%): [743.261, 786.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   20336.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (20336.007, 20336.007, 20336.008), stdev = 0.001
[info]   CI (99.9%): [20336.006, 20336.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.102 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.060), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.315 ±(99.9%) 2.715 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.315, 1.577), stdev = 0.705
[info]   CI (99.9%): [≈ 0, 3.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   742.096 ±(99.9%) 578.822 MB/sec [Average]
[info]   (min, avg, max) = (673.988, 742.096, 1010.982), stdev = 150.318
[info]   CI (99.9%): [163.274, 1320.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   19734.409 ±(99.9%) 15376.718 B/op [Average]
[info]   (min, avg, max) = (17836.102, 19734.409, 26874.308), stdev = 3993.285
[info]   CI (99.9%): [4357.691, 35111.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   17.645 ±(99.9%) 151.927 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.645, 88.224), stdev = 39.455
[info]   CI (99.9%): [≈ 0, 169.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 9.000), stdev = 1.789
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Run progress: 10.33% complete, ETA 01:16:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10492.477 ops/s
[info] # Warmup Iteration   2: 29718.483 ops/s
[info] # Warmup Iteration   3: 29834.527 ops/s
[info] Iteration   1: 30176.115 ops/s
[info]                  ·gc.alloc.rate:                                  2016.112 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105144.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.395 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1698.112 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       88559.697 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                208.458 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 30349.137 ops/s
[info]                  ·gc.alloc.rate:                                  2027.105 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105144.018 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.828 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       105907.696 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 29765.802 ops/s
[info]                  ·gc.alloc.rate:                                  1988.291 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105144.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.514 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.949 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       107981.527 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 30398.158 ops/s
[info]                  ·gc.alloc.rate:                                  2030.411 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105144.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.544 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.929 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       105740.495 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 29612.969 ops/s
[info]                  ·gc.alloc.rate:                                  1977.905 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105144.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.070 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.844 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       108542.963 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   30060.436 ±(99.9%) 1358.439 ops/s [Average]
[info]   (min, avg, max) = (29612.969, 30060.436, 30398.158), stdev = 352.782
[info]   CI (99.9%): [28701.997, 31418.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2007.965 ±(99.9%) 90.862 MB/sec [Average]
[info]   (min, avg, max) = (1977.905, 2007.965, 2030.411), stdev = 23.596
[info]   CI (99.9%): [1917.103, 2098.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   105144.015 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (105144.014, 105144.015, 105144.018), stdev = 0.002
[info]   CI (99.9%): [105144.008, 105144.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.019 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.006, 0.011), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.306 ±(99.9%) 0.966 B/op [Average]
[info]   (min, avg, max) = (0.009, 0.306, 0.544), stdev = 0.251
[info]   CI (99.9%): [≈ 0, 1.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1973.132 ±(99.9%) 592.002 MB/sec [Average]
[info]   (min, avg, max) = (1698.112, 1973.132, 2041.949), stdev = 153.741
[info]   CI (99.9%): [1381.130, 2565.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   103346.476 ±(99.9%) 32183.827 B/op [Average]
[info]   (min, avg, max) = (88559.697, 103346.476, 108542.963), stdev = 8358.038
[info]   CI (99.9%): [71162.649, 135530.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   41.692 ±(99.9%) 358.976 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41.692, 208.458), stdev = 93.225
[info]   CI (99.9%): [≈ 0, 400.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 10.000), stdev = 1.949
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Run progress: 10.58% complete, ETA 01:15:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16222.027 ops/s
[info] # Warmup Iteration   2: 33831.281 ops/s
[info] # Warmup Iteration   3: 33390.212 ops/s
[info] Iteration   1: 34155.780 ops/s
[info]                  ·gc.alloc.rate:                                  1801.364 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83000.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.047 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.162 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1693.434 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78026.995 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                214.866 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   2: 34808.087 ops/s
[info]                  ·gc.alloc.rate:                                  1835.149 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83000.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.174 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.493 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76955.009 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 34790.422 ops/s
[info]                  ·gc.alloc.rate:                                  1834.492 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83000.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       92391.126 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 34795.314 ops/s
[info]                  ·gc.alloc.rate:                                  1834.835 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83000.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.059 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.788 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76981.544 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 34726.539 ops/s
[info]                  ·gc.alloc.rate:                                  1831.013 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83000.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.059 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       92564.034 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   34655.228 ±(99.9%) 1081.958 ops/s [Average]
[info]   (min, avg, max) = (34155.780, 34655.228, 34808.087), stdev = 280.981
[info]   CI (99.9%): [33573.271, 35737.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1827.371 ±(99.9%) 56.347 MB/sec [Average]
[info]   (min, avg, max) = (1801.364, 1827.371, 1835.149), stdev = 14.633
[info]   CI (99.9%): [1771.023, 1883.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   83000.013 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (83000.012, 83000.013, 83000.016), stdev = 0.002
[info]   CI (99.9%): [83000.006, 83000.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.078 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.011, 0.047), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.492 ±(99.9%) 3.603 B/op [Average]
[info]   (min, avg, max) = (0.006, 0.492, 2.162), stdev = 0.936
[info]   CI (99.9%): [≈ 0, 4.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1836.154 ±(99.9%) 723.790 MB/sec [Average]
[info]   (min, avg, max) = (1693.434, 1836.154, 2042.057), stdev = 187.966
[info]   CI (99.9%): [1112.364, 2559.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   83383.742 ±(99.9%) 32010.307 B/op [Average]
[info]   (min, avg, max) = (76955.009, 83383.742, 92564.034), stdev = 8312.975
[info]   CI (99.9%): [51373.435, 115394.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   42.973 ±(99.9%) 370.012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42.973, 214.866), stdev = 96.091
[info]   CI (99.9%): [≈ 0, 412.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 13.000), stdev = 3.564
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Run progress: 10.83% complete, ETA 01:15:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37920.904 ops/s
[info] # Warmup Iteration   2: 46569.828 ops/s
[info] # Warmup Iteration   3: 46056.070 ops/s
[info] Iteration   1: 46421.302 ops/s
[info]                  ·gc.alloc.rate:                                  1783.607 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60480.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.127 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.302 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1697.690 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       57566.664 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                135.504 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 46347.469 ops/s
[info]                  ·gc.alloc.rate:                                  1781.375 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60480.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.269 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       57794.281 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 47250.409 ops/s
[info]                  ·gc.alloc.rate:                                  1815.460 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60480.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.621 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       56687.579 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 46643.360 ops/s
[info]                  ·gc.alloc.rate:                                  1792.262 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60480.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.060 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.212 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68914.579 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 47267.505 ops/s
[info]                  ·gc.alloc.rate:            1816.195 MB/sec
[info]                  ·gc.alloc.rate.norm:       60480.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.805 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56670.792 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   46786.009 ±(99.9%) 1714.708 ops/s [Average]
[info]   (min, avg, max) = (46347.469, 46786.009, 47267.505), stdev = 445.304
[info]   CI (99.9%): [45071.301, 48500.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1797.780 ±(99.9%) 65.352 MB/sec [Average]
[info]   (min, avg, max) = (1781.375, 1797.780, 1816.195), stdev = 16.972
[info]   CI (99.9%): [1732.428, 1863.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   60480.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (60480.009, 60480.009, 60480.009), stdev = 0.001
[info]   CI (99.9%): [60480.007, 60480.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.217 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.127), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.888 ±(99.9%) 7.351 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.888, 4.302), stdev = 1.909
[info]   CI (99.9%): [≈ 0, 8.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1769.119 ±(99.9%) 587.894 MB/sec [Average]
[info]   (min, avg, max) = (1697.690, 1769.119, 2042.212), stdev = 152.674
[info]   CI (99.9%): [1181.225, 2357.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   59526.779 ±(99.9%) 20302.071 B/op [Average]
[info]   (min, avg, max) = (56670.792, 59526.779, 68914.579), stdev = 5272.383
[info]   CI (99.9%): [39224.708, 79828.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   27.101 ±(99.9%) 233.346 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.101, 135.504), stdev = 60.599
[info]   CI (99.9%): [≈ 0, 260.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.140
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 11.08% complete, ETA 01:15:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36678.663 ops/s
[info] # Warmup Iteration   2: 43681.972 ops/s
[info] # Warmup Iteration   3: 44061.707 ops/s
[info] Iteration   1: 44959.729 ops/s
[info]                  ·gc.alloc.rate:                                  1795.315 MB/sec
[info]                  ·gc.alloc.rate.norm:                             62856.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.222 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.788 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2034.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71213.999 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                139.910 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 45335.548 ops/s
[info]                  ·gc.alloc.rate:            1810.052 MB/sec
[info]                  ·gc.alloc.rate.norm:       62856.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.510 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 59086.756 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 45244.444 ops/s
[info]                  ·gc.alloc.rate:                                  1806.679 MB/sec
[info]                  ·gc.alloc.rate.norm:                             62856.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.097 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.679 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       59202.963 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 45216.837 ops/s
[info]                  ·gc.alloc.rate:                                  1805.600 MB/sec
[info]                  ·gc.alloc.rate.norm:                             62856.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.091 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.103 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71089.112 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 44289.627 ops/s
[info]                  ·gc.alloc.rate:                                  1768.576 MB/sec
[info]                  ·gc.alloc.rate.norm:                             62856.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.040 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.741 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       60480.657 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   45009.237 ±(99.9%) 1639.566 ops/s [Average]
[info]   (min, avg, max) = (44289.627, 45009.237, 45335.548), stdev = 425.790
[info]   CI (99.9%): [43369.672, 46648.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1797.244 ±(99.9%) 65.248 MB/sec [Average]
[info]   (min, avg, max) = (1768.576, 1797.244, 1810.052), stdev = 16.945
[info]   CI (99.9%): [1731.997, 1862.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   62856.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (62856.009, 62856.009, 62856.009), stdev = 0.001
[info]   CI (99.9%): [62856.009, 62856.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.046 ±(99.9%) 0.380 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.222), stdev = 0.099
[info]   CI (99.9%): [≈ 0, 0.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.603 ±(99.9%) 13.313 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.603, 7.788), stdev = 3.457
[info]   CI (99.9%): [≈ 0, 14.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   1836.214 ±(99.9%) 709.640 MB/sec [Average]
[info]   (min, avg, max) = (1701.510, 1836.214, 2042.103), stdev = 184.291
[info]   CI (99.9%): [1126.574, 2545.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   64214.697 ±(99.9%) 24475.388 B/op [Average]
[info]   (min, avg, max) = (59086.756, 64214.697, 71213.999), stdev = 6356.181
[info]   CI (99.9%): [39739.309, 88690.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   27.982 ±(99.9%) 240.933 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.982, 139.910), stdev = 62.569
[info]   CI (99.9%): [≈ 0, 268.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 10.000), stdev = 2.608
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Run progress: 11.34% complete, ETA 01:15:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 265245.287 ops/s
[info] # Warmup Iteration   2: 323475.564 ops/s
[info] # Warmup Iteration   3: 332285.882 ops/s
[info] Iteration   1: 333673.460 ops/s
[info]                  ·gc.alloc.rate:                                  1687.262 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7960.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.133 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.628 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1691.614 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7980.533 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                15.710 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   2: 335388.022 ops/s
[info]                  ·gc.alloc.rate:                                  1695.850 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7960.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.592 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7986.953 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 336294.790 ops/s
[info]                  ·gc.alloc.rate:                                  1700.669 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7960.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7965.036 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 332500.673 ops/s
[info]                  ·gc.alloc.rate:                                  1681.961 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7960.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.286 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8056.195 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 334643.052 ops/s
[info]                  ·gc.alloc.rate:                                  1692.254 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7960.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.773 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8004.780 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   334499.999 ±(99.9%) 5682.405 ops/s [Average]
[info]   (min, avg, max) = (332500.673, 334499.999, 336294.790), stdev = 1475.703
[info]   CI (99.9%): [328817.594, 340182.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1691.599 ±(99.9%) 28.064 MB/sec [Average]
[info]   (min, avg, max) = (1681.961, 1691.599, 1700.669), stdev = 7.288
[info]   CI (99.9%): [1663.535, 1719.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   7960.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7960.001, 7960.001, 7960.001), stdev = 0.001
[info]   CI (99.9%): [7960.001, 7960.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.225 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.029, 0.133), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.135 ±(99.9%) 1.064 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.135, 0.628), stdev = 0.276
[info]   CI (99.9%): [≈ 0, 1.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1699.802 ±(99.9%) 17.654 MB/sec [Average]
[info]   (min, avg, max) = (1691.614, 1699.802, 1702.286), stdev = 4.585
[info]   CI (99.9%): [1682.148, 1717.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   7998.699 ±(99.9%) 135.374 B/op [Average]
[info]   (min, avg, max) = (7965.036, 7998.699, 8056.195), stdev = 35.156
[info]   CI (99.9%): [7863.325, 8134.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.142 ±(99.9%) 27.053 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.142, 15.710), stdev = 7.026
[info]   CI (99.9%): [≈ 0, 30.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 11.000), stdev = 3.130
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava
[info] # Run progress: 11.59% complete, ETA 01:15:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68362.986 ops/s
[info] # Warmup Iteration   2: 1532774.165 ops/s
[info] # Warmup Iteration   3: 1599616.194 ops/s
[info] Iteration   1: 1608735.829 ops/s
[info]                  ·gc.alloc.rate:                   507.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             333.156 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        325.846 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.652 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1598355.548 ops/s
[info]                  ·gc.alloc.rate:            503.605 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.315 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 657.238 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 1557989.885 ops/s
[info]                  ·gc.alloc.rate:            490.928 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.690 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 337.138 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 1596405.512 ops/s
[info]                  ·gc.alloc.rate:            503.048 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 658.034 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 1605938.905 ops/s
[info]                  ·gc.alloc.rate:            506.038 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 327.077 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava":
[info]   1593485.136 ±(99.9%) 78911.014 ops/s [Average]
[info]   (min, avg, max) = (1557989.885, 1593485.136, 1608735.829), stdev = 20492.940
[info]   CI (99.9%): [1514574.121, 1672396.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   502.149 ±(99.9%) 25.010 MB/sec [Average]
[info]   (min, avg, max) = (490.928, 502.149, 507.126), stdev = 6.495
[info]   CI (99.9%): [477.139, 527.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   496.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (496.000, 496.000, 496.000), stdev = 0.001
[info]   CI (99.9%): [496.000, 496.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   467.048 ±(99.9%) 704.090 MB/sec [Average]
[info]   (min, avg, max) = (333.156, 467.048, 667.385), stdev = 182.850
[info]   CI (99.9%): [≈ 0, 1171.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   461.067 ±(99.9%) 691.177 B/op [Average]
[info]   (min, avg, max) = (325.846, 461.067, 658.034), stdev = 179.497
[info]   CI (99.9%): [≈ 0, 1152.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.130 ±(99.9%) 1.122 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.130, 0.652), stdev = 0.291
[info]   CI (99.9%): [≈ 0, 1.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 10.000), stdev = 2.950
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Run progress: 11.84% complete, ETA 01:14:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 392152.583 ops/s
[info] # Warmup Iteration   2: 633126.693 ops/s
[info] # Warmup Iteration   3: 630837.706 ops/s
[info] Iteration   1: 634977.744 ops/s
[info]                  ·gc.alloc.rate:            538.896 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.331 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 833.814 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 632239.744 ops/s
[info]                  ·gc.alloc.rate:            536.599 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.704 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1674.867 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 621617.130 ops/s
[info]                  ·gc.alloc.rate:            527.557 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.314 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 851.692 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 630931.490 ops/s
[info]                  ·gc.alloc.rate:                   535.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.060 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1676.650 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.662 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 631015.935 ops/s
[info]                  ·gc.alloc.rate:            535.594 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1678.017 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   630156.408 ±(99.9%) 19429.960 ops/s [Average]
[info]   (min, avg, max) = (621617.130, 630156.408, 634977.744), stdev = 5045.899
[info]   CI (99.9%): [610726.449, 649586.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   534.833 ±(99.9%) 16.519 MB/sec [Average]
[info]   (min, avg, max) = (527.557, 534.833, 538.896), stdev = 4.290
[info]   CI (99.9%): [518.313, 551.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1336.001, 1336.001, 1336.001), stdev = 0.001
[info]   CI (99.9%): [1336.001, 1336.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.023 ±(99.9%) 709.006 MB/sec [Average]
[info]   (min, avg, max) = (336.314, 538.023, 672.706), stdev = 184.127
[info]   CI (99.9%): [≈ 0, 1247.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1343.008 ±(99.9%) 1758.641 B/op [Average]
[info]   (min, avg, max) = (833.814, 1343.008, 1678.017), stdev = 456.713
[info]   CI (99.9%): [≈ 0, 3101.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.332 ±(99.9%) 2.862 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.332, 1.662), stdev = 0.743
[info]   CI (99.9%): [≈ 0, 3.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 8.000), stdev = 1.949
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Run progress: 12.09% complete, ETA 01:14:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1589299.827 ops/s
[info] # Warmup Iteration   2: 1599551.267 ops/s
[info] # Warmup Iteration   3: 1673112.190 ops/s
[info] Iteration   1: 1727581.826 ops/s
[info]                  ·gc.alloc.rate:            333.703 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 307.066 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 1729308.138 ops/s
[info]                  ·gc.alloc.rate:            333.960 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.959 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 306.731 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 1709453.074 ops/s
[info]                  ·gc.alloc.rate:            330.135 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 310.328 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 1727704.053 ops/s
[info]                  ·gc.alloc.rate:            333.683 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.035 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 307.054 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1728526.928 ops/s
[info]                  ·gc.alloc.rate:            333.812 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.013 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 306.915 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1724514.804 ±(99.9%) 32532.065 ops/s [Average]
[info]   (min, avg, max) = (1709453.074, 1724514.804, 1729308.138), stdev = 8448.474
[info]   CI (99.9%): [1691982.739, 1757046.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   333.059 ±(99.9%) 6.307 MB/sec [Average]
[info]   (min, avg, max) = (330.135, 333.059, 333.960), stdev = 1.638
[info]   CI (99.9%): [326.752, 339.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   337.017 ±(99.9%) 0.153 MB/sec [Average]
[info]   (min, avg, max) = (336.959, 337.017, 337.068), stdev = 0.040
[info]   CI (99.9%): [336.863, 337.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   307.619 ±(99.9%) 5.856 B/op [Average]
[info]   (min, avg, max) = (306.731, 307.619, 310.328), stdev = 1.521
[info]   CI (99.9%): [301.763, 313.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Run progress: 12.34% complete, ETA 01:14:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53291.588 ops/s
[info] # Warmup Iteration   2: 90908.827 ops/s
[info] # Warmup Iteration   3: 94369.581 ops/s
[info] Iteration   1: 96166.847 ops/s
[info]                  ·gc.alloc.rate:                                  3493.116 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.066 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3743.893 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       61280.770 B/op
[info]                  ·gc.count:                                       11.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 93963.284 ops/s
[info]                  ·gc.alloc.rate:                                  3414.057 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.057 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.558 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       57016.934 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 95424.459 ops/s
[info]                  ·gc.alloc.rate:                                  3467.429 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.043 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       56141.735 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   4: 95843.600 ops/s
[info]                  ·gc.alloc.rate:            3481.289 MB/sec
[info]                  ·gc.alloc.rate.norm:       57176.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3403.409 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55896.925 B/op
[info]                  ·gc.count:                 10.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 93449.740 ops/s
[info]                  ·gc.alloc.rate:                                  3394.554 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.581 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       57328.048 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   94969.586 ±(99.9%) 4607.445 ops/s [Average]
[info]   (min, avg, max) = (93449.740, 94969.586, 96166.847), stdev = 1196.539
[info]   CI (99.9%): [90362.141, 99577.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3450.089 ±(99.9%) 166.826 MB/sec [Average]
[info]   (min, avg, max) = (3394.554, 3450.089, 3493.116), stdev = 43.324
[info]   CI (99.9%): [3283.263, 3616.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   57176.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (57176.004, 57176.004, 57176.005), stdev = 0.001
[info]   CI (99.9%): [57176.004, 57176.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.043 ±(99.9%) 0.098 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.043, 0.066), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3472.030 ±(99.9%) 585.211 MB/sec [Average]
[info]   (min, avg, max) = (3403.409, 3472.030, 3743.893), stdev = 151.977
[info]   CI (99.9%): [2886.819, 4057.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   57532.882 ±(99.9%) 8384.874 B/op [Average]
[info]   (min, avg, max) = (55896.925, 57532.882, 61280.770), stdev = 2177.525
[info]   CI (99.9%): [49148.008, 65917.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   51.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (10.000, 10.200, 11.000), stdev = 0.447
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.400, 13.000), stdev = 2.074
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Run progress: 12.59% complete, ETA 01:14:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 241639.342 ops/s
[info] # Warmup Iteration   2: 310608.954 ops/s
[info] # Warmup Iteration   3: 313823.322 ops/s
[info] Iteration   1: 308435.162 ops/s
[info]                  ·gc.alloc.rate:            760.223 MB/sec
[info]                  ·gc.alloc.rate.norm:       3880.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.989 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3439.882 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 312718.717 ops/s
[info]                  ·gc.alloc.rate:            771.839 MB/sec
[info]                  ·gc.alloc.rate.norm:       3880.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.914 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5071.766 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 314274.172 ops/s
[info]                  ·gc.alloc.rate:            774.927 MB/sec
[info]                  ·gc.alloc.rate.norm:       3880.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.237 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3375.853 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 308795.567 ops/s
[info]                  ·gc.alloc.rate:            761.209 MB/sec
[info]                  ·gc.alloc.rate.norm:       3880.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3435.895 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 298242.996 ops/s
[info]                  ·gc.alloc.rate:                                  735.093 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3880.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.101 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            677.307 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3574.991 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                17.576 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   308493.323 ±(99.9%) 24080.853 ops/s [Average]
[info]   (min, avg, max) = (298242.996, 308493.323, 314274.172), stdev = 6253.721
[info]   CI (99.9%): [284412.470, 332574.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   760.658 ±(99.9%) 60.355 MB/sec [Average]
[info]   (min, avg, max) = (735.093, 760.658, 774.927), stdev = 15.674
[info]   CI (99.9%): [700.304, 821.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3880.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3880.001, 3880.001, 3880.001), stdev = 0.001
[info]   CI (99.9%): [3880.001, 3880.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.033 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.019), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.020 ±(99.9%) 0.174 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.101), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   741.706 ±(99.9%) 575.211 MB/sec [Average]
[info]   (min, avg, max) = (673.989, 741.706, 1008.914), stdev = 149.381
[info]   CI (99.9%): [166.494, 1316.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3779.677 ±(99.9%) 2795.440 B/op [Average]
[info]   (min, avg, max) = (3375.853, 3779.677, 5071.766), stdev = 725.967
[info]   CI (99.9%): [984.237, 6575.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.515 ±(99.9%) 30.267 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.515, 17.576), stdev = 7.860
[info]   CI (99.9%): [≈ 0, 33.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 10.000), stdev = 2.168
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava
[info] # Run progress: 12.85% complete, ETA 01:14:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12173.408 ops/s
[info] # Warmup Iteration   2: 1273883.299 ops/s
[info] # Warmup Iteration   3: 1279973.535 ops/s
[info] Iteration   1: 1201244.905 ops/s
[info]                  ·gc.alloc.rate:            555.677 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.501 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 874.502 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 1196665.961 ops/s
[info]                  ·gc.alloc.rate:            553.431 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.672 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 438.923 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 1182879.545 ops/s
[info]                  ·gc.alloc.rate:            547.055 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 888.078 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 1192482.247 ops/s
[info]                  ·gc.alloc.rate:            551.533 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 880.932 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 1204801.571 ops/s
[info]                  ·gc.alloc.rate:            557.289 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.730 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 435.960 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava":
[info]   1195614.846 ±(99.9%) 32741.761 ops/s [Average]
[info]   (min, avg, max) = (1182879.545, 1195614.846, 1204801.571), stdev = 8502.931
[info]   CI (99.9%): [1162873.084, 1228356.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   552.997 ±(99.9%) 15.311 MB/sec [Average]
[info]   (min, avg, max) = (547.055, 552.997, 557.289), stdev = 3.976
[info]   CI (99.9%): [537.686, 568.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   533.929 ±(99.9%) 703.827 MB/sec [Average]
[info]   (min, avg, max) = (333.672, 533.929, 667.501), stdev = 182.782
[info]   CI (99.9%): [≈ 0, 1237.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   703.679 ±(99.9%) 936.054 B/op [Average]
[info]   (min, avg, max) = (435.960, 703.679, 888.078), stdev = 243.090
[info]   CI (99.9%): [≈ 0, 1639.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.800, 10.000), stdev = 2.588
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Run progress: 13.10% complete, ETA 01:13:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 613107.407 ops/s
[info] # Warmup Iteration   2: 954723.395 ops/s
[info] # Warmup Iteration   3: 958991.753 ops/s
[info] Iteration   1: 953039.854 ops/s
[info]                  ·gc.alloc.rate:                   673.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.948 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1109.931 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.100 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 960110.023 ops/s
[info]                  ·gc.alloc.rate:                   678.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.935 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1101.750 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.092 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 941874.053 ops/s
[info]                  ·gc.alloc.rate:            665.384 MB/sec
[info]                  ·gc.alloc.rate.norm:       1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.725 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1124.268 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 937455.969 ops/s
[info]                  ·gc.alloc.rate:                   662.286 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1128.417 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.118 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 924286.516 ops/s
[info]                  ·gc.alloc.rate:                   652.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1144.526 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.940 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   943353.283 ±(99.9%) 53603.053 ops/s [Average]
[info]   (min, avg, max) = (924286.516, 943353.283, 960110.023), stdev = 13920.543
[info]   CI (99.9%): [889750.230, 996956.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   666.397 ±(99.9%) 37.758 MB/sec [Average]
[info]   (min, avg, max) = (652.928, 666.397, 678.186), stdev = 9.806
[info]   CI (99.9%): [628.639, 704.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1112.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1112.000, 1112.000, 1112.000), stdev = 0.001
[info]   CI (99.9%): [1112.000, 1112.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   672.140 ±(99.9%) 1.277 MB/sec [Average]
[info]   (min, avg, max) = (671.935, 672.140, 672.725), stdev = 0.332
[info]   CI (99.9%): [670.863, 673.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1121.779 ±(99.9%) 64.122 B/op [Average]
[info]   (min, avg, max) = (1101.750, 1121.779, 1144.526), stdev = 16.652
[info]   CI (99.9%): [1057.657, 1185.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 7.254 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 4.662), stdev = 1.884
[info]   CI (99.9%): [≈ 0, 8.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.250 ±(99.9%) 12.386 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.250, 7.940), stdev = 3.217
[info]   CI (99.9%): [≈ 0, 14.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Run progress: 13.35% complete, ETA 01:13:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1920848.035 ops/s
[info] # Warmup Iteration   2: 2079625.319 ops/s
[info] # Warmup Iteration   3: 2081051.371 ops/s
[info] Iteration   1: 2059125.168 ops/s
[info]                  ·gc.alloc.rate:            952.607 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.313 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 771.336 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 2096088.734 ops/s
[info]                  ·gc.alloc.rate:            969.701 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 757.770 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 2106506.820 ops/s
[info]                  ·gc.alloc.rate:                                  974.201 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.043 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.672 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       757.496 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.986 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 2144045.158 ops/s
[info]                  ·gc.alloc.rate:                                  991.867 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.033 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.883 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       499.747 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 2141222.248 ops/s
[info]                  ·gc.alloc.rate:            990.619 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.381 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 750.607 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   2109397.626 ±(99.9%) 135130.468 ops/s [Average]
[info]   (min, avg, max) = (2059125.168, 2109397.626, 2144045.158), stdev = 35092.953
[info]   CI (99.9%): [1974267.158, 2244528.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   975.799 ±(99.9%) 62.548 MB/sec [Average]
[info]   (min, avg, max) = (952.607, 975.799, 991.867), stdev = 16.244
[info]   CI (99.9%): [913.251, 1038.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.081 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.043), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.011 ±(99.9%) 0.061 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.032), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   946.921 ±(99.9%) 572.980 MB/sec [Average]
[info]   (min, avg, max) = (680.883, 946.921, 1021.381), stdev = 148.801
[info]   CI (99.9%): [373.941, 1519.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   707.391 ±(99.9%) 447.905 B/op [Average]
[info]   (min, avg, max) = (499.747, 707.391, 771.336), stdev = 116.320
[info]   CI (99.9%): [259.486, 1155.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.597 ±(99.9%) 5.142 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.597, 2.986), stdev = 1.335
[info]   CI (99.9%): [≈ 0, 5.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 10.000), stdev = 3.564
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 13.60% complete, ETA 01:13:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2011002.524 ops/s
[info] # Warmup Iteration   2: 2135037.645 ops/s
[info] # Warmup Iteration   3: 2194409.087 ops/s
[info] Iteration   1: 2195581.479 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2200547.368 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2200729.011 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2209461.459 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2199187.911 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2201101.445 ±(99.9%) 19678.560 ops/s [Average]
[info]   (min, avg, max) = (2195581.479, 2201101.445, 2209461.459), stdev = 5110.459
[info]   CI (99.9%): [2181422.886, 2220780.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Run progress: 13.85% complete, ETA 01:13:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 294655.629 ops/s
[info] # Warmup Iteration   2: 416421.146 ops/s
[info] # Warmup Iteration   3: 417338.209 ops/s
[info] Iteration   1: 420733.314 ops/s
[info]                  ·gc.alloc.rate:            491.818 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1258.310 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 420101.688 ops/s
[info]                  ·gc.alloc.rate:            491.039 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.298 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1260.161 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 417541.311 ops/s
[info]                  ·gc.alloc.rate:            488.086 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.702 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2535.970 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 421384.421 ops/s
[info]                  ·gc.alloc.rate:            492.731 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.440 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1256.367 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 418358.177 ops/s
[info]                  ·gc.alloc.rate:            489.073 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2530.831 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   419623.782 ±(99.9%) 6238.087 ops/s [Average]
[info]   (min, avg, max) = (417541.311, 419623.782, 421384.421), stdev = 1620.011
[info]   CI (99.9%): [413385.695, 425861.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   490.549 ±(99.9%) 7.421 MB/sec [Average]
[info]   (min, avg, max) = (488.086, 490.549, 492.731), stdev = 1.927
[info]   CI (99.9%): [483.129, 497.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1840.001, 1840.001, 1840.001), stdev = 0.001
[info]   CI (99.9%): [1840.001, 1840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   470.894 ±(99.9%) 709.370 MB/sec [Average]
[info]   (min, avg, max) = (336.298, 470.894, 672.702), stdev = 184.221
[info]   CI (99.9%): [≈ 0, 1180.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   1768.328 ±(99.9%) 2689.353 B/op [Average]
[info]   (min, avg, max) = (1256.367, 1768.328, 2535.970), stdev = 698.417
[info]   CI (99.9%): [≈ 0, 4457.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.949
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Run progress: 14.11% complete, ETA 01:12:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 141664.035 ops/s
[info] # Warmup Iteration   2: 171176.285 ops/s
[info] # Warmup Iteration   3: 171610.427 ops/s
[info] Iteration   1: 174767.052 ops/s
[info]                  ·gc.alloc.rate:                                  2098.629 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18904.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.189 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.785 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18391.966 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 173778.314 ops/s
[info]                  ·gc.alloc.rate:                                  2087.106 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18904.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.035 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.234 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18497.575 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 172523.139 ops/s
[info]                  ·gc.alloc.rate:                                  2072.149 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18904.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.275 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18631.466 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 170472.848 ops/s
[info]                  ·gc.alloc.rate:                                  2047.449 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18904.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.289 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18856.360 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 172303.551 ops/s
[info]                  ·gc.alloc.rate:                                  2069.256 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18904.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.075 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18655.684 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   172768.981 ±(99.9%) 6256.653 ops/s [Average]
[info]   (min, avg, max) = (170472.848, 172768.981, 174767.052), stdev = 1624.833
[info]   CI (99.9%): [166512.328, 179025.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   2074.918 ±(99.9%) 74.691 MB/sec [Average]
[info]   (min, avg, max) = (2047.449, 2074.918, 2098.629), stdev = 19.397
[info]   CI (99.9%): [2000.227, 2149.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   18904.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18904.002, 18904.002, 18904.003), stdev = 0.001
[info]   CI (99.9%): [18904.002, 18904.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.031 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.007, 0.021), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.062 ±(99.9%) 0.279 B/op [Average]
[info]   (min, avg, max) = (0.012, 0.062, 0.189), stdev = 0.072
[info]   CI (99.9%): [≈ 0, 0.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2042.132 ±(99.9%) 0.816 MB/sec [Average]
[info]   (min, avg, max) = (2041.785, 2042.132, 2042.289), stdev = 0.212
[info]   CI (99.9%): [2041.316, 2042.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   18606.610 ±(99.9%) 676.230 B/op [Average]
[info]   (min, avg, max) = (18391.966, 18606.610, 18856.360), stdev = 175.615
[info]   CI (99.9%): [17930.381, 19282.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Run progress: 14.36% complete, ETA 01:12:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 239301.739 ops/s
[info] # Warmup Iteration   2: 388507.184 ops/s
[info] # Warmup Iteration   3: 388845.774 ops/s
[info] Iteration   1: 383113.466 ops/s
[info]                  ·gc.alloc.rate:            325.185 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1381.909 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 389763.033 ops/s
[info]                  ·gc.alloc.rate:            330.780 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.312 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1358.343 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 389412.274 ops/s
[info]                  ·gc.alloc.rate:            330.518 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1359.651 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 389273.603 ops/s
[info]                  ·gc.alloc.rate:            330.412 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.387 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1360.160 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 389717.024 ops/s
[info]                  ·gc.alloc.rate:            330.804 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.401 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1358.604 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   388255.880 ±(99.9%) 11097.586 ops/s [Average]
[info]   (min, avg, max) = (383113.466, 388255.880, 389763.033), stdev = 2882.008
[info]   CI (99.9%): [377158.293, 399353.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   329.540 ±(99.9%) 9.397 MB/sec [Average]
[info]   (min, avg, max) = (325.185, 329.540, 330.804), stdev = 2.440
[info]   CI (99.9%): [320.143, 338.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1336.001, 1336.001, 1336.001), stdev = 0.001
[info]   CI (99.9%): [1336.001, 1336.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   336.365 ±(99.9%) 0.131 MB/sec [Average]
[info]   (min, avg, max) = (336.312, 336.365, 336.401), stdev = 0.034
[info]   CI (99.9%): [336.234, 336.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1363.733 ±(99.9%) 39.229 B/op [Average]
[info]   (min, avg, max) = (1358.343, 1363.733, 1381.909), stdev = 10.188
[info]   CI (99.9%): [1324.504, 1402.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Run progress: 14.61% complete, ETA 01:12:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 977973.503 ops/s
[info] # Warmup Iteration   2: 1027052.855 ops/s
[info] # Warmup Iteration   3: 1060174.640 ops/s
[info] Iteration   1: 1056925.422 ops/s
[info]                  ·gc.alloc.rate:                   204.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        498.899 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.976 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1057601.722 ops/s
[info]                  ·gc.alloc.rate:            204.239 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.982 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 501.582 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 1061181.347 ops/s
[info]                  ·gc.alloc.rate:      204.931 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1057746.085 ops/s
[info]                  ·gc.alloc.rate:            204.285 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.011 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 501.512 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1061150.532 ops/s
[info]                  ·gc.alloc.rate:      204.962 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   1058921.022 ±(99.9%) 7980.973 ops/s [Average]
[info]   (min, avg, max) = (1056925.422, 1058921.022, 1061181.347), stdev = 2072.633
[info]   CI (99.9%): [1050940.049, 1066901.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   204.514 ±(99.9%) 1.532 MB/sec [Average]
[info]   (min, avg, max) = (204.152, 204.514, 204.962), stdev = 0.398
[info]   CI (99.9%): [202.982, 206.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   201.806 ±(99.9%) 709.384 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.806, 337.011), stdev = 184.225
[info]   CI (99.9%): [≈ 0, 911.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   300.399 ±(99.9%) 1055.952 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 300.399, 501.582), stdev = 274.227
[info]   CI (99.9%): [≈ 0, 1356.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.400 ±(99.9%) 3.441 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.998), stdev = 0.894
[info]   CI (99.9%): [≈ 0, 3.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.595 ±(99.9%) 5.124 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.595, 2.976), stdev = 1.331
[info]   CI (99.9%): [≈ 0, 5.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Run progress: 14.86% complete, ETA 01:12:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40073.092 ops/s
[info] # Warmup Iteration   2: 77048.799 ops/s
[info] # Warmup Iteration   3: 80590.432 ops/s
[info] Iteration   1: 81683.695 ops/s
[info]                  ·gc.alloc.rate:                                  3477.501 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67016.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.099 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.284 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65585.735 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 81600.097 ops/s
[info]                  ·gc.alloc.rate:                                  3473.854 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67016.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.152 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.255 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65654.042 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 81027.438 ops/s
[info]                  ·gc.alloc.rate:                                  3449.799 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67016.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.076 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.459 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66115.807 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 81913.296 ops/s
[info]                  ·gc.alloc.rate:                                  3488.763 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67016.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.102 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.761 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65402.411 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 80686.918 ops/s
[info]                  ·gc.alloc.rate:                                  3435.624 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67016.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.240 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3742.924 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73010.265 B/op
[info]                  ·gc.count:                                       11.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   81382.289 ±(99.9%) 1953.717 ops/s [Average]
[info]   (min, avg, max) = (80686.918, 81382.289, 81913.296), stdev = 507.374
[info]   CI (99.9%): [79428.572, 83336.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3465.108 ±(99.9%) 83.775 MB/sec [Average]
[info]   (min, avg, max) = (3435.624, 3465.108, 3488.763), stdev = 21.756
[info]   CI (99.9%): [3381.333, 3548.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67016.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (67016.005, 67016.005, 67016.005), stdev = 0.001
[info]   CI (99.9%): [67016.004, 67016.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.013 MB/sec [Average]
[info]   (min, avg, max) = (0.004, 0.007, 0.012), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.134 ±(99.9%) 0.252 B/op [Average]
[info]   (min, avg, max) = (0.076, 0.134, 0.240), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3471.537 ±(99.9%) 584.186 MB/sec [Average]
[info]   (min, avg, max) = (3403.255, 3471.537, 3742.924), stdev = 151.711
[info]   CI (99.9%): [2887.351, 4055.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   67153.652 ±(99.9%) 12647.340 B/op [Average]
[info]   (min, avg, max) = (65402.411, 67153.652, 73010.265), stdev = 3284.474
[info]   CI (99.9%): [54506.312, 79800.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   51.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (10.000, 10.200, 11.000), stdev = 0.447
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Run progress: 15.11% complete, ETA 01:12:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 219911.906 ops/s
[info] # Warmup Iteration   2: 262233.529 ops/s
[info] # Warmup Iteration   3: 261643.951 ops/s
[info] Iteration   1: 268848.673 ops/s
[info]                  ·gc.alloc.rate:            1332.199 MB/sec
[info]                  ·gc.alloc.rate.norm:       7800.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7892.885 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 271350.751 ops/s
[info]                  ·gc.alloc.rate:                                  1344.481 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7800.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.070 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.407 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.584 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5903.509 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                19.318 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 271457.092 ops/s
[info]                  ·gc.alloc.rate:                                  1345.120 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7800.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.022 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.128 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.368 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7894.223 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 264869.589 ops/s
[info]                  ·gc.alloc.rate:                                  1312.490 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7800.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8090.388 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 270401.424 ops/s
[info]                  ·gc.alloc.rate:                                  1340.305 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7800.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.736 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7924.725 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   269385.506 ±(99.9%) 10522.098 ops/s [Average]
[info]   (min, avg, max) = (264869.589, 269385.506, 271457.092), stdev = 2732.555
[info]   CI (99.9%): [258863.408, 279907.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1334.919 ±(99.9%) 52.195 MB/sec [Average]
[info]   (min, avg, max) = (1312.490, 1334.919, 1345.120), stdev = 13.555
[info]   CI (99.9%): [1282.724, 1387.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7800.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7800.002, 7800.002, 7800.002), stdev = 0.001
[info]   CI (99.9%): [7800.001, 7800.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.070), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.115 ±(99.9%) 0.657 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.115, 0.407), stdev = 0.171
[info]   CI (99.9%): [≈ 0, 0.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1290.021 ±(99.9%) 586.868 MB/sec [Average]
[info]   (min, avg, max) = (1017.584, 1290.021, 1361.736), stdev = 152.408
[info]   CI (99.9%): [703.152, 1876.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   7541.146 ±(99.9%) 3539.157 B/op [Average]
[info]   (min, avg, max) = (5903.509, 7541.146, 8090.388), stdev = 919.108
[info]   CI (99.9%): [4001.988, 11080.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.864 ±(99.9%) 33.266 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.864, 19.318), stdev = 8.639
[info]   CI (99.9%): [≈ 0, 37.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 13.000), stdev = 4.336
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Run progress: 15.37% complete, ETA 01:11:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1012114.372 ops/s
[info] # Warmup Iteration   2: 1540073.859 ops/s
[info] # Warmup Iteration   3: 1505252.988 ops/s
[info] Iteration   1: 1509395.227 ops/s
[info]                  ·gc.alloc.rate:                   774.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        700.852 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.695 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 1511329.994 ops/s
[info]                  ·gc.alloc.rate:            775.710 MB/sec
[info]                  ·gc.alloc.rate.norm:       808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.652 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 700.653 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1503411.154 ops/s
[info]                  ·gc.alloc.rate:            771.728 MB/sec
[info]                  ·gc.alloc.rate.norm:       808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.089 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1056.517 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 1490351.175 ops/s
[info]                  ·gc.alloc.rate:                   765.295 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.963 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        710.516 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.221 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 1514782.840 ops/s
[info]                  ·gc.alloc.rate:                                  777.603 MB/sec
[info]                  ·gc.alloc.rate.norm:                             808.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.040 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.041 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.753 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       707.364 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   1505854.078 ±(99.9%) 36961.973 ops/s [Average]
[info]   (min, avg, max) = (1490351.175, 1505854.078, 1514782.840), stdev = 9598.907
[info]   CI (99.9%): [1468892.105, 1542816.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   773.024 ±(99.9%) 18.537 MB/sec [Average]
[info]   (min, avg, max) = (765.295, 773.024, 777.603), stdev = 4.814
[info]   CI (99.9%): [754.487, 791.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   808.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (808.000, 808.000, 808.000), stdev = 0.001
[info]   CI (99.9%): [808.000, 808.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.069 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.040), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.008 ±(99.9%) 0.071 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.041), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   741.500 ±(99.9%) 576.169 MB/sec [Average]
[info]   (min, avg, max) = (672.042, 741.500, 1009.089), stdev = 149.629
[info]   CI (99.9%): [165.331, 1317.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   775.181 ±(99.9%) 605.818 B/op [Average]
[info]   (min, avg, max) = (700.653, 775.181, 1056.517), stdev = 157.329
[info]   CI (99.9%): [169.362, 1380.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.691 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.998), stdev = 1.738
[info]   CI (99.9%): [≈ 0, 7.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.983 ±(99.9%) 7.065 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.983, 4.221), stdev = 1.835
[info]   CI (99.9%): [≈ 0, 8.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.000, 12.000), stdev = 3.674
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Run progress: 15.62% complete, ETA 01:11:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1716754.657 ops/s
[info] # Warmup Iteration   2: 1912654.491 ops/s
[info] # Warmup Iteration   3: 1884919.102 ops/s
[info] Iteration   1: 1891306.113 ops/s
[info]                  ·gc.alloc.rate:            509.519 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.798 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 559.875 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 1909387.059 ops/s
[info]                  ·gc.alloc.rate:            514.340 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.368 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 277.287 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 1921852.402 ops/s
[info]                  ·gc.alloc.rate:            517.673 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 550.979 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 1952367.315 ops/s
[info]                  ·gc.alloc.rate:            525.902 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 271.184 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1965997.960 ops/s
[info]                  ·gc.alloc.rate:            529.634 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.793 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 538.607 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   1928182.170 ±(99.9%) 118185.931 ops/s [Average]
[info]   (min, avg, max) = (1891306.113, 1928182.170, 1965997.960), stdev = 30692.511
[info]   CI (99.9%): [1809996.238, 2046368.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   519.414 ±(99.9%) 31.824 MB/sec [Average]
[info]   (min, avg, max) = (509.519, 519.414, 529.634), stdev = 8.265
[info]   CI (99.9%): [487.589, 551.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (424.000, 424.000, 424.000), stdev = 0.001
[info]   CI (99.9%): [424.000, 424.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   538.205 ±(99.9%) 709.501 MB/sec [Average]
[info]   (min, avg, max) = (336.358, 538.205, 672.798), stdev = 184.255
[info]   CI (99.9%): [≈ 0, 1247.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   439.586 ±(99.9%) 582.018 B/op [Average]
[info]   (min, avg, max) = (271.184, 439.586, 559.875), stdev = 151.148
[info]   CI (99.9%): [≈ 0, 1021.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 15.87% complete, ETA 01:11:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1936269.507 ops/s
[info] # Warmup Iteration   2: 2106761.509 ops/s
[info] # Warmup Iteration   3: 2059154.183 ops/s
[info] Iteration   1: 2094333.223 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2095810.989 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2094065.683 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2097668.750 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2095136.897 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   2095403.108 ±(99.9%) 5548.045 ops/s [Average]
[info]   (min, avg, max) = (2094065.683, 2095403.108, 2097668.750), stdev = 1440.810
[info]   CI (99.9%): [2089855.064, 2100951.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Run progress: 16.12% complete, ETA 01:11:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25557.295 ops/s
[info] # Warmup Iteration   2: 39677.001 ops/s
[info] # Warmup Iteration   3: 40280.761 ops/s
[info] Iteration   1: 40666.599 ops/s
[info]                  ·gc.alloc.rate:                                  1713.318 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66321.997 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.216 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.351 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1689.600 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65403.877 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                154.680 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   2: 40513.500 ops/s
[info]                  ·gc.alloc.rate:                                  1707.558 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66320.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.233 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.363 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66118.255 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 41406.202 ops/s
[info]                  ·gc.alloc.rate:                                  1744.640 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66320.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.087 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.827 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64692.528 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 41176.170 ops/s
[info]                  ·gc.alloc.rate:                                  1735.760 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66320.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.107 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.579 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65052.246 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 41178.160 ops/s
[info]                  ·gc.alloc.rate:                                  1735.780 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66320.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.100 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.558 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65050.666 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   40988.126 ±(99.9%) 1459.833 ops/s [Average]
[info]   (min, avg, max) = (40513.500, 40988.126, 41406.202), stdev = 379.114
[info]   CI (99.9%): [39528.293, 42447.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1727.411 ±(99.9%) 61.771 MB/sec [Average]
[info]   (min, avg, max) = (1707.558, 1727.411, 1744.640), stdev = 16.042
[info]   CI (99.9%): [1665.640, 1789.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66320.408 ±(99.9%) 3.422 B/op [Average]
[info]   (min, avg, max) = (66320.010, 66320.408, 66321.997), stdev = 0.889
[info]   CI (99.9%): [66316.985, 66323.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.046 ±(99.9%) 0.366 MB/sec [Average]
[info]   (min, avg, max) = (0.002, 0.046, 0.216), stdev = 0.095
[info]   CI (99.9%): [≈ 0, 0.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.776 ±(99.9%) 14.156 B/op [Average]
[info]   (min, avg, max) = (0.087, 1.776, 8.351), stdev = 3.676
[info]   CI (99.9%): [≈ 0, 15.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1699.786 ±(99.9%) 21.957 MB/sec [Average]
[info]   (min, avg, max) = (1689.600, 1699.786, 1702.579), stdev = 5.702
[info]   CI (99.9%): [1677.829, 1721.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   65263.514 ±(99.9%) 2079.211 B/op [Average]
[info]   (min, avg, max) = (64692.528, 65263.514, 66118.255), stdev = 539.965
[info]   CI (99.9%): [63184.303, 67342.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   30.936 ±(99.9%) 266.368 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30.936, 154.680), stdev = 69.175
[info]   CI (99.9%): [≈ 0, 297.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 14.000), stdev = 4.472
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce
[info] # Run progress: 16.37% complete, ETA 01:11:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 189466.606 ops/s
[info] # Warmup Iteration   2: 233309.969 ops/s
[info] # Warmup Iteration   3: 234612.002 ops/s
[info] Iteration   1: 239366.381 ops/s
[info]                  ·gc.alloc.rate:                                  2463.186 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16200.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.093 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15666.665 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 239886.034 ops/s
[info]                  ·gc.alloc.rate:                                  2468.759 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16200.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.016 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.103 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.417 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15633.428 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 238946.977 ops/s
[info]                  ·gc.alloc.rate:                                  2459.128 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16200.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.112 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.447 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15694.855 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 239121.615 ops/s
[info]                  ·gc.alloc.rate:                                  2460.870 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16200.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.676 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17923.477 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 239825.841 ops/s
[info]                  ·gc.alloc.rate:                                  2468.073 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16200.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.312 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15637.078 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce":
[info]   239429.370 ±(99.9%) 1607.517 ops/s [Average]
[info]   (min, avg, max) = (238946.977, 239429.370, 239886.034), stdev = 417.467
[info]   CI (99.9%): [237821.852, 241036.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2464.003 ±(99.9%) 16.499 MB/sec [Average]
[info]   (min, avg, max) = (2459.128, 2464.003, 2468.759), stdev = 4.285
[info]   CI (99.9%): [2447.504, 2480.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   16200.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16200.002, 16200.002, 16200.002), stdev = 0.001
[info]   CI (99.9%): [16200.001, 16200.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.021 MB/sec [Average]
[info]   (min, avg, max) = (0.005, 0.011, 0.017), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.071 ±(99.9%) 0.139 B/op [Average]
[info]   (min, avg, max) = (0.034, 0.071, 0.112), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2450.389 ±(99.9%) 586.118 MB/sec [Average]
[info]   (min, avg, max) = (2382.093, 2450.389, 2722.676), stdev = 152.213
[info]   CI (99.9%): [1864.271, 3036.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   16111.100 ±(99.9%) 3902.452 B/op [Average]
[info]   (min, avg, max) = (15633.428, 16111.100, 17923.477), stdev = 1013.454
[info]   CI (99.9%): [12208.648, 20013.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.count":
[info]   36.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala
[info] # Run progress: 16.62% complete, ETA 01:10:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 197379.127 ops/s
[info] # Warmup Iteration   2: 309199.044 ops/s
[info] # Warmup Iteration   3: 311287.462 ops/s
[info] Iteration   1: 306166.498 ops/s
[info]                  ·gc.alloc.rate:                                  1481.197 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.096 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.491 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1685.626 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8667.134 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                20.546 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        18.000 ms
[info] Iteration   2: 316326.337 ops/s
[info]                  ·gc.alloc.rate:                                  1530.405 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.073 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.362 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.300 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6774.458 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 315381.143 ops/s
[info]                  ·gc.alloc.rate:                                  1525.953 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8493.226 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 311042.002 ops/s
[info]                  ·gc.alloc.rate:            1505.010 MB/sec
[info]                  ·gc.alloc.rate.norm:       7616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6889.213 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 307346.996 ops/s
[info]                  ·gc.alloc.rate:                                  1487.092 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.780 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8715.506 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala":
[info]   311252.595 ±(99.9%) 17641.055 ops/s [Average]
[info]   (min, avg, max) = (306166.498, 311252.595, 316326.337), stdev = 4581.326
[info]   CI (99.9%): [293611.540, 328893.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1505.931 ±(99.9%) 85.398 MB/sec [Average]
[info]   (min, avg, max) = (1481.197, 1505.931, 1530.405), stdev = 22.178
[info]   CI (99.9%): [1420.533, 1591.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7616.001, 7616.001, 7616.001), stdev = 0.001
[info]   CI (99.9%): [7616.001, 7616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.177 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.096), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.175 ±(99.9%) 0.903 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.175, 0.491), stdev = 0.235
[info]   CI (99.9%): [≈ 0, 1.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1562.362 ±(99.9%) 707.060 MB/sec [Average]
[info]   (min, avg, max) = (1361.300, 1562.362, 1701.780), stdev = 183.621
[info]   CI (99.9%): [855.302, 2269.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   7907.907 ±(99.9%) 3799.127 B/op [Average]
[info]   (min, avg, max) = (6774.458, 7907.907, 8715.506), stdev = 986.621
[info]   CI (99.9%): [4108.781, 11707.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.109 ±(99.9%) 35.382 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.109, 20.546), stdev = 9.189
[info]   CI (99.9%): [≈ 0, 39.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 18.000), stdev = 6.427
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala
[info] # Run progress: 16.88% complete, ETA 01:10:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1242708.250 ops/s
[info] # Warmup Iteration   2: 1318681.941 ops/s
[info] # Warmup Iteration   3: 1324646.058 ops/s
[info] Iteration   1: 1308795.366 ops/s
[info]                  ·gc.alloc.rate:            452.283 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.984 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 405.320 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 1340442.113 ops/s
[info]                  ·gc.alloc.rate:            463.195 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.968 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 395.752 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 1321957.250 ops/s
[info]                  ·gc.alloc.rate:            456.846 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 802.619 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 1338938.612 ops/s
[info]                  ·gc.alloc.rate:            462.767 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 396.195 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1337578.007 ops/s
[info]                  ·gc.alloc.rate:            462.272 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 396.600 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala":
[info]   1329542.270 ±(99.9%) 53064.802 ops/s [Average]
[info]   (min, avg, max) = (1308795.366, 1329542.270, 1340442.113), stdev = 13780.760
[info]   CI (99.9%): [1276477.468, 1382607.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   459.473 ±(99.9%) 18.381 MB/sec [Average]
[info]   (min, avg, max) = (452.283, 459.473, 463.195), stdev = 4.773
[info]   CI (99.9%): [441.092, 477.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (544.000, 544.000, 544.000), stdev = 0.001
[info]   CI (99.9%): [544.000, 544.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.406 ±(99.9%) 580.387 MB/sec [Average]
[info]   (min, avg, max) = (336.968, 404.406, 674.031), stdev = 150.725
[info]   CI (99.9%): [≈ 0, 984.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   479.297 ±(99.9%) 696.141 B/op [Average]
[info]   (min, avg, max) = (395.752, 479.297, 802.619), stdev = 180.786
[info]   CI (99.9%): [≈ 0, 1175.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson
[info] # Run progress: 17.13% complete, ETA 01:10:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29065.458 ops/s
[info] # Warmup Iteration   2: 72155.373 ops/s
[info] # Warmup Iteration   3: 75197.439 ops/s
[info] Iteration   1: 75176.245 ops/s
[info]                  ·gc.alloc.rate:                                  3159.703 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66160.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.204 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.968 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64134.496 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 76438.215 ops/s
[info]                  ·gc.alloc.rate:                                  3212.617 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66160.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.394 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.855 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       63075.850 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 75553.832 ops/s
[info]                  ·gc.alloc.rate:                                  3175.626 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66160.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.147 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.384 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70905.045 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 76209.064 ops/s
[info]                  ·gc.alloc.rate:                                  3203.466 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66160.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.298 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       63266.176 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 74636.843 ops/s
[info]                  ·gc.alloc.rate:                                  3137.013 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66160.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.266 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64600.148 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson":
[info]   75602.840 ±(99.9%) 2844.589 ops/s [Average]
[info]   (min, avg, max) = (74636.843, 75602.840, 76438.215), stdev = 738.731
[info]   CI (99.9%): [72758.251, 78447.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3177.685 ±(99.9%) 119.722 MB/sec [Average]
[info]   (min, avg, max) = (3137.013, 3177.685, 3212.617), stdev = 31.091
[info]   CI (99.9%): [3057.963, 3297.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66160.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66160.005, 66160.005, 66160.006), stdev = 0.001
[info]   CI (99.9%): [66160.005, 66160.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.018 MB/sec [Average]
[info]   (min, avg, max) = (0.007, 0.013, 0.019), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.262 ±(99.9%) 0.362 B/op [Average]
[info]   (min, avg, max) = (0.147, 0.262, 0.394), stdev = 0.094
[info]   CI (99.9%): [≈ 0, 0.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3131.121 ±(99.9%) 586.067 MB/sec [Average]
[info]   (min, avg, max) = (3062.855, 3131.121, 3403.384), stdev = 152.200
[info]   CI (99.9%): [2545.055, 3717.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   65196.343 ±(99.9%) 12521.149 B/op [Average]
[info]   (min, avg, max) = (63075.850, 65196.343, 70905.045), stdev = 3251.703
[info]   CI (99.9%): [52675.194, 77717.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.count":
[info]   46.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 10.000), stdev = 0.894
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce
[info] # Run progress: 17.38% complete, ETA 01:10:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 166501.137 ops/s
[info] # Warmup Iteration   2: 214769.359 ops/s
[info] # Warmup Iteration   3: 217148.904 ops/s
[info] Iteration   1: 221490.574 ops/s
[info]                  ·gc.alloc.rate:                                  2023.934 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14384.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.119 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.846 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.058 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14512.802 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 217887.751 ops/s
[info]                  ·gc.alloc.rate:                                  1990.894 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14384.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.923 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14752.682 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 219407.973 ops/s
[info]                  ·gc.alloc.rate:                                  2005.008 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14384.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.052 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14649.761 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 221960.923 ops/s
[info]                  ·gc.alloc.rate:                                  2028.354 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14384.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.046 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.211 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14482.272 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 221991.503 ops/s
[info]                  ·gc.alloc.rate:                                  2028.394 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14384.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.985 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14480.380 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce":
[info]   220547.745 ±(99.9%) 7033.379 ops/s [Average]
[info]   (min, avg, max) = (217887.751, 220547.745, 221991.503), stdev = 1826.546
[info]   CI (99.9%): [213514.366, 227581.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2015.317 ±(99.9%) 64.376 MB/sec [Average]
[info]   (min, avg, max) = (1990.894, 2015.317, 2028.394), stdev = 16.718
[info]   CI (99.9%): [1950.941, 2079.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   14384.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14384.002, 14384.002, 14384.002), stdev = 0.001
[info]   CI (99.9%): [14384.002, 14384.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.197 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.027, 0.119), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.195 ±(99.9%) 1.402 B/op [Average]
[info]   (min, avg, max) = (0.007, 0.195, 0.846), stdev = 0.364
[info]   CI (99.9%): [≈ 0, 1.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   2042.046 ±(99.9%) 0.414 MB/sec [Average]
[info]   (min, avg, max) = (2041.923, 2042.046, 2042.211), stdev = 0.108
[info]   CI (99.9%): [2041.632, 2042.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   14575.580 ±(99.9%) 465.985 B/op [Average]
[info]   (min, avg, max) = (14480.380, 14575.580, 14752.682), stdev = 121.015
[info]   CI (99.9%): [14109.594, 15041.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 7.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala
[info] # Run progress: 17.63% complete, ETA 01:10:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 729954.383 ops/s
[info] # Warmup Iteration   2: 1116649.064 ops/s
[info] # Warmup Iteration   3: 1119964.595 ops/s
[info] Iteration   1: 1118499.399 ops/s
[info]                  ·gc.alloc.rate:            653.648 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.594 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 946.667 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1124921.802 ops/s
[info]                  ·gc.alloc.rate:                   657.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.984 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        940.337 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.932 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 1161727.460 ops/s
[info]                  ·gc.alloc.rate:            679.280 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.992 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 911.483 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1127467.080 ops/s
[info]                  ·gc.alloc.rate:            658.980 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 939.183 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 1163819.590 ops/s
[info]                  ·gc.alloc.rate:                   680.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.750 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        909.839 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.405 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala":
[info]   1139287.066 ±(99.9%) 83560.215 ops/s [Average]
[info]   (min, avg, max) = (1118499.399, 1139287.066, 1163819.590), stdev = 21700.323
[info]   CI (99.9%): [1055726.851, 1222847.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   665.924 ±(99.9%) 49.265 MB/sec [Average]
[info]   (min, avg, max) = (653.648, 665.924, 680.264), stdev = 12.794
[info]   CI (99.9%): [616.659, 715.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   920.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (920.000, 920.000, 920.000), stdev = 0.001
[info]   CI (99.9%): [920.000, 920.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   672.608 ±(99.9%) 1.453 MB/sec [Average]
[info]   (min, avg, max) = (671.984, 672.608, 672.992), stdev = 0.377
[info]   CI (99.9%): [671.154, 674.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   929.502 ±(99.9%) 67.167 B/op [Average]
[info]   (min, avg, max) = (909.839, 929.502, 946.667), stdev = 17.443
[info]   CI (99.9%): [862.335, 996.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.267 ±(99.9%) 9.041 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.267, 5.405), stdev = 2.348
[info]   CI (99.9%): [≈ 0, 10.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala
[info] # Run progress: 17.88% complete, ETA 01:09:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2588113.073 ops/s
[info] # Warmup Iteration   2: 2959433.379 ops/s
[info] # Warmup Iteration   3: 2950344.554 ops/s
[info] Iteration   1: 2945443.289 ops/s
[info]                  ·gc.alloc.rate:            1002.996 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.120 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 539.273 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 2946288.556 ops/s
[info]                  ·gc.alloc.rate:            1003.433 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.286 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 539.127 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 2953217.269 ops/s
[info]                  ·gc.alloc.rate:                                  1005.835 MB/sec
[info]                  ·gc.alloc.rate.norm:                             536.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.113 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.060 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.301 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       539.979 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.130 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 2954043.068 ops/s
[info]                  ·gc.alloc.rate:                                  1005.990 MB/sec
[info]                  ·gc.alloc.rate.norm:                             536.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.049 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.118 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       544.061 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 2970846.904 ops/s
[info]                  ·gc.alloc.rate:            1011.615 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.046 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 540.997 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala":
[info]   2953967.817 ±(99.9%) 39321.429 ops/s [Average]
[info]   (min, avg, max) = (2945443.289, 2953967.817, 2970846.904), stdev = 10211.650
[info]   CI (99.9%): [2914646.388, 2993289.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1005.974 ±(99.9%) 13.222 MB/sec [Average]
[info]   (min, avg, max) = (1002.996, 1005.974, 1011.615), stdev = 3.434
[info]   CI (99.9%): [992.751, 1019.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   536.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (536.000, 536.000, 536.000), stdev = 0.001
[info]   CI (99.9%): [536.000, 536.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.192 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.113), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.017 ±(99.9%) 0.102 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.060), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1014.774 ±(99.9%) 23.091 MB/sec [Average]
[info]   (min, avg, max) = (1009.120, 1014.774, 1021.118), stdev = 5.997
[info]   CI (99.9%): [991.683, 1037.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   540.687 ±(99.9%) 7.800 B/op [Average]
[info]   (min, avg, max) = (539.127, 540.687, 544.061), stdev = 2.026
[info]   CI (99.9%): [532.887, 548.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.426 ±(99.9%) 3.668 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.426, 2.130), stdev = 0.953
[info]   CI (99.9%): [≈ 0, 4.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 10.000), stdev = 3.564
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 18.14% complete, ETA 01:09:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2292960.913 ops/s
[info] # Warmup Iteration   2: 2509603.945 ops/s
[info] # Warmup Iteration   3: 2502504.160 ops/s
[info] Iteration   1: 2460884.755 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2504429.585 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2504647.431 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2505210.212 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2504542.895 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2495942.975 ±(99.9%) 75474.320 ops/s [Average]
[info]   (min, avg, max) = (2460884.755, 2495942.975, 2505210.212), stdev = 19600.441
[info]   CI (99.9%): [2420468.656, 2571417.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson
[info] # Run progress: 18.39% complete, ETA 01:09:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 161702.399 ops/s
[info] # Warmup Iteration   2: 290640.625 ops/s
[info] # Warmup Iteration   3: 292024.304 ops/s
[info] Iteration   1: 299979.812 ops/s
[info]                  ·gc.alloc.rate:                                  2451.251 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12864.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.212 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12501.688 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 295881.302 ops/s
[info]                  ·gc.alloc.rate:                                  2417.924 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12864.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.268 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12674.300 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 300696.060 ops/s
[info]                  ·gc.alloc.rate:                                  2457.462 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12864.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.475 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12471.467 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 297907.766 ops/s
[info]                  ·gc.alloc.rate:                                  2434.552 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12864.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.413 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12588.501 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 299376.534 ops/s
[info]                  ·gc.alloc.rate:                                  2447.347 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12864.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.602 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14316.083 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson":
[info]   298768.295 ±(99.9%) 7364.009 ops/s [Average]
[info]   (min, avg, max) = (295881.302, 298768.295, 300696.060), stdev = 1912.410
[info]   CI (99.9%): [291404.286, 306132.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2441.707 ±(99.9%) 60.516 MB/sec [Average]
[info]   (min, avg, max) = (2417.924, 2441.707, 2457.462), stdev = 15.716
[info]   CI (99.9%): [2381.192, 2502.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   12864.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12864.001, 12864.001, 12864.001), stdev = 0.001
[info]   CI (99.9%): [12864.001, 12864.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.007 MB/sec [Average]
[info]   (min, avg, max) = (0.002, 0.004, 0.007), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.019 ±(99.9%) 0.037 B/op [Average]
[info]   (min, avg, max) = (0.012, 0.019, 0.036), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   2450.594 ±(99.9%) 587.671 MB/sec [Average]
[info]   (min, avg, max) = (2382.212, 2450.594, 2723.602), stdev = 152.616
[info]   CI (99.9%): [1862.923, 3038.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   12910.408 ±(99.9%) 3041.164 B/op [Average]
[info]   (min, avg, max) = (12471.467, 12910.408, 14316.083), stdev = 789.781
[info]   CI (99.9%): [9869.244, 15951.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.count":
[info]   36.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Run progress: 18.64% complete, ETA 01:09:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19290.411 ops/s
[info] # Warmup Iteration   2: 26156.597 ops/s
[info] # Warmup Iteration   3: 25674.408 ops/s
[info] Iteration   1: 26099.361 ops/s
[info]                  ·gc.alloc.rate:                                  1528.628 MB/sec
[info]                  ·gc.alloc.rate.norm:                             92192.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.062 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.736 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1688.028 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       101805.445 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.329 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                200.800 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   2: 26264.551 ops/s
[info]                  ·gc.alloc.rate:                                  1538.351 MB/sec
[info]                  ·gc.alloc.rate.norm:                             92192.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.075 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.524 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81586.956 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 26511.164 ops/s
[info]                  ·gc.alloc.rate:                                  1552.743 MB/sec
[info]                  ·gc.alloc.rate.norm:                             92192.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.764 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.724 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       101037.550 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 26543.351 ops/s
[info]                  ·gc.alloc.rate:                                  1554.800 MB/sec
[info]                  ·gc.alloc.rate.norm:                             92192.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.671 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.590 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80735.652 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 26530.663 ops/s
[info]                  ·gc.alloc.rate:                                  1554.473 MB/sec
[info]                  ·gc.alloc.rate.norm:                             92192.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.685 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.399 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       100965.204 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   26389.818 ±(99.9%) 765.764 ops/s [Average]
[info]   (min, avg, max) = (26099.361, 26389.818, 26543.351), stdev = 198.866
[info]   CI (99.9%): [25624.054, 27155.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1545.799 ±(99.9%) 45.349 MB/sec [Average]
[info]   (min, avg, max) = (1528.628, 1545.799, 1554.800), stdev = 11.777
[info]   CI (99.9%): [1500.450, 1591.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   92192.017 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (92192.015, 92192.017, 92192.021), stdev = 0.002
[info]   CI (99.9%): [92192.008, 92192.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.035 ±(99.9%) 0.121 MB/sec [Average]
[info]   (min, avg, max) = (0.011, 0.035, 0.075), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.076 ±(99.9%) 7.300 B/op [Average]
[info]   (min, avg, max) = (0.671, 2.076, 4.524), stdev = 1.896
[info]   CI (99.9%): [≈ 0, 9.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1563.026 ±(99.9%) 708.771 MB/sec [Average]
[info]   (min, avg, max) = (1361.391, 1563.026, 1702.399), stdev = 184.066
[info]   CI (99.9%): [854.255, 2271.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   93226.161 ±(99.9%) 42444.446 B/op [Average]
[info]   (min, avg, max) = (80735.652, 93226.161, 101805.445), stdev = 11022.688
[info]   CI (99.9%): [50781.715, 135670.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.329), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   40.160 ±(99.9%) 345.789 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.160, 200.800), stdev = 89.800
[info]   CI (99.9%): [≈ 0, 385.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 14.000), stdev = 4.472
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava
[info] # Run progress: 18.89% complete, ETA 01:08:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1774.225 ops/s
[info] # Warmup Iteration   2: 95987.082 ops/s
[info] # Warmup Iteration   3: 99425.719 ops/s
[info] Iteration   1: 101069.464 ops/s
[info]                  ·gc.alloc.rate:            910.163 MB/sec
[info]                  ·gc.alloc.rate.norm:       14176.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1000.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15590.781 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 102626.931 ops/s
[info]                  ·gc.alloc.rate:            924.345 MB/sec
[info]                  ·gc.alloc.rate.norm:       14176.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.404 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10235.491 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 102014.552 ops/s
[info]                  ·gc.alloc.rate:            918.750 MB/sec
[info]                  ·gc.alloc.rate.norm:       14176.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.005 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15445.170 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   4: 102254.700 ops/s
[info]                  ·gc.alloc.rate:                   920.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1004.980 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        15471.046 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      6.660 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 102.525 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 103358.448 ops/s
[info]                  ·gc.alloc.rate:                                  930.851 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14176.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.564 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.596 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15549.862 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava":
[info]   102264.819 ±(99.9%) 3232.454 ops/s [Average]
[info]   (min, avg, max) = (101069.464, 102264.819, 103358.448), stdev = 839.458
[info]   CI (99.9%): [99032.365, 105497.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   920.993 ±(99.9%) 29.248 MB/sec [Average]
[info]   (min, avg, max) = (910.163, 920.993, 930.851), stdev = 7.596
[info]   CI (99.9%): [891.745, 950.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   14176.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14176.004, 14176.004, 14176.004), stdev = 0.001
[info]   CI (99.9%): [14176.004, 14176.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.113 ±(99.9%) 0.972 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.113, 0.564), stdev = 0.252
[info]   CI (99.9%): [≈ 0, 1.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.719 ±(99.9%) 14.802 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.719, 8.596), stdev = 3.844
[info]   CI (99.9%): [≈ 0, 16.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   939.090 ±(99.9%) 585.692 MB/sec [Average]
[info]   (min, avg, max) = (667.404, 939.090, 1021.064), stdev = 152.102
[info]   CI (99.9%): [353.398, 1524.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   14458.470 ±(99.9%) 9093.087 B/op [Average]
[info]   (min, avg, max) = (10235.491, 14458.470, 15590.781), stdev = 2361.446
[info]   CI (99.9%): [5365.383, 23551.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 11.469 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 6.660), stdev = 2.978
[info]   CI (99.9%): [≈ 0, 12.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   20.505 ±(99.9%) 176.554 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.505, 102.525), stdev = 45.851
[info]   CI (99.9%): [≈ 0, 197.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time":
[info]   56.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 11.200, 15.000), stdev = 4.438
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Run progress: 19.14% complete, ETA 01:08:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34839.093 ops/s
[info] # Warmup Iteration   2: 59232.153 ops/s
[info] # Warmup Iteration   3: 59463.839 ops/s
[info] Iteration   1: 59644.459 ops/s
[info]                  ·gc.alloc.rate:            985.707 MB/sec
[info]                  ·gc.alloc.rate.norm:       26008.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.285 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26630.111 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 59636.866 ops/s
[info]                  ·gc.alloc.rate:                   985.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              26008.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        26615.657 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 17.580 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 59631.549 ops/s
[info]                  ·gc.alloc.rate:                                  985.169 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26008.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.079 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.075 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1012.950 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26741.404 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                105.489 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 58307.773 ops/s
[info]                  ·gc.alloc.rate:                                  963.777 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26008.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.047 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.275 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.466 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27564.768 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 59894.859 ops/s
[info]                  ·gc.alloc.rate:            989.866 MB/sec
[info]                  ·gc.alloc.rate.norm:       26008.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.288 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26833.603 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   59423.101 ±(99.9%) 2438.903 ops/s [Average]
[info]   (min, avg, max) = (58307.773, 59423.101, 59894.859), stdev = 633.375
[info]   CI (99.9%): [56984.198, 61862.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   981.972 ±(99.9%) 39.873 MB/sec [Average]
[info]   (min, avg, max) = (963.777, 981.972, 989.866), stdev = 10.355
[info]   CI (99.9%): [942.099, 1021.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   26008.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (26008.007, 26008.007, 26008.008), stdev = 0.001
[info]   CI (99.9%): [26008.006, 26008.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.079), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.670 ±(99.9%) 3.697 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.670, 2.075), stdev = 0.960
[info]   CI (99.9%): [≈ 0, 4.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1014.670 ±(99.9%) 24.486 MB/sec [Average]
[info]   (min, avg, max) = (1008.360, 1014.670, 1021.466), stdev = 6.359
[info]   CI (99.9%): [990.183, 1039.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   26877.109 ±(99.9%) 1519.113 B/op [Average]
[info]   (min, avg, max) = (26615.657, 26877.109, 27564.768), stdev = 394.509
[info]   CI (99.9%): [25357.996, 28396.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   24.614 ±(99.9%) 176.540 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24.614, 105.489), stdev = 45.847
[info]   CI (99.9%): [≈ 0, 201.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.800, 13.000), stdev = 4.382
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Run progress: 19.40% complete, ETA 01:08:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72145.484 ops/s
[info] # Warmup Iteration   2: 79112.132 ops/s
[info] # Warmup Iteration   3: 81535.098 ops/s
[info] Iteration   1: 81408.042 ops/s
[info]                  ·gc.alloc.rate:            524.575 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.956 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13032.668 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 82135.168 ops/s
[info]                  ·gc.alloc.rate:            529.216 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.967 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6458.981 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 81896.858 ops/s
[info]                  ·gc.alloc.rate:            527.771 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12955.498 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 81995.613 ops/s
[info]                  ·gc.alloc.rate:            528.459 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6469.850 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 79065.675 ops/s
[info]                  ·gc.alloc.rate:            509.503 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13419.142 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   81300.271 ±(99.9%) 4924.273 ops/s [Average]
[info]   (min, avg, max) = (79065.675, 81300.271, 82135.168), stdev = 1278.818
[info]   CI (99.9%): [76375.998, 86224.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   523.905 ±(99.9%) 31.739 MB/sec [Average]
[info]   (min, avg, max) = (509.503, 523.905, 529.216), stdev = 8.242
[info]   CI (99.9%): [492.166, 555.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10144.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10144.005, 10144.005, 10144.006), stdev = 0.001
[info]   CI (99.9%): [10144.004, 10144.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   539.205 ±(99.9%) 710.747 MB/sec [Average]
[info]   (min, avg, max) = (336.967, 539.205, 674.047), stdev = 184.579
[info]   CI (99.9%): [≈ 0, 1249.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   10467.228 ±(99.9%) 14086.706 B/op [Average]
[info]   (min, avg, max) = (6458.981, 10467.228, 13419.142), stdev = 3658.273
[info]   CI (99.9%): [≈ 0, 24553.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Run progress: 19.65% complete, ETA 01:08:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16689.777 ops/s
[info] # Warmup Iteration   2: 32082.425 ops/s
[info] # Warmup Iteration   3: 32335.805 ops/s
[info] Iteration   1: 32616.815 ops/s
[info]                  ·gc.alloc.rate:                                  1704.752 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82248.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.056 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.689 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1689.563 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81515.196 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                225.003 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   2: 33256.875 ops/s
[info]                  ·gc.alloc.rate:                                  1737.471 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82248.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.274 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.460 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80543.297 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 33971.629 ops/s
[info]                  ·gc.alloc.rate:                                  1775.095 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82248.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.364 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.069 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       94618.106 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 34078.810 ops/s
[info]                  ·gc.alloc.rate:                                  1780.581 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82248.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.469 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.575 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78598.594 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 34041.162 ops/s
[info]                  ·gc.alloc.rate:                                  1778.603 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82248.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.493 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.632 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78688.627 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   33593.058 ±(99.9%) 2470.224 ops/s [Average]
[info]   (min, avg, max) = (32616.815, 33593.058, 34078.810), stdev = 641.509
[info]   CI (99.9%): [31122.834, 36063.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1755.300 ±(99.9%) 128.391 MB/sec [Average]
[info]   (min, avg, max) = (1704.752, 1755.300, 1780.581), stdev = 33.343
[info]   CI (99.9%): [1626.909, 1883.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   82248.013 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (82248.012, 82248.013, 82248.017), stdev = 0.002
[info]   CI (99.9%): [82248.005, 82248.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.078 MB/sec [Average]
[info]   (min, avg, max) = (0.008, 0.022, 0.056), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.058 ±(99.9%) 3.779 B/op [Average]
[info]   (min, avg, max) = (0.364, 1.058, 2.689), stdev = 0.981
[info]   CI (99.9%): [≈ 0, 4.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1767.260 ±(99.9%) 591.885 MB/sec [Average]
[info]   (min, avg, max) = (1689.563, 1767.260, 2042.069), stdev = 153.711
[info]   CI (99.9%): [1175.374, 2359.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   82792.764 ±(99.9%) 25900.125 B/op [Average]
[info]   (min, avg, max) = (78598.594, 82792.764, 94618.106), stdev = 6726.180
[info]   CI (99.9%): [56892.639, 108692.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.664), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   45.001 ±(99.9%) 387.468 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45.001, 225.003), stdev = 100.624
[info]   CI (99.9%): [≈ 0, 432.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 15.000), stdev = 4.604
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Run progress: 19.90% complete, ETA 01:08:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28308.009 ops/s
[info] # Warmup Iteration   2: 38996.770 ops/s
[info] # Warmup Iteration   3: 38779.106 ops/s
[info] Iteration   1: 38762.363 ops/s
[info]                  ·gc.alloc.rate:            522.221 MB/sec
[info]                  ·gc.alloc.rate.norm:       21208.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13685.663 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 38854.032 ops/s
[info]                  ·gc.alloc.rate:            523.457 MB/sec
[info]                  ·gc.alloc.rate.norm:       21208.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.981 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27306.526 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 38895.724 ops/s
[info]                  ·gc.alloc.rate:            524.003 MB/sec
[info]                  ·gc.alloc.rate.norm:       21208.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.955 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27277.046 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 39062.780 ops/s
[info]                  ·gc.alloc.rate:            526.305 MB/sec
[info]                  ·gc.alloc.rate.norm:       21208.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.012 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13580.227 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 38883.744 ops/s
[info]                  ·gc.alloc.rate:            523.928 MB/sec
[info]                  ·gc.alloc.rate.norm:       21208.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.066 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27285.462 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   38891.729 ±(99.9%) 419.592 ops/s [Average]
[info]   (min, avg, max) = (38762.363, 38891.729, 39062.780), stdev = 108.967
[info]   CI (99.9%): [38472.137, 39311.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   523.983 ±(99.9%) 5.703 MB/sec [Average]
[info]   (min, avg, max) = (522.221, 523.983, 526.305), stdev = 1.481
[info]   CI (99.9%): [518.279, 529.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   21208.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (21208.010, 21208.011, 21208.011), stdev = 0.001
[info]   CI (99.9%): [21208.009, 21208.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   539.201 ±(99.9%) 710.759 MB/sec [Average]
[info]   (min, avg, max) = (336.993, 539.201, 674.066), stdev = 184.582
[info]   CI (99.9%): [≈ 0, 1249.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   21826.985 ±(99.9%) 28803.593 B/op [Average]
[info]   (min, avg, max) = (13580.227, 21826.985, 27306.526), stdev = 7480.202
[info]   CI (99.9%): [≈ 0, 50630.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Run progress: 20.15% complete, ETA 01:07:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24973.788 ops/s
[info] # Warmup Iteration   2: 40049.048 ops/s
[info] # Warmup Iteration   3: 41092.584 ops/s
[info] Iteration   1: 41351.173 ops/s
[info]                  ·gc.alloc.rate:            373.423 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.627 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25606.561 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 41256.593 ops/s
[info]                  ·gc.alloc.rate:            372.598 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.343 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12832.757 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 41596.929 ops/s
[info]                  ·gc.alloc.rate:            375.683 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12727.578 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 41549.972 ops/s
[info]                  ·gc.alloc.rate:            375.242 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12742.279 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 41606.954 ops/s
[info]                  ·gc.alloc.rate:            375.795 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12724.214 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   41472.324 ±(99.9%) 611.569 ops/s [Average]
[info]   (min, avg, max) = (41256.593, 41472.324, 41606.954), stdev = 158.823
[info]   CI (99.9%): [40860.755, 42083.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   374.548 ±(99.9%) 5.578 MB/sec [Average]
[info]   (min, avg, max) = (372.598, 374.548, 375.795), stdev = 1.449
[info]   CI (99.9%): [368.970, 380.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   14216.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (14216.010, 14216.010, 14216.011), stdev = 0.001
[info]   CI (99.9%): [14216.008, 14216.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   403.604 ±(99.9%) 579.093 MB/sec [Average]
[info]   (min, avg, max) = (336.341, 403.604, 672.627), stdev = 150.388
[info]   CI (99.9%): [≈ 0, 982.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   15326.678 ±(99.9%) 22128.885 B/op [Average]
[info]   (min, avg, max) = (12724.214, 15326.678, 25606.561), stdev = 5746.801
[info]   CI (99.9%): [≈ 0, 37455.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 8.000), stdev = 1.732
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Run progress: 20.40% complete, ETA 01:07:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37309.827 ops/s
[info] # Warmup Iteration   2: 46265.496 ops/s
[info] # Warmup Iteration   3: 45869.767 ops/s
[info] Iteration   1: 46283.974 ops/s
[info]                  ·gc.alloc.rate:            406.713 MB/sec
[info]                  ·gc.alloc.rate.norm:       13832.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.340 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11438.681 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 46376.375 ops/s
[info]                  ·gc.alloc.rate:            407.453 MB/sec
[info]                  ·gc.alloc.rate.norm:       13832.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.291 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11416.240 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 46210.655 ops/s
[info]                  ·gc.alloc.rate:            406.064 MB/sec
[info]                  ·gc.alloc.rate.norm:       13832.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.712 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 22914.983 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 46260.995 ops/s
[info]                  ·gc.alloc.rate:            406.514 MB/sec
[info]                  ·gc.alloc.rate.norm:       13832.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11444.615 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 46430.870 ops/s
[info]                  ·gc.alloc.rate:            408.084 MB/sec
[info]                  ·gc.alloc.rate.norm:       13832.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.405 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11402.474 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   46312.574 ±(99.9%) 344.037 ops/s [Average]
[info]   (min, avg, max) = (46210.655, 46312.574, 46430.870), stdev = 89.345
[info]   CI (99.9%): [45968.537, 46656.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   406.966 ±(99.9%) 3.085 MB/sec [Average]
[info]   (min, avg, max) = (406.064, 406.966, 408.084), stdev = 0.801
[info]   CI (99.9%): [403.881, 410.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   13832.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13832.009, 13832.009, 13832.010), stdev = 0.001
[info]   CI (99.9%): [13832.008, 13832.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   403.620 ±(99.9%) 579.242 MB/sec [Average]
[info]   (min, avg, max) = (336.291, 403.620, 672.712), stdev = 150.427
[info]   CI (99.9%): [≈ 0, 982.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   13723.399 ±(99.9%) 19785.686 B/op [Average]
[info]   (min, avg, max) = (11402.474, 13723.399, 22914.983), stdev = 5138.280
[info]   CI (99.9%): [≈ 0, 33509.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 20.65% complete, ETA 01:07:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37414.544 ops/s
[info] # Warmup Iteration   2: 44976.010 ops/s
[info] # Warmup Iteration   3: 45664.110 ops/s
[info] Iteration   1: 45628.361 ops/s
[info]                  ·gc.alloc.rate:            348.856 MB/sec
[info]                  ·gc.alloc.rate.norm:       12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.842 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23206.209 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 44312.457 ops/s
[info]                  ·gc.alloc.rate:            338.669 MB/sec
[info]                  ·gc.alloc.rate.norm:       12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.302 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11947.899 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 45644.713 ops/s
[info]                  ·gc.alloc.rate:            348.994 MB/sec
[info]                  ·gc.alloc.rate.norm:       12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.450 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11599.546 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 45632.079 ops/s
[info]                  ·gc.alloc.rate:            348.855 MB/sec
[info]                  ·gc.alloc.rate.norm:       12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.404 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11602.596 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 45641.184 ops/s
[info]                  ·gc.alloc.rate:            348.859 MB/sec
[info]                  ·gc.alloc.rate.norm:       12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11599.800 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   45371.759 ±(99.9%) 2280.369 ops/s [Average]
[info]   (min, avg, max) = (44312.457, 45371.759, 45644.713), stdev = 592.205
[info]   CI (99.9%): [43091.389, 47652.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   346.847 ±(99.9%) 17.604 MB/sec [Average]
[info]   (min, avg, max) = (338.669, 346.847, 348.994), stdev = 4.572
[info]   CI (99.9%): [329.242, 364.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   12032.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12032.009, 12032.009, 12032.009), stdev = 0.001
[info]   CI (99.9%): [12032.009, 12032.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   403.665 ±(99.9%) 579.423 MB/sec [Average]
[info]   (min, avg, max) = (336.302, 403.665, 672.842), stdev = 150.474
[info]   CI (99.9%): [≈ 0, 983.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   13991.210 ±(99.9%) 19844.429 B/op [Average]
[info]   (min, avg, max) = (11599.546, 13991.210, 23206.209), stdev = 5153.535
[info]   CI (99.9%): [≈ 0, 33835.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Run progress: 20.91% complete, ETA 01:07:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15139.796 ops/s
[info] # Warmup Iteration   2: 19285.039 ops/s
[info] # Warmup Iteration   3: 19243.339 ops/s
[info] Iteration   1: 19526.678 ops/s
[info]                  ·gc.alloc.rate:            732.572 MB/sec
[info]                  ·gc.alloc.rate.norm:       59040.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.155 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54332.032 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 19786.634 ops/s
[info]                  ·gc.alloc.rate:            742.346 MB/sec
[info]                  ·gc.alloc.rate.norm:       59040.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.209 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53620.966 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 19629.873 ops/s
[info]                  ·gc.alloc.rate:            736.293 MB/sec
[info]                  ·gc.alloc.rate.norm:       59040.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54047.006 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 19708.797 ops/s
[info]                  ·gc.alloc.rate:                   739.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        53833.143 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 53.195 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 19562.583 ops/s
[info]                  ·gc.alloc.rate:                   733.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.619 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        54282.885 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 267.931 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   19642.913 ±(99.9%) 409.012 ops/s [Average]
[info]   (min, avg, max) = (19526.678, 19642.913, 19786.634), stdev = 106.219
[info]   CI (99.9%): [19233.901, 20051.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   736.840 ±(99.9%) 15.433 MB/sec [Average]
[info]   (min, avg, max) = (732.572, 736.840, 742.346), stdev = 4.008
[info]   CI (99.9%): [721.407, 752.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   59040.028 ±(99.9%) 0.050 B/op [Average]
[info]   (min, avg, max) = (59040.021, 59040.028, 59040.051), stdev = 0.013
[info]   CI (99.9%): [59039.978, 59040.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   674.212 ±(99.9%) 0.920 MB/sec [Average]
[info]   (min, avg, max) = (674.025, 674.212, 674.619), stdev = 0.239
[info]   CI (99.9%): [673.293, 675.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   54023.206 ±(99.9%) 1157.268 B/op [Average]
[info]   (min, avg, max) = (53620.966, 54023.206, 54332.032), stdev = 300.539
[info]   CI (99.9%): [52865.939, 55180.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.559 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   64.225 ±(99.9%) 447.373 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 64.225, 267.931), stdev = 116.181
[info]   CI (99.9%): [≈ 0, 511.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Run progress: 21.16% complete, ETA 01:07:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12783.516 ops/s
[info] # Warmup Iteration   2: 19958.012 ops/s
[info] # Warmup Iteration   3: 20230.464 ops/s
[info] Iteration   1: 20191.600 ops/s
[info]                  ·gc.alloc.rate:            572.906 MB/sec
[info]                  ·gc.alloc.rate.norm:       44666.794 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.629 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 52441.781 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 20397.953 ops/s
[info]                  ·gc.alloc.rate:            578.972 MB/sec
[info]                  ·gc.alloc.rate.norm:       44680.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25956.124 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 20246.003 ops/s
[info]                  ·gc.alloc.rate:            574.736 MB/sec
[info]                  ·gc.alloc.rate.norm:       44678.409 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.771 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 52299.346 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 20332.480 ops/s
[info]                  ·gc.alloc.rate:            577.166 MB/sec
[info]                  ·gc.alloc.rate.norm:       44680.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.734 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 52078.175 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 20265.840 ops/s
[info]                  ·gc.alloc.rate:            575.283 MB/sec
[info]                  ·gc.alloc.rate.norm:       44680.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.755 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 52250.321 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   20286.775 ±(99.9%) 308.102 ops/s [Average]
[info]   (min, avg, max) = (20191.600, 20286.775, 20397.953), stdev = 80.013
[info]   CI (99.9%): [19978.673, 20594.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   575.813 ±(99.9%) 8.969 MB/sec [Average]
[info]   (min, avg, max) = (572.906, 575.813, 578.972), stdev = 2.329
[info]   CI (99.9%): [566.844, 584.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44677.053 ±(99.9%) 22.245 B/op [Average]
[info]   (min, avg, max) = (44666.794, 44677.053, 44680.022), stdev = 5.777
[info]   CI (99.9%): [44654.808, 44699.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   605.447 ±(99.9%) 579.264 MB/sec [Average]
[info]   (min, avg, max) = (336.344, 605.447, 672.771), stdev = 150.433
[info]   CI (99.9%): [26.183, 1184.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   47005.149 ±(99.9%) 45312.377 B/op [Average]
[info]   (min, avg, max) = (25956.124, 47005.149, 52441.781), stdev = 11767.480
[info]   CI (99.9%): [1692.773, 92317.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 9.000), stdev = 2.074
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Run progress: 21.41% complete, ETA 01:06:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72529.725 ops/s
[info] # Warmup Iteration   2: 73885.809 ops/s
[info] # Warmup Iteration   3: 76641.208 ops/s
[info] Iteration   1: 76685.967 ops/s
[info]                  ·gc.alloc.rate:                   199.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6890.431 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 41.014 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 76964.548 ops/s
[info]                  ·gc.alloc.rate:      200.317 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 76597.945 ops/s
[info]                  ·gc.alloc.rate:            199.333 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.704 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6939.317 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 76706.874 ops/s
[info]                  ·gc.alloc.rate:            199.666 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.787 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6929.458 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 76718.738 ops/s
[info]                  ·gc.alloc.rate:      199.642 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   76734.815 ±(99.9%) 527.046 ops/s [Average]
[info]   (min, avg, max) = (76597.945, 76734.815, 76964.548), stdev = 136.872
[info]   CI (99.9%): [76207.769, 77261.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   199.699 ±(99.9%) 1.424 MB/sec [Average]
[info]   (min, avg, max) = (199.333, 199.699, 200.317), stdev = 0.370
[info]   CI (99.9%): [198.276, 201.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.005, 4096.005, 4096.006), stdev = 0.001
[info]   CI (99.9%): [4096.005, 4096.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   202.232 ±(99.9%) 710.880 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 202.232, 337.787), stdev = 184.613
[info]   CI (99.9%): [≈ 0, 913.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4151.841 ±(99.9%) 14594.477 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4151.841, 6939.317), stdev = 3790.139
[info]   CI (99.9%): [≈ 0, 18746.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.400 ±(99.9%) 3.441 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.998), stdev = 0.894
[info]   CI (99.9%): [≈ 0, 3.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   8.203 ±(99.9%) 70.629 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.203, 41.014), stdev = 18.342
[info]   CI (99.9%): [≈ 0, 78.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Run progress: 21.66% complete, ETA 01:06:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9071.718 ops/s
[info] # Warmup Iteration   2: 15772.913 ops/s
[info] # Warmup Iteration   3: 16126.346 ops/s
[info] Iteration   1: 16330.376 ops/s
[info]                  ·gc.alloc.rate:            1058.870 MB/sec
[info]                  ·gc.alloc.rate.norm:       102048.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.217 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 97262.759 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 16371.875 ops/s
[info]                  ·gc.alloc.rate:            1061.393 MB/sec
[info]                  ·gc.alloc.rate.norm:       102048.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.027 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 97013.291 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 16352.122 ops/s
[info]                  ·gc.alloc.rate:                                  1060.098 MB/sec
[info]                  ·gc.alloc.rate.norm:                             102048.027 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.036 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.495 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.959 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       97895.302 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                384.657 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 16350.526 ops/s
[info]                  ·gc.alloc.rate:                                  1059.941 MB/sec
[info]                  ·gc.alloc.rate.norm:                             102048.031 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.903 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.928 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       98291.978 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 16571.438 ops/s
[info]                  ·gc.alloc.rate:                                  1074.402 MB/sec
[info]                  ·gc.alloc.rate.norm:                             102048.025 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.542 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.058 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       96981.418 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   16395.267 ±(99.9%) 383.412 ops/s [Average]
[info]   (min, avg, max) = (16330.376, 16395.267, 16571.438), stdev = 99.571
[info]   CI (99.9%): [16011.855, 16778.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1062.941 ±(99.9%) 24.910 MB/sec [Average]
[info]   (min, avg, max) = (1058.870, 1062.941, 1074.402), stdev = 6.469
[info]   CI (99.9%): [1038.031, 1087.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   102048.027 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (102048.025, 102048.027, 102048.031), stdev = 0.003
[info]   CI (99.9%): [102048.017, 102048.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.060 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.036), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.188 ±(99.9%) 5.799 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.188, 3.495), stdev = 1.506
[info]   CI (99.9%): [≈ 0, 6.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1015.438 ±(99.9%) 23.092 MB/sec [Average]
[info]   (min, avg, max) = (1009.027, 1015.438, 1021.058), stdev = 5.997
[info]   CI (99.9%): [992.346, 1038.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   97488.950 ±(99.9%) 2232.857 B/op [Average]
[info]   (min, avg, max) = (96981.418, 97488.950, 98291.978), stdev = 579.866
[info]   CI (99.9%): [95256.092, 99721.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   76.931 ±(99.9%) 662.403 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 76.931, 384.657), stdev = 172.024
[info]   CI (99.9%): [≈ 0, 739.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 13.000), stdev = 4.775
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Run progress: 21.91% complete, ETA 01:06:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45627.558 ops/s
[info] # Warmup Iteration   2: 61930.470 ops/s
[info] # Warmup Iteration   3: 62391.233 ops/s
[info] Iteration   1: 61438.641 ops/s
[info]                  ·gc.alloc.rate:            1005.158 MB/sec
[info]                  ·gc.alloc.rate.norm:       25752.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25902.984 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 62438.081 ops/s
[info]                  ·gc.alloc.rate:            1021.553 MB/sec
[info]                  ·gc.alloc.rate.norm:       25752.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25487.796 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 62262.244 ops/s
[info]                  ·gc.alloc.rate:                                  1018.955 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25752.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.523 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25644.430 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                84.191 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 62661.742 ops/s
[info]                  ·gc.alloc.rate:                                  1025.182 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25752.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.050 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.253 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.028 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25647.659 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 62920.479 ops/s
[info]                  ·gc.alloc.rate:                                  1029.430 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25752.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25541.296 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   62344.237 ±(99.9%) 2168.445 ops/s [Average]
[info]   (min, avg, max) = (61438.641, 62344.237, 62920.479), stdev = 563.138
[info]   CI (99.9%): [60175.793, 64512.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1020.055 ±(99.9%) 35.476 MB/sec [Average]
[info]   (min, avg, max) = (1005.158, 1020.055, 1029.430), stdev = 9.213
[info]   CI (99.9%): [984.579, 1055.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   25752.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25752.006, 25752.007, 25752.007), stdev = 0.001
[info]   CI (99.9%): [25752.006, 25752.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.084 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.050), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.356 ±(99.9%) 2.117 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.356, 1.253), stdev = 0.550
[info]   CI (99.9%): [≈ 0, 2.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1015.771 ±(99.9%) 19.306 MB/sec [Average]
[info]   (min, avg, max) = (1011.051, 1015.771, 1021.028), stdev = 5.014
[info]   CI (99.9%): [996.465, 1035.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   25644.833 ±(99.9%) 614.990 B/op [Average]
[info]   (min, avg, max) = (25487.796, 25644.833, 25902.984), stdev = 159.711
[info]   CI (99.9%): [25029.843, 26259.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   16.838 ±(99.9%) 144.981 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.838, 84.191), stdev = 37.651
[info]   CI (99.9%): [≈ 0, 161.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 11.000), stdev = 3.130
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Run progress: 22.17% complete, ETA 01:06:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52727.387 ops/s
[info] # Warmup Iteration   2: 87444.484 ops/s
[info] # Warmup Iteration   3: 87996.150 ops/s
[info] Iteration   1: 88249.009 ops/s
[info]                  ·gc.alloc.rate:            1046.307 MB/sec
[info]                  ·gc.alloc.rate.norm:       18664.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.970 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17997.991 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 90463.627 ops/s
[info]                  ·gc.alloc.rate:            1072.955 MB/sec
[info]                  ·gc.alloc.rate.norm:       18664.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17557.778 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 91002.534 ops/s
[info]                  ·gc.alloc.rate:                                  1079.158 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18664.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.047 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.807 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.166 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17591.856 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                69.123 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 91256.204 ops/s
[info]                  ·gc.alloc.rate:                                  1081.999 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18664.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.040 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.688 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.002 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17611.831 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 91590.460 ops/s
[info]                  ·gc.alloc.rate:                                  1086.135 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18664.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.053 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.528 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       23396.312 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   90512.367 ±(99.9%) 5123.312 ops/s [Average]
[info]   (min, avg, max) = (88249.009, 90512.367, 91590.460), stdev = 1330.508
[info]   CI (99.9%): [85389.054, 95635.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1073.311 ±(99.9%) 60.990 MB/sec [Average]
[info]   (min, avg, max) = (1046.307, 1073.311, 1086.135), stdev = 15.839
[info]   CI (99.9%): [1012.321, 1134.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   18664.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18664.004, 18664.005, 18664.005), stdev = 0.001
[info]   CI (99.9%): [18664.003, 18664.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.090 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.047), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.310 ±(99.9%) 1.550 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.310, 0.807), stdev = 0.403
[info]   CI (99.9%): [≈ 0, 1.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1083.605 ±(99.9%) 598.577 MB/sec [Average]
[info]   (min, avg, max) = (1008.970, 1083.605, 1361.528), stdev = 155.449
[info]   CI (99.9%): [485.028, 1682.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   18831.153 ±(99.9%) 9850.976 B/op [Average]
[info]   (min, avg, max) = (17557.778, 18831.153, 23396.312), stdev = 2558.267
[info]   CI (99.9%): [8980.178, 28682.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   13.825 ±(99.9%) 119.034 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.825, 69.123), stdev = 30.913
[info]   CI (99.9%): [≈ 0, 132.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.600, 13.000), stdev = 4.827
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Run progress: 22.42% complete, ETA 01:05:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 221521.002 ops/s
[info] # Warmup Iteration   2: 250869.136 ops/s
[info] # Warmup Iteration   3: 256511.141 ops/s
[info] Iteration   1: 261526.428 ops/s
[info]                  ·gc.alloc.rate:            414.688 MB/sec
[info]                  ·gc.alloc.rate.norm:       2496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2024.456 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 263967.953 ops/s
[info]                  ·gc.alloc.rate:            418.516 MB/sec
[info]                  ·gc.alloc.rate.norm:       2496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.605 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4011.370 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 264922.887 ops/s
[info]                  ·gc.alloc.rate:            420.080 MB/sec
[info]                  ·gc.alloc.rate.norm:       2496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1998.501 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 265889.627 ops/s
[info]                  ·gc.alloc.rate:            421.615 MB/sec
[info]                  ·gc.alloc.rate.norm:       2496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1991.242 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 265554.074 ops/s
[info]                  ·gc.alloc.rate:            421.098 MB/sec
[info]                  ·gc.alloc.rate.norm:       2496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1993.768 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   264372.194 ±(99.9%) 6742.615 ops/s [Average]
[info]   (min, avg, max) = (261526.428, 264372.194, 265889.627), stdev = 1751.036
[info]   CI (99.9%): [257629.579, 271114.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   419.200 ±(99.9%) 10.726 MB/sec [Average]
[info]   (min, avg, max) = (414.688, 419.200, 421.615), stdev = 2.786
[info]   CI (99.9%): [408.474, 429.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2496.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2496.002, 2496.002, 2496.002), stdev = 0.001
[info]   CI (99.9%): [2496.001, 2496.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   403.604 ±(99.9%) 579.045 MB/sec [Average]
[info]   (min, avg, max) = (336.345, 403.604, 672.605), stdev = 150.376
[info]   CI (99.9%): [≈ 0, 982.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2403.867 ±(99.9%) 3460.645 B/op [Average]
[info]   (min, avg, max) = (1991.242, 2403.867, 4011.370), stdev = 898.718
[info]   CI (99.9%): [≈ 0, 5864.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 22.67% complete, ETA 01:05:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 293718.988 ops/s
[info] # Warmup Iteration   2: 329035.673 ops/s
[info] # Warmup Iteration   3: 328707.891 ops/s
[info] Iteration   1: 328736.758 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 329546.398 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 328343.339 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 329176.003 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 329005.770 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   328961.654 ±(99.9%) 1746.330 ops/s [Average]
[info]   (min, avg, max) = (328343.339, 328961.654, 329546.398), stdev = 453.516
[info]   CI (99.9%): [327215.323, 330707.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Run progress: 22.92% complete, ETA 01:05:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55390.146 ops/s
[info] # Warmup Iteration   2: 80259.117 ops/s
[info] # Warmup Iteration   3: 78679.455 ops/s
[info] Iteration   1: 78923.439 ops/s
[info]                  ·gc.alloc.rate:            1076.561 MB/sec
[info]                  ·gc.alloc.rate.norm:       21472.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.440 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26834.788 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 79353.409 ops/s
[info]                  ·gc.alloc.rate:            1082.383 MB/sec
[info]                  ·gc.alloc.rate.norm:       21472.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20016.539 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 79724.069 ops/s
[info]                  ·gc.alloc.rate:                                  1087.689 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21472.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.122 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.400 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.250 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20081.465 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                78.906 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 80748.029 ops/s
[info]                  ·gc.alloc.rate:                                  1101.667 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21472.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.521 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.230 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       19904.247 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 82138.127 ops/s
[info]                  ·gc.alloc.rate:            1120.689 MB/sec
[info]                  ·gc.alloc.rate.norm:       21472.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.223 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19566.271 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   80177.415 ±(99.9%) 4956.333 ops/s [Average]
[info]   (min, avg, max) = (78923.439, 80177.415, 82138.127), stdev = 1287.144
[info]   CI (99.9%): [75221.082, 85133.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1093.798 ±(99.9%) 68.065 MB/sec [Average]
[info]   (min, avg, max) = (1076.561, 1093.798, 1120.689), stdev = 17.676
[info]   CI (99.9%): [1025.733, 1161.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   21472.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (21472.005, 21472.005, 21472.006), stdev = 0.001
[info]   CI (99.9%): [21472.004, 21472.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.203 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.122), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.584 ±(99.9%) 4.004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.584, 2.400), stdev = 1.040
[info]   CI (99.9%): [≈ 0, 4.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1082.831 ±(99.9%) 565.611 MB/sec [Average]
[info]   (min, avg, max) = (1009.014, 1082.831, 1345.440), stdev = 146.887
[info]   CI (99.9%): [517.221, 1648.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   21280.662 ±(99.9%) 11980.091 B/op [Average]
[info]   (min, avg, max) = (19566.271, 21280.662, 26834.788), stdev = 3111.192
[info]   CI (99.9%): [9300.571, 33260.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   15.781 ±(99.9%) 135.880 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.781, 78.906), stdev = 35.288
[info]   CI (99.9%): [≈ 0, 151.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 15.000), stdev = 5.385
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Run progress: 23.17% complete, ETA 01:05:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19534.732 ops/s
[info] # Warmup Iteration   2: 27172.181 ops/s
[info] # Warmup Iteration   3: 27076.837 ops/s
[info] Iteration   1: 26562.125 ops/s
[info]                  ·gc.alloc.rate:            552.389 MB/sec
[info]                  ·gc.alloc.rate.norm:       32736.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.996 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39942.745 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 27107.803 ops/s
[info]                  ·gc.alloc.rate:            563.591 MB/sec
[info]                  ·gc.alloc.rate.norm:       32725.449 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.016 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19569.190 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 27206.594 ops/s
[info]                  ·gc.alloc.rate:            565.637 MB/sec
[info]                  ·gc.alloc.rate.norm:       32720.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.106 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38994.558 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 27108.912 ops/s
[info]                  ·gc.alloc.rate:            563.546 MB/sec
[info]                  ·gc.alloc.rate.norm:       32720.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39135.494 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 27109.723 ops/s
[info]                  ·gc.alloc.rate:            563.524 MB/sec
[info]                  ·gc.alloc.rate.norm:       32720.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.990 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39134.050 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   27019.031 ±(99.9%) 996.950 ops/s [Average]
[info]   (min, avg, max) = (26562.125, 27019.031, 27206.594), stdev = 258.905
[info]   CI (99.9%): [26022.081, 28015.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   561.737 ±(99.9%) 20.420 MB/sec [Average]
[info]   (min, avg, max) = (552.389, 561.737, 565.637), stdev = 5.303
[info]   CI (99.9%): [541.317, 582.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   32724.302 ±(99.9%) 26.792 B/op [Average]
[info]   (min, avg, max) = (32720.015, 32724.302, 32736.015), stdev = 6.958
[info]   CI (99.9%): [32697.510, 32751.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   606.630 ±(99.9%) 580.364 MB/sec [Average]
[info]   (min, avg, max) = (337.016, 606.630, 674.106), stdev = 150.719
[info]   CI (99.9%): [26.266, 1186.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   35355.208 ±(99.9%) 34011.178 B/op [Average]
[info]   (min, avg, max) = (19569.190, 35355.208, 39942.745), stdev = 8832.595
[info]   CI (99.9%): [1344.029, 69366.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 7.000), stdev = 1.789
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Run progress: 23.43% complete, ETA 01:05:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16812.935 ops/s
[info] # Warmup Iteration   2: 28142.519 ops/s
[info] # Warmup Iteration   3: 27604.331 ops/s
[info] Iteration   1: 28104.021 ops/s
[info]                  ·gc.alloc.rate:            369.387 MB/sec
[info]                  ·gc.alloc.rate.norm:       20688.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.351 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18837.811 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 27948.054 ops/s
[info]                  ·gc.alloc.rate:                   367.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              20686.847 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        37848.365 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 37.511 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 28136.581 ops/s
[info]                  ·gc.alloc.rate:            369.979 MB/sec
[info]                  ·gc.alloc.rate.norm:       20688.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.507 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18816.391 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 28135.069 ops/s
[info]                  ·gc.alloc.rate:            369.765 MB/sec
[info]                  ·gc.alloc.rate.norm:       20688.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18817.729 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 28204.933 ops/s
[info]                  ·gc.alloc.rate:            370.699 MB/sec
[info]                  ·gc.alloc.rate.norm:       20688.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18771.034 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   28105.732 ±(99.9%) 367.924 ops/s [Average]
[info]   (min, avg, max) = (27948.054, 28105.732, 28204.933), stdev = 95.549
[info]   CI (99.9%): [27737.807, 28473.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   369.428 ±(99.9%) 4.916 MB/sec [Average]
[info]   (min, avg, max) = (367.310, 369.428, 370.699), stdev = 1.277
[info]   CI (99.9%): [364.511, 374.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20687.781 ±(99.9%) 2.011 B/op [Average]
[info]   (min, avg, max) = (20686.847, 20687.781, 20688.016), stdev = 0.522
[info]   CI (99.9%): [20685.771, 20689.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   403.514 ±(99.9%) 577.990 MB/sec [Average]
[info]   (min, avg, max) = (336.337, 403.514, 672.025), stdev = 150.102
[info]   CI (99.9%): [≈ 0, 981.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   22618.266 ±(99.9%) 32784.071 B/op [Average]
[info]   (min, avg, max) = (18771.034, 22618.266, 37848.365), stdev = 8513.919
[info]   CI (99.9%): [≈ 0, 55402.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   7.502 ±(99.9%) 64.596 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.502, 37.511), stdev = 16.775
[info]   CI (99.9%): [≈ 0, 72.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Run progress: 23.68% complete, ETA 01:04:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 103660.462 ops/s
[info] # Warmup Iteration   2: 122737.011 ops/s
[info] # Warmup Iteration   3: 116816.902 ops/s
[info] Iteration   1: 122826.567 ops/s
[info]                  ·gc.alloc.rate:            479.382 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.978 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4318.886 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 122825.992 ops/s
[info]                  ·gc.alloc.rate:            479.371 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.982 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4319.027 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 119135.200 ops/s
[info]                  ·gc.alloc.rate:            464.965 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.971 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8905.777 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 122520.373 ops/s
[info]                  ·gc.alloc.rate:            478.245 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.040 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4329.953 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 121755.353 ops/s
[info]                  ·gc.alloc.rate:            475.243 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8714.167 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   121812.697 ±(99.9%) 6004.963 ops/s [Average]
[info]   (min, avg, max) = (119135.200, 121812.697, 122826.567), stdev = 1559.470
[info]   CI (99.9%): [115807.734, 127817.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   475.441 ±(99.9%) 23.471 MB/sec [Average]
[info]   (min, avg, max) = (464.965, 475.441, 479.382), stdev = 6.095
[info]   CI (99.9%): [451.970, 498.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6144.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6144.003, 6144.003, 6144.004), stdev = 0.001
[info]   CI (99.9%): [6144.003, 6144.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.804 ±(99.9%) 710.780 MB/sec [Average]
[info]   (min, avg, max) = (336.978, 471.804, 674.047), stdev = 184.587
[info]   CI (99.9%): [≈ 0, 1182.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   6117.562 ±(99.9%) 9467.810 B/op [Average]
[info]   (min, avg, max) = (4318.886, 6117.562, 8905.777), stdev = 2458.760
[info]   CI (99.9%): [≈ 0, 15585.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Run progress: 23.93% complete, ETA 01:04:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8373.690 ops/s
[info] # Warmup Iteration   2: 21008.016 ops/s
[info] # Warmup Iteration   3: 21145.293 ops/s
[info] Iteration   1: 20935.558 ops/s
[info]                  ·gc.alloc.rate:            1156.219 MB/sec
[info]                  ·gc.alloc.rate.norm:       86904.141 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 75713.797 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 21020.222 ops/s
[info]                  ·gc.alloc.rate:                   1160.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              86904.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.276 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        100598.259 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 349.126 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   3: 21395.518 ops/s
[info]                  ·gc.alloc.rate:                                  1181.255 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86904.024 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.034 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.509 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75115.281 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 21519.463 ops/s
[info]                  ·gc.alloc.rate:                                  1188.421 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86904.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.101 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.784 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       99581.348 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 21332.671 ops/s
[info]                  ·gc.alloc.rate:                                  1178.027 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86904.019 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.049 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.232 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75337.067 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   21240.686 ±(99.9%) 966.232 ops/s [Average]
[info]   (min, avg, max) = (20935.558, 21240.686, 21519.463), stdev = 250.927
[info]   CI (99.9%): [20274.454, 22206.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1172.868 ±(99.9%) 53.461 MB/sec [Average]
[info]   (min, avg, max) = (1156.219, 1172.868, 1188.421), stdev = 13.884
[info]   CI (99.9%): [1119.407, 1226.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   86904.045 ±(99.9%) 0.207 B/op [Average]
[info]   (min, avg, max) = (86904.019, 86904.045, 86904.141), stdev = 0.054
[info]   CI (99.9%): [86903.839, 86904.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.058 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.034), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.532 ±(99.9%) 4.259 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.532, 2.509), stdev = 1.106
[info]   CI (99.9%): [≈ 0, 4.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1150.929 ±(99.9%) 709.437 MB/sec [Average]
[info]   (min, avg, max) = (1007.336, 1150.929, 1361.784), stdev = 184.239
[info]   CI (99.9%): [441.491, 1860.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   85269.150 ±(99.9%) 52121.587 B/op [Average]
[info]   (min, avg, max) = (75115.281, 85269.150, 100598.259), stdev = 13535.811
[info]   CI (99.9%): [33147.564, 137390.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   69.825 ±(99.9%) 601.217 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 69.825, 349.126), stdev = 156.134
[info]   CI (99.9%): [≈ 0, 671.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.800, 20.000), stdev = 7.791
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Run progress: 24.18% complete, ETA 01:04:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 128466.910 ops/s
[info] # Warmup Iteration   2: 163785.898 ops/s
[info] # Warmup Iteration   3: 166866.179 ops/s
[info] Iteration   1: 162534.878 ops/s
[info]                  ·gc.alloc.rate:            814.416 MB/sec
[info]                  ·gc.alloc.rate.norm:       7888.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.949 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9791.517 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 166655.537 ops/s
[info]                  ·gc.alloc.rate:            835.077 MB/sec
[info]                  ·gc.alloc.rate.norm:       7888.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.970 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6366.215 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 164631.528 ops/s
[info]                  ·gc.alloc.rate:            824.970 MB/sec
[info]                  ·gc.alloc.rate.norm:       7888.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.997 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9666.701 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 166505.128 ops/s
[info]                  ·gc.alloc.rate:                   834.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              7888.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.250 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6372.140 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 31.483 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 165268.990 ops/s
[info]                  ·gc.alloc.rate:                                  828.259 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7888.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.105 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.996 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.155 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9725.073 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   165119.212 ±(99.9%) 6449.141 ops/s [Average]
[info]   (min, avg, max) = (162534.878, 165119.212, 166655.537), stdev = 1674.821
[info]   CI (99.9%): [158670.071, 171568.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   827.474 ±(99.9%) 32.596 MB/sec [Average]
[info]   (min, avg, max) = (814.416, 827.474, 835.077), stdev = 8.465
[info]   CI (99.9%): [794.878, 860.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7888.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7888.002, 7888.003, 7888.003), stdev = 0.001
[info]   CI (99.9%): [7888.002, 7888.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.180 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.105), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.199 ±(99.9%) 1.716 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.199, 0.996), stdev = 0.446
[info]   CI (99.9%): [≈ 0, 1.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   878.264 ±(99.9%) 717.810 MB/sec [Average]
[info]   (min, avg, max) = (673.970, 878.264, 1021.155), stdev = 186.413
[info]   CI (99.9%): [160.454, 1596.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8384.329 ±(99.9%) 7085.587 B/op [Average]
[info]   (min, avg, max) = (6366.215, 8384.329, 9791.517), stdev = 1840.104
[info]   CI (99.9%): [1298.742, 15469.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   6.297 ±(99.9%) 54.215 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.297, 31.483), stdev = 14.080
[info]   CI (99.9%): [≈ 0, 60.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 10.000), stdev = 2.510
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Run progress: 24.43% complete, ETA 01:04:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 189562.072 ops/s
[info] # Warmup Iteration   2: 272795.647 ops/s
[info] # Warmup Iteration   3: 270518.132 ops/s
[info] Iteration   1: 283794.360 ops/s
[info]                  ·gc.alloc.rate:            287.068 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1865.531 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 285240.734 ops/s
[info]                  ·gc.alloc.rate:      288.457 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 283511.181 ops/s
[info]                  ·gc.alloc.rate:            286.735 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1867.406 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 283584.864 ops/s
[info]                  ·gc.alloc.rate:            286.813 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1866.892 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 283925.570 ops/s
[info]                  ·gc.alloc.rate:            287.164 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1864.677 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   284011.342 ±(99.9%) 2721.377 ops/s [Average]
[info]   (min, avg, max) = (283511.181, 284011.342, 285240.734), stdev = 706.733
[info]   CI (99.9%): [281289.964, 286732.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   287.247 ±(99.9%) 2.690 MB/sec [Average]
[info]   (min, avg, max) = (286.735, 287.247, 288.457), stdev = 0.699
[info]   CI (99.9%): [284.557, 289.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.001, 1592.002), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   269.083 ±(99.9%) 579.221 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.083, 336.391), stdev = 150.422
[info]   CI (99.9%): [≈ 0, 848.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1492.901 ±(99.9%) 3213.585 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1492.901, 1867.406), stdev = 834.558
[info]   CI (99.9%): [≈ 0, 4706.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 5.000), stdev = 1.949
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Run progress: 24.69% complete, ETA 01:04:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 500028.299 ops/s
[info] # Warmup Iteration   2: 552073.463 ops/s
[info] # Warmup Iteration   3: 567440.278 ops/s
[info] Iteration   1: 565767.215 ops/s
[info]                  ·gc.alloc.rate:            434.284 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.829 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1871.537 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 570614.219 ops/s
[info]                  ·gc.alloc.rate:            437.867 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.315 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 927.836 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 570222.144 ops/s
[info]                  ·gc.alloc.rate:            437.578 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.339 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 928.516 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 569016.176 ops/s
[info]                  ·gc.alloc.rate:            436.681 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.328 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 930.394 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 567158.327 ops/s
[info]                  ·gc.alloc.rate:            435.271 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1866.935 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   568555.616 ±(99.9%) 7927.763 ops/s [Average]
[info]   (min, avg, max) = (565767.215, 568555.616, 570614.219), stdev = 2058.815
[info]   CI (99.9%): [560627.854, 576483.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   436.336 ±(99.9%) 5.888 MB/sec [Average]
[info]   (min, avg, max) = (434.284, 436.336, 437.867), stdev = 1.529
[info]   CI (99.9%): [430.448, 442.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   470.902 ±(99.9%) 709.574 MB/sec [Average]
[info]   (min, avg, max) = (336.315, 470.902, 672.829), stdev = 184.274
[info]   CI (99.9%): [≈ 0, 1180.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1305.044 ±(99.9%) 1983.229 B/op [Average]
[info]   (min, avg, max) = (927.836, 1305.044, 1871.537), stdev = 515.038
[info]   CI (99.9%): [≈ 0, 3288.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 2.191
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 24.94% complete, ETA 01:03:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 505715.436 ops/s
[info] # Warmup Iteration   2: 551724.110 ops/s
[info] # Warmup Iteration   3: 551664.077 ops/s
[info] Iteration   1: 551322.768 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 545963.990 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 550347.610 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 552045.157 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 550964.163 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   550128.738 ±(99.9%) 9271.448 ops/s [Average]
[info]   (min, avg, max) = (545963.990, 550128.738, 552045.157), stdev = 2407.766
[info]   CI (99.9%): [540857.290, 559400.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Run progress: 25.19% complete, ETA 01:03:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 158621.195 ops/s
[info] # Warmup Iteration   2: 278994.877 ops/s
[info] # Warmup Iteration   3: 286232.138 ops/s
[info] Iteration   1: 280264.561 ops/s
[info]                  ·gc.alloc.rate:                   772.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.791 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5660.052 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.741 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 281545.617 ops/s
[info]                  ·gc.alloc.rate:            775.541 MB/sec
[info]                  ·gc.alloc.rate.norm:       4336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3761.033 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 281835.990 ops/s
[info]                  ·gc.alloc.rate:                   776.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.958 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3753.404 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.720 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 280832.986 ops/s
[info]                  ·gc.alloc.rate:                   773.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5652.218 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 22.400 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   5: 286866.747 ops/s
[info]                  ·gc.alloc.rate:                                  790.462 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4336.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.022 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.121 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.219 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3731.275 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.655 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   282269.180 ±(99.9%) 10175.097 ops/s [Average]
[info]   (min, avg, max) = (280264.561, 282269.180, 286866.747), stdev = 2642.440
[info]   CI (99.9%): [272094.083, 292444.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   777.567 ±(99.9%) 28.485 MB/sec [Average]
[info]   (min, avg, max) = (772.039, 777.567, 790.462), stdev = 7.397
[info]   CI (99.9%): [749.082, 806.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4336.001, 4336.001, 4336.002), stdev = 0.001
[info]   CI (99.9%): [4336.001, 4336.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.038 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.022), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.024 ±(99.9%) 0.208 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.121), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   808.203 ±(99.9%) 702.667 MB/sec [Average]
[info]   (min, avg, max) = (671.958, 808.203, 1008.347), stdev = 182.480
[info]   CI (99.9%): [105.536, 1510.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4511.596 ±(99.9%) 4023.448 B/op [Average]
[info]   (min, avg, max) = (3731.275, 4511.596, 5660.052), stdev = 1044.877
[info]   CI (99.9%): [488.148, 8535.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 6.123 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 3.996), stdev = 1.590
[info]   CI (99.9%): [≈ 0, 7.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   6.703 ±(99.9%) 34.349 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.703, 22.400), stdev = 8.920
[info]   CI (99.9%): [≈ 0, 41.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.800, 14.000), stdev = 4.550
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Run progress: 25.44% complete, ETA 01:03:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29098.001 ops/s
[info] # Warmup Iteration   2: 36598.909 ops/s
[info] # Warmup Iteration   3: 36322.480 ops/s
[info] Iteration   1: 36181.493 ops/s
[info]                  ·gc.alloc.rate:                                  1613.741 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70200.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.104 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.546 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1691.912 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73600.548 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                144.883 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   2: 37220.904 ops/s
[info]                  ·gc.alloc.rate:                                  1660.645 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70200.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.833 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.442 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71966.897 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 37230.583 ops/s
[info]                  ·gc.alloc.rate:                                  1661.103 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70200.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.409 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71945.638 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 37169.931 ops/s
[info]                  ·gc.alloc.rate:                                  1657.692 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70200.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.359 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.792 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72067.564 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 37410.065 ops/s
[info]                  ·gc.alloc.rate:                                  1668.471 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70200.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.387 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       57279.634 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   37042.595 ±(99.9%) 1886.304 ops/s [Average]
[info]   (min, avg, max) = (36181.493, 37042.595, 37410.065), stdev = 489.867
[info]   CI (99.9%): [35156.291, 38928.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1652.330 ±(99.9%) 84.463 MB/sec [Average]
[info]   (min, avg, max) = (1613.741, 1652.330, 1668.471), stdev = 21.935
[info]   CI (99.9%): [1567.868, 1736.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   70200.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (70200.011, 70200.011, 70200.012), stdev = 0.001
[info]   CI (99.9%): [70200.010, 70200.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.027, 0.104), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.161 ±(99.9%) 7.393 B/op [Average]
[info]   (min, avg, max) = (0.014, 1.161, 4.546), stdev = 1.920
[info]   CI (99.9%): [≈ 0, 8.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1631.988 ±(99.9%) 582.743 MB/sec [Average]
[info]   (min, avg, max) = (1361.387, 1631.988, 1702.442), stdev = 151.337
[info]   CI (99.9%): [1049.245, 2214.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   69372.056 ±(99.9%) 26168.030 B/op [Average]
[info]   (min, avg, max) = (57279.634, 69372.056, 73600.548), stdev = 6795.754
[info]   CI (99.9%): [43204.026, 95540.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   28.977 ±(99.9%) 249.497 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.977, 144.883), stdev = 64.794
[info]   CI (99.9%): [≈ 0, 278.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 12.000), stdev = 3.464
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava
[info] # Run progress: 25.69% complete, ETA 01:03:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9794.502 ops/s
[info] # Warmup Iteration   2: 308563.425 ops/s
[info] # Warmup Iteration   3: 311710.624 ops/s
[info] Iteration   1: 312557.919 ops/s
[info]                  ·gc.alloc.rate:            324.137 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.769 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1680.502 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 312343.284 ops/s
[info]                  ·gc.alloc.rate:            323.848 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1681.658 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 298908.606 ops/s
[info]                  ·gc.alloc.rate:      310.019 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 305913.518 ops/s
[info]                  ·gc.alloc.rate:            317.205 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1716.854 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 305937.743 ops/s
[info]                  ·gc.alloc.rate:            317.296 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.774 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1716.758 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava":
[info]   307132.214 ±(99.9%) 21708.656 ops/s [Average]
[info]   (min, avg, max) = (298908.606, 307132.214, 312557.919), stdev = 5637.669
[info]   CI (99.9%): [285423.559, 328840.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   318.501 ±(99.9%) 22.406 MB/sec [Average]
[info]   (min, avg, max) = (310.019, 318.501, 324.137), stdev = 5.819
[info]   CI (99.9%): [296.095, 340.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1632.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1632.001, 1632.001), stdev = 0.001
[info]   CI (99.9%): [1632.001, 1632.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   266.988 ±(99.9%) 574.713 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 266.988, 333.774), stdev = 149.251
[info]   CI (99.9%): [≈ 0, 841.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   1359.154 ±(99.9%) 2926.491 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1359.154, 1716.854), stdev = 760.000
[info]   CI (99.9%): [≈ 0, 4285.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.000, 5.000), stdev = 2.236
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Run progress: 25.94% complete, ETA 01:03:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62609.537 ops/s
[info] # Warmup Iteration   2: 99872.146 ops/s
[info] # Warmup Iteration   3: 100025.007 ops/s
[info] Iteration   1: 100099.908 ops/s
[info]                  ·gc.alloc.rate:                   1105.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              17392.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.257 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        15856.571 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.473 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 99466.449 ops/s
[info]                  ·gc.alloc.rate:                   1099.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              17392.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.107 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        21280.129 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 73.780 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   3: 101036.641 ops/s
[info]                  ·gc.alloc.rate:                                  1116.320 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17392.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.178 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.778 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.995 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15906.853 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 99731.682 ops/s
[info]                  ·gc.alloc.rate:                                  1101.982 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17392.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.076 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16115.119 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 99360.718 ops/s
[info]                  ·gc.alloc.rate:            1098.238 MB/sec
[info]                  ·gc.alloc.rate.norm:       17392.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.417 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16175.443 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   99939.080 ±(99.9%) 2605.526 ops/s [Average]
[info]   (min, avg, max) = (99360.718, 99939.080, 101036.641), stdev = 676.647
[info]   CI (99.9%): [97333.553, 102544.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1104.354 ±(99.9%) 28.147 MB/sec [Average]
[info]   (min, avg, max) = (1098.238, 1104.354, 1116.320), stdev = 7.310
[info]   CI (99.9%): [1076.207, 1132.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17392.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17392.004, 17392.004, 17392.004), stdev = 0.001
[info]   CI (99.9%): [17392.004, 17392.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.036 ±(99.9%) 0.307 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.178), stdev = 0.080
[info]   CI (99.9%): [≈ 0, 0.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.558 ±(99.9%) 4.777 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.558, 2.778), stdev = 1.241
[info]   CI (99.9%): [≈ 0, 5.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1083.371 ±(99.9%) 563.819 MB/sec [Average]
[info]   (min, avg, max) = (1008.257, 1083.371, 1345.107), stdev = 146.422
[info]   CI (99.9%): [519.552, 1647.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   17066.823 ±(99.9%) 9084.274 B/op [Average]
[info]   (min, avg, max) = (15856.571, 17066.823, 21280.129), stdev = 2359.157
[info]   CI (99.9%): [7982.549, 26151.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.823 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.664), stdev = 2.032
[info]   CI (99.9%): [≈ 0, 8.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   16.851 ±(99.9%) 123.782 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.851, 73.780), stdev = 32.146
[info]   CI (99.9%): [≈ 0, 140.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.600, 17.000), stdev = 6.914
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Run progress: 26.20% complete, ETA 01:02:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 146036.353 ops/s
[info] # Warmup Iteration   2: 153014.493 ops/s
[info] # Warmup Iteration   3: 154473.717 ops/s
[info] Iteration   1: 146905.413 ops/s
[info]                  ·gc.alloc.rate:            95.567 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      340.991 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3653.724 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 148814.407 ops/s
[info]                  ·gc.alloc.rate:      96.818 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 148626.938 ops/s
[info]                  ·gc.alloc.rate:      96.708 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 147970.762 ops/s
[info]                  ·gc.alloc.rate:                   96.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3563.814 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 21.255 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 148209.096 ops/s
[info]                  ·gc.alloc.rate:      96.444 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   148105.323 ±(99.9%) 2883.836 ops/s [Average]
[info]   (min, avg, max) = (146905.413, 148105.323, 148814.407), stdev = 748.923
[info]   CI (99.9%): [145221.487, 150989.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   96.360 ±(99.9%) 1.902 MB/sec [Average]
[info]   (min, avg, max) = (95.567, 96.360, 96.818), stdev = 0.494
[info]   CI (99.9%): [94.457, 98.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.003, 1024.003, 1024.003), stdev = 0.001
[info]   CI (99.9%): [1024.002, 1024.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   135.202 ±(99.9%) 712.926 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 135.202, 340.991), stdev = 185.145
[info]   CI (99.9%): [≈ 0, 848.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1443.508 ±(99.9%) 7612.183 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1443.508, 3653.724), stdev = 1976.860
[info]   CI (99.9%): [≈ 0, 9055.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.400 ±(99.9%) 3.441 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.998), stdev = 0.894
[info]   CI (99.9%): [≈ 0, 3.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.251 ±(99.9%) 36.603 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.251, 21.255), stdev = 9.506
[info]   CI (99.9%): [≈ 0, 40.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Run progress: 26.45% complete, ETA 01:02:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18107.725 ops/s
[info] # Warmup Iteration   2: 36797.648 ops/s
[info] # Warmup Iteration   3: 37113.645 ops/s
[info] Iteration   1: 37668.126 ops/s
[info]                  ·gc.alloc.rate:                                  2012.253 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84047.579 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.051 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.114 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2038.930 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85161.838 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                166.984 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 38742.018 ops/s
[info]                  ·gc.alloc.rate:                                  2068.545 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84048.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.259 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82970.321 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 38380.906 ops/s
[info]                  ·gc.alloc.rate:                                  2049.339 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84048.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.090 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83748.411 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 39281.742 ops/s
[info]                  ·gc.alloc.rate:                                  2097.717 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84048.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.134 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.304 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81827.840 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 39129.756 ops/s
[info]                  ·gc.alloc.rate:                                  2089.211 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84048.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.224 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.244 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       95836.583 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   38640.510 ±(99.9%) 2490.870 ops/s [Average]
[info]   (min, avg, max) = (37668.126, 38640.510, 39281.742), stdev = 646.871
[info]   CI (99.9%): [36149.640, 41131.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2063.413 ±(99.9%) 131.770 MB/sec [Average]
[info]   (min, avg, max) = (2012.253, 2063.413, 2097.717), stdev = 34.220
[info]   CI (99.9%): [1931.643, 2195.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   84047.924 ±(99.9%) 0.743 B/op [Average]
[info]   (min, avg, max) = (84047.579, 84047.924, 84048.011), stdev = 0.193
[info]   CI (99.9%): [84047.181, 84048.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.002, 0.014, 0.051), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.564 ±(99.9%) 3.347 B/op [Average]
[info]   (min, avg, max) = (0.090, 0.564, 2.114), stdev = 0.869
[info]   CI (99.9%): [≈ 0, 3.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2109.507 ±(99.9%) 587.111 MB/sec [Average]
[info]   (min, avg, max) = (2038.930, 2109.507, 2382.244), stdev = 152.471
[info]   CI (99.9%): [1522.395, 2696.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   85908.999 ±(99.9%) 21873.810 B/op [Average]
[info]   (min, avg, max) = (81827.840, 85908.999, 95836.583), stdev = 5680.559
[info]   CI (99.9%): [64035.189, 107782.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.885 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   33.397 ±(99.9%) 287.557 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33.397, 166.984), stdev = 74.678
[info]   CI (99.9%): [≈ 0, 320.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 9.000), stdev = 1.643
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Run progress: 26.70% complete, ETA 01:02:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67137.187 ops/s
[info] # Warmup Iteration   2: 86007.320 ops/s
[info] # Warmup Iteration   3: 86285.523 ops/s
[info] Iteration   1: 86129.485 ops/s
[info]                  ·gc.alloc.rate:            550.598 MB/sec
[info]                  ·gc.alloc.rate.norm:       10064.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.929 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12318.288 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 86239.406 ops/s
[info]                  ·gc.alloc.rate:            551.440 MB/sec
[info]                  ·gc.alloc.rate.norm:       10064.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6151.289 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 86107.290 ops/s
[info]                  ·gc.alloc.rate:            550.575 MB/sec
[info]                  ·gc.alloc.rate.norm:       10064.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12321.148 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 86192.001 ops/s
[info]                  ·gc.alloc.rate:            551.058 MB/sec
[info]                  ·gc.alloc.rate.norm:       10064.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12309.429 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 86599.604 ops/s
[info]                  ·gc.alloc.rate:            553.698 MB/sec
[info]                  ·gc.alloc.rate.norm:       10064.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6125.581 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   86253.557 ±(99.9%) 771.393 ops/s [Average]
[info]   (min, avg, max) = (86107.290, 86253.557, 86599.604), stdev = 200.328
[info]   CI (99.9%): [85482.164, 87024.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   551.474 ±(99.9%) 4.982 MB/sec [Average]
[info]   (min, avg, max) = (550.575, 551.474, 553.698), stdev = 1.294
[info]   CI (99.9%): [546.492, 556.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10064.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10064.005, 10064.005, 10064.005), stdev = 0.001
[info]   CI (99.9%): [10064.004, 10064.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   539.212 ±(99.9%) 710.689 MB/sec [Average]
[info]   (min, avg, max) = (337.015, 539.212, 674.057), stdev = 184.564
[info]   CI (99.9%): [≈ 0, 1249.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   9845.147 ±(99.9%) 13029.672 B/op [Average]
[info]   (min, avg, max) = (6125.581, 9845.147, 12321.148), stdev = 3383.764
[info]   CI (99.9%): [≈ 0, 22874.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava
[info] # Run progress: 26.95% complete, ETA 01:02:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5795.947 ops/s
[info] # Warmup Iteration   2: 113445.892 ops/s
[info] # Warmup Iteration   3: 114118.125 ops/s
[info] Iteration   1: 113733.297 ops/s
[info]                  ·gc.alloc.rate:            347.986 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.029 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4609.004 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 115694.897 ops/s
[info]                  ·gc.alloc.rate:                   353.952 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             332.989 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4530.778 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.062 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 111721.182 ops/s
[info]                  ·gc.alloc.rate:            341.841 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.714 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4701.503 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 115952.106 ops/s
[info]                  ·gc.alloc.rate:            354.762 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.672 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4529.701 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 115413.841 ops/s
[info]                  ·gc.alloc.rate:            353.137 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.692 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4550.811 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava":
[info]   114503.065 ±(99.9%) 6856.178 ops/s [Average]
[info]   (min, avg, max) = (111721.182, 114503.065, 115952.106), stdev = 1780.528
[info]   CI (99.9%): [107646.887, 121359.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   350.336 ±(99.9%) 20.931 MB/sec [Average]
[info]   (min, avg, max) = (341.841, 350.336, 354.762), stdev = 5.436
[info]   CI (99.9%): [329.404, 371.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   4816.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4816.004, 4816.004, 4816.004), stdev = 0.001
[info]   CI (99.9%): [4816.003, 4816.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   333.419 ±(99.9%) 1.443 MB/sec [Average]
[info]   (min, avg, max) = (332.989, 333.419, 333.714), stdev = 0.375
[info]   CI (99.9%): [331.976, 334.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   4584.359 ±(99.9%) 281.084 B/op [Average]
[info]   (min, avg, max) = (4529.701, 4584.359, 4701.503), stdev = 72.997
[info]   CI (99.9%): [4303.275, 4865.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   1.812 ±(99.9%) 15.605 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.812, 9.062), stdev = 4.052
[info]   CI (99.9%): [≈ 0, 17.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Run progress: 27.20% complete, ETA 01:01:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67377.378 ops/s
[info] # Warmup Iteration   2: 96357.000 ops/s
[info] # Warmup Iteration   3: 99071.505 ops/s
[info] Iteration   1: 100159.545 ops/s
[info]                  ·gc.alloc.rate:            330.838 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.290 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5285.689 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 99963.444 ops/s
[info]                  ·gc.alloc.rate:            330.213 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.339 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5296.474 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 100189.976 ops/s
[info]                  ·gc.alloc.rate:            330.973 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.343 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5284.370 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 100277.015 ops/s
[info]                  ·gc.alloc.rate:            331.289 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5279.418 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 100261.381 ops/s
[info]                  ·gc.alloc.rate:            331.219 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.692 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5270.225 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   100170.272 ±(99.9%) 483.161 ops/s [Average]
[info]   (min, avg, max) = (99963.444, 100170.272, 100277.015), stdev = 125.475
[info]   CI (99.9%): [99687.111, 100653.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   330.907 ±(99.9%) 1.650 MB/sec [Average]
[info]   (min, avg, max) = (330.213, 330.907, 331.289), stdev = 0.429
[info]   CI (99.9%): [329.256, 332.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   5200.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5200.004, 5200.004, 5200.004), stdev = 0.001
[info]   CI (99.9%): [5200.004, 5200.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   336.203 ±(99.9%) 1.102 MB/sec [Average]
[info]   (min, avg, max) = (335.692, 336.203, 336.349), stdev = 0.286
[info]   CI (99.9%): [335.100, 337.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   5283.235 ±(99.9%) 36.855 B/op [Average]
[info]   (min, avg, max) = (5270.225, 5283.235, 5296.474), stdev = 9.571
[info]   CI (99.9%): [5246.380, 5320.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Run progress: 27.46% complete, ETA 01:01:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105197.612 ops/s
[info] # Warmup Iteration   2: 111455.283 ops/s
[info] # Warmup Iteration   3: 117625.040 ops/s
[info] Iteration   1: 115816.196 ops/s
[info]                  ·gc.alloc.rate:            354.343 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4571.266 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 117560.266 ops/s
[info]                  ·gc.alloc.rate:            359.619 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.284 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4503.503 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 117710.386 ops/s
[info]                  ·gc.alloc.rate:            360.137 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4497.803 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 117663.882 ops/s
[info]                  ·gc.alloc.rate:            359.994 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.334 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4499.485 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 117128.284 ops/s
[info]                  ·gc.alloc.rate:            358.361 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.343 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4520.110 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   117175.803 ±(99.9%) 3057.931 ops/s [Average]
[info]   (min, avg, max) = (115816.196, 117175.803, 117710.386), stdev = 794.135
[info]   CI (99.9%): [114117.872, 120233.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   358.491 ±(99.9%) 9.326 MB/sec [Average]
[info]   (min, avg, max) = (354.343, 358.491, 360.137), stdev = 2.422
[info]   CI (99.9%): [349.165, 367.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   4816.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4816.003, 4816.004, 4816.004), stdev = 0.001
[info]   CI (99.9%): [4816.003, 4816.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   336.328 ±(99.9%) 0.095 MB/sec [Average]
[info]   (min, avg, max) = (336.284, 336.328, 336.343), stdev = 0.025
[info]   CI (99.9%): [336.233, 336.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4518.433 ±(99.9%) 118.711 B/op [Average]
[info]   (min, avg, max) = (4497.803, 4518.433, 4571.266), stdev = 30.829
[info]   CI (99.9%): [4399.723, 4637.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 27.71% complete, ETA 01:01:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 103665.181 ops/s
[info] # Warmup Iteration   2: 113828.074 ops/s
[info] # Warmup Iteration   3: 114889.244 ops/s
[info] Iteration   1: 117283.530 ops/s
[info]                  ·gc.alloc.rate:            266.434 MB/sec
[info]                  ·gc.alloc.rate.norm:       3576.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.334 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4514.176 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 117545.505 ops/s
[info]                  ·gc.alloc.rate:      267.037 MB/sec
[info]                  ·gc.alloc.rate.norm: 3576.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 116284.089 ops/s
[info]                  ·gc.alloc.rate:            264.182 MB/sec
[info]                  ·gc.alloc.rate.norm:       3576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4553.185 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 117177.831 ops/s
[info]                  ·gc.alloc.rate:            266.202 MB/sec
[info]                  ·gc.alloc.rate.norm:       3576.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4518.220 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 117097.471 ops/s
[info]                  ·gc.alloc.rate:            265.997 MB/sec
[info]                  ·gc.alloc.rate.norm:       3576.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.301 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4521.152 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   117077.685 ±(99.9%) 1827.984 ops/s [Average]
[info]   (min, avg, max) = (116284.089, 117077.685, 117545.505), stdev = 474.722
[info]   CI (99.9%): [115249.701, 118905.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   265.970 ±(99.9%) 4.132 MB/sec [Average]
[info]   (min, avg, max) = (264.182, 265.970, 267.037), stdev = 1.073
[info]   CI (99.9%): [261.838, 270.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   3576.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3576.003, 3576.003, 3576.004), stdev = 0.001
[info]   CI (99.9%): [3576.003, 3576.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   269.070 ±(99.9%) 579.193 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.070, 336.372), stdev = 150.415
[info]   CI (99.9%): [≈ 0, 848.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   3621.347 ±(99.9%) 7795.450 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3621.347, 4553.185), stdev = 2024.454
[info]   CI (99.9%): [≈ 0, 11416.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Run progress: 27.96% complete, ETA 01:01:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5691.884 ops/s
[info] # Warmup Iteration   2: 8520.985 ops/s
[info] # Warmup Iteration   3: 8679.927 ops/s
[info] Iteration   1: 8424.788 ops/s
[info]                  ·gc.alloc.rate:            1395.001 MB/sec
[info]                  ·gc.alloc.rate.norm:       260552.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.556 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 251877.264 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 8522.002 ops/s
[info]                  ·gc.alloc.rate:                                  1410.542 MB/sec
[info]                  ·gc.alloc.rate.norm:                             260552.052 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.033 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.145 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.892 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       250826.662 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                615.073 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 8779.152 ops/s
[info]                  ·gc.alloc.rate:            1453.219 MB/sec
[info]                  ·gc.alloc.rate.norm:       260552.046 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.361 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 244082.604 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 8722.198 ops/s
[info]                  ·gc.alloc.rate:                                  1444.157 MB/sec
[info]                  ·gc.alloc.rate.norm:                             260552.047 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.205 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.140 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       307096.708 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 8548.324 ops/s
[info]                  ·gc.alloc.rate:            1415.078 MB/sec
[info]                  ·gc.alloc.rate.norm:       260552.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.287 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 250647.801 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   8599.293 ±(99.9%) 566.184 ops/s [Average]
[info]   (min, avg, max) = (8424.788, 8599.293, 8779.152), stdev = 147.036
[info]   CI (99.9%): [8033.109, 9165.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1423.599 ±(99.9%) 93.550 MB/sec [Average]
[info]   (min, avg, max) = (1395.001, 1423.599, 1453.219), stdev = 24.295
[info]   CI (99.9%): [1330.049, 1517.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   260552.048 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (260552.046, 260552.048, 260552.052), stdev = 0.002
[info]   CI (99.9%): [260552.040, 260552.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.033), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.270 ±(99.9%) 10.498 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.270, 6.145), stdev = 2.726
[info]   CI (99.9%): [≈ 0, 11.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1426.247 ±(99.9%) 594.220 MB/sec [Average]
[info]   (min, avg, max) = (1348.556, 1426.247, 1702.140), stdev = 154.317
[info]   CI (99.9%): [832.027, 2020.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   260906.208 ±(99.9%) 100134.327 B/op [Average]
[info]   (min, avg, max) = (244082.604, 260906.208, 307096.708), stdev = 26004.567
[info]   CI (99.9%): [160771.881, 361040.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   123.015 ±(99.9%) 1059.192 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 123.015, 615.073), stdev = 275.069
[info]   CI (99.9%): [≈ 0, 1182.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 14.000), stdev = 4.494
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Run progress: 28.21% complete, ETA 01:01:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4216.152 ops/s
[info] # Warmup Iteration   2: 8403.578 ops/s
[info] # Warmup Iteration   3: 8538.020 ops/s
[info] Iteration   1: 8410.055 ops/s
[info]                  ·gc.alloc.rate:            1309.987 MB/sec
[info]                  ·gc.alloc.rate.norm:       245216.052 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.148 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 251797.851 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 8465.225 ops/s
[info]                  ·gc.alloc.rate:                                  1319.262 MB/sec
[info]                  ·gc.alloc.rate.norm:                             245216.052 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.121 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 22.447 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       251494.787 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                866.796 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 8629.618 ops/s
[info]                  ·gc.alloc.rate:                                  1344.428 MB/sec
[info]                  ·gc.alloc.rate.norm:                             245216.047 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.231 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.313 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       248295.800 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 8670.537 ops/s
[info]                  ·gc.alloc.rate:                                  1350.864 MB/sec
[info]                  ·gc.alloc.rate.norm:                             245216.047 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.184 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       247122.027 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 8641.112 ops/s
[info]                  ·gc.alloc.rate:                                  1346.331 MB/sec
[info]                  ·gc.alloc.rate.norm:                             245216.047 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.872 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.348 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       247951.104 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   8563.309 ±(99.9%) 451.756 ops/s [Average]
[info]   (min, avg, max) = (8410.055, 8563.309, 8670.537), stdev = 117.320
[info]   CI (99.9%): [8111.553, 9015.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1334.175 ±(99.9%) 70.449 MB/sec [Average]
[info]   (min, avg, max) = (1309.987, 1334.175, 1350.864), stdev = 18.295
[info]   CI (99.9%): [1263.726, 1404.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   245216.049 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (245216.047, 245216.049, 245216.052), stdev = 0.003
[info]   CI (99.9%): [245216.039, 245216.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.205 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.121), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   4.747 ±(99.9%) 38.122 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.747, 22.447), stdev = 9.900
[info]   CI (99.9%): [≈ 0, 42.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1356.443 ±(99.9%) 27.976 MB/sec [Average]
[info]   (min, avg, max) = (1345.148, 1356.443, 1361.364), stdev = 7.265
[info]   CI (99.9%): [1328.467, 1384.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   249332.314 ±(99.9%) 8308.524 B/op [Average]
[info]   (min, avg, max) = (247122.027, 249332.314, 251797.851), stdev = 2157.697
[info]   CI (99.9%): [241023.790, 257640.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   173.359 ±(99.9%) 1492.676 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 173.359, 866.796), stdev = 387.643
[info]   CI (99.9%): [≈ 0, 1666.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.000, 17.000), stdev = 5.874
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Run progress: 28.46% complete, ETA 01:00:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 84136.625 ops/s
[info] # Warmup Iteration   2: 88052.995 ops/s
[info] # Warmup Iteration   3: 89908.908 ops/s
[info] Iteration   1: 88398.651 ops/s
[info]                  ·gc.alloc.rate:      230.025 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 87932.087 ops/s
[info]                  ·gc.alloc.rate:            228.829 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.689 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6044.593 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 85821.224 ops/s
[info]                  ·gc.alloc.rate:            223.325 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.687 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6193.532 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 88497.208 ops/s
[info]                  ·gc.alloc.rate:      230.271 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 87895.306 ops/s
[info]                  ·gc.alloc.rate:            228.721 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.660 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6046.931 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   87708.895 ±(99.9%) 4193.962 ops/s [Average]
[info]   (min, avg, max) = (85821.224, 87708.895, 88497.208), stdev = 1089.158
[info]   CI (99.9%): [83514.934, 91902.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   228.234 ±(99.9%) 10.900 MB/sec [Average]
[info]   (min, avg, max) = (223.325, 228.234, 230.271), stdev = 2.831
[info]   CI (99.9%): [217.334, 239.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.005, 4096.005, 4096.005), stdev = 0.001
[info]   CI (99.9%): [4096.004, 4096.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   202.607 ±(99.9%) 712.193 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 202.607, 337.689), stdev = 184.954
[info]   CI (99.9%): [≈ 0, 914.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3657.011 ±(99.9%) 12857.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3657.011, 6193.532), stdev = 3338.924
[info]   CI (99.9%): [≈ 0, 16514.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Run progress: 28.72% complete, ETA 01:00:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2120.039 ops/s
[info] # Warmup Iteration   2: 4905.642 ops/s
[info] # Warmup Iteration   3: 4983.746 ops/s
[info] Iteration   1: 5054.187 ops/s
[info]                  ·gc.alloc.rate:            1341.190 MB/sec
[info]                  ·gc.alloc.rate.norm:       417696.369 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.160 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 418932.658 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 4986.061 ops/s
[info]                  ·gc.alloc.rate:                                  1323.001 MB/sec
[info]                  ·gc.alloc.rate.norm:                             417696.082 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.151 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 47.779 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.268 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       427252.142 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1261.571 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 5096.356 ops/s
[info]                  ·gc.alloc.rate:                                  1352.391 MB/sec
[info]                  ·gc.alloc.rate.norm:                             417696.086 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.845 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.203 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       420417.682 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 5144.817 ops/s
[info]                  ·gc.alloc.rate:                                  1365.690 MB/sec
[info]                  ·gc.alloc.rate.norm:                             417696.079 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.700 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.767 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       416496.180 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 4982.904 ops/s
[info]                  ·gc.alloc.rate:            1322.380 MB/sec
[info]                  ·gc.alloc.rate.norm:       417696.082 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.167 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 429947.712 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   5052.865 ±(99.9%) 270.271 ops/s [Average]
[info]   (min, avg, max) = (4982.904, 5052.865, 5144.817), stdev = 70.189
[info]   CI (99.9%): [4782.594, 5323.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1340.930 ±(99.9%) 72.298 MB/sec [Average]
[info]   (min, avg, max) = (1322.380, 1340.930, 1365.690), stdev = 18.775
[info]   CI (99.9%): [1268.633, 1413.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   417696.140 ±(99.9%) 0.493 B/op [Average]
[info]   (min, avg, max) = (417696.079, 417696.140, 417696.369), stdev = 0.128
[info]   CI (99.9%): [417695.646, 417696.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.257 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.151), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   10.065 ±(99.9%) 81.234 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.065, 47.779), stdev = 21.096
[info]   CI (99.9%): [≈ 0, 91.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1356.513 ±(99.9%) 27.946 MB/sec [Average]
[info]   (min, avg, max) = (1345.160, 1356.513, 1361.767), stdev = 7.258
[info]   CI (99.9%): [1328.567, 1384.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   422609.275 ±(99.9%) 22044.675 B/op [Average]
[info]   (min, avg, max) = (416496.180, 422609.275, 429947.712), stdev = 5724.932
[info]   CI (99.9%): [400564.600, 444653.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   252.314 ±(99.9%) 2172.502 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 252.314, 1261.571), stdev = 564.192
[info]   CI (99.9%): [≈ 0, 2424.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.200, 19.000), stdev = 6.834
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Run progress: 28.97% complete, ETA 01:00:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15685.173 ops/s
[info] # Warmup Iteration   2: 23889.693 ops/s
[info] # Warmup Iteration   3: 23577.178 ops/s
[info] Iteration   1: 24029.544 ops/s
[info]                  ·gc.alloc.rate:            1351.131 MB/sec
[info]                  ·gc.alloc.rate.norm:       88480.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.399 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 88301.137 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 23615.776 ops/s
[info]                  ·gc.alloc.rate:                                  1327.578 MB/sec
[info]                  ·gc.alloc.rate.norm:                             88477.649 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.092 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.162 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1354.869 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       90296.511 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                221.968 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 23860.850 ops/s
[info]                  ·gc.alloc.rate:                                  1341.467 MB/sec
[info]                  ·gc.alloc.rate.norm:                             88456.023 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.758 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.984 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       89808.898 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 23883.296 ops/s
[info]                  ·gc.alloc.rate:                                  1342.700 MB/sec
[info]                  ·gc.alloc.rate.norm:                             88456.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.173 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.924 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       89722.427 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 23884.038 ops/s
[info]                  ·gc.alloc.rate:                                  1342.479 MB/sec
[info]                  ·gc.alloc.rate.norm:                             88456.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.642 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       89718.672 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   23854.701 ±(99.9%) 575.575 ops/s [Average]
[info]   (min, avg, max) = (23615.776, 23854.701, 24029.544), stdev = 149.475
[info]   CI (99.9%): [23279.125, 24430.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1341.071 ±(99.9%) 32.677 MB/sec [Average]
[info]   (min, avg, max) = (1327.578, 1341.071, 1351.131), stdev = 8.486
[info]   CI (99.9%): [1308.394, 1373.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   88465.145 ±(99.9%) 48.226 B/op [Average]
[info]   (min, avg, max) = (88456.017, 88465.145, 88480.018), stdev = 12.524
[info]   CI (99.9%): [88416.919, 88513.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.092), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.421 ±(99.9%) 10.275 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.421, 6.162), stdev = 2.668
[info]   CI (99.9%): [≈ 0, 11.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1357.764 ±(99.9%) 23.282 MB/sec [Average]
[info]   (min, avg, max) = (1348.399, 1357.764, 1361.984), stdev = 6.046
[info]   CI (99.9%): [1334.481, 1381.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   89569.529 ±(99.9%) 2881.712 B/op [Average]
[info]   (min, avg, max) = (88301.137, 89569.529, 90296.511), stdev = 748.372
[info]   CI (99.9%): [86687.816, 92451.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   44.394 ±(99.9%) 382.242 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.394, 221.968), stdev = 99.267
[info]   CI (99.9%): [≈ 0, 426.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 14.000), stdev = 4.970
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Run progress: 29.22% complete, ETA 01:00:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14965.115 ops/s
[info] # Warmup Iteration   2: 28987.907 ops/s
[info] # Warmup Iteration   3: 28284.241 ops/s
[info] Iteration   1: 28176.583 ops/s
[info]                  ·gc.alloc.rate:            1376.638 MB/sec
[info]                  ·gc.alloc.rate.norm:       76912.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1343.972 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 75086.987 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 28473.953 ops/s
[info]                  ·gc.alloc.rate:                                  1391.206 MB/sec
[info]                  ·gc.alloc.rate.norm:                             76912.019 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.135 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.470 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1356.636 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75000.854 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                257.735 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 28676.900 ops/s
[info]                  ·gc.alloc.rate:                                  1401.862 MB/sec
[info]                  ·gc.alloc.rate.norm:                             76912.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.146 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74725.938 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 28974.324 ops/s
[info]                  ·gc.alloc.rate:                                  1415.703 MB/sec
[info]                  ·gc.alloc.rate.norm:                             76912.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.071 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.709 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       92450.108 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 29548.060 ops/s
[info]                  ·gc.alloc.rate:            1443.818 MB/sec
[info]                  ·gc.alloc.rate.norm:       76912.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.436 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72523.579 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   28769.964 ±(99.9%) 2015.235 ops/s [Average]
[info]   (min, avg, max) = (28176.583, 28769.964, 29548.060), stdev = 523.350
[info]   CI (99.9%): [26754.729, 30785.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1405.845 ±(99.9%) 98.593 MB/sec [Average]
[info]   (min, avg, max) = (1376.638, 1405.845, 1443.818), stdev = 25.604
[info]   CI (99.9%): [1307.252, 1504.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   76912.015 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (76912.014, 76912.015, 76912.019), stdev = 0.002
[info]   CI (99.9%): [76912.007, 76912.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.231 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.135), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.537 ±(99.9%) 12.772 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.537, 7.470), stdev = 3.317
[info]   CI (99.9%): [≈ 0, 14.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1425.154 ±(99.9%) 595.961 MB/sec [Average]
[info]   (min, avg, max) = (1343.972, 1425.154, 1701.709), stdev = 154.769
[info]   CI (99.9%): [829.193, 2021.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   77957.493 ±(99.9%) 31459.300 B/op [Average]
[info]   (min, avg, max) = (72523.579, 77957.493, 92450.108), stdev = 8169.880
[info]   CI (99.9%): [46498.193, 109416.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   51.547 ±(99.9%) 443.835 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 51.547, 257.735), stdev = 115.263
[info]   CI (99.9%): [≈ 0, 495.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.200, 18.000), stdev = 6.017
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Run progress: 29.47% complete, ETA 01:00:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 303017.586 ops/s
[info] # Warmup Iteration   2: 330673.473 ops/s
[info] # Warmup Iteration   3: 349361.367 ops/s
[info] Iteration   1: 350652.794 ops/s
[info]                  ·gc.alloc.rate:            773.456 MB/sec
[info]                  ·gc.alloc.rate.norm:       3472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.677 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3019.610 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 348512.846 ops/s
[info]                  ·gc.alloc.rate:            768.621 MB/sec
[info]                  ·gc.alloc.rate.norm:       3472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.919 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4557.470 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 349594.104 ops/s
[info]                  ·gc.alloc.rate:            771.124 MB/sec
[info]                  ·gc.alloc.rate.norm:       3472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.693 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3028.816 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 349827.615 ops/s
[info]                  ·gc.alloc.rate:            771.650 MB/sec
[info]                  ·gc.alloc.rate.norm:       3472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.725 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3026.894 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 350105.150 ops/s
[info]                  ·gc.alloc.rate:                                  772.463 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.075 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.337 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4572.645 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                17.967 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   349738.502 ±(99.9%) 3045.045 ops/s [Average]
[info]   (min, avg, max) = (348512.846, 349738.502, 350652.794), stdev = 790.789
[info]   CI (99.9%): [346693.457, 352783.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   771.463 ±(99.9%) 6.995 MB/sec [Average]
[info]   (min, avg, max) = (768.621, 771.463, 773.456), stdev = 1.817
[info]   CI (99.9%): [764.468, 778.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3472.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3472.001, 3472.001, 3472.001), stdev = 0.001
[info]   CI (99.9%): [3472.001, 3472.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.129 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.075), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.067 ±(99.9%) 0.581 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.337), stdev = 0.151
[info]   CI (99.9%): [≈ 0, 0.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   808.871 ±(99.9%) 718.087 MB/sec [Average]
[info]   (min, avg, max) = (672.677, 808.871, 1017.338), stdev = 186.485
[info]   CI (99.9%): [90.784, 1526.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3641.087 ±(99.9%) 3247.979 B/op [Average]
[info]   (min, avg, max) = (3019.610, 3641.087, 4572.645), stdev = 843.490
[info]   CI (99.9%): [393.108, 6889.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   3.593 ±(99.9%) 30.941 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.593, 17.967), stdev = 8.035
[info]   CI (99.9%): [≈ 0, 34.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 9.000), stdev = 1.483
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 29.72% complete, ETA 00:59:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 339692.853 ops/s
[info] # Warmup Iteration   2: 375882.498 ops/s
[info] # Warmup Iteration   3: 376421.636 ops/s
[info] Iteration   1: 376426.776 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 376413.798 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 376410.426 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 376470.134 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 376377.032 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   376419.633 ±(99.9%) 129.657 ops/s [Average]
[info]   (min, avg, max) = (376377.032, 376419.633, 376470.134), stdev = 33.671
[info]   CI (99.9%): [376289.977, 376549.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Run progress: 29.97% complete, ETA 00:59:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16302.638 ops/s
[info] # Warmup Iteration   2: 26537.436 ops/s
[info] # Warmup Iteration   3: 26189.680 ops/s
[info] Iteration   1: 26867.472 ops/s
[info]                  ·gc.alloc.rate:            1413.539 MB/sec
[info]                  ·gc.alloc.rate.norm:       82792.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.669 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 78816.831 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 27107.490 ops/s
[info]                  ·gc.alloc.rate:                                  1425.606 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82792.019 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.147 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.508 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.181 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78818.201 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                232.046 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 27506.574 ops/s
[info]                  ·gc.alloc.rate:                                  1446.735 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82792.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.261 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.317 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       77903.800 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 27275.533 ops/s
[info]                  ·gc.alloc.rate:                                  1434.776 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82792.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.398 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.445 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78560.565 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 27381.871 ops/s
[info]                  ·gc.alloc.rate:                                  1440.156 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82792.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.577 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       97820.640 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   27227.788 ±(99.9%) 958.883 ops/s [Average]
[info]   (min, avg, max) = (26867.472, 27227.788, 27506.574), stdev = 249.019
[info]   CI (99.9%): [26268.905, 28186.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1432.163 ±(99.9%) 49.944 MB/sec [Average]
[info]   (min, avg, max) = (1413.539, 1432.163, 1446.735), stdev = 12.970
[info]   CI (99.9%): [1382.219, 1482.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82792.016 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (82792.015, 82792.016, 82792.019), stdev = 0.002
[info]   CI (99.9%): [82792.010, 82792.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.247 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.147), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.839 ±(99.9%) 14.370 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.839, 8.508), stdev = 3.732
[info]   CI (99.9%): [≈ 0, 16.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1425.438 ±(99.9%) 594.926 MB/sec [Average]
[info]   (min, avg, max) = (1345.669, 1425.438, 1701.577), stdev = 154.500
[info]   CI (99.9%): [830.512, 2020.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   82384.007 ±(99.9%) 33259.640 B/op [Average]
[info]   (min, avg, max) = (77903.800, 82384.007, 97820.640), stdev = 8637.423
[info]   CI (99.9%): [49124.367, 115643.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   46.409 ±(99.9%) 399.597 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.409, 232.046), stdev = 103.774
[info]   CI (99.9%): [≈ 0, 446.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 15.000), stdev = 4.764
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Run progress: 30.23% complete, ETA 00:59:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105780.444 ops/s
[info] # Warmup Iteration   2: 129365.202 ops/s
[info] # Warmup Iteration   3: 128285.211 ops/s
[info] Iteration   1: 129211.712 ops/s
[info]                  ·gc.alloc.rate:                                  2104.777 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25640.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.078 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.950 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.224 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24877.999 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 129469.778 ops/s
[info]                  ·gc.alloc.rate:                                  2109.278 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25640.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.108 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.951 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28966.725 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 131363.421 ops/s
[info]                  ·gc.alloc.rate:                                  2139.666 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25640.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.126 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24470.125 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 132029.575 ops/s
[info]                  ·gc.alloc.rate:                                  2151.408 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25640.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.066 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.844 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24346.154 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 130255.322 ops/s
[info]                  ·gc.alloc.rate:                                  2121.735 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25640.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.148 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24678.248 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   130465.962 ±(99.9%) 4660.797 ops/s [Average]
[info]   (min, avg, max) = (129211.712, 130465.962, 132029.575), stdev = 1210.394
[info]   CI (99.9%): [125805.165, 135126.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2125.373 ±(99.9%) 76.496 MB/sec [Average]
[info]   (min, avg, max) = (2104.777, 2125.373, 2151.408), stdev = 19.866
[info]   CI (99.9%): [2048.877, 2201.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   25640.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25640.003, 25640.003, 25640.003), stdev = 0.001
[info]   CI (99.9%): [25640.003, 25640.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.123 MB/sec [Average]
[info]   (min, avg, max) = (0.003, 0.021, 0.078), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.256 ±(99.9%) 1.500 B/op [Average]
[info]   (min, avg, max) = (0.032, 0.256, 0.950), stdev = 0.389
[info]   CI (99.9%): [≈ 0, 1.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2110.441 ±(99.9%) 586.600 MB/sec [Average]
[info]   (min, avg, max) = (2042.039, 2110.441, 2382.951), stdev = 152.338
[info]   CI (99.9%): [1523.842, 2697.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   25467.850 ±(99.9%) 7571.970 B/op [Average]
[info]   (min, avg, max) = (24346.154, 25467.850, 28966.725), stdev = 1966.417
[info]   CI (99.9%): [17895.880, 33039.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava
[info] # Run progress: 30.48% complete, ETA 00:59:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16511.752 ops/s
[info] # Warmup Iteration   2: 480461.332 ops/s
[info] # Warmup Iteration   3: 487602.812 ops/s
[info] Iteration   1: 489520.689 ops/s
[info]                  ·gc.alloc.rate:                   507.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             333.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1070.802 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.142 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 478828.797 ops/s
[info]                  ·gc.alloc.rate:            496.432 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.351 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2193.889 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 481018.840 ops/s
[info]                  ·gc.alloc.rate:            498.708 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.689 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1091.985 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 483596.713 ops/s
[info]                  ·gc.alloc.rate:            501.412 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.436 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2172.379 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 492867.500 ops/s
[info]                  ·gc.alloc.rate:            511.013 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1065.712 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava":
[info]   485166.508 ±(99.9%) 22625.455 ops/s [Average]
[info]   (min, avg, max) = (478828.797, 485166.508, 492867.500), stdev = 5875.759
[info]   CI (99.9%): [462541.053, 507791.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   503.037 ±(99.9%) 23.549 MB/sec [Average]
[info]   (min, avg, max) = (496.432, 503.037, 511.013), stdev = 6.116
[info]   CI (99.9%): [479.487, 526.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1632.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1632.001, 1632.001), stdev = 0.001
[info]   CI (99.9%): [1632.001, 1632.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   467.047 ±(99.9%) 704.246 MB/sec [Average]
[info]   (min, avg, max) = (333.063, 467.047, 667.436), stdev = 182.891
[info]   CI (99.9%): [≈ 0, 1171.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   1518.953 ±(99.9%) 2335.180 B/op [Average]
[info]   (min, avg, max) = (1065.712, 1518.953, 2193.889), stdev = 606.439
[info]   CI (99.9%): [≈ 0, 3854.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.428 ±(99.9%) 3.688 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.428, 2.142), stdev = 0.958
[info]   CI (99.9%): [≈ 0, 4.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 10.000), stdev = 2.490
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Run progress: 30.73% complete, ETA 00:58:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 169241.402 ops/s
[info] # Warmup Iteration   2: 279077.253 ops/s
[info] # Warmup Iteration   3: 273937.524 ops/s
[info] Iteration   1: 278949.029 ops/s
[info]                  ·gc.alloc.rate:            399.755 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.309 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1897.947 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 280108.716 ops/s
[info]                  ·gc.alloc.rate:            401.591 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.459 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1890.108 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 272982.260 ops/s
[info]                  ·gc.alloc.rate:            391.323 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.422 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1939.496 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 279860.008 ops/s
[info]                  ·gc.alloc.rate:            401.102 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1891.770 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 277923.054 ops/s
[info]                  ·gc.alloc.rate:            398.422 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.863 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3809.986 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   277964.613 ±(99.9%) 11223.875 ops/s [Average]
[info]   (min, avg, max) = (272982.260, 277964.613, 280108.716), stdev = 2914.805
[info]   CI (99.9%): [266740.738, 289188.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   398.438 ±(99.9%) 16.040 MB/sec [Average]
[info]   (min, avg, max) = (391.323, 398.438, 401.591), stdev = 4.166
[info]   CI (99.9%): [382.399, 414.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2256.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2256.001, 2256.001, 2256.002), stdev = 0.001
[info]   CI (99.9%): [2256.001, 2256.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   403.679 ±(99.9%) 579.439 MB/sec [Average]
[info]   (min, avg, max) = (336.309, 403.679, 672.863), stdev = 150.478
[info]   CI (99.9%): [≈ 0, 983.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2285.861 ±(99.9%) 3281.717 B/op [Average]
[info]   (min, avg, max) = (1890.108, 2285.861, 3809.986), stdev = 852.252
[info]   CI (99.9%): [≈ 0, 5567.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Run progress: 30.98% complete, ETA 00:58:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 684969.684 ops/s
[info] # Warmup Iteration   2: 709461.284 ops/s
[info] # Warmup Iteration   3: 732131.599 ops/s
[info] Iteration   1: 737078.988 ops/s
[info]                  ·gc.alloc.rate:            479.456 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.986 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 719.720 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 734032.666 ops/s
[info]                  ·gc.alloc.rate:            477.571 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.118 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1445.435 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 737033.203 ops/s
[info]                  ·gc.alloc.rate:            479.555 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.069 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 719.749 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 729906.266 ops/s
[info]                  ·gc.alloc.rate:            474.929 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.070 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 726.760 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 734326.324 ops/s
[info]                  ·gc.alloc.rate:            477.684 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.992 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1444.821 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   734475.489 ±(99.9%) 11294.971 ops/s [Average]
[info]   (min, avg, max) = (729906.266, 734475.489, 737078.988), stdev = 2933.268
[info]   CI (99.9%): [723180.519, 745770.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   477.839 ±(99.9%) 7.235 MB/sec [Average]
[info]   (min, avg, max) = (474.929, 477.839, 479.555), stdev = 1.879
[info]   CI (99.9%): [470.604, 485.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1024.001, 1024.001), stdev = 0.001
[info]   CI (99.9%): [1024.000, 1024.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.847 ±(99.9%) 710.790 MB/sec [Average]
[info]   (min, avg, max) = (336.986, 471.847, 674.118), stdev = 184.590
[info]   CI (99.9%): [≈ 0, 1182.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1011.297 ±(99.9%) 1525.017 B/op [Average]
[info]   (min, avg, max) = (719.720, 1011.297, 1445.435), stdev = 396.042
[info]   CI (99.9%): [≈ 0, 2536.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Run progress: 31.23% complete, ETA 00:58:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39428.850 ops/s
[info] # Warmup Iteration   2: 66949.537 ops/s
[info] # Warmup Iteration   3: 69566.313 ops/s
[info] Iteration   1: 70870.767 ops/s
[info]                  ·gc.alloc.rate:                                  3103.010 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68920.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.434 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.428 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75592.503 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 70729.506 ops/s
[info]                  ·gc.alloc.rate:                                  3096.661 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68920.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.222 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68171.744 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 69774.859 ops/s
[info]                  ·gc.alloc.rate:                                  3055.108 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68920.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.112 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.206 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69102.700 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 70763.987 ops/s
[info]                  ·gc.alloc.rate:                                  3098.970 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68920.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.175 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.765 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68137.069 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 69206.147 ops/s
[info]                  ·gc.alloc.rate:                                  3031.268 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68920.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.097 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3064.244 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69669.754 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   70269.053 ±(99.9%) 2851.189 ops/s [Average]
[info]   (min, avg, max) = (69206.147, 70269.053, 70870.767), stdev = 740.445
[info]   CI (99.9%): [67417.864, 73120.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3077.003 ±(99.9%) 123.527 MB/sec [Average]
[info]   (min, avg, max) = (3031.268, 3077.003, 3103.010), stdev = 32.080
[info]   CI (99.9%): [2953.476, 3200.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   68920.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (68920.006, 68920.006, 68920.006), stdev = 0.001
[info]   CI (99.9%): [68920.005, 68920.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.024 MB/sec [Average]
[info]   (min, avg, max) = (0.004, 0.009, 0.020), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.208 ±(99.9%) 0.523 B/op [Average]
[info]   (min, avg, max) = (0.097, 0.208, 0.434), stdev = 0.136
[info]   CI (99.9%): [≈ 0, 0.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3131.537 ±(99.9%) 585.269 MB/sec [Average]
[info]   (min, avg, max) = (3063.041, 3131.537, 3403.428), stdev = 151.992
[info]   CI (99.9%): [2546.268, 3716.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   70134.754 ±(99.9%) 12010.141 B/op [Average]
[info]   (min, avg, max) = (68137.069, 70134.754, 75592.503), stdev = 3118.996
[info]   CI (99.9%): [58124.612, 82144.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   46.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 9.000), stdev = 0.837
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Run progress: 31.49% complete, ETA 00:58:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 167427.413 ops/s
[info] # Warmup Iteration   2: 222258.370 ops/s
[info] # Warmup Iteration   3: 225308.807 ops/s
[info] Iteration   1: 224977.163 ops/s
[info]                  ·gc.alloc.rate:                                  1579.549 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11048.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.067 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.469 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1688.939 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11813.116 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                23.300 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   2: 225233.277 ops/s
[info]                  ·gc.alloc.rate:                                  1580.945 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11048.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.058 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.402 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.840 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11892.839 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 225719.536 ops/s
[info]                  ·gc.alloc.rate:                                  1584.577 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11048.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9493.789 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 228392.432 ops/s
[info]                  ·gc.alloc.rate:                                  1603.093 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11048.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.809 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11728.319 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 227286.122 ops/s
[info]                  ·gc.alloc.rate:                                  1595.447 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11048.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.940 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11785.433 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   226321.706 ±(99.9%) 5637.311 ops/s [Average]
[info]   (min, avg, max) = (224977.163, 226321.706, 228392.432), stdev = 1463.992
[info]   CI (99.9%): [220684.395, 231959.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1588.722 ±(99.9%) 39.154 MB/sec [Average]
[info]   (min, avg, max) = (1579.549, 1588.722, 1603.093), stdev = 10.168
[info]   CI (99.9%): [1549.569, 1627.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11048.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11048.002, 11048.002, 11048.002), stdev = 0.001
[info]   CI (99.9%): [11048.002, 11048.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.125 MB/sec [Average]
[info]   (min, avg, max) = (0.002, 0.027, 0.067), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.188 ±(99.9%) 0.876 B/op [Average]
[info]   (min, avg, max) = (0.013, 0.188, 0.469), stdev = 0.227
[info]   CI (99.9%): [≈ 0, 1.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1631.238 ±(99.9%) 580.683 MB/sec [Average]
[info]   (min, avg, max) = (1361.661, 1631.238, 1701.940), stdev = 150.802
[info]   CI (99.9%): [1050.555, 2211.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   11342.699 ±(99.9%) 3986.453 B/op [Average]
[info]   (min, avg, max) = (9493.789, 11342.699, 11892.839), stdev = 1035.269
[info]   CI (99.9%): [7356.246, 15329.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.660 ±(99.9%) 40.124 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.660, 23.300), stdev = 10.420
[info]   CI (99.9%): [≈ 0, 44.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 15.000), stdev = 4.722
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava
[info] # Run progress: 31.74% complete, ETA 00:58:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24882.979 ops/s
[info] # Warmup Iteration   2: 1137795.167 ops/s
[info] # Warmup Iteration   3: 1177243.415 ops/s
[info] Iteration   1: 1180302.540 ops/s
[info]                  ·gc.alloc.rate:            641.873 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.396 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 890.037 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 1154034.225 ops/s
[info]                  ·gc.alloc.rate:                   627.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             666.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        909.409 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.909 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 1148425.903 ops/s
[info]                  ·gc.alloc.rate:            624.570 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.408 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 914.712 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 1147073.511 ops/s
[info]                  ·gc.alloc.rate:            623.849 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.421 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 915.786 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 1180583.122 ops/s
[info]                  ·gc.alloc.rate:            641.992 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 889.795 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava":
[info]   1162083.860 ±(99.9%) 65313.266 ops/s [Average]
[info]   (min, avg, max) = (1147073.511, 1162083.860, 1180583.122), stdev = 16961.648
[info]   CI (99.9%): [1096770.595, 1227397.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   631.964 ±(99.9%) 35.443 MB/sec [Average]
[info]   (min, avg, max) = (623.849, 631.964, 641.992), stdev = 9.204
[info]   CI (99.9%): [596.521, 667.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   667.251 ±(99.9%) 1.212 MB/sec [Average]
[info]   (min, avg, max) = (666.691, 667.251, 667.421), stdev = 0.315
[info]   CI (99.9%): [666.039, 668.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   903.948 ±(99.9%) 50.193 B/op [Average]
[info]   (min, avg, max) = (889.795, 903.948, 915.786), stdev = 13.035
[info]   CI (99.9%): [853.755, 954.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.182 ±(99.9%) 1.564 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.182, 0.909), stdev = 0.406
[info]   CI (99.9%): [≈ 0, 1.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.600, 10.000), stdev = 0.548
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Run progress: 31.99% complete, ETA 00:57:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 550472.291 ops/s
[info] # Warmup Iteration   2: 831651.733 ops/s
[info] # Warmup Iteration   3: 827379.412 ops/s
[info] Iteration   1: 844275.503 ops/s
[info]                  ·gc.alloc.rate:            665.216 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.825 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1254.185 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 844565.104 ops/s
[info]                  ·gc.alloc.rate:                   665.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.050 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1252.533 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.241 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 845773.383 ops/s
[info]                  ·gc.alloc.rate:            666.280 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1251.947 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 845137.110 ops/s
[info]                  ·gc.alloc.rate:            665.812 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.734 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1252.892 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 839890.553 ops/s
[info]                  ·gc.alloc.rate:                   661.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.899 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1260.753 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.490 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   843928.331 ±(99.9%) 8967.748 ops/s [Average]
[info]   (min, avg, max) = (839890.553, 843928.331, 845773.383), stdev = 2328.896
[info]   CI (99.9%): [834960.583, 852896.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   664.891 ±(99.9%) 6.804 MB/sec [Average]
[info]   (min, avg, max) = (661.822, 664.891, 666.280), stdev = 1.767
[info]   CI (99.9%): [658.087, 671.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1240.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1240.000, 1240.000, 1240.001), stdev = 0.001
[info]   CI (99.9%): [1240.000, 1240.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   672.641 ±(99.9%) 1.309 MB/sec [Average]
[info]   (min, avg, max) = (672.050, 672.641, 672.899), stdev = 0.340
[info]   CI (99.9%): [671.333, 673.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1254.462 ±(99.9%) 13.907 B/op [Average]
[info]   (min, avg, max) = (1251.947, 1254.462, 1260.753), stdev = 3.611
[info]   CI (99.9%): [1240.555, 1268.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.690 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.746 ±(99.9%) 12.535 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.746, 7.490), stdev = 3.255
[info]   CI (99.9%): [≈ 0, 14.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Run progress: 32.24% complete, ETA 00:57:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 982119.625 ops/s
[info] # Warmup Iteration   2: 1100927.972 ops/s
[info] # Warmup Iteration   3: 1119997.789 ops/s
[info] Iteration   1: 1115755.620 ops/s
[info]                  ·gc.alloc.rate:                   606.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.399 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        949.961 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.940 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1116587.295 ops/s
[info]                  ·gc.alloc.rate:            607.118 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.292 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 474.152 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 1116156.706 ops/s
[info]                  ·gc.alloc.rate:                   606.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.363 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        949.614 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.939 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1112318.701 ops/s
[info]                  ·gc.alloc.rate:            605.025 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.832 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 951.934 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 1110298.642 ops/s
[info]                  ·gc.alloc.rate:            603.870 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.774 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 953.674 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1114223.393 ±(99.9%) 10668.606 ops/s [Average]
[info]   (min, avg, max) = (1110298.642, 1114223.393, 1116587.295), stdev = 2770.603
[info]   CI (99.9%): [1103554.786, 1124891.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   605.958 ±(99.9%) 5.555 MB/sec [Average]
[info]   (min, avg, max) = (603.870, 605.958, 607.118), stdev = 1.442
[info]   CI (99.9%): [600.403, 611.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   605.732 ±(99.9%) 579.990 MB/sec [Average]
[info]   (min, avg, max) = (336.292, 605.732, 673.399), stdev = 150.622
[info]   CI (99.9%): [25.742, 1185.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   855.867 ±(99.9%) 821.694 B/op [Average]
[info]   (min, avg, max) = (474.152, 855.867, 953.674), stdev = 213.391
[info]   CI (99.9%): [34.173, 1677.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.376 ±(99.9%) 1.981 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.376, 0.940), stdev = 0.515
[info]   CI (99.9%): [≈ 0, 2.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 32.49% complete, ETA 00:57:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 998089.085 ops/s
[info] # Warmup Iteration   2: 1089615.381 ops/s
[info] # Warmup Iteration   3: 1081521.708 ops/s
[info] Iteration   1: 1080408.730 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1079888.010 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1083258.278 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1083832.351 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1084560.155 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1082389.505 ±(99.9%) 8106.781 ops/s [Average]
[info]   (min, avg, max) = (1079888.010, 1082389.505, 1084560.155), stdev = 2105.305
[info]   CI (99.9%): [1074282.724, 1090496.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Run progress: 32.75% complete, ETA 00:57:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19177.766 ops/s
[info] # Warmup Iteration   2: 29802.917 ops/s
[info] # Warmup Iteration   3: 30047.654 ops/s
[info] Iteration   1: 29932.811 ops/s
[info]                  ·gc.alloc.rate:                                  1563.332 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82216.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.089 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.690 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1685.637 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       88648.068 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                210.150 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        17.000 ms
[info] Iteration   2: 30645.516 ops/s
[info]                  ·gc.alloc.rate:                                  1600.185 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82200.854 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.111 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.683 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.225 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69925.593 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 30671.868 ops/s
[info]                  ·gc.alloc.rate:                                  1602.052 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82200.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.119 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.980 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       87327.217 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 30690.194 ops/s
[info]                  ·gc.alloc.rate:                                  1602.904 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82200.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.134 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.886 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       87276.010 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 30624.827 ops/s
[info]                  ·gc.alloc.rate:            1599.243 MB/sec
[info]                  ·gc.alloc.rate.norm:       82200.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.326 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69971.250 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   30513.043 ±(99.9%) 1252.675 ops/s [Average]
[info]   (min, avg, max) = (29932.811, 30513.043, 30690.194), stdev = 325.316
[info]   CI (99.9%): [29260.368, 31765.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1593.543 ±(99.9%) 65.272 MB/sec [Average]
[info]   (min, avg, max) = (1563.332, 1593.543, 1602.904), stdev = 16.951
[info]   CI (99.9%): [1528.272, 1658.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82203.382 ±(99.9%) 27.233 B/op [Average]
[info]   (min, avg, max) = (82200.013, 82203.382, 82216.017), stdev = 7.072
[info]   CI (99.9%): [82176.149, 82230.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.041 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.041, 0.111), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.125 ±(99.9%) 10.846 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.125, 5.683), stdev = 2.817
[info]   CI (99.9%): [≈ 0, 12.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1562.411 ±(99.9%) 707.483 MB/sec [Average]
[info]   (min, avg, max) = (1361.225, 1562.411, 1701.980), stdev = 183.731
[info]   CI (99.9%): [854.928, 2269.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   80629.627 ±(99.9%) 37605.677 B/op [Average]
[info]   (min, avg, max) = (69925.593, 80629.627, 88648.068), stdev = 9766.075
[info]   CI (99.9%): [43023.951, 118235.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   42.030 ±(99.9%) 361.890 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42.030, 210.150), stdev = 93.982
[info]   CI (99.9%): [≈ 0, 403.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 17.000), stdev = 5.983
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Run progress: 33.00% complete, ETA 00:57:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 85768.115 ops/s
[info] # Warmup Iteration   2: 122630.390 ops/s
[info] # Warmup Iteration   3: 122126.535 ops/s
[info] Iteration   1: 122854.363 ops/s
[info]                  ·gc.alloc.rate:                   1514.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              19408.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.066 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        17272.451 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 42.669 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 124416.433 ops/s
[info]                  ·gc.alloc.rate:                                  1533.914 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19408.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.069 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.870 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.574 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21529.345 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 124558.640 ops/s
[info]                  ·gc.alloc.rate:            1535.789 MB/sec
[info]                  ·gc.alloc.rate.norm:       19408.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17203.154 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 124557.370 ops/s
[info]                  ·gc.alloc.rate:                                  1536.085 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19408.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.084 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.027 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21504.633 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 124505.222 ops/s
[info]                  ·gc.alloc.rate:                                  1535.257 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19408.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.401 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17210.199 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   124178.406 ±(99.9%) 2858.793 ops/s [Average]
[info]   (min, avg, max) = (122854.363, 124178.406, 124558.640), stdev = 742.419
[info]   CI (99.9%): [121319.612, 127037.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1531.157 ±(99.9%) 35.485 MB/sec [Average]
[info]   (min, avg, max) = (1514.740, 1531.157, 1536.085), stdev = 9.215
[info]   CI (99.9%): [1495.672, 1566.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19408.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19408.003, 19408.003, 19408.004), stdev = 0.001
[info]   CI (99.9%): [19408.003, 19408.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.116 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.069), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.191 ±(99.9%) 1.466 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.191, 0.870), stdev = 0.381
[info]   CI (99.9%): [≈ 0, 1.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1494.877 ±(99.9%) 727.667 MB/sec [Average]
[info]   (min, avg, max) = (1348.066, 1494.877, 1702.027), stdev = 188.973
[info]   CI (99.9%): [767.210, 2222.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   18943.956 ±(99.9%) 9045.231 B/op [Average]
[info]   (min, avg, max) = (17203.154, 18943.956, 21529.345), stdev = 2349.018
[info]   CI (99.9%): [9898.725, 27989.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   8.534 ±(99.9%) 73.479 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.534, 42.669), stdev = 19.082
[info]   CI (99.9%): [≈ 0, 82.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 14.000), stdev = 4.528
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Run progress: 33.25% complete, ETA 00:56:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 101038.667 ops/s
[info] # Warmup Iteration   2: 174924.076 ops/s
[info] # Warmup Iteration   3: 176513.597 ops/s
[info] Iteration   1: 173842.114 ops/s
[info]                  ·gc.alloc.rate:                   927.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              8400.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.989 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6084.872 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.031 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 172090.517 ops/s
[info]                  ·gc.alloc.rate:            918.725 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.409 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9229.136 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 177095.729 ops/s
[info]                  ·gc.alloc.rate:                   945.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              8400.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.619 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8956.521 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 41.438 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 178794.283 ops/s
[info]                  ·gc.alloc.rate:                                  954.365 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8400.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.081 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.710 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.307 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8989.202 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 177851.698 ops/s
[info]                  ·gc.alloc.rate:                                  949.146 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8400.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9036.196 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   175934.868 ±(99.9%) 10951.807 ops/s [Average]
[info]   (min, avg, max) = (172090.517, 175934.868, 178794.283), stdev = 2844.149
[info]   CI (99.9%): [164983.061, 186886.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   938.982 ±(99.9%) 58.232 MB/sec [Average]
[info]   (min, avg, max) = (918.725, 938.982, 954.365), stdev = 15.123
[info]   CI (99.9%): [880.750, 997.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8400.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8400.002, 8400.002, 8400.002), stdev = 0.001
[info]   CI (99.9%): [8400.002, 8400.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.138 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.081), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.144 ±(99.9%) 1.218 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.144, 0.710), stdev = 0.316
[info]   CI (99.9%): [≈ 0, 1.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   946.271 ±(99.9%) 590.920 MB/sec [Average]
[info]   (min, avg, max) = (671.989, 946.271, 1021.307), stdev = 153.460
[info]   CI (99.9%): [355.351, 1537.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   8459.185 ±(99.9%) 5127.067 B/op [Average]
[info]   (min, avg, max) = (6084.872, 8459.185, 9229.136), stdev = 1331.483
[info]   CI (99.9%): [3332.118, 13586.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.820 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   9.494 ±(99.9%) 69.494 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.494, 41.438), stdev = 18.047
[info]   CI (99.9%): [≈ 0, 78.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.200, 13.000), stdev = 5.020
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Run progress: 33.50% complete, ETA 00:56:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 244358.581 ops/s
[info] # Warmup Iteration   2: 261158.660 ops/s
[info] # Warmup Iteration   3: 270050.969 ops/s
[info] Iteration   1: 271000.419 ops/s
[info]                  ·gc.alloc.rate:            705.241 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.075 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3914.993 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 270924.376 ops/s
[info]                  ·gc.alloc.rate:            705.057 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.099 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3916.149 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 266729.643 ops/s
[info]                  ·gc.alloc.rate:            694.152 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.116 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3977.775 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 272234.152 ops/s
[info]                  ·gc.alloc.rate:            708.766 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.389 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3897.336 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 270040.098 ops/s
[info]                  ·gc.alloc.rate:                   702.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.029 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3928.879 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 19.411 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   270185.737 ±(99.9%) 8024.481 ops/s [Average]
[info]   (min, avg, max) = (266729.643, 270185.737, 272234.152), stdev = 2083.932
[info]   CI (99.9%): [262161.256, 278210.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   703.183 ±(99.9%) 21.153 MB/sec [Average]
[info]   (min, avg, max) = (694.152, 703.183, 708.766), stdev = 5.493
[info]   CI (99.9%): [682.030, 724.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   674.142 ±(99.9%) 0.548 MB/sec [Average]
[info]   (min, avg, max) = (674.029, 674.142, 674.389), stdev = 0.142
[info]   CI (99.9%): [673.594, 674.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3927.027 ±(99.9%) 117.483 B/op [Average]
[info]   (min, avg, max) = (3897.336, 3927.027, 3977.775), stdev = 30.510
[info]   CI (99.9%): [3809.543, 4044.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   3.882 ±(99.9%) 33.428 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.882, 19.411), stdev = 8.681
[info]   CI (99.9%): [≈ 0, 37.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Run progress: 33.75% complete, ETA 00:56:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25413.481 ops/s
[info] # Warmup Iteration   2: 63726.114 ops/s
[info] # Warmup Iteration   3: 64766.021 ops/s
[info] Iteration   1: 66222.130 ops/s
[info]                  ·gc.alloc.rate:                                  2796.178 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66464.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.198 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.793 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64719.682 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 65804.300 ops/s
[info]                  ·gc.alloc.rate:                                  2779.494 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66464.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.251 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.654 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65128.746 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 66007.200 ops/s
[info]                  ·gc.alloc.rate:                                  2787.231 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66464.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.196 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.868 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73036.803 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 66584.732 ops/s
[info]                  ·gc.alloc.rate:                                  2811.238 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66464.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.148 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.578 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64367.876 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 66488.578 ops/s
[info]                  ·gc.alloc.rate:                                  2807.914 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66464.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.186 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.161 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64457.891 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   66221.388 ±(99.9%) 1252.568 ops/s [Average]
[info]   (min, avg, max) = (65804.300, 66221.388, 66584.732), stdev = 325.288
[info]   CI (99.9%): [64968.820, 67473.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2796.411 ±(99.9%) 51.758 MB/sec [Average]
[info]   (min, avg, max) = (2779.494, 2796.411, 2811.238), stdev = 13.441
[info]   CI (99.9%): [2744.653, 2848.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66464.006 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (66464.006, 66464.006, 66464.007), stdev = 0.001
[info]   CI (99.9%): [66464.005, 66464.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (0.006, 0.008, 0.010), stdev = 0.002
[info]   CI (99.9%): [0.002, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.196 ±(99.9%) 0.142 B/op [Average]
[info]   (min, avg, max) = (0.148, 0.196, 0.251), stdev = 0.037
[info]   CI (99.9%): [0.054, 0.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2791.011 ±(99.9%) 585.195 MB/sec [Average]
[info]   (min, avg, max) = (2722.578, 2791.011, 3062.868), stdev = 151.973
[info]   CI (99.9%): [2205.816, 3376.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   66342.200 ±(99.9%) 14455.479 B/op [Average]
[info]   (min, avg, max) = (64367.876, 66342.200, 73036.803), stdev = 3754.042
[info]   CI (99.9%): [51886.721, 80797.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   41.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.000, 9.000), stdev = 0.707
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Run progress: 34.01% complete, ETA 00:56:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 125528.437 ops/s
[info] # Warmup Iteration   2: 164504.507 ops/s
[info] # Warmup Iteration   3: 166385.209 ops/s
[info] Iteration   1: 165656.338 ops/s
[info]                  ·gc.alloc.rate:            830.312 MB/sec
[info]                  ·gc.alloc.rate.norm:       7888.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.259 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9607.016 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 166515.795 ops/s
[info]                  ·gc.alloc.rate:            834.399 MB/sec
[info]                  ·gc.alloc.rate.norm:       7888.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.977 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6371.452 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 165330.777 ops/s
[info]                  ·gc.alloc.rate:            828.484 MB/sec
[info]                  ·gc.alloc.rate.norm:       7888.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.992 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9625.664 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 165612.259 ops/s
[info]                  ·gc.alloc.rate:                   829.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              7888.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6406.417 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 31.652 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 167298.946 ops/s
[info]                  ·gc.alloc.rate:                                  838.744 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7888.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.156 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.471 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.500 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9606.740 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   166082.823 ±(99.9%) 3125.500 ops/s [Average]
[info]   (min, avg, max) = (165330.777, 166082.823, 167298.946), stdev = 811.682
[info]   CI (99.9%): [162957.323, 169208.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   832.376 ±(99.9%) 16.106 MB/sec [Average]
[info]   (min, avg, max) = (828.484, 832.376, 838.744), stdev = 4.183
[info]   CI (99.9%): [816.270, 848.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7888.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7888.002, 7888.003, 7888.003), stdev = 0.001
[info]   CI (99.9%): [7888.002, 7888.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.269 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.156), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.294 ±(99.9%) 2.533 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.294, 1.471), stdev = 0.658
[info]   CI (99.9%): [≈ 0, 2.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   878.357 ±(99.9%) 718.472 MB/sec [Average]
[info]   (min, avg, max) = (673.977, 878.357, 1021.500), stdev = 186.585
[info]   CI (99.9%): [159.885, 1596.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8323.458 ±(99.9%) 6800.353 B/op [Average]
[info]   (min, avg, max) = (6371.452, 8323.458, 9625.664), stdev = 1766.030
[info]   CI (99.9%): [1523.105, 15123.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   6.330 ±(99.9%) 54.507 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.330, 31.652), stdev = 14.155
[info]   CI (99.9%): [≈ 0, 60.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 10.000), stdev = 2.881
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Run progress: 34.26% complete, ETA 00:55:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 312079.746 ops/s
[info] # Warmup Iteration   2: 515764.863 ops/s
[info] # Warmup Iteration   3: 539618.908 ops/s
[info] Iteration   1: 524556.294 ops/s
[info]                  ·gc.alloc.rate:                   530.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.656 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1007.251 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.999 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 515174.332 ops/s
[info]                  ·gc.alloc.rate:                   521.011 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2053.362 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.035 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 521148.151 ops/s
[info]                  ·gc.alloc.rate:            527.266 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.469 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1015.918 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 517861.197 ops/s
[info]                  ·gc.alloc.rate:            523.797 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2044.588 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 512590.173 ops/s
[info]                  ·gc.alloc.rate:            518.440 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.340 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1032.818 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   518266.029 ±(99.9%) 18246.110 ops/s [Average]
[info]   (min, avg, max) = (512590.173, 518266.029, 524556.294), stdev = 4738.457
[info]   CI (99.9%): [500019.920, 536512.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   524.206 ±(99.9%) 18.551 MB/sec [Average]
[info]   (min, avg, max) = (518.440, 524.206, 530.518), stdev = 4.818
[info]   CI (99.9%): [505.656, 542.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.001, 1592.001), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   470.634 ±(99.9%) 709.071 MB/sec [Average]
[info]   (min, avg, max) = (335.656, 470.634, 672.706), stdev = 184.144
[info]   CI (99.9%): [≈ 0, 1179.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1430.787 ±(99.9%) 2173.338 B/op [Average]
[info]   (min, avg, max) = (1007.251, 1430.787, 2053.362), stdev = 564.409
[info]   CI (99.9%): [≈ 0, 3604.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.807 ±(99.9%) 4.254 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.807, 2.035), stdev = 1.105
[info]   CI (99.9%): [≈ 0, 5.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 9.000), stdev = 2.739
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Run progress: 34.51% complete, ETA 00:55:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 487078.189 ops/s
[info] # Warmup Iteration   2: 548657.898 ops/s
[info] # Warmup Iteration   3: 536937.695 ops/s
[info] Iteration   1: 551722.942 ops/s
[info]                  ·gc.alloc.rate:            423.407 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.331 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 959.568 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 548936.844 ops/s
[info]                  ·gc.alloc.rate:            421.205 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.595 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1928.979 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 545448.979 ops/s
[info]                  ·gc.alloc.rate:                   418.583 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        970.644 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.922 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 545217.615 ops/s
[info]                  ·gc.alloc.rate:            418.414 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.009 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 972.976 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 550865.526 ops/s
[info]                  ·gc.alloc.rate:            422.741 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 961.038 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   548438.381 ±(99.9%) 11590.007 ops/s [Average]
[info]   (min, avg, max) = (545217.615, 548438.381, 551722.942), stdev = 3009.888
[info]   CI (99.9%): [536848.374, 560028.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   420.870 ±(99.9%) 8.888 MB/sec [Average]
[info]   (min, avg, max) = (418.414, 420.870, 423.407), stdev = 2.308
[info]   CI (99.9%): [411.982, 429.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   403.717 ±(99.9%) 578.779 MB/sec [Average]
[info]   (min, avg, max) = (336.316, 403.717, 672.595), stdev = 150.307
[info]   CI (99.9%): [≈ 0, 982.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1158.641 ±(99.9%) 1658.364 B/op [Average]
[info]   (min, avg, max) = (959.568, 1158.641, 1928.979), stdev = 430.672
[info]   CI (99.9%): [≈ 0, 2817.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.384 ±(99.9%) 3.310 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.384, 1.922), stdev = 0.860
[info]   CI (99.9%): [≈ 0, 3.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 34.76% complete, ETA 00:55:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 485484.501 ops/s
[info] # Warmup Iteration   2: 538733.141 ops/s
[info] # Warmup Iteration   3: 540480.709 ops/s
[info] Iteration   1: 539937.570 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 540395.553 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 540409.449 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 531770.143 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 540951.501 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   538692.843 ±(99.9%) 14965.663 ops/s [Average]
[info]   (min, avg, max) = (531770.143, 538692.843, 540951.501), stdev = 3886.535
[info]   CI (99.9%): [523727.181, 553658.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Run progress: 35.01% complete, ETA 00:55:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 146585.150 ops/s
[info] # Warmup Iteration   2: 262636.860 ops/s
[info] # Warmup Iteration   3: 277024.238 ops/s
[info] Iteration   1: 271504.138 ops/s
[info]                  ·gc.alloc.rate:                   745.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              4320.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.499 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3892.540 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.862 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 278753.311 ops/s
[info]                  ·gc.alloc.rate:            765.040 MB/sec
[info]                  ·gc.alloc.rate.norm:       4320.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.451 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5694.490 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   3: 280472.244 ops/s
[info]                  ·gc.alloc.rate:            769.677 MB/sec
[info]                  ·gc.alloc.rate.norm:       4320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3768.091 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 274366.742 ops/s
[info]                  ·gc.alloc.rate:            753.155 MB/sec
[info]                  ·gc.alloc.rate.norm:       4320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.528 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3851.800 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 269316.475 ops/s
[info]                  ·gc.alloc.rate:                   739.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              4320.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.304 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3946.932 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 27.247 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   274882.582 ±(99.9%) 18152.058 ops/s [Average]
[info]   (min, avg, max) = (269316.475, 274882.582, 280472.244), stdev = 4714.032
[info]   CI (99.9%): [256730.524, 293034.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   754.449 ±(99.9%) 49.652 MB/sec [Average]
[info]   (min, avg, max) = (739.135, 754.449, 769.677), stdev = 12.894
[info]   CI (99.9%): [704.797, 804.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4320.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4320.001, 4320.002, 4320.002), stdev = 0.001
[info]   CI (99.9%): [4320.001, 4320.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   739.625 ±(99.9%) 578.704 MB/sec [Average]
[info]   (min, avg, max) = (671.345, 739.625, 1008.451), stdev = 150.288
[info]   CI (99.9%): [160.922, 1318.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4230.770 ±(99.9%) 3160.773 B/op [Average]
[info]   (min, avg, max) = (3768.091, 4230.770, 5694.490), stdev = 820.843
[info]   CI (99.9%): [1069.998, 7391.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.820 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   6.222 ±(99.9%) 45.714 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.222, 27.247), stdev = 11.872
[info]   CI (99.9%): [≈ 0, 51.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 9.600, 14.000), stdev = 2.881
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Run progress: 35.26% complete, ETA 00:55:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6149.261 ops/s
[info] # Warmup Iteration   2: 8669.521 ops/s
[info] # Warmup Iteration   3: 8741.948 ops/s
[info] Iteration   1: 8695.515 ops/s
[info]                  ·gc.alloc.rate:                   1111.877 MB/sec
[info]                  ·gc.alloc.rate.norm:              201264.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.647 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        183121.056 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 120.554 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 8502.833 ops/s
[info]                  ·gc.alloc.rate:                   1087.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              201264.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.077 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        187175.255 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 123.304 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 8542.065 ops/s
[info]                  ·gc.alloc.rate:                                  1092.262 MB/sec
[info]                  ·gc.alloc.rate.norm:                             201264.048 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.026 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.801 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1018.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       187648.959 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                490.906 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 8666.879 ops/s
[info]                  ·gc.alloc.rate:                                  1108.259 MB/sec
[info]                  ·gc.alloc.rate.norm:                             201264.047 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.932 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       247236.053 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 8922.309 ops/s
[info]                  ·gc.alloc.rate:            1141.078 MB/sec
[info]                  ·gc.alloc.rate.norm:       201273.868 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.085 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 180108.348 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   8665.920 ±(99.9%) 634.333 ops/s [Average]
[info]   (min, avg, max) = (8502.833, 8665.920, 8922.309), stdev = 164.734
[info]   CI (99.9%): [8031.588, 9300.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1108.131 ±(99.9%) 81.463 MB/sec [Average]
[info]   (min, avg, max) = (1087.181, 1108.131, 1141.078), stdev = 21.156
[info]   CI (99.9%): [1026.668, 1189.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   201266.012 ±(99.9%) 16.910 B/op [Average]
[info]   (min, avg, max) = (201264.047, 201266.012, 201273.868), stdev = 4.391
[info]   CI (99.9%): [201249.102, 201282.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.026), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.147 ±(99.9%) 8.019 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.147, 4.801), stdev = 2.083
[info]   CI (99.9%): [≈ 0, 9.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1084.717 ±(99.9%) 595.818 MB/sec [Average]
[info]   (min, avg, max) = (1011.077, 1084.717, 1361.403), stdev = 154.732
[info]   CI (99.9%): [488.899, 1680.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   197057.934 ±(99.9%) 108666.728 B/op [Average]
[info]   (min, avg, max) = (180108.348, 197057.934, 247236.053), stdev = 28220.404
[info]   CI (99.9%): [88391.207, 305724.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 4.214 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 2.664), stdev = 1.094
[info]   CI (99.9%): [≈ 0, 5.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   146.953 ±(99.9%) 776.720 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 146.953, 490.906), stdev = 201.712
[info]   CI (99.9%): [≈ 0, 923.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 10.000), stdev = 3.507
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Run progress: 35.52% complete, ETA 00:54:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4644.801 ops/s
[info] # Warmup Iteration   2: 8625.439 ops/s
[info] # Warmup Iteration   3: 9152.543 ops/s
[info] Iteration   1: 9107.433 ops/s
[info]                  ·gc.alloc.rate:                   1079.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              186576.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.792 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        232275.123 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 230.203 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 9024.396 ops/s
[info]                  ·gc.alloc.rate:            1069.686 MB/sec
[info]                  ·gc.alloc.rate.norm:       186576.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.950 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 175982.346 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 8937.076 ops/s
[info]                  ·gc.alloc.rate:                                  1059.420 MB/sec
[info]                  ·gc.alloc.rate.norm:                             186576.046 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.101 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 17.799 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.097 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       179122.447 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                703.821 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 9228.723 ops/s
[info]                  ·gc.alloc.rate:            1093.912 MB/sec
[info]                  ·gc.alloc.rate.norm:       186576.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.096 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 174156.772 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 9260.492 ops/s
[info]                  ·gc.alloc.rate:                                  1097.729 MB/sec
[info]                  ·gc.alloc.rate.norm:                             186576.044 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.523 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.120 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       173555.065 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   9111.624 ±(99.9%) 523.627 ops/s [Average]
[info]   (min, avg, max) = (8937.076, 9111.624, 9260.492), stdev = 135.984
[info]   CI (99.9%): [8587.997, 9635.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1080.031 ±(99.9%) 62.033 MB/sec [Average]
[info]   (min, avg, max) = (1059.420, 1080.031, 1097.729), stdev = 16.110
[info]   CI (99.9%): [1017.998, 1142.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   186576.045 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (186576.044, 186576.045, 186576.048), stdev = 0.001
[info]   CI (99.9%): [186576.040, 186576.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.173 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.101), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.664 ±(99.9%) 30.438 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.664, 17.799), stdev = 7.905
[info]   CI (99.9%): [≈ 0, 34.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1082.411 ±(99.9%) 562.967 MB/sec [Average]
[info]   (min, avg, max) = (1008.950, 1082.411, 1343.792), stdev = 146.201
[info]   CI (99.9%): [519.444, 1645.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   187018.351 ±(99.9%) 97775.166 B/op [Average]
[info]   (min, avg, max) = (173555.065, 187018.351, 232275.123), stdev = 25391.900
[info]   CI (99.9%): [89243.184, 284793.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   186.805 ±(99.9%) 1177.248 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 186.805, 703.821), stdev = 305.728
[info]   CI (99.9%): [≈ 0, 1364.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 17.000), stdev = 6.229
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 35.77% complete, ETA 00:54:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 136813.432 ops/s
[info] # Warmup Iteration   2: 152344.845 ops/s
[info] # Warmup Iteration   3: 152385.772 ops/s
[info] Iteration   1: 153790.412 ops/s
[info]                  ·gc.alloc.rate:            1000.418 MB/sec
[info]                  ·gc.alloc.rate.norm:       10240.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1013.046 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10369.251 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 153441.567 ops/s
[info]                  ·gc.alloc.rate:            998.504 MB/sec
[info]                  ·gc.alloc.rate.norm:       10240.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1013.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10392.426 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 153512.695 ops/s
[info]                  ·gc.alloc.rate:                                  998.744 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10240.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.277 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1015.807 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10414.938 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                27.318 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 154695.379 ops/s
[info]                  ·gc.alloc.rate:                                  1006.734 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10240.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.015 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.148 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.480 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10389.993 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 154702.956 ops/s
[info]                  ·gc.alloc.rate:                                  1006.342 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10240.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10389.322 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   154028.602 ±(99.9%) 2410.000 ops/s [Average]
[info]   (min, avg, max) = (153441.567, 154028.602, 154702.956), stdev = 625.869
[info]   CI (99.9%): [151618.601, 156438.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1002.149 ±(99.9%) 15.697 MB/sec [Average]
[info]   (min, avg, max) = (998.504, 1002.149, 1006.734), stdev = 4.077
[info]   CI (99.9%): [986.451, 1017.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10240.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10240.003, 10240.003, 10240.003), stdev = 0.001
[info]   CI (99.9%): [10240.002, 10240.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.046 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.027), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.087 ±(99.9%) 0.474 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.087, 0.277), stdev = 0.123
[info]   CI (99.9%): [≈ 0, 0.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1016.943 ±(99.9%) 15.694 MB/sec [Average]
[info]   (min, avg, max) = (1013.046, 1016.943, 1021.480), stdev = 4.076
[info]   CI (99.9%): [1001.249, 1032.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   10391.186 ±(99.9%) 62.440 B/op [Average]
[info]   (min, avg, max) = (10369.251, 10391.186, 10414.938), stdev = 16.215
[info]   CI (99.9%): [10328.746, 10453.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.664), stdev = 1.192
[info]   CI (99.9%): [≈ 0, 5.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   5.464 ±(99.9%) 47.043 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.464, 27.318), stdev = 12.217
[info]   CI (99.9%): [≈ 0, 52.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 9.000), stdev = 3.114
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Run progress: 36.02% complete, ETA 00:54:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3608.405 ops/s
[info] # Warmup Iteration   2: 6808.935 ops/s
[info] # Warmup Iteration   3: 7050.098 ops/s
[info] Iteration   1: 6878.224 ops/s
[info]                  ·gc.alloc.rate:            1281.175 MB/sec
[info]                  ·gc.alloc.rate.norm:       293096.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.740 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 307866.791 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 7068.684 ops/s
[info]                  ·gc.alloc.rate:                                  1316.302 MB/sec
[info]                  ·gc.alloc.rate.norm:                             293096.058 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.072 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 15.941 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.474 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       301372.904 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                889.881 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 7071.406 ops/s
[info]                  ·gc.alloc.rate:                                  1316.872 MB/sec
[info]                  ·gc.alloc.rate.norm:                             293096.062 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.855 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.478 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       303024.084 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 6995.219 ops/s
[info]                  ·gc.alloc.rate:                                  1302.565 MB/sec
[info]                  ·gc.alloc.rate.norm:                             293096.063 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.114 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.314 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       306315.470 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 6990.619 ops/s
[info]                  ·gc.alloc.rate:                                  1301.708 MB/sec
[info]                  ·gc.alloc.rate.norm:                             293096.058 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.590 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.898 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       229868.012 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   7000.830 ±(99.9%) 302.915 ops/s [Average]
[info]   (min, avg, max) = (6878.224, 7000.830, 7071.406), stdev = 78.666
[info]   CI (99.9%): [6697.916, 7303.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1303.724 ±(99.9%) 55.965 MB/sec [Average]
[info]   (min, avg, max) = (1281.175, 1303.724, 1316.872), stdev = 14.534
[info]   CI (99.9%): [1247.759, 1359.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   293096.061 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (293096.058, 293096.061, 293096.064), stdev = 0.003
[info]   CI (99.9%): [293096.050, 293096.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.120 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.072), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.500 ±(99.9%) 26.814 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.500, 15.941), stdev = 6.963
[info]   CI (99.9%): [≈ 0, 30.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1288.581 ±(99.9%) 576.751 MB/sec [Average]
[info]   (min, avg, max) = (1020.898, 1288.581, 1361.478), stdev = 149.780
[info]   CI (99.9%): [711.830, 1865.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   289689.452 ±(99.9%) 129151.083 B/op [Average]
[info]   (min, avg, max) = (229868.012, 289689.452, 307866.791), stdev = 33540.126
[info]   CI (99.9%): [160538.369, 418840.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   177.976 ±(99.9%) 1532.428 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 177.976, 889.881), stdev = 397.967
[info]   CI (99.9%): [≈ 0, 1710.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 17.000), stdev = 6.058
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Run progress: 36.27% complete, ETA 00:54:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15890.434 ops/s
[info] # Warmup Iteration   2: 21759.112 ops/s
[info] # Warmup Iteration   3: 22164.624 ops/s
[info] Iteration   1: 22420.090 ops/s
[info]                  ·gc.alloc.rate:            1021.953 MB/sec
[info]                  ·gc.alloc.rate.norm:       71755.416 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70986.860 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 22370.638 ops/s
[info]                  ·gc.alloc.rate:            1019.872 MB/sec
[info]                  ·gc.alloc.rate.norm:       71760.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.093 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71142.324 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 22411.769 ops/s
[info]                  ·gc.alloc.rate:                                  1021.822 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71739.486 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.024 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.707 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.795 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71246.096 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                233.901 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 22335.387 ops/s
[info]                  ·gc.alloc.rate:                                  1017.901 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71736.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.034 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.413 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71957.877 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 22735.760 ops/s
[info]                  ·gc.alloc.rate:            1036.411 MB/sec
[info]                  ·gc.alloc.rate.norm:       71736.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.239 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70685.854 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   22454.729 ±(99.9%) 618.917 ops/s [Average]
[info]   (min, avg, max) = (22335.387, 22454.729, 22735.760), stdev = 160.731
[info]   CI (99.9%): [21835.812, 23073.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1023.592 ±(99.9%) 28.320 MB/sec [Average]
[info]   (min, avg, max) = (1017.901, 1023.592, 1036.411), stdev = 7.355
[info]   CI (99.9%): [995.272, 1051.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   71745.393 ±(99.9%) 44.119 B/op [Average]
[info]   (min, avg, max) = (71736.019, 71745.393, 71760.023), stdev = 11.458
[info]   CI (99.9%): [71701.274, 71789.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.063 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.034), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.824 ±(99.9%) 4.451 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.824, 2.413), stdev = 1.156
[info]   CI (99.9%): [≈ 0, 5.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1015.837 ±(99.9%) 19.565 MB/sec [Average]
[info]   (min, avg, max) = (1011.007, 1015.837, 1021.239), stdev = 5.081
[info]   CI (99.9%): [996.272, 1035.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   71203.802 ±(99.9%) 1815.866 B/op [Average]
[info]   (min, avg, max) = (70685.854, 71203.802, 71957.877), stdev = 471.575
[info]   CI (99.9%): [69387.936, 73019.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.332), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   46.780 ±(99.9%) 402.791 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.780, 233.901), stdev = 104.603
[info]   CI (99.9%): [≈ 0, 449.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 10.000), stdev = 3.834
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Run progress: 36.52% complete, ETA 00:54:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15939.716 ops/s
[info] # Warmup Iteration   2: 25116.620 ops/s
[info] # Warmup Iteration   3: 25996.031 ops/s
[info] Iteration   1: 25884.273 ops/s
[info]                  ·gc.alloc.rate:                   995.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.245 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        61321.181 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 40.503 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 25670.574 ops/s
[info]                  ·gc.alloc.rate:            987.810 MB/sec
[info]                  ·gc.alloc.rate.norm:       60552.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61873.131 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 26074.537 ops/s
[info]                  ·gc.alloc.rate:                                  1003.327 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60552.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.107 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.439 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1012.628 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       61113.325 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                281.443 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 26136.078 ops/s
[info]                  ·gc.alloc.rate:                                  1005.569 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60552.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.058 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.509 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.143 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       61489.825 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 25798.726 ops/s
[info]                  ·gc.alloc.rate:                                  992.599 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60552.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.080 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.176 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       62295.265 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   25912.838 ±(99.9%) 741.966 ops/s [Average]
[info]   (min, avg, max) = (25670.574, 25912.838, 26136.078), stdev = 192.686
[info]   CI (99.9%): [25170.872, 26654.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   996.981 ±(99.9%) 28.508 MB/sec [Average]
[info]   (min, avg, max) = (987.810, 996.981, 1005.569), stdev = 7.403
[info]   CI (99.9%): [968.473, 1025.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   60552.017 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (60552.016, 60552.017, 60552.021), stdev = 0.002
[info]   CI (99.9%): [60552.007, 60552.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.033 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.107), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.006 ±(99.9%) 11.172 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.006, 6.439), stdev = 2.901
[info]   CI (99.9%): [≈ 0, 13.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1014.511 ±(99.9%) 24.180 MB/sec [Average]
[info]   (min, avg, max) = (1008.245, 1014.511, 1021.176), stdev = 6.279
[info]   CI (99.9%): [990.331, 1038.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   61618.545 ±(99.9%) 1809.193 B/op [Average]
[info]   (min, avg, max) = (61113.325, 61618.545, 62295.265), stdev = 469.842
[info]   CI (99.9%): [59809.353, 63427.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.823 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.032
[info]   CI (99.9%): [≈ 0, 8.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   64.389 ±(99.9%) 472.080 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 64.389, 281.443), stdev = 122.598
[info]   CI (99.9%): [≈ 0, 536.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.200, 13.000), stdev = 4.868
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 36.78% complete, ETA 00:53:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 602440.127 ops/s
[info] # Warmup Iteration   2: 704870.325 ops/s
[info] # Warmup Iteration   3: 711558.392 ops/s
[info] Iteration   1: 707510.960 ops/s
[info]                  ·gc.alloc.rate:            1276.500 MB/sec
[info]                  ·gc.alloc.rate.norm:       2840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.323 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2993.120 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 710669.193 ops/s
[info]                  ·gc.alloc.rate:                                  1282.260 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2840.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.113 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.251 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.445 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2997.664 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                8.851 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 705088.122 ops/s
[info]                  ·gc.alloc.rate:                                  1272.170 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2840.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.426 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3039.256 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 715288.938 ops/s
[info]                  ·gc.alloc.rate:            1290.537 MB/sec
[info]                  ·gc.alloc.rate.norm:       2840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.395 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2995.931 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 714130.029 ops/s
[info]                  ·gc.alloc.rate:            1288.489 MB/sec
[info]                  ·gc.alloc.rate.norm:       2840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2250.538 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   710537.448 ±(99.9%) 16601.974 ops/s [Average]
[info]   (min, avg, max) = (705088.122, 710537.448, 715288.938), stdev = 4311.480
[info]   CI (99.9%): [693935.474, 727139.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1281.991 ±(99.9%) 29.947 MB/sec [Average]
[info]   (min, avg, max) = (1272.170, 1281.991, 1290.537), stdev = 7.777
[info]   CI (99.9%): [1252.044, 1311.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2840.001, 2840.001, 2840.001), stdev = 0.001
[info]   CI (99.9%): [2840.000, 2840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.113), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.055 ±(99.9%) 0.423 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.055, 0.251), stdev = 0.110
[info]   CI (99.9%): [≈ 0, 0.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1288.529 ±(99.9%) 576.331 MB/sec [Average]
[info]   (min, avg, max) = (1021.054, 1288.529, 1361.426), stdev = 149.671
[info]   CI (99.9%): [712.198, 1864.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2855.302 ±(99.9%) 1303.851 B/op [Average]
[info]   (min, avg, max) = (2250.538, 2855.302, 3039.256), stdev = 338.606
[info]   CI (99.9%): [1551.451, 4159.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.770 ±(99.9%) 15.243 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.770, 8.851), stdev = 3.958
[info]   CI (99.9%): [≈ 0, 17.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 12.000), stdev = 4.147
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 37.03% complete, ETA 00:53:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 695957.404 ops/s
[info] # Warmup Iteration   2: 793196.219 ops/s
[info] # Warmup Iteration   3: 796157.630 ops/s
[info] Iteration   1: 795812.408 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 795843.637 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 796001.449 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 772690.127 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 796153.231 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   791300.170 ±(99.9%) 40062.953 ops/s [Average]
[info]   (min, avg, max) = (772690.127, 791300.170, 796153.231), stdev = 10404.222
[info]   CI (99.9%): [751237.218, 831363.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻³, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Run progress: 37.28% complete, ETA 00:53:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16136.222 ops/s
[info] # Warmup Iteration   2: 23444.445 ops/s
[info] # Warmup Iteration   3: 23680.347 ops/s
[info] Iteration   1: 23674.189 ops/s
[info]                  ·gc.alloc.rate:            999.467 MB/sec
[info]                  ·gc.alloc.rate.norm:       66432.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.389 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 67091.504 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 23681.545 ops/s
[info]                  ·gc.alloc.rate:            999.723 MB/sec
[info]                  ·gc.alloc.rate.norm:       66431.234 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.319 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 67068.844 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 23485.691 ops/s
[info]                  ·gc.alloc.rate:                   991.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              66416.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.882 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        45085.643 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 267.836 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 23782.118 ops/s
[info]                  ·gc.alloc.rate:                                  1003.594 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66416.018 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.067 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.419 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.189 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67580.384 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 23922.129 ops/s
[info]                  ·gc.alloc.rate:                                  1009.644 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66416.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.290 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67182.138 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   23709.134 ±(99.9%) 616.713 ops/s [Average]
[info]   (min, avg, max) = (23485.691, 23709.134, 23922.129), stdev = 160.158
[info]   CI (99.9%): [23092.422, 24325.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1000.731 ±(99.9%) 25.871 MB/sec [Average]
[info]   (min, avg, max) = (991.228, 1000.731, 1009.644), stdev = 6.719
[info]   CI (99.9%): [974.861, 1026.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66422.261 ±(99.9%) 32.937 B/op [Average]
[info]   (min, avg, max) = (66416.017, 66422.261, 66432.019), stdev = 8.554
[info]   CI (99.9%): [66389.324, 66455.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.115 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.067), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.885 ±(99.9%) 7.608 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.885, 4.419), stdev = 1.976
[info]   CI (99.9%): [≈ 0, 8.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   946.814 ±(99.9%) 590.102 MB/sec [Average]
[info]   (min, avg, max) = (672.882, 946.814, 1021.290), stdev = 153.248
[info]   CI (99.9%): [356.712, 1536.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   62801.703 ±(99.9%) 38143.425 B/op [Average]
[info]   (min, avg, max) = (45085.643, 62801.703, 67580.384), stdev = 9905.726
[info]   CI (99.9%): [24658.278, 100945.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   53.567 ±(99.9%) 461.229 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 53.567, 267.836), stdev = 119.780
[info]   CI (99.9%): [≈ 0, 514.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.600, 12.000), stdev = 4.561
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Run progress: 37.53% complete, ETA 00:53:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15956.254 ops/s
[info] # Warmup Iteration   2: 23430.421 ops/s
[info] # Warmup Iteration   3: 23572.908 ops/s
[info] Iteration   1: 23675.222 ops/s
[info]                  ·gc.alloc.rate:            1285.344 MB/sec
[info]                  ·gc.alloc.rate.norm:       85440.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.244 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 89621.123 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 24207.973 ops/s
[info]                  ·gc.alloc.rate:                                  1314.253 MB/sec
[info]                  ·gc.alloc.rate.norm:                             85440.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.039 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.553 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.539 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65955.530 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                216.532 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 23853.307 ops/s
[info]                  ·gc.alloc.rate:                                  1294.797 MB/sec
[info]                  ·gc.alloc.rate.norm:                             85440.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.018 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.179 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.348 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       89831.483 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 24331.383 ops/s
[info]                  ·gc.alloc.rate:            1320.752 MB/sec
[info]                  ·gc.alloc.rate.norm:       85440.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.419 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 88070.732 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 24338.584 ops/s
[info]                  ·gc.alloc.rate:                                  1321.188 MB/sec
[info]                  ·gc.alloc.rate.norm:                             85440.018 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.264 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.476 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       88045.407 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   24081.294 ±(99.9%) 1157.858 ops/s [Average]
[info]   (min, avg, max) = (23675.222, 24081.294, 24338.584), stdev = 300.692
[info]   CI (99.9%): [22923.436, 25239.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1307.267 ±(99.9%) 62.701 MB/sec [Average]
[info]   (min, avg, max) = (1285.344, 1307.267, 1321.188), stdev = 16.283
[info]   CI (99.9%): [1244.566, 1369.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   85440.018 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (85440.017, 85440.018, 85440.022), stdev = 0.002
[info]   CI (99.9%): [85440.009, 85440.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.065 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.039), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.799 ±(99.9%) 4.212 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 2.553), stdev = 1.094
[info]   CI (99.9%): [≈ 0, 5.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1289.405 ±(99.9%) 592.078 MB/sec [Average]
[info]   (min, avg, max) = (1014.539, 1289.405, 1361.476), stdev = 153.761
[info]   CI (99.9%): [697.327, 1881.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   84304.855 ±(99.9%) 39629.731 B/op [Average]
[info]   (min, avg, max) = (65955.530, 84304.855, 89831.483), stdev = 10291.715
[info]   CI (99.9%): [44675.124, 123934.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   43.306 ±(99.9%) 372.881 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 43.306, 216.532), stdev = 96.836
[info]   CI (99.9%): [≈ 0, 416.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 13.000), stdev = 4.324
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Run progress: 37.78% complete, ETA 00:52:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14904.003 ops/s
[info] # Warmup Iteration   2: 26357.157 ops/s
[info] # Warmup Iteration   3: 26547.328 ops/s
[info] Iteration   1: 27195.301 ops/s
[info]                  ·gc.alloc.rate:                   1242.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              71888.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.847 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        58327.040 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 77.101 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 26624.517 ops/s
[info]                  ·gc.alloc.rate:                                  1215.785 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71889.046 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.095 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.626 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1349.206 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79778.248 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                236.263 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   3: 27487.529 ops/s
[info]                  ·gc.alloc.rate:                                  1255.405 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71888.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.015 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.836 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.450 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       77960.474 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 26737.852 ops/s
[info]                  ·gc.alloc.rate:                                  1221.395 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71888.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.104 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.249 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       60107.954 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 27474.234 ops/s
[info]                  ·gc.alloc.rate:            1254.836 MB/sec
[info]                  ·gc.alloc.rate.norm:       71888.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.477 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 77997.356 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   27103.886 ±(99.9%) 1559.952 ops/s [Average]
[info]   (min, avg, max) = (26624.517, 27103.886, 27487.529), stdev = 405.115
[info]   CI (99.9%): [25543.934, 28663.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1237.918 ±(99.9%) 71.340 MB/sec [Average]
[info]   (min, avg, max) = (1215.785, 1237.918, 1255.405), stdev = 18.527
[info]   CI (99.9%): [1166.578, 1309.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   71888.221 ±(99.9%) 1.776 B/op [Average]
[info]   (min, avg, max) = (71888.015, 71888.221, 71889.046), stdev = 0.461
[info]   CI (99.9%): [71886.445, 71889.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.159 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.095), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.313 ±(99.9%) 9.381 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.313, 5.626), stdev = 2.436
[info]   CI (99.9%): [≈ 0, 10.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1220.246 ±(99.9%) 723.544 MB/sec [Average]
[info]   (min, avg, max) = (1007.847, 1220.246, 1361.477), stdev = 187.902
[info]   CI (99.9%): [496.702, 1943.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   70834.214 ±(99.9%) 41004.024 B/op [Average]
[info]   (min, avg, max) = (58327.040, 70834.214, 79778.248), stdev = 10648.615
[info]   CI (99.9%): [29830.190, 111838.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   62.673 ±(99.9%) 395.163 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 62.673, 236.263), stdev = 102.622
[info]   CI (99.9%): [≈ 0, 457.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 15.000), stdev = 5.683
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Run progress: 38.04% complete, ETA 00:52:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 247328.371 ops/s
[info] # Warmup Iteration   2: 263024.498 ops/s
[info] # Warmup Iteration   3: 273820.216 ops/s
[info] Iteration   1: 274692.880 ops/s
[info]                  ·gc.alloc.rate:            714.729 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.293 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3870.002 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 272480.976 ops/s
[info]                  ·gc.alloc.rate:            708.965 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.299 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3901.499 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 263056.672 ops/s
[info]                  ·gc.alloc.rate:            684.475 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.307 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4041.139 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 266009.488 ops/s
[info]                  ·gc.alloc.rate:            692.255 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.382 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3996.167 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 266241.635 ops/s
[info]                  ·gc.alloc.rate:                   692.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.446 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3992.715 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.750 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   268496.330 ±(99.9%) 18778.804 ops/s [Average]
[info]   (min, avg, max) = (263056.672, 268496.330, 274692.880), stdev = 4876.796
[info]   CI (99.9%): [249717.526, 287275.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   698.668 ±(99.9%) 48.692 MB/sec [Average]
[info]   (min, avg, max) = (684.475, 698.668, 714.729), stdev = 12.645
[info]   CI (99.9%): [649.977, 747.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   675.345 ±(99.9%) 0.256 MB/sec [Average]
[info]   (min, avg, max) = (675.293, 675.345, 675.446), stdev = 0.067
[info]   CI (99.9%): [675.089, 675.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3960.305 ±(99.9%) 275.552 B/op [Average]
[info]   (min, avg, max) = (3870.002, 3960.305, 4041.139), stdev = 71.560
[info]   CI (99.9%): [3684.752, 4235.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.664), stdev = 1.192
[info]   CI (99.9%): [≈ 0, 5.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   3.150 ±(99.9%) 27.123 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.150, 15.750), stdev = 7.044
[info]   CI (99.9%): [≈ 0, 30.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Run progress: 38.29% complete, ETA 00:52:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7454.456 ops/s
[info] # Warmup Iteration   2: 15704.274 ops/s
[info] # Warmup Iteration   3: 15829.357 ops/s
[info] Iteration   1: 15839.896 ops/s
[info]                  ·gc.alloc.rate:                                  1630.447 MB/sec
[info]                  ·gc.alloc.rate.norm:                             162024.026 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.073 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.215 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1685.040 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       167449.175 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                463.298 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        18.000 ms
[info] Iteration   2: 16124.323 ops/s
[info]                  ·gc.alloc.rate:                                  1659.588 MB/sec
[info]                  ·gc.alloc.rate.norm:                             162025.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.835 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.487 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       166115.556 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 16178.446 ops/s
[info]                  ·gc.alloc.rate:                                  1665.241 MB/sec
[info]                  ·gc.alloc.rate.norm:                             162024.027 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.595 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       165561.221 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 15989.066 ops/s
[info]                  ·gc.alloc.rate:                                  1645.753 MB/sec
[info]                  ·gc.alloc.rate.norm:                             162024.034 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.286 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       167528.244 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 15960.133 ops/s
[info]                  ·gc.alloc.rate:            1642.934 MB/sec
[info]                  ·gc.alloc.rate.norm:       162024.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.833 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 167832.593 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   16018.373 ±(99.9%) 520.027 ops/s [Average]
[info]   (min, avg, max) = (15839.896, 16018.373, 16178.446), stdev = 135.049
[info]   CI (99.9%): [15498.345, 16538.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1648.793 ±(99.9%) 53.330 MB/sec [Average]
[info]   (min, avg, max) = (1630.447, 1648.793, 1665.241), stdev = 13.850
[info]   CI (99.9%): [1595.463, 1702.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   162024.225 ±(99.9%) 1.697 B/op [Average]
[info]   (min, avg, max) = (162024.026, 162024.225, 162025.013), stdev = 0.441
[info]   CI (99.9%): [162022.528, 162025.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.073), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.878 ±(99.9%) 11.848 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.878, 7.215), stdev = 3.077
[info]   CI (99.9%): [≈ 0, 13.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1698.323 ±(99.9%) 28.598 MB/sec [Average]
[info]   (min, avg, max) = (1685.040, 1698.323, 1701.833), stdev = 7.427
[info]   CI (99.9%): [1669.725, 1726.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   166897.358 ±(99.9%) 3837.945 B/op [Average]
[info]   (min, avg, max) = (165561.221, 166897.358, 167832.593), stdev = 996.702
[info]   CI (99.9%): [163059.413, 170735.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   92.660 ±(99.9%) 797.827 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 92.660, 463.298), stdev = 207.193
[info]   CI (99.9%): [≈ 0, 890.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 18.000), stdev = 6.058
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Run progress: 38.54% complete, ETA 00:52:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37872.864 ops/s
[info] # Warmup Iteration   2: 51460.705 ops/s
[info] # Warmup Iteration   3: 51698.316 ops/s
[info] Iteration   1: 51245.963 ops/s
[info]                  ·gc.alloc.rate:            1352.028 MB/sec
[info]                  ·gc.alloc.rate.norm:       41528.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.010 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 41404.616 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 51852.160 ops/s
[info]                  ·gc.alloc.rate:                                  1367.917 MB/sec
[info]                  ·gc.alloc.rate.norm:                             41528.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.099 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.998 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.906 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       41224.095 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                101.089 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 52608.771 ops/s
[info]                  ·gc.alloc.rate:                                  1387.899 MB/sec
[info]                  ·gc.alloc.rate.norm:                             41528.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.265 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       40733.781 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 51853.644 ops/s
[info]                  ·gc.alloc.rate:                                  1368.375 MB/sec
[info]                  ·gc.alloc.rate.norm:                             41528.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.164 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.718 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       41325.981 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 51626.124 ops/s
[info]                  ·gc.alloc.rate:                                  1362.610 MB/sec
[info]                  ·gc.alloc.rate.norm:                             41528.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.125 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.942 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       41507.656 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   51837.332 ±(99.9%) 1915.604 ops/s [Average]
[info]   (min, avg, max) = (51245.963, 51837.332, 52608.771), stdev = 497.476
[info]   CI (99.9%): [49921.728, 53752.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1367.766 ±(99.9%) 50.206 MB/sec [Average]
[info]   (min, avg, max) = (1352.028, 1367.766, 1387.899), stdev = 13.038
[info]   CI (99.9%): [1317.559, 1417.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   41528.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (41528.008, 41528.008, 41528.009), stdev = 0.001
[info]   CI (99.9%): [41528.007, 41528.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.163 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.099), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.710 ±(99.9%) 4.938 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.710, 2.998), stdev = 1.282
[info]   CI (99.9%): [≈ 0, 5.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1358.186 ±(99.9%) 22.801 MB/sec [Average]
[info]   (min, avg, max) = (1348.010, 1358.186, 1361.942), stdev = 5.921
[info]   CI (99.9%): [1335.386, 1380.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   41239.226 ±(99.9%) 1159.420 B/op [Average]
[info]   (min, avg, max) = (40733.781, 41239.226, 41507.656), stdev = 301.098
[info]   CI (99.9%): [40079.806, 42398.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   20.218 ±(99.9%) 174.081 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.218, 101.089), stdev = 45.208
[info]   CI (99.9%): [≈ 0, 194.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 13.000), stdev = 4.087
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Run progress: 38.79% complete, ETA 00:52:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60850.321 ops/s
[info] # Warmup Iteration   2: 93387.735 ops/s
[info] # Warmup Iteration   3: 93714.351 ops/s
[info] Iteration   1: 91324.844 ops/s
[info]                  ·gc.alloc.rate:                   951.837 MB/sec
[info]                  ·gc.alloc.rate.norm:              16408.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.224 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        17380.030 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 11.480 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 93344.939 ops/s
[info]                  ·gc.alloc.rate:            972.905 MB/sec
[info]                  ·gc.alloc.rate.norm:       16408.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.931 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17015.592 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 93626.947 ops/s
[info]                  ·gc.alloc.rate:                                  976.072 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16408.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.071 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.195 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.175 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17031.718 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                67.186 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 94669.515 ops/s
[info]                  ·gc.alloc.rate:                                  986.736 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16408.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.041 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.685 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.933 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16976.639 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 94316.329 ops/s
[info]                  ·gc.alloc.rate:                                  983.032 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16408.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.949 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17040.888 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   93456.515 ±(99.9%) 5019.210 ops/s [Average]
[info]   (min, avg, max) = (91324.844, 93456.515, 94669.515), stdev = 1303.473
[info]   CI (99.9%): [88437.305, 98475.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   974.116 ±(99.9%) 52.390 MB/sec [Average]
[info]   (min, avg, max) = (951.837, 974.116, 986.736), stdev = 13.605
[info]   CI (99.9%): [921.727, 1026.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   16408.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16408.004, 16408.004, 16408.005), stdev = 0.001
[info]   CI (99.9%): [16408.004, 16408.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.124 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.071), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.380 ±(99.9%) 2.086 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.380, 1.195), stdev = 0.542
[info]   CI (99.9%): [≈ 0, 2.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1014.442 ±(99.9%) 23.978 MB/sec [Average]
[info]   (min, avg, max) = (1008.224, 1014.442, 1020.949), stdev = 6.227
[info]   CI (99.9%): [990.464, 1038.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   17088.973 ±(99.9%) 633.627 B/op [Average]
[info]   (min, avg, max) = (16976.639, 17088.973, 17380.030), stdev = 164.551
[info]   CI (99.9%): [16455.346, 17722.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.689 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   15.733 ±(99.9%) 112.398 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.733, 67.186), stdev = 29.190
[info]   CI (99.9%): [≈ 0, 128.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 13.000), stdev = 4.796
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Run progress: 39.04% complete, ETA 00:51:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 994407.886 ops/s
[info] # Warmup Iteration   2: 1156206.261 ops/s
[info] # Warmup Iteration   3: 1154463.330 ops/s
[info] Iteration   1: 1149594.901 ops/s
[info]                  ·gc.alloc.rate:            1233.026 MB/sec
[info]                  ·gc.alloc.rate.norm:       1688.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.605 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1842.120 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 1155676.545 ops/s
[info]                  ·gc.alloc.rate:                                  1239.140 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1688.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.031 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1012.915 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1379.828 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                5.443 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 1164295.397 ops/s
[info]                  ·gc.alloc.rate:                                  1248.897 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1688.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.068 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.091 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.770 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1840.560 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 1141679.563 ops/s
[info]                  ·gc.alloc.rate:                                  1224.428 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1688.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.488 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1876.952 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 1137802.916 ops/s
[info]                  ·gc.alloc.rate:            1220.254 MB/sec
[info]                  ·gc.alloc.rate.norm:       1688.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.164 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1412.595 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1149809.864 ±(99.9%) 41048.812 ops/s [Average]
[info]   (min, avg, max) = (1137802.916, 1149809.864, 1164295.397), stdev = 10660.246
[info]   CI (99.9%): [1108761.052, 1190858.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1233.149 ±(99.9%) 44.166 MB/sec [Average]
[info]   (min, avg, max) = (1220.254, 1233.149, 1248.897), stdev = 11.470
[info]   CI (99.9%): [1188.983, 1277.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1688.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1688.000, 1688.000, 1688.000), stdev = 0.001
[info]   CI (99.9%): [1688.000, 1688.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.114 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.068), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.027 ±(99.9%) 0.155 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.091), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1220.588 ±(99.9%) 716.035 MB/sec [Average]
[info]   (min, avg, max) = (1012.915, 1220.588, 1361.770), stdev = 185.952
[info]   CI (99.9%): [504.553, 1936.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1670.411 ±(99.9%) 966.506 B/op [Average]
[info]   (min, avg, max) = (1379.828, 1670.411, 1876.952), stdev = 250.999
[info]   CI (99.9%): [703.905, 2636.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.089 ±(99.9%) 9.373 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.089, 5.443), stdev = 2.434
[info]   CI (99.9%): [≈ 0, 10.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 13.000), stdev = 4.472
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 39.29% complete, ETA 00:51:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1029035.383 ops/s
[info] # Warmup Iteration   2: 1156605.469 ops/s
[info] # Warmup Iteration   3: 1108128.496 ops/s
[info] Iteration   1: 1166160.844 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1166454.794 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1162086.528 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1166479.685 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1166544.457 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   1165545.262 ±(99.9%) 7466.816 ops/s [Average]
[info]   (min, avg, max) = (1162086.528, 1165545.262, 1166544.457), stdev = 1939.108
[info]   CI (99.9%): [1158078.446, 1173012.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Run progress: 39.55% complete, ETA 00:51:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42856.784 ops/s
[info] # Warmup Iteration   2: 57624.007 ops/s
[info] # Warmup Iteration   3: 58320.216 ops/s
[info] Iteration   1: 59035.875 ops/s
[info]                  ·gc.alloc.rate:            1372.964 MB/sec
[info]                  ·gc.alloc.rate.norm:       36608.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.377 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35872.430 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 59435.136 ops/s
[info]                  ·gc.alloc.rate:                                  1382.549 MB/sec
[info]                  ·gc.alloc.rate.norm:                             36608.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.076 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.644 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       35948.556 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                105.835 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 59941.625 ops/s
[info]                  ·gc.alloc.rate:                                  1394.030 MB/sec
[info]                  ·gc.alloc.rate.norm:                             36608.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       35750.089 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 59423.079 ops/s
[info]                  ·gc.alloc.rate:                                  1382.183 MB/sec
[info]                  ·gc.alloc.rate.norm:                             36608.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.069 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.578 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       36062.278 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 59533.057 ops/s
[info]                  ·gc.alloc.rate:                                  1384.660 MB/sec
[info]                  ·gc.alloc.rate.norm:                             36608.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.430 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       35993.842 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   59473.754 ±(99.9%) 1245.101 ops/s [Average]
[info]   (min, avg, max) = (59035.875, 59473.754, 59941.625), stdev = 323.349
[info]   CI (99.9%): [58228.654, 60718.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1383.277 ±(99.9%) 28.919 MB/sec [Average]
[info]   (min, avg, max) = (1372.964, 1383.277, 1394.030), stdev = 7.510
[info]   CI (99.9%): [1354.359, 1412.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   36608.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (36608.007, 36608.007, 36608.007), stdev = 0.001
[info]   CI (99.9%): [36608.006, 36608.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.129 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.076), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.434 ±(99.9%) 3.404 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.434, 2.015), stdev = 0.884
[info]   CI (99.9%): [≈ 0, 3.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1357.478 ±(99.9%) 26.814 MB/sec [Average]
[info]   (min, avg, max) = (1345.377, 1357.478, 1361.578), stdev = 6.964
[info]   CI (99.9%): [1330.664, 1384.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   35925.439 ±(99.9%) 461.659 B/op [Average]
[info]   (min, avg, max) = (35750.089, 35925.439, 36062.278), stdev = 119.891
[info]   CI (99.9%): [35463.780, 36387.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   21.167 ±(99.9%) 182.254 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.167, 105.835), stdev = 47.331
[info]   CI (99.9%): [≈ 0, 203.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 15.000), stdev = 4.817
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Run progress: 39.80% complete, ETA 00:51:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9909.268 ops/s
[info] # Warmup Iteration   2: 13906.759 ops/s
[info] # Warmup Iteration   3: 13958.984 ops/s
[info] Iteration   1: 14084.124 ops/s
[info]                  ·gc.alloc.rate:            1256.890 MB/sec
[info]                  ·gc.alloc.rate.norm:       140480.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.964 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 112993.424 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 13993.528 ops/s
[info]                  ·gc.alloc.rate:                                  1248.791 MB/sec
[info]                  ·gc.alloc.rate.norm:                             140480.031 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.078 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.720 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.305 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       152012.054 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                374.598 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 14086.716 ops/s
[info]                  ·gc.alloc.rate:                                  1257.126 MB/sec
[info]                  ·gc.alloc.rate.norm:                             140480.029 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.272 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.334 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       152125.016 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 14162.252 ops/s
[info]                  ·gc.alloc.rate:            1264.255 MB/sec
[info]                  ·gc.alloc.rate.norm:       140480.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.209 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 113473.599 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 14133.105 ops/s
[info]                  ·gc.alloc.rate:                                  1261.367 MB/sec
[info]                  ·gc.alloc.rate.norm:                             140480.036 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.062 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       151619.224 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   14091.945 ±(99.9%) 246.649 ops/s [Average]
[info]   (min, avg, max) = (13993.528, 14091.945, 14162.252), stdev = 64.054
[info]   CI (99.9%): [13845.296, 14338.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1257.686 ±(99.9%) 22.515 MB/sec [Average]
[info]   (min, avg, max) = (1248.791, 1257.686, 1264.255), stdev = 5.847
[info]   CI (99.9%): [1235.170, 1280.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   140480.031 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (140480.029, 140480.031, 140480.036), stdev = 0.003
[info]   CI (99.9%): [140480.019, 140480.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.129 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.078), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.211 ±(99.9%) 14.507 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.211, 8.720), stdev = 3.767
[info]   CI (99.9%): [≈ 0, 16.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1221.240 ±(99.9%) 721.449 MB/sec [Average]
[info]   (min, avg, max) = (1010.964, 1221.240, 1361.385), stdev = 187.358
[info]   CI (99.9%): [499.791, 1942.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   136444.663 ±(99.9%) 81596.289 B/op [Average]
[info]   (min, avg, max) = (112993.424, 136444.663, 152125.016), stdev = 21190.297
[info]   CI (99.9%): [54848.374, 218040.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   74.920 ±(99.9%) 645.081 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 74.920, 374.598), stdev = 167.526
[info]   CI (99.9%): [≈ 0, 720.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 11.000), stdev = 3.564
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Run progress: 40.05% complete, ETA 00:51:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7863.119 ops/s
[info] # Warmup Iteration   2: 14016.000 ops/s
[info] # Warmup Iteration   3: 13910.597 ops/s
[info] Iteration   1: 14051.816 ops/s
[info]                  ·gc.alloc.rate:            1135.231 MB/sec
[info]                  ·gc.alloc.rate.norm:       127184.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.250 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 150713.215 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 14102.374 ops/s
[info]                  ·gc.alloc.rate:                   1139.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              127184.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.855 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        112618.222 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.995 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 446.013 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 14218.952 ops/s
[info]                  ·gc.alloc.rate:                                  1149.047 MB/sec
[info]                  ·gc.alloc.rate.norm:                             127184.033 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.126 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 13.934 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.143 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       113026.790 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 14282.345 ops/s
[info]                  ·gc.alloc.rate:                                  1154.245 MB/sec
[info]                  ·gc.alloc.rate.norm:                             127184.029 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.309 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.556 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       150027.254 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 14274.647 ops/s
[info]                  ·gc.alloc.rate:            1153.734 MB/sec
[info]                  ·gc.alloc.rate.norm:       127184.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.215 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 112575.601 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   14186.027 ±(99.9%) 400.288 ops/s [Average]
[info]   (min, avg, max) = (14051.816, 14186.027, 14282.345), stdev = 103.953
[info]   CI (99.9%): [13785.739, 14586.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1146.319 ±(99.9%) 33.176 MB/sec [Average]
[info]   (min, avg, max) = (1135.231, 1146.319, 1154.245), stdev = 8.616
[info]   CI (99.9%): [1113.143, 1179.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   127184.032 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (127184.029, 127184.032, 127184.036), stdev = 0.003
[info]   CI (99.9%): [127184.020, 127184.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.216 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.126), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.849 ±(99.9%) 23.868 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.849, 13.934), stdev = 6.199
[info]   CI (99.9%): [≈ 0, 26.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1151.604 ±(99.9%) 709.964 MB/sec [Average]
[info]   (min, avg, max) = (1008.855, 1151.604, 1361.556), stdev = 184.375
[info]   CI (99.9%): [441.640, 1861.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   127792.216 ±(99.9%) 79373.306 B/op [Average]
[info]   (min, avg, max) = (112575.601, 127792.216, 150713.215), stdev = 20612.996
[info]   CI (99.9%): [48418.910, 207165.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.880 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.995), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   89.203 ±(99.9%) 768.061 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 89.203, 446.013), stdev = 199.463
[info]   CI (99.9%): [≈ 0, 857.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 17.000), stdev = 6.723
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Run progress: 40.30% complete, ETA 00:50:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 257822.160 ops/s
[info] # Warmup Iteration   2: 270287.473 ops/s
[info] # Warmup Iteration   3: 271723.331 ops/s
[info] Iteration   1: 272060.994 ops/s
[info]                  ·gc.alloc.rate:            707.882 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.301 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3907.478 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 274640.847 ops/s
[info]                  ·gc.alloc.rate:            714.612 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.306 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3870.707 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 283335.786 ops/s
[info]                  ·gc.alloc.rate:            737.235 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.315 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3751.984 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 282380.289 ops/s
[info]                  ·gc.alloc.rate:            734.809 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.379 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3764.724 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 283144.849 ops/s
[info]                  ·gc.alloc.rate:                   736.791 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3754.568 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 14.811 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   279112.553 ±(99.9%) 20601.290 ops/s [Average]
[info]   (min, avg, max) = (272060.994, 279112.553, 283335.786), stdev = 5350.090
[info]   CI (99.9%): [258511.263, 299713.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   726.266 ±(99.9%) 53.697 MB/sec [Average]
[info]   (min, avg, max) = (707.882, 726.266, 737.235), stdev = 13.945
[info]   CI (99.9%): [672.569, 779.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   675.335 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (675.301, 675.335, 675.379), stdev = 0.038
[info]   CI (99.9%): [675.188, 675.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3809.892 ±(99.9%) 283.459 B/op [Average]
[info]   (min, avg, max) = (3751.984, 3809.892, 3907.478), stdev = 73.613
[info]   CI (99.9%): [3526.434, 4093.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.664), stdev = 1.191
[info]   CI (99.9%): [≈ 0, 5.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.962 ±(99.9%) 25.505 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.962, 14.811), stdev = 6.624
[info]   CI (99.9%): [≈ 0, 28.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Run progress: 40.55% complete, ETA 00:50:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5172.016 ops/s
[info] # Warmup Iteration   2: 9974.380 ops/s
[info] # Warmup Iteration   3: 9968.336 ops/s
[info] Iteration   1: 10207.111 ops/s
[info]                  ·gc.alloc.rate:                   1409.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              217320.040 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.638 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        207353.080 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 102.701 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 10325.700 ops/s
[info]                  ·gc.alloc.rate:                                  1425.566 MB/sec
[info]                  ·gc.alloc.rate.norm:                             217320.040 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.114 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 17.407 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.299 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       206913.041 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                609.165 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 10394.466 ops/s
[info]                  ·gc.alloc.rate:                                  1435.125 MB/sec
[info]                  ·gc.alloc.rate.norm:                             217320.042 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.556 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.459 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       206164.808 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 10339.233 ops/s
[info]                  ·gc.alloc.rate:                                  1427.471 MB/sec
[info]                  ·gc.alloc.rate.norm:                             217320.598 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.251 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.397 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       207261.323 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 10376.016 ops/s
[info]                  ·gc.alloc.rate:            1432.624 MB/sec
[info]                  ·gc.alloc.rate.norm:       217320.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.805 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 258152.985 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   10328.505 ±(99.9%) 282.096 ops/s [Average]
[info]   (min, avg, max) = (10207.111, 10328.505, 10394.466), stdev = 73.259
[info]   CI (99.9%): [10046.410, 10610.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1426.012 ±(99.9%) 38.953 MB/sec [Average]
[info]   (min, avg, max) = (1409.272, 1426.012, 1435.125), stdev = 10.116
[info]   CI (99.9%): [1387.059, 1464.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   217320.152 ±(99.9%) 0.960 B/op [Average]
[info]   (min, avg, max) = (217320.039, 217320.152, 217320.598), stdev = 0.249
[info]   CI (99.9%): [217319.191, 217321.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.194 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.114), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.643 ±(99.9%) 29.641 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.643, 17.407), stdev = 7.698
[info]   CI (99.9%): [≈ 0, 33.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1425.320 ±(99.9%) 595.745 MB/sec [Average]
[info]   (min, avg, max) = (1344.638, 1425.320, 1701.805), stdev = 154.713
[info]   CI (99.9%): [829.574, 2021.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   217169.047 ±(99.9%) 88239.384 B/op [Average]
[info]   (min, avg, max) = (206164.808, 217169.047, 258152.985), stdev = 22915.488
[info]   CI (99.9%): [128929.663, 305408.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   142.373 ±(99.9%) 1019.292 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 142.373, 609.165), stdev = 264.707
[info]   CI (99.9%): [≈ 0, 1161.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 17.000), stdev = 5.805
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Run progress: 40.81% complete, ETA 00:50:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27902.617 ops/s
[info] # Warmup Iteration   2: 36908.330 ops/s
[info] # Warmup Iteration   3: 36887.607 ops/s
[info] Iteration   1: 38173.402 ops/s
[info]                  ·gc.alloc.rate:            1255.482 MB/sec
[info]                  ·gc.alloc.rate.norm:       51771.874 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 41690.371 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 38237.996 ops/s
[info]                  ·gc.alloc.rate:                                  1257.493 MB/sec
[info]                  ·gc.alloc.rate.norm:                             51768.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.044 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.809 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.334 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       55631.229 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                137.090 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   3: 37567.007 ops/s
[info]                  ·gc.alloc.rate:                                  1235.499 MB/sec
[info]                  ·gc.alloc.rate.norm:                             51768.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.113 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.400 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       57043.338 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 37660.149 ops/s
[info]                  ·gc.alloc.rate:                                  1238.685 MB/sec
[info]                  ·gc.alloc.rate.norm:                             51768.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.156 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       42676.871 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 37681.511 ops/s
[info]                  ·gc.alloc.rate:                                  1239.227 MB/sec
[info]                  ·gc.alloc.rate.norm:                             51768.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       56869.278 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   37864.013 ±(99.9%) 1215.647 ops/s [Average]
[info]   (min, avg, max) = (37567.007, 37864.013, 38237.996), stdev = 315.700
[info]   CI (99.9%): [36648.365, 39079.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1245.277 ±(99.9%) 39.879 MB/sec [Average]
[info]   (min, avg, max) = (1235.499, 1245.277, 1257.493), stdev = 10.356
[info]   CI (99.9%): [1205.398, 1285.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   51768.784 ±(99.9%) 6.652 B/op [Average]
[info]   (min, avg, max) = (51768.011, 51768.784, 51771.874), stdev = 1.727
[info]   CI (99.9%): [51762.132, 51775.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.077 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.044), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.602 ±(99.9%) 3.165 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.602, 1.809), stdev = 0.822
[info]   CI (99.9%): [≈ 0, 3.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1221.247 ±(99.9%) 721.497 MB/sec [Average]
[info]   (min, avg, max) = (1011.003, 1221.247, 1361.400), stdev = 187.371
[info]   CI (99.9%): [499.750, 1942.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   50782.217 ±(99.9%) 30327.651 B/op [Average]
[info]   (min, avg, max) = (41690.371, 50782.217, 57043.338), stdev = 7875.995
[info]   CI (99.9%): [20454.566, 81109.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   27.418 ±(99.9%) 236.078 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.418, 137.090), stdev = 61.309
[info]   CI (99.9%): [≈ 0, 263.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 12.000), stdev = 4.438
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Run progress: 41.06% complete, ETA 00:50:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27286.699 ops/s
[info] # Warmup Iteration   2: 44650.902 ops/s
[info] # Warmup Iteration   3: 45773.983 ops/s
[info] Iteration   1: 46474.526 ops/s
[info]                  ·gc.alloc.rate:                   1232.557 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.234 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        34153.219 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 22.558 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 46370.698 ops/s
[info]                  ·gc.alloc.rate:                                  1229.851 MB/sec
[info]                  ·gc.alloc.rate.norm:                             41752.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.095 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.226 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1348.557 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       45781.940 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                158.259 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   3: 46908.050 ops/s
[info]                  ·gc.alloc.rate:                                  1244.198 MB/sec
[info]                  ·gc.alloc.rate.norm:                             41752.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.098 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.303 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.386 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       45684.522 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 47335.316 ops/s
[info]                  ·gc.alloc.rate:            1256.157 MB/sec
[info]                  ·gc.alloc.rate.norm:       41752.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.469 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 33951.485 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 47220.295 ops/s
[info]                  ·gc.alloc.rate:            1252.496 MB/sec
[info]                  ·gc.alloc.rate.norm:       41752.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 45380.790 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   46861.777 ±(99.9%) 1662.967 ops/s [Average]
[info]   (min, avg, max) = (46370.698, 46861.777, 47335.316), stdev = 431.867
[info]   CI (99.9%): [45198.810, 48524.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1243.052 ±(99.9%) 45.014 MB/sec [Average]
[info]   (min, avg, max) = (1229.851, 1243.052, 1256.157), stdev = 11.690
[info]   CI (99.9%): [1198.037, 1288.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   41752.009 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (41752.009, 41752.009, 41752.009), stdev = 0.001
[info]   CI (99.9%): [41752.007, 41752.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.204 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.098), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.306 ±(99.9%) 6.886 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.306, 3.303), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 8.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1220.200 ±(99.9%) 722.335 MB/sec [Average]
[info]   (min, avg, max) = (1008.234, 1220.200, 1361.386), stdev = 187.588
[info]   CI (99.9%): [497.865, 1942.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   40990.391 ±(99.9%) 24396.385 B/op [Average]
[info]   (min, avg, max) = (33951.485, 40990.391, 45781.940), stdev = 6335.664
[info]   CI (99.9%): [16594.006, 65386.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.820 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   36.163 ±(99.9%) 265.497 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36.163, 158.259), stdev = 68.949
[info]   CI (99.9%): [≈ 0, 301.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 14.000), stdev = 5.292
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Run progress: 41.31% complete, ETA 00:49:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1076204.208 ops/s
[info] # Warmup Iteration   2: 1185680.651 ops/s
[info] # Warmup Iteration   3: 1189021.074 ops/s
[info] Iteration   1: 1212439.246 ops/s
[info]                  ·gc.alloc.rate:            1102.951 MB/sec
[info]                  ·gc.alloc.rate.norm:       1432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.935 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1309.936 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 1209424.152 ops/s
[info]                  ·gc.alloc.rate:                   1101.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.951 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1747.423 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.992 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.190 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 1218844.670 ops/s
[info]                  ·gc.alloc.rate:                                  1108.825 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.091 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.118 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.073 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1318.672 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 1214448.289 ops/s
[info]                  ·gc.alloc.rate:            1104.958 MB/sec
[info]                  ·gc.alloc.rate.norm:       1432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.149 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1323.386 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1214263.942 ops/s
[info]                  ·gc.alloc.rate:            1105.072 MB/sec
[info]                  ·gc.alloc.rate.norm:       1432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.429 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1323.612 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1213884.060 ±(99.9%) 13206.163 ops/s [Average]
[info]   (min, avg, max) = (1209424.152, 1213884.060, 1218844.670), stdev = 3429.599
[info]   CI (99.9%): [1200677.897, 1227090.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1104.632 ±(99.9%) 10.793 MB/sec [Average]
[info]   (min, avg, max) = (1101.357, 1104.632, 1108.825), stdev = 2.803
[info]   CI (99.9%): [1093.839, 1115.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1432.000, 1432.000, 1432.000), stdev = 0.001
[info]   CI (99.9%): [1432.000, 1432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.157 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.091), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.024 ±(99.9%) 0.203 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.118), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1083.307 ±(99.9%) 561.428 MB/sec [Average]
[info]   (min, avg, max) = (1008.935, 1083.307, 1343.951), stdev = 145.801
[info]   CI (99.9%): [521.879, 1644.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1404.606 ±(99.9%) 738.248 B/op [Average]
[info]   (min, avg, max) = (1309.936, 1404.606, 1747.423), stdev = 191.721
[info]   CI (99.9%): [666.358, 2142.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.798 ±(99.9%) 6.874 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.798, 3.992), stdev = 1.785
[info]   CI (99.9%): [≈ 0, 7.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.038 ±(99.9%) 8.938 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.038, 5.190), stdev = 2.321
[info]   CI (99.9%): [≈ 0, 9.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 12.000), stdev = 4.637
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 41.56% complete, ETA 00:49:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1287918.965 ops/s
[info] # Warmup Iteration   2: 1400416.004 ops/s
[info] # Warmup Iteration   3: 1425820.914 ops/s
[info] Iteration   1: 1426065.635 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1424995.607 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1425247.060 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1426005.695 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1426097.074 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1425682.214 ±(99.9%) 2005.063 ops/s [Average]
[info]   (min, avg, max) = (1424995.607, 1425682.214, 1426097.074), stdev = 520.708
[info]   CI (99.9%): [1423677.151, 1427687.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Run progress: 41.81% complete, ETA 00:49:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25912.268 ops/s
[info] # Warmup Iteration   2: 35600.585 ops/s
[info] # Warmup Iteration   3: 36094.525 ops/s
[info] Iteration   1: 36065.224 ops/s
[info]                  ·gc.alloc.rate:            1091.056 MB/sec
[info]                  ·gc.alloc.rate.norm:       47621.232 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.326 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 58719.326 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 36186.716 ops/s
[info]                  ·gc.alloc.rate:            1094.605 MB/sec
[info]                  ·gc.alloc.rate.norm:       47616.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 43892.262 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 35919.944 ops/s
[info]                  ·gc.alloc.rate:                                  1086.583 MB/sec
[info]                  ·gc.alloc.rate.norm:                             47616.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.055 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.421 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.016 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       44567.472 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                175.118 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 35494.208 ops/s
[info]                  ·gc.alloc.rate:                                  1073.721 MB/sec
[info]                  ·gc.alloc.rate.norm:                             47616.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.026 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.153 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.005 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       45278.210 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 36664.484 ops/s
[info]                  ·gc.alloc.rate:                                  1109.199 MB/sec
[info]                  ·gc.alloc.rate.norm:                             47616.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.231 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.452 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58444.845 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   36066.115 ±(99.9%) 1634.863 ops/s [Average]
[info]   (min, avg, max) = (35494.208, 36066.115, 36664.484), stdev = 424.569
[info]   CI (99.9%): [34431.253, 37700.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1091.033 ±(99.9%) 49.547 MB/sec [Average]
[info]   (min, avg, max) = (1073.721, 1091.033, 1109.199), stdev = 12.867
[info]   CI (99.9%): [1041.486, 1140.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   47617.056 ±(99.9%) 8.990 B/op [Average]
[info]   (min, avg, max) = (47616.011, 47617.056, 47621.232), stdev = 2.335
[info]   CI (99.9%): [47608.065, 47626.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.055), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.761 ±(99.9%) 4.015 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.761, 2.421), stdev = 1.043
[info]   CI (99.9%): [≈ 0, 4.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1150.760 ±(99.9%) 712.801 MB/sec [Average]
[info]   (min, avg, max) = (1009.003, 1150.760, 1361.452), stdev = 185.112
[info]   CI (99.9%): [437.960, 1863.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   50180.423 ±(99.9%) 29595.613 B/op [Average]
[info]   (min, avg, max) = (43892.262, 50180.423, 58719.326), stdev = 7685.887
[info]   CI (99.9%): [20584.810, 79776.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   35.024 ±(99.9%) 301.563 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35.024, 175.118), stdev = 78.315
[info]   CI (99.9%): [≈ 0, 336.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 16.000), stdev = 5.788
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Run progress: 42.07% complete, ETA 00:49:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102219.806 ops/s
[info] # Warmup Iteration   2: 126393.264 ops/s
[info] # Warmup Iteration   3: 126694.125 ops/s
[info] Iteration   1: 128490.344 ops/s
[info]                  ·gc.alloc.rate:                                  2203.673 MB/sec
[info]                  ·gc.alloc.rate.norm:                             27000.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.067 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.856 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25017.384 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 128579.564 ops/s
[info]                  ·gc.alloc.rate:                                  2205.476 MB/sec
[info]                  ·gc.alloc.rate.norm:                             27000.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.110 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.502 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       29167.202 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 128016.281 ops/s
[info]                  ·gc.alloc.rate:                                  2195.813 MB/sec
[info]                  ·gc.alloc.rate.norm:                             27000.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.157 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.138 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25110.394 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 128521.648 ops/s
[info]                  ·gc.alloc.rate:                                  2205.380 MB/sec
[info]                  ·gc.alloc.rate.norm:                             27000.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.124 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.473 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       29180.363 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 128466.735 ops/s
[info]                  ·gc.alloc.rate:                                  2203.689 MB/sec
[info]                  ·gc.alloc.rate.norm:                             27000.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.268 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25022.252 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   128414.914 ±(99.9%) 873.394 ops/s [Average]
[info]   (min, avg, max) = (128016.281, 128414.914, 128579.564), stdev = 226.818
[info]   CI (99.9%): [127541.520, 129288.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   2202.806 ±(99.9%) 15.425 MB/sec [Average]
[info]   (min, avg, max) = (2195.813, 2202.806, 2205.476), stdev = 4.006
[info]   CI (99.9%): [2187.381, 2218.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27000.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27000.003, 27000.003, 27000.003), stdev = 0.001
[info]   CI (99.9%): [27000.003, 27000.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.016 MB/sec [Average]
[info]   (min, avg, max) = (0.002, 0.008, 0.013), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.096 ±(99.9%) 0.201 B/op [Average]
[info]   (min, avg, max) = (0.023, 0.096, 0.157), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2178.448 ±(99.9%) 718.988 MB/sec [Average]
[info]   (min, avg, max) = (2041.856, 2178.448, 2383.473), stdev = 186.719
[info]   CI (99.9%): [1459.459, 2897.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   26699.519 ±(99.9%) 8698.571 B/op [Average]
[info]   (min, avg, max) = (25017.384, 26699.519, 29180.363), stdev = 2258.991
[info]   CI (99.9%): [18000.948, 35398.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava
[info] # Run progress: 42.32% complete, ETA 00:49:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11383.726 ops/s
[info] # Warmup Iteration   2: 325372.082 ops/s
[info] # Warmup Iteration   3: 334476.562 ops/s
[info] Iteration   1: 331240.583 ops/s
[info]                  ·gc.alloc.rate:            663.225 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3171.508 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 336950.798 ops/s
[info]                  ·gc.alloc.rate:            674.671 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3117.743 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 331672.425 ops/s
[info]                  ·gc.alloc.rate:            664.158 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3167.359 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 339029.152 ops/s
[info]                  ·gc.alloc.rate:            678.925 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.430 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3098.636 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 338803.104 ops/s
[info]                  ·gc.alloc.rate:                   678.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             666.743 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3097.691 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.095 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava":
[info]   335539.213 ±(99.9%) 14695.076 ops/s [Average]
[info]   (min, avg, max) = (331240.583, 335539.213, 339029.152), stdev = 3816.265
[info]   CI (99.9%): [320844.137, 350234.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   671.882 ±(99.9%) 29.509 MB/sec [Average]
[info]   (min, avg, max) = (663.225, 671.882, 678.925), stdev = 7.663
[info]   CI (99.9%): [642.374, 701.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   3152.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3152.001, 3152.001, 3152.001), stdev = 0.001
[info]   CI (99.9%): [3152.001, 3152.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   667.247 ±(99.9%) 1.096 MB/sec [Average]
[info]   (min, avg, max) = (666.743, 667.247, 667.430), stdev = 0.285
[info]   CI (99.9%): [666.151, 668.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   3130.587 ±(99.9%) 140.096 B/op [Average]
[info]   (min, avg, max) = (3097.691, 3130.587, 3171.508), stdev = 36.382
[info]   CI (99.9%): [2990.491, 3270.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.619 ±(99.9%) 5.329 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.619, 3.095), stdev = 1.384
[info]   CI (99.9%): [≈ 0, 5.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.600, 10.000), stdev = 0.548
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Run progress: 42.57% complete, ETA 00:48:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 152150.460 ops/s
[info] # Warmup Iteration   2: 235408.474 ops/s
[info] # Warmup Iteration   3: 233617.146 ops/s
[info] Iteration   1: 237367.457 ops/s
[info]                  ·gc.alloc.rate:            525.942 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.660 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2226.070 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 238841.339 ops/s
[info]                  ·gc.alloc.rate:                   529.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.979 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4429.002 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.389 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 240192.628 ops/s
[info]                  ·gc.alloc.rate:            532.348 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.420 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2204.257 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 237145.519 ops/s
[info]                  ·gc.alloc.rate:            525.517 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4465.092 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 232391.209 ops/s
[info]                  ·gc.alloc.rate:                   514.952 MB/sec
[info]                  ·gc.alloc.rate.norm:              3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.681 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2273.717 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.511 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   237187.630 ±(99.9%) 11358.507 ops/s [Average]
[info]   (min, avg, max) = (232391.209, 237187.630, 240192.628), stdev = 2949.768
[info]   CI (99.9%): [225829.124, 248546.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   525.593 ±(99.9%) 25.254 MB/sec [Average]
[info]   (min, avg, max) = (514.952, 525.593, 532.348), stdev = 6.558
[info]   CI (99.9%): [500.339, 550.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3488.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3488.002, 3488.002, 3488.002), stdev = 0.001
[info]   CI (99.9%): [3488.002, 3488.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   470.494 ±(99.9%) 709.569 MB/sec [Average]
[info]   (min, avg, max) = (335.660, 470.494, 672.729), stdev = 184.273
[info]   CI (99.9%): [≈ 0, 1180.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   3119.627 ±(99.9%) 4667.327 B/op [Average]
[info]   (min, avg, max) = (2204.257, 3119.627, 4465.092), stdev = 1212.090
[info]   CI (99.9%): [≈ 0, 7786.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.780 ±(99.9%) 9.388 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.780, 4.511), stdev = 2.438
[info]   CI (99.9%): [≈ 0, 11.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 9.000), stdev = 2.345
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Run progress: 42.82% complete, ETA 00:48:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 461950.961 ops/s
[info] # Warmup Iteration   2: 482299.677 ops/s
[info] # Warmup Iteration   3: 486306.871 ops/s
[info] Iteration   1: 492280.848 ops/s
[info]                  ·gc.alloc.rate:            620.422 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.951 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2155.180 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 492323.168 ops/s
[info]                  ·gc.alloc.rate:            620.744 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.267 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2155.071 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 486808.374 ops/s
[info]                  ·gc.alloc.rate:            613.833 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.164 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1089.763 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 480249.002 ops/s
[info]                  ·gc.alloc.rate:            605.524 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.284 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2209.293 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 482070.791 ops/s
[info]                  ·gc.alloc.rate:            607.832 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.319 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2201.017 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   486746.437 ±(99.9%) 21595.539 ops/s [Average]
[info]   (min, avg, max) = (480249.002, 486746.437, 492323.168), stdev = 5608.293
[info]   CI (99.9%): [465150.898, 508341.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   613.671 ±(99.9%) 26.961 MB/sec [Average]
[info]   (min, avg, max) = (605.524, 613.671, 620.744), stdev = 7.002
[info]   CI (99.9%): [586.710, 640.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1984.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1984.001, 1984.001, 1984.001), stdev = 0.001
[info]   CI (99.9%): [1984.001, 1984.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   606.797 ±(99.9%) 580.406 MB/sec [Average]
[info]   (min, avg, max) = (337.164, 606.797, 674.319), stdev = 150.730
[info]   CI (99.9%): [26.391, 1187.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1962.065 ±(99.9%) 1880.198 B/op [Average]
[info]   (min, avg, max) = (1089.763, 1962.065, 2209.293), stdev = 488.282
[info]   CI (99.9%): [81.867, 3842.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Run progress: 43.07% complete, ETA 00:48:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36916.684 ops/s
[info] # Warmup Iteration   2: 66504.783 ops/s
[info] # Warmup Iteration   3: 68104.360 ops/s
[info] Iteration   1: 68225.063 ops/s
[info]                  ·gc.alloc.rate:                                  3044.020 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.123 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.152 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70673.423 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 69108.346 ops/s
[info]                  ·gc.alloc.rate:                                  3084.487 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.328 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3064.132 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69768.533 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 69048.778 ops/s
[info]                  ·gc.alloc.rate:                                  3080.949 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.241 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.099 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69825.105 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 68826.616 ops/s
[info]                  ·gc.alloc.rate:                                  3071.992 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.025 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.571 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3064.221 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70054.345 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 68259.830 ops/s
[info]                  ·gc.alloc.rate:                                  3046.221 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.310 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.750 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70636.156 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   68693.727 ±(99.9%) 1637.704 ops/s [Average]
[info]   (min, avg, max) = (68225.063, 68693.727, 69108.346), stdev = 425.307
[info]   CI (99.9%): [67056.022, 70331.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3065.534 ±(99.9%) 73.929 MB/sec [Average]
[info]   (min, avg, max) = (3044.020, 3065.534, 3084.487), stdev = 19.199
[info]   CI (99.9%): [2991.605, 3139.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   70232.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (70232.006, 70232.006, 70232.006), stdev = 0.001
[info]   CI (99.9%): [70232.005, 70232.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.028 MB/sec [Average]
[info]   (min, avg, max) = (0.005, 0.014, 0.025), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.315 ±(99.9%) 0.633 B/op [Average]
[info]   (min, avg, max) = (0.123, 0.315, 0.571), stdev = 0.164
[info]   CI (99.9%): [≈ 0, 0.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3063.671 ±(99.9%) 2.036 MB/sec [Average]
[info]   (min, avg, max) = (3063.099, 3063.671, 3064.221), stdev = 0.529
[info]   CI (99.9%): [3061.635, 3065.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   70191.513 ±(99.9%) 1680.583 B/op [Average]
[info]   (min, avg, max) = (69768.533, 70191.513, 70673.423), stdev = 436.442
[info]   CI (99.9%): [68510.929, 71872.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   45.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.000, 9.000), stdev = 0.001
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Run progress: 43.32% complete, ETA 00:48:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 145339.335 ops/s
[info] # Warmup Iteration   2: 192215.571 ops/s
[info] # Warmup Iteration   3: 192197.875 ops/s
[info] Iteration   1: 193633.647 ops/s
[info]                  ·gc.alloc.rate:                                  1669.054 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13568.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.108 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.879 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1691.814 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13753.024 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                27.073 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   2: 195274.074 ops/s
[info]                  ·gc.alloc.rate:                                  1683.180 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13568.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.797 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13718.070 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 195399.800 ops/s
[info]                  ·gc.alloc.rate:            1684.339 MB/sec
[info]                  ·gc.alloc.rate.norm:       13568.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.871 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13709.225 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 193233.958 ops/s
[info]                  ·gc.alloc.rate:                                  1665.711 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13568.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.043 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.877 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13862.589 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 195203.144 ops/s
[info]                  ·gc.alloc.rate:                                  1682.709 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13568.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.774 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13721.724 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   194548.925 ±(99.9%) 3966.678 ops/s [Average]
[info]   (min, avg, max) = (193233.958, 194548.925, 195399.800), stdev = 1030.134
[info]   CI (99.9%): [190582.247, 198515.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1676.999 ±(99.9%) 34.184 MB/sec [Average]
[info]   (min, avg, max) = (1665.711, 1676.999, 1684.339), stdev = 8.877
[info]   CI (99.9%): [1642.815, 1711.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   13568.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13568.002, 13568.002, 13568.002), stdev = 0.001
[info]   CI (99.9%): [13568.002, 13568.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.182 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.108), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.194 ±(99.9%) 1.477 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.194, 0.879), stdev = 0.384
[info]   CI (99.9%): [≈ 0, 1.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1699.826 ±(99.9%) 17.248 MB/sec [Average]
[info]   (min, avg, max) = (1691.814, 1699.826, 1701.877), stdev = 4.479
[info]   CI (99.9%): [1682.579, 1717.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   13752.926 ±(99.9%) 244.480 B/op [Average]
[info]   (min, avg, max) = (13709.225, 13752.926, 13862.589), stdev = 63.491
[info]   CI (99.9%): [13508.447, 13997.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   5.415 ±(99.9%) 46.621 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.415, 27.073), stdev = 12.107
[info]   CI (99.9%): [≈ 0, 52.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 13.000), stdev = 3.834
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava
[info] # Run progress: 43.58% complete, ETA 00:48:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27033.901 ops/s
[info] # Warmup Iteration   2: 726854.493 ops/s
[info] # Warmup Iteration   3: 723409.014 ops/s
[info] Iteration   1: 714328.939 ops/s
[info]                  ·gc.alloc.rate:            559.088 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.398 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1470.670 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 721710.847 ops/s
[info]                  ·gc.alloc.rate:            564.849 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.678 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 727.790 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 723741.424 ops/s
[info]                  ·gc.alloc.rate:            566.455 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1451.501 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 723025.871 ops/s
[info]                  ·gc.alloc.rate:            565.932 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.423 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1452.940 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 721537.856 ops/s
[info]                  ·gc.alloc.rate:            564.751 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.404 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1455.938 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava":
[info]   720868.987 ±(99.9%) 14514.346 ops/s [Average]
[info]   (min, avg, max) = (714328.939, 720868.987, 723741.424), stdev = 3769.330
[info]   CI (99.9%): [706354.641, 735383.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   564.215 ±(99.9%) 11.380 MB/sec [Average]
[info]   (min, avg, max) = (559.088, 564.215, 566.455), stdev = 2.955
[info]   CI (99.9%): [552.835, 575.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   1232.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1232.001, 1232.001), stdev = 0.001
[info]   CI (99.9%): [1232.000, 1232.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   600.656 ±(99.9%) 574.691 MB/sec [Average]
[info]   (min, avg, max) = (333.678, 600.656, 667.423), stdev = 149.245
[info]   CI (99.9%): [25.965, 1175.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   1311.768 ±(99.9%) 1257.398 B/op [Average]
[info]   (min, avg, max) = (727.790, 1311.768, 1470.670), stdev = 326.542
[info]   CI (99.9%): [54.370, 2569.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.800, 10.000), stdev = 2.168
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Run progress: 43.83% complete, ETA 00:47:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 316397.500 ops/s
[info] # Warmup Iteration   2: 466024.421 ops/s
[info] # Warmup Iteration   3: 474307.259 ops/s
[info] Iteration   1: 471279.421 ops/s
[info]                  ·gc.alloc.rate:                   484.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.274 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2244.554 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.225 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 472430.426 ops/s
[info]                  ·gc.alloc.rate:            484.935 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.276 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1120.608 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 472252.668 ops/s
[info]                  ·gc.alloc.rate:            484.782 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.622 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2242.160 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 472301.375 ops/s
[info]                  ·gc.alloc.rate:            485.071 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.480 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1120.973 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 471905.105 ops/s
[info]                  ·gc.alloc.rate:            484.459 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2243.932 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   472033.799 ±(99.9%) 1788.024 ops/s [Average]
[info]   (min, avg, max) = (471279.421, 472033.799, 472430.426), stdev = 464.344
[info]   CI (99.9%): [470245.775, 473821.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   484.652 ±(99.9%) 1.629 MB/sec [Average]
[info]   (min, avg, max) = (484.014, 484.652, 485.071), stdev = 0.423
[info]   CI (99.9%): [483.023, 486.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1616.001, 1616.001, 1616.001), stdev = 0.001
[info]   CI (99.9%): [1616.001, 1616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.072 ±(99.9%) 708.983 MB/sec [Average]
[info]   (min, avg, max) = (336.276, 538.072, 672.706), stdev = 184.121
[info]   CI (99.9%): [≈ 0, 1247.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1794.445 ±(99.9%) 2367.994 B/op [Average]
[info]   (min, avg, max) = (1120.608, 1794.445, 2244.554), stdev = 614.961
[info]   CI (99.9%): [≈ 0, 4162.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.445 ±(99.9%) 3.831 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.445, 2.225), stdev = 0.995
[info]   CI (99.9%): [≈ 0, 4.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 9.000), stdev = 2.408
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Run progress: 44.08% complete, ETA 00:47:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 591682.728 ops/s
[info] # Warmup Iteration   2: 662211.551 ops/s
[info] # Warmup Iteration   3: 702288.510 ops/s
[info] Iteration   1: 681216.061 ops/s
[info]                  ·gc.alloc.rate:                   533.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.484 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1555.883 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.539 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 694007.363 ops/s
[info]                  ·gc.alloc.rate:            543.184 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 762.906 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 701610.633 ops/s
[info]                  ·gc.alloc.rate:            549.059 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.614 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1509.239 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 703402.228 ops/s
[info]                  ·gc.alloc.rate:            550.566 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.731 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1505.369 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 705289.387 ops/s
[info]                  ·gc.alloc.rate:            551.989 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.333 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 750.672 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   697105.135 ±(99.9%) 37972.979 ops/s [Average]
[info]   (min, avg, max) = (681216.061, 697105.135, 705289.387), stdev = 9861.462
[info]   CI (99.9%): [659132.156, 735078.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   545.617 ±(99.9%) 29.507 MB/sec [Average]
[info]   (min, avg, max) = (533.287, 545.617, 551.989), stdev = 7.663
[info]   CI (99.9%): [516.110, 575.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1232.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1232.001, 1232.001), stdev = 0.001
[info]   CI (99.9%): [1232.001, 1232.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   538.305 ±(99.9%) 709.909 MB/sec [Average]
[info]   (min, avg, max) = (336.333, 538.305, 673.484), stdev = 184.361
[info]   CI (99.9%): [≈ 0, 1248.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1216.814 ±(99.9%) 1618.948 B/op [Average]
[info]   (min, avg, max) = (750.672, 1216.814, 1555.883), stdev = 420.436
[info]   CI (99.9%): [≈ 0, 2835.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.308 ±(99.9%) 2.650 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.308, 1.539), stdev = 0.688
[info]   CI (99.9%): [≈ 0, 2.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 1.095
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 44.33% complete, ETA 00:47:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 615370.183 ops/s
[info] # Warmup Iteration   2: 700382.308 ops/s
[info] # Warmup Iteration   3: 700134.129 ops/s
[info] Iteration   1: 696645.872 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 702039.620 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 699568.103 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 702143.539 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 701989.009 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   700477.229 ±(99.9%) 9235.314 ops/s [Average]
[info]   (min, avg, max) = (696645.872, 700477.229, 702143.539), stdev = 2398.382
[info]   CI (99.9%): [691241.915, 709712.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Run progress: 44.58% complete, ETA 00:47:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18472.839 ops/s
[info] # Warmup Iteration   2: 27633.377 ops/s
[info] # Warmup Iteration   3: 28032.021 ops/s
[info] Iteration   1: 27745.998 ops/s
[info]                  ·gc.alloc.rate:            1422.531 MB/sec
[info]                  ·gc.alloc.rate.norm:       80704.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 76326.025 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 28435.989 ops/s
[info]                  ·gc.alloc.rate:                                  1457.555 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80692.902 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.125 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.911 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.263 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75140.573 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                221.219 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 28556.875 ops/s
[info]                  ·gc.alloc.rate:                                  1463.877 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80688.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.077 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.758 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       93799.863 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 28642.235 ops/s
[info]                  ·gc.alloc.rate:                                  1468.166 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80688.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.199 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.296 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74814.624 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 28561.061 ops/s
[info]                  ·gc.alloc.rate:                                  1464.166 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80688.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.054 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.436 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75026.756 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   28388.432 ±(99.9%) 1411.633 ops/s [Average]
[info]   (min, avg, max) = (27745.998, 28388.432, 28642.235), stdev = 366.597
[info]   CI (99.9%): [26976.799, 29800.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1455.259 ±(99.9%) 71.951 MB/sec [Average]
[info]   (min, avg, max) = (1422.531, 1455.259, 1468.166), stdev = 18.686
[info]   CI (99.9%): [1383.307, 1527.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   80692.193 ±(99.9%) 26.729 B/op [Average]
[info]   (min, avg, max) = (80688.014, 80692.193, 80704.018), stdev = 6.941
[info]   CI (99.9%): [80665.464, 80718.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.212 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.125), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.448 ±(99.9%) 11.762 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.448, 6.911), stdev = 3.055
[info]   CI (99.9%): [≈ 0, 13.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1425.423 ±(99.9%) 595.367 MB/sec [Average]
[info]   (min, avg, max) = (1345.362, 1425.423, 1701.758), stdev = 154.615
[info]   CI (99.9%): [830.057, 2020.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   79021.568 ±(99.9%) 31892.014 B/op [Average]
[info]   (min, avg, max) = (74814.624, 79021.568, 93799.863), stdev = 8282.255
[info]   CI (99.9%): [47129.554, 110913.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   44.244 ±(99.9%) 380.952 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.244, 221.219), stdev = 98.932
[info]   CI (99.9%): [≈ 0, 425.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 16.000), stdev = 5.357
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Run progress: 44.84% complete, ETA 00:46:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4214.207 ops/s
[info] # Warmup Iteration   2: 6661.480 ops/s
[info] # Warmup Iteration   3: 6604.060 ops/s
[info] Iteration   1: 6626.229 ops/s
[info]                  ·gc.alloc.rate:                   1019.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              242296.066 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.484 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        240311.850 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 158.204 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 6714.815 ops/s
[info]                  ·gc.alloc.rate:            1033.605 MB/sec
[info]                  ·gc.alloc.rate.norm:       242296.061 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 237006.904 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 6820.838 ops/s
[info]                  ·gc.alloc.rate:                   1050.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              242296.060 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1014.565 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        234058.515 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 768.413 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 6698.338 ops/s
[info]                  ·gc.alloc.rate:                                  1031.086 MB/sec
[info]                  ·gc.alloc.rate.norm:                             242296.061 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.046 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10.854 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.977 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       239920.449 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 6695.662 ops/s
[info]                  ·gc.alloc.rate:                                  1030.772 MB/sec
[info]                  ·gc.alloc.rate.norm:                             242296.061 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.467 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.970 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       239992.088 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   6711.176 ±(99.9%) 269.961 ops/s [Average]
[info]   (min, avg, max) = (6626.229, 6711.176, 6820.838), stdev = 70.108
[info]   CI (99.9%): [6441.216, 6981.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1033.114 ±(99.9%) 42.205 MB/sec [Average]
[info]   (min, avg, max) = (1019.836, 1033.114, 1050.272), stdev = 10.961
[info]   CI (99.9%): [990.909, 1075.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   242296.062 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (242296.060, 242296.062, 242296.066), stdev = 0.003
[info]   CI (99.9%): [242296.052, 242296.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.078 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.046), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.464 ±(99.9%) 18.224 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.464, 10.854), stdev = 4.733
[info]   CI (99.9%): [≈ 0, 20.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1015.808 ±(99.9%) 18.896 MB/sec [Average]
[info]   (min, avg, max) = (1011.042, 1015.808, 1020.977), stdev = 4.907
[info]   CI (99.9%): [996.912, 1034.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   238257.961 ±(99.9%) 10402.088 B/op [Average]
[info]   (min, avg, max) = (234058.515, 238257.961, 240311.850), stdev = 2701.389
[info]   CI (99.9%): [227855.873, 248660.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.561 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   185.323 ±(99.9%) 1282.563 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 185.323, 768.413), stdev = 333.078
[info]   CI (99.9%): [≈ 0, 1467.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 10.000), stdev = 3.564
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Run progress: 45.09% complete, ETA 00:46:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2999.487 ops/s
[info] # Warmup Iteration   2: 6709.629 ops/s
[info] # Warmup Iteration   3: 6960.709 ops/s
[info] Iteration   1: 6920.101 ops/s
[info]                  ·gc.alloc.rate:            997.261 MB/sec
[info]                  ·gc.alloc.rate.norm:       226864.059 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.844 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 229499.081 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 6777.379 ops/s
[info]                  ·gc.alloc.rate:                   976.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              226864.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.404 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        234185.583 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 154.680 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 6766.025 ops/s
[info]                  ·gc.alloc.rate:                   975.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              226864.060 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.907 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        156480.757 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 929.589 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 7048.956 ops/s
[info]                  ·gc.alloc.rate:                                  1016.004 MB/sec
[info]                  ·gc.alloc.rate.norm:                             226864.058 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.105 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 23.392 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.134 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       228009.505 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 7063.402 ops/s
[info]                  ·gc.alloc.rate:            1018.056 MB/sec
[info]                  ·gc.alloc.rate.norm:       226864.058 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 227525.408 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   6915.173 ±(99.9%) 548.384 ops/s [Average]
[info]   (min, avg, max) = (6766.025, 6915.173, 7063.402), stdev = 142.414
[info]   CI (99.9%): [6366.788, 7463.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   996.754 ±(99.9%) 78.639 MB/sec [Average]
[info]   (min, avg, max) = (975.574, 996.754, 1018.056), stdev = 20.422
[info]   CI (99.9%): [918.116, 1075.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   226864.060 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (226864.058, 226864.060, 226864.065), stdev = 0.003
[info]   CI (99.9%): [226864.049, 226864.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.180 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.105), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   4.678 ±(99.9%) 40.282 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.678, 23.392), stdev = 10.461
[info]   CI (99.9%): [≈ 0, 44.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   946.463 ±(99.9%) 589.337 MB/sec [Average]
[info]   (min, avg, max) = (672.907, 946.463, 1021.134), stdev = 153.049
[info]   CI (99.9%): [357.126, 1535.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   215140.067 ±(99.9%) 126674.580 B/op [Average]
[info]   (min, avg, max) = (156480.757, 215140.067, 234185.583), stdev = 32896.986
[info]   CI (99.9%): [88465.487, 341814.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.690 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   216.854 ±(99.9%) 1555.743 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 216.854, 929.589), stdev = 404.021
[info]   CI (99.9%): [≈ 0, 1772.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.200, 13.000), stdev = 5.020
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 45.34% complete, ETA 00:46:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 84389.462 ops/s
[info] # Warmup Iteration   2: 95786.833 ops/s
[info] # Warmup Iteration   3: 96810.636 ops/s
[info] Iteration   1: 100284.935 ops/s
[info]                  ·gc.alloc.rate:            971.493 MB/sec
[info]                  ·gc.alloc.rate.norm:       15248.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.363 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10600.124 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 99820.406 ops/s
[info]                  ·gc.alloc.rate:            967.250 MB/sec
[info]                  ·gc.alloc.rate.norm:       15248.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1013.339 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15974.560 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 99649.158 ops/s
[info]                  ·gc.alloc.rate:                   965.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1013.035 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        16002.289 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 42.084 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 100344.184 ops/s
[info]                  ·gc.alloc.rate:                                  972.132 MB/sec
[info]                  ·gc.alloc.rate.norm:                             15248.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.072 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.136 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.200 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16017.647 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 100794.687 ops/s
[info]                  ·gc.alloc.rate:                                  976.597 MB/sec
[info]                  ·gc.alloc.rate.norm:                             15248.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.043 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.321 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15946.302 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   100178.674 ±(99.9%) 1750.773 ops/s [Average]
[info]   (min, avg, max) = (99649.158, 100178.674, 100794.687), stdev = 454.670
[info]   CI (99.9%): [98427.901, 101929.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   970.551 ±(99.9%) 17.065 MB/sec [Average]
[info]   (min, avg, max) = (965.285, 970.551, 976.597), stdev = 4.432
[info]   CI (99.9%): [953.486, 987.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15248.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15248.004, 15248.004, 15248.004), stdev = 0.001
[info]   CI (99.9%): [15248.004, 15248.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.124 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.072), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.236 ±(99.9%) 1.939 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.236, 1.136), stdev = 0.504
[info]   CI (99.9%): [≈ 0, 2.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   948.852 ±(99.9%) 588.910 MB/sec [Average]
[info]   (min, avg, max) = (675.363, 948.852, 1021.321), stdev = 152.938
[info]   CI (99.9%): [359.942, 1537.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   14908.184 ±(99.9%) 9274.018 B/op [Average]
[info]   (min, avg, max) = (10600.124, 14908.184, 16017.647), stdev = 2408.433
[info]   CI (99.9%): [5634.166, 24182.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.664), stdev = 1.191
[info]   CI (99.9%): [≈ 0, 5.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   8.417 ±(99.9%) 72.470 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.417, 42.084), stdev = 18.820
[info]   CI (99.9%): [≈ 0, 80.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 9.000), stdev = 3.286
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Run progress: 45.59% complete, ETA 00:46:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2894.131 ops/s
[info] # Warmup Iteration   2: 6088.494 ops/s
[info] # Warmup Iteration   3: 6284.717 ops/s
[info] Iteration   1: 6274.453 ops/s
[info]                  ·gc.alloc.rate:            1141.086 MB/sec
[info]                  ·gc.alloc.rate.norm:       286280.070 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.920 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 253121.836 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 6167.410 ops/s
[info]                  ·gc.alloc.rate:            1121.616 MB/sec
[info]                  ·gc.alloc.rate.norm:       286280.066 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.906 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 257512.180 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 6347.162 ops/s
[info]                  ·gc.alloc.rate:                                  1154.899 MB/sec
[info]                  ·gc.alloc.rate.norm:                             286280.064 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.124 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 30.634 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.850 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       336588.106 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                990.937 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 6345.537 ops/s
[info]                  ·gc.alloc.rate:                                  1154.450 MB/sec
[info]                  ·gc.alloc.rate.norm:                             286280.069 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.900 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.310 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       253264.063 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 6202.468 ops/s
[info]                  ·gc.alloc.rate:            1128.229 MB/sec
[info]                  ·gc.alloc.rate.norm:       286280.066 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.273 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 345413.271 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   6267.406 ±(99.9%) 314.785 ops/s [Average]
[info]   (min, avg, max) = (6167.410, 6267.406, 6347.162), stdev = 81.749
[info]   CI (99.9%): [5952.621, 6582.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1140.056 ±(99.9%) 58.031 MB/sec [Average]
[info]   (min, avg, max) = (1121.616, 1140.056, 1154.899), stdev = 15.070
[info]   CI (99.9%): [1082.025, 1198.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   286280.067 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (286280.064, 286280.067, 286280.070), stdev = 0.002
[info]   CI (99.9%): [286280.058, 286280.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.211 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.124), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   6.307 ±(99.9%) 52.388 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.307, 30.634), stdev = 13.605
[info]   CI (99.9%): [≈ 0, 58.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1151.652 ±(99.9%) 731.106 MB/sec [Average]
[info]   (min, avg, max) = (1008.906, 1151.652, 1361.273), stdev = 189.866
[info]   CI (99.9%): [420.546, 1882.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   289179.891 ±(99.9%) 182679.534 B/op [Average]
[info]   (min, avg, max) = (253121.836, 289179.891, 345413.271), stdev = 47441.295
[info]   CI (99.9%): [106500.357, 471859.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   198.187 ±(99.9%) 1706.452 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 198.187, 990.937), stdev = 443.160
[info]   CI (99.9%): [≈ 0, 1904.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 13.000), stdev = 4.764
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Run progress: 45.84% complete, ETA 00:46:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12670.298 ops/s
[info] # Warmup Iteration   2: 17208.738 ops/s
[info] # Warmup Iteration   3: 17658.429 ops/s
[info] Iteration   1: 17602.828 ops/s
[info]                  ·gc.alloc.rate:            877.940 MB/sec
[info]                  ·gc.alloc.rate.norm:       78501.517 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.073 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 60272.573 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 17463.084 ops/s
[info]                  ·gc.alloc.rate:            871.323 MB/sec
[info]                  ·gc.alloc.rate.norm:       78552.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.880 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 91133.538 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 17498.938 ops/s
[info]                  ·gc.alloc.rate:            873.232 MB/sec
[info]                  ·gc.alloc.rate.norm:       78552.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 60630.723 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 17431.092 ops/s
[info]                  ·gc.alloc.rate:                                  869.773 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78538.690 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.015 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.395 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.437 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       91601.540 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                300.727 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 17753.487 ops/s
[info]                  ·gc.alloc.rate:                                  885.654 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78528.025 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.112 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 9.973 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.968 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       90525.821 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   17549.886 ±(99.9%) 503.900 ops/s [Average]
[info]   (min, avg, max) = (17431.092, 17549.886, 17753.487), stdev = 130.861
[info]   CI (99.9%): [17045.986, 18053.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   875.585 ±(99.9%) 24.688 MB/sec [Average]
[info]   (min, avg, max) = (869.773, 875.585, 885.654), stdev = 6.411
[info]   CI (99.9%): [850.897, 900.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   78534.456 ±(99.9%) 80.806 B/op [Average]
[info]   (min, avg, max) = (78501.517, 78534.456, 78552.023), stdev = 20.985
[info]   CI (99.9%): [78453.649, 78615.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.189 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.112), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.274 ±(99.9%) 16.736 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.274, 9.973), stdev = 4.346
[info]   CI (99.9%): [≈ 0, 19.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   878.873 ±(99.9%) 720.151 MB/sec [Average]
[info]   (min, avg, max) = (674.008, 878.873, 1020.968), stdev = 187.021
[info]   CI (99.9%): [158.722, 1599.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   78832.839 ±(99.9%) 64631.004 B/op [Average]
[info]   (min, avg, max) = (60272.573, 78832.839, 91601.540), stdev = 16784.467
[info]   CI (99.9%): [14201.835, 143463.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   60.145 ±(99.9%) 517.871 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 60.145, 300.727), stdev = 134.489
[info]   CI (99.9%): [≈ 0, 578.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.600, 10.000), stdev = 1.517
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Run progress: 46.10% complete, ETA 00:45:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13002.537 ops/s
[info] # Warmup Iteration   2: 20264.426 ops/s
[info] # Warmup Iteration   3: 20606.426 ops/s
[info] Iteration   1: 19995.997 ops/s
[info]                  ·gc.alloc.rate:            847.155 MB/sec
[info]                  ·gc.alloc.rate.norm:       66696.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.894 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 79429.632 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 20395.114 ops/s
[info]                  ·gc.alloc.rate:                   864.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.013 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        51865.934 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 51.403 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 20657.041 ops/s
[info]                  ·gc.alloc.rate:            875.277 MB/sec
[info]                  ·gc.alloc.rate.norm:       66696.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.085 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 76892.190 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 20805.654 ops/s
[info]                  ·gc.alloc.rate:                                  881.637 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66696.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.097 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.363 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.466 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76895.909 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                352.734 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 20962.996 ops/s
[info]                  ·gc.alloc.rate:                                  888.296 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66696.019 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.024 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.810 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       51106.141 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   20563.360 ±(99.9%) 1462.991 ops/s [Average]
[info]   (min, avg, max) = (19995.997, 20563.360, 20962.996), stdev = 379.934
[info]   CI (99.9%): [19100.369, 22026.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   871.305 ±(99.9%) 62.252 MB/sec [Average]
[info]   (min, avg, max) = (847.155, 871.305, 888.296), stdev = 16.167
[info]   CI (99.9%): [809.053, 933.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   66696.021 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (66696.019, 66696.021, 66696.025), stdev = 0.002
[info]   CI (99.9%): [66696.013, 66696.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.162 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.097), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.835 ±(99.9%) 12.277 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.835, 7.363), stdev = 3.188
[info]   CI (99.9%): [≈ 0, 14.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   877.424 ±(99.9%) 707.045 MB/sec [Average]
[info]   (min, avg, max) = (672.013, 877.424, 1016.466), stdev = 183.617
[info]   CI (99.9%): [170.378, 1584.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   67237.961 ±(99.9%) 55523.153 B/op [Average]
[info]   (min, avg, max) = (51106.141, 67237.961, 79429.632), stdev = 14419.187
[info]   CI (99.9%): [11714.808, 122761.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   80.827 ±(99.9%) 591.541 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 80.827, 352.734), stdev = 153.621
[info]   CI (99.9%): [≈ 0, 672.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 8.400, 13.000), stdev = 4.980
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 46.35% complete, ETA 00:45:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 422779.024 ops/s
[info] # Warmup Iteration   2: 484792.261 ops/s
[info] # Warmup Iteration   3: 489765.328 ops/s
[info] Iteration   1: 499121.721 ops/s
[info]                  ·gc.alloc.rate:            1131.502 MB/sec
[info]                  ·gc.alloc.rate.norm:       3568.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.167 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3182.239 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 492912.364 ops/s
[info]                  ·gc.alloc.rate:                   1117.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.192 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4296.466 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 12.762 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 499478.701 ops/s
[info]                  ·gc.alloc.rate:                                  1132.174 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3568.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.151 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.477 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.019 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3217.701 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 501681.884 ops/s
[info]                  ·gc.alloc.rate:            1137.242 MB/sec
[info]                  ·gc.alloc.rate.norm:       3568.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3203.555 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 501305.594 ops/s
[info]                  ·gc.alloc.rate:            1136.292 MB/sec
[info]                  ·gc.alloc.rate.norm:       3568.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4274.772 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   498900.053 ±(99.9%) 13581.587 ops/s [Average]
[info]   (min, avg, max) = (492912.364, 498900.053, 501681.884), stdev = 3527.095
[info]   CI (99.9%): [485318.466, 512481.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1130.865 ±(99.9%) 31.122 MB/sec [Average]
[info]   (min, avg, max) = (1117.115, 1130.865, 1137.242), stdev = 8.082
[info]   CI (99.9%): [1099.743, 1161.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3568.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3568.001, 3568.001, 3568.001), stdev = 0.001
[info]   CI (99.9%): [3568.001, 3568.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.261 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.151), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.095 ±(99.9%) 0.822 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.095, 0.477), stdev = 0.213
[info]   CI (99.9%): [≈ 0, 0.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1151.567 ±(99.9%) 709.651 MB/sec [Average]
[info]   (min, avg, max) = (1009.167, 1151.567, 1361.375), stdev = 184.294
[info]   CI (99.9%): [441.916, 1861.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3634.947 ±(99.9%) 2287.912 B/op [Average]
[info]   (min, avg, max) = (3182.239, 3634.947, 4296.466), stdev = 594.164
[info]   CI (99.9%): [1347.034, 5922.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.552 ±(99.9%) 21.977 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.552, 12.762), stdev = 5.707
[info]   CI (99.9%): [≈ 0, 24.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 13.000), stdev = 4.336
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 46.60% complete, ETA 00:45:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 432311.034 ops/s
[info] # Warmup Iteration   2: 503295.855 ops/s
[info] # Warmup Iteration   3: 507622.312 ops/s
[info] Iteration   1: 507445.692 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 505699.884 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 504741.129 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 506242.758 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 508435.396 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   506512.972 ±(99.9%) 5593.130 ops/s [Average]
[info]   (min, avg, max) = (504741.129, 506512.972, 508435.396), stdev = 1452.518
[info]   CI (99.9%): [500919.841, 512106.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Run progress: 46.85% complete, ETA 00:45:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13964.061 ops/s
[info] # Warmup Iteration   2: 19626.525 ops/s
[info] # Warmup Iteration   3: 19754.980 ops/s
[info] Iteration   1: 19769.834 ops/s
[info]                  ·gc.alloc.rate:            911.409 MB/sec
[info]                  ·gc.alloc.rate.norm:       72569.482 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.968 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 80337.445 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 19294.136 ops/s
[info]                  ·gc.alloc.rate:            889.821 MB/sec
[info]                  ·gc.alloc.rate.norm:       72576.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.851 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54879.353 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 19699.114 ops/s
[info]                  ·gc.alloc.rate:            908.256 MB/sec
[info]                  ·gc.alloc.rate.norm:       72573.945 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 80626.942 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 19567.977 ops/s
[info]                  ·gc.alloc.rate:                                  902.021 MB/sec
[info]                  ·gc.alloc.rate.norm:                             72560.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.119 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 9.548 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.005 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81809.501 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                321.452 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 19691.755 ops/s
[info]                  ·gc.alloc.rate:                                  907.967 MB/sec
[info]                  ·gc.alloc.rate.norm:                             72560.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.522 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.840 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54409.254 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   19604.563 ±(99.9%) 724.393 ops/s [Average]
[info]   (min, avg, max) = (19294.136, 19604.563, 19769.834), stdev = 188.123
[info]   CI (99.9%): [18880.170, 20328.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   903.895 ±(99.9%) 32.992 MB/sec [Average]
[info]   (min, avg, max) = (889.821, 903.895, 911.409), stdev = 8.568
[info]   CI (99.9%): [870.903, 936.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   72567.898 ±(99.9%) 29.144 B/op [Average]
[info]   (min, avg, max) = (72560.021, 72567.898, 72576.021), stdev = 7.569
[info]   CI (99.9%): [72538.754, 72597.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.199 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.119), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.214 ±(99.9%) 15.990 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.214, 9.548), stdev = 4.153
[info]   CI (99.9%): [≈ 0, 18.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   877.740 ±(99.9%) 706.370 MB/sec [Average]
[info]   (min, avg, max) = (672.851, 877.740, 1017.005), stdev = 183.442
[info]   CI (99.9%): [171.371, 1584.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   70412.499 ±(99.9%) 55471.781 B/op [Average]
[info]   (min, avg, max) = (54409.254, 70412.499, 81809.501), stdev = 14405.845
[info]   CI (99.9%): [14940.718, 125884.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   64.290 ±(99.9%) 553.560 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 64.290, 321.452), stdev = 143.758
[info]   CI (99.9%): [≈ 0, 617.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 8.000, 12.000), stdev = 4.528
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Run progress: 47.10% complete, ETA 00:45:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7510.242 ops/s
[info] # Warmup Iteration   2: 11200.791 ops/s
[info] # Warmup Iteration   3: 11225.972 ops/s
[info] Iteration   1: 11214.274 ops/s
[info]                  ·gc.alloc.rate:            1126.671 MB/sec
[info]                  ·gc.alloc.rate.norm:       158096.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.279 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 141904.107 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 11488.000 ops/s
[info]                  ·gc.alloc.rate:            1153.934 MB/sec
[info]                  ·gc.alloc.rate.norm:       158096.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.141 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 138532.495 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 11392.135 ops/s
[info]                  ·gc.alloc.rate:                                  1144.262 MB/sec
[info]                  ·gc.alloc.rate.norm:                             158099.688 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.087 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 11.975 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.112 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       187646.697 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                460.144 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 11678.350 ops/s
[info]                  ·gc.alloc.rate:            1173.195 MB/sec
[info]                  ·gc.alloc.rate.norm:       158112.035 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.010 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 137602.038 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 11460.622 ops/s
[info]                  ·gc.alloc.rate:            1151.328 MB/sec
[info]                  ·gc.alloc.rate.norm:       158112.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.497 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 186974.557 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   11446.676 ±(99.9%) 645.946 ops/s [Average]
[info]   (min, avg, max) = (11214.274, 11446.676, 11678.350), stdev = 167.750
[info]   CI (99.9%): [10800.730, 12092.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1149.878 ±(99.9%) 64.787 MB/sec [Average]
[info]   (min, avg, max) = (1126.671, 1149.878, 1173.195), stdev = 16.825
[info]   CI (99.9%): [1085.091, 1214.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   158103.168 ±(99.9%) 31.699 B/op [Average]
[info]   (min, avg, max) = (158096.038, 158103.168, 158112.038), stdev = 8.232
[info]   CI (99.9%): [158071.469, 158134.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.149 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.087), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.395 ±(99.9%) 20.622 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.395, 11.975), stdev = 5.356
[info]   CI (99.9%): [≈ 0, 23.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1152.608 ±(99.9%) 728.503 MB/sec [Average]
[info]   (min, avg, max) = (1011.141, 1152.608, 1361.497), stdev = 189.190
[info]   CI (99.9%): [424.105, 1881.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   158531.979 ±(99.9%) 101352.703 B/op [Average]
[info]   (min, avg, max) = (137602.038, 158531.979, 187646.697), stdev = 26320.975
[info]   CI (99.9%): [57179.275, 259884.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   92.029 ±(99.9%) 792.396 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 92.029, 460.144), stdev = 205.783
[info]   CI (99.9%): [≈ 0, 884.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 16.000), stdev = 5.505
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Run progress: 47.36% complete, ETA 00:44:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5677.105 ops/s
[info] # Warmup Iteration   2: 11100.421 ops/s
[info] # Warmup Iteration   3: 11340.510 ops/s
[info] Iteration   1: 11146.782 ops/s
[info]                  ·gc.alloc.rate:                   1020.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              144088.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.705 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        142393.404 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 94.051 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 11429.367 ops/s
[info]                  ·gc.alloc.rate:                   1046.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              144088.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.578 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        138880.593 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 91.731 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 11512.674 ops/s
[info]                  ·gc.alloc.rate:                                  1053.813 MB/sec
[info]                  ·gc.alloc.rate.norm:                             144088.041 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.094 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 12.833 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1012.980 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       138504.915 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                546.370 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 11614.234 ops/s
[info]                  ·gc.alloc.rate:                                  1063.101 MB/sec
[info]                  ·gc.alloc.rate.norm:                             144088.035 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.023 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.136 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.235 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       184495.941 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 11585.819 ops/s
[info]                  ·gc.alloc.rate:            1060.484 MB/sec
[info]                  ·gc.alloc.rate.norm:       144088.035 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.962 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 138718.244 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   11457.775 ±(99.9%) 724.014 ops/s [Average]
[info]   (min, avg, max) = (11146.782, 11457.775, 11614.234), stdev = 188.024
[info]   CI (99.9%): [10733.761, 12181.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1048.901 ±(99.9%) 65.601 MB/sec [Average]
[info]   (min, avg, max) = (1020.710, 1048.901, 1063.101), stdev = 17.036
[info]   CI (99.9%): [983.300, 1114.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   144088.037 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (144088.035, 144088.037, 144088.041), stdev = 0.002
[info]   CI (99.9%): [144088.027, 144088.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.094), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.194 ±(99.9%) 21.398 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.194, 12.833), stdev = 5.557
[info]   CI (99.9%): [≈ 0, 24.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1082.492 ±(99.9%) 600.329 MB/sec [Average]
[info]   (min, avg, max) = (1008.578, 1082.492, 1361.235), stdev = 155.903
[info]   CI (99.9%): [482.163, 1682.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   148598.619 ±(99.9%) 77518.232 B/op [Average]
[info]   (min, avg, max) = (138504.915, 148598.619, 184495.941), stdev = 20131.239
[info]   CI (99.9%): [71080.387, 226116.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.437 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   146.431 ±(99.9%) 879.287 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 146.431, 546.370), stdev = 228.348
[info]   CI (99.9%): [≈ 0, 1025.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.400, 13.000), stdev = 4.615
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Run progress: 47.61% complete, ETA 00:44:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 152708.471 ops/s
[info] # Warmup Iteration   2: 165679.101 ops/s
[info] # Warmup Iteration   3: 167622.859 ops/s
[info] Iteration   1: 166638.325 ops/s
[info]                  ·gc.alloc.rate:            964.046 MB/sec
[info]                  ·gc.alloc.rate.norm:       9104.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.324 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9550.468 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 167479.038 ops/s
[info]                  ·gc.alloc.rate:            968.600 MB/sec
[info]                  ·gc.alloc.rate.norm:       9104.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.005 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9502.575 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 165887.218 ops/s
[info]                  ·gc.alloc.rate:                                  959.875 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.036 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.344 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.550 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9622.572 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                31.591 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 165389.189 ops/s
[info]                  ·gc.alloc.rate:                                  956.557 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.018 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.176 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.682 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6478.365 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 163182.156 ops/s
[info]                  ·gc.alloc.rate:            943.860 MB/sec
[info]                  ·gc.alloc.rate.norm:       9104.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.137 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9849.374 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   165715.185 ±(99.9%) 6243.349 ops/s [Average]
[info]   (min, avg, max) = (163182.156, 165715.185, 167479.038), stdev = 1621.378
[info]   CI (99.9%): [159471.836, 171958.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   958.588 ±(99.9%) 36.159 MB/sec [Average]
[info]   (min, avg, max) = (943.860, 958.588, 968.600), stdev = 9.390
[info]   CI (99.9%): [922.429, 994.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9104.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9104.002, 9104.002, 9104.003), stdev = 0.001
[info]   CI (99.9%): [9104.002, 9104.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.063 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.036), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.104 ±(99.9%) 0.594 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.104, 0.344), stdev = 0.154
[info]   CI (99.9%): [≈ 0, 0.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   947.739 ±(99.9%) 575.076 MB/sec [Average]
[info]   (min, avg, max) = (680.682, 947.739, 1021.137), stdev = 149.345
[info]   CI (99.9%): [372.663, 1522.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   9000.671 ±(99.9%) 5453.547 B/op [Average]
[info]   (min, avg, max) = (6478.365, 9000.671, 9849.374), stdev = 1416.269
[info]   CI (99.9%): [3547.124, 14454.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   6.318 ±(99.9%) 54.401 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.318, 31.591), stdev = 14.128
[info]   CI (99.9%): [≈ 0, 60.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 10.000), stdev = 3.808
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Run progress: 47.86% complete, ETA 00:44:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3612.258 ops/s
[info] # Warmup Iteration   2: 10362.304 ops/s
[info] # Warmup Iteration   3: 10743.324 ops/s
[info] Iteration   1: 10884.326 ops/s
[info]                  ·gc.alloc.rate:            1362.280 MB/sec
[info]                  ·gc.alloc.rate.norm:       197000.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1343.499 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 194284.199 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 10915.272 ops/s
[info]                  ·gc.alloc.rate:                                  1365.951 MB/sec
[info]                  ·gc.alloc.rate.norm:                             197000.037 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.035 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.093 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.953 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       194981.156 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                672.349 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   3: 10992.763 ops/s
[info]                  ·gc.alloc.rate:                                  1375.753 MB/sec
[info]                  ·gc.alloc.rate.norm:                             197000.040 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.643 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.318 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       194933.092 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 10857.824 ops/s
[info]                  ·gc.alloc.rate:                                  1358.949 MB/sec
[info]                  ·gc.alloc.rate.norm:                             197000.191 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.066 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.406 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       197356.293 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 11002.515 ops/s
[info]                  ·gc.alloc.rate:            1377.033 MB/sec
[info]                  ·gc.alloc.rate.norm:       197000.040 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 194755.960 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   10930.540 ±(99.9%) 248.870 ops/s [Average]
[info]   (min, avg, max) = (10857.824, 10930.540, 11002.515), stdev = 64.631
[info]   CI (99.9%): [10681.670, 11179.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1367.993 ±(99.9%) 31.077 MB/sec [Average]
[info]   (min, avg, max) = (1358.949, 1367.993, 1377.033), stdev = 8.071
[info]   CI (99.9%): [1336.917, 1399.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   197000.069 ±(99.9%) 0.262 B/op [Average]
[info]   (min, avg, max) = (197000.037, 197000.069, 197000.191), stdev = 0.068
[info]   CI (99.9%): [196999.807, 197000.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.059 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.035), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.160 ±(99.9%) 8.529 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.160, 5.093), stdev = 2.215
[info]   CI (99.9%): [≈ 0, 9.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1355.905 ±(99.9%) 30.967 MB/sec [Average]
[info]   (min, avg, max) = (1343.499, 1355.905, 1361.406), stdev = 8.042
[info]   CI (99.9%): [1324.938, 1386.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   195262.140 ±(99.9%) 4630.905 B/op [Average]
[info]   (min, avg, max) = (194284.199, 195262.140, 197356.293), stdev = 1202.631
[info]   CI (99.9%): [190631.235, 199893.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   134.470 ±(99.9%) 1157.825 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 134.470, 672.349), stdev = 300.684
[info]   CI (99.9%): [≈ 0, 1292.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 9.600, 19.000), stdev = 6.269
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Run progress: 48.11% complete, ETA 00:44:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21118.034 ops/s
[info] # Warmup Iteration   2: 29607.466 ops/s
[info] # Warmup Iteration   3: 29352.855 ops/s
[info] Iteration   1: 29059.101 ops/s
[info]                  ·gc.alloc.rate:            1082.506 MB/sec
[info]                  ·gc.alloc.rate.norm:       58640.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 73022.221 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 28847.847 ops/s
[info]                  ·gc.alloc.rate:            1074.226 MB/sec
[info]                  ·gc.alloc.rate.norm:       58616.354 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.980 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55165.258 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 29680.349 ops/s
[info]                  ·gc.alloc.rate:                                  1105.323 MB/sec
[info]                  ·gc.alloc.rate.norm:                             58616.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.041 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.184 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.724 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       53970.564 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                176.605 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 29769.627 ops/s
[info]                  ·gc.alloc.rate:                                  1108.659 MB/sec
[info]                  ·gc.alloc.rate.norm:                             58616.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.024 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.260 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.075 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       53985.324 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 29238.565 ops/s
[info]                  ·gc.alloc.rate:                                  1088.857 MB/sec
[info]                  ·gc.alloc.rate.norm:                             58616.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.212 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73287.377 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   29319.098 ±(99.9%) 1527.740 ops/s [Average]
[info]   (min, avg, max) = (28847.847, 29319.098, 29769.627), stdev = 396.749
[info]   CI (99.9%): [27791.358, 30846.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1091.914 ±(99.9%) 56.819 MB/sec [Average]
[info]   (min, avg, max) = (1074.226, 1091.914, 1108.659), stdev = 14.756
[info]   CI (99.9%): [1035.095, 1148.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   58620.883 ±(99.9%) 41.195 B/op [Average]
[info]   (min, avg, max) = (58616.014, 58620.883, 58640.019), stdev = 10.698
[info]   CI (99.9%): [58579.688, 58662.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.070 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.041), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.731 ±(99.9%) 3.718 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.731, 2.184), stdev = 0.965
[info]   CI (99.9%): [≈ 0, 4.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1151.835 ±(99.9%) 713.465 MB/sec [Average]
[info]   (min, avg, max) = (1010.980, 1151.835, 1361.394), stdev = 185.285
[info]   CI (99.9%): [438.370, 1865.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   61886.149 ±(99.9%) 39656.491 B/op [Average]
[info]   (min, avg, max) = (53970.564, 61886.149, 73287.377), stdev = 10298.665
[info]   CI (99.9%): [22229.658, 101542.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   35.321 ±(99.9%) 304.125 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35.321, 176.605), stdev = 78.980
[info]   CI (99.9%): [≈ 0, 339.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 14.000), stdev = 4.868
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Run progress: 48.36% complete, ETA 00:43:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53988.079 ops/s
[info] # Warmup Iteration   2: 85039.247 ops/s
[info] # Warmup Iteration   3: 85217.476 ops/s
[info] Iteration   1: 85519.430 ops/s
[info]                  ·gc.alloc.rate:                   1361.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              25056.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.592 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        24751.268 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 12.259 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 84354.809 ops/s
[info]                  ·gc.alloc.rate:                                  1342.626 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25056.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.193 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.606 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.297 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25329.784 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                74.572 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 85623.891 ops/s
[info]                  ·gc.alloc.rate:                                  1362.957 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25056.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.035 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.380 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25027.024 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 86278.037 ops/s
[info]                  ·gc.alloc.rate:            1373.571 MB/sec
[info]                  ·gc.alloc.rate.norm:       25056.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.616 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24837.925 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 86091.453 ops/s
[info]                  ·gc.alloc.rate:                                  1370.399 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25056.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.422 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24891.867 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   85573.524 ±(99.9%) 2891.394 ops/s [Average]
[info]   (min, avg, max) = (84354.809, 85573.524, 86278.037), stdev = 750.886
[info]   CI (99.9%): [82682.130, 88464.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1362.140 ±(99.9%) 46.421 MB/sec [Average]
[info]   (min, avg, max) = (1342.626, 1362.140, 1373.571), stdev = 12.055
[info]   CI (99.9%): [1315.719, 1408.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   25056.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25056.005, 25056.005, 25056.005), stdev = 0.001
[info]   CI (99.9%): [25056.004, 25056.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.331 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.193), stdev = 0.086
[info]   CI (99.9%): [≈ 0, 0.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.733 ±(99.9%) 6.184 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.733, 3.606), stdev = 1.606
[info]   CI (99.9%): [≈ 0, 6.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1357.261 ±(99.9%) 28.148 MB/sec [Average]
[info]   (min, avg, max) = (1344.592, 1357.261, 1361.616), stdev = 7.310
[info]   CI (99.9%): [1329.113, 1385.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   24967.574 ±(99.9%) 869.724 B/op [Average]
[info]   (min, avg, max) = (24751.268, 24967.574, 25329.784), stdev = 225.865
[info]   CI (99.9%): [24097.849, 25837.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   17.366 ±(99.9%) 124.826 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.366, 74.572), stdev = 32.417
[info]   CI (99.9%): [≈ 0, 142.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 17.000), stdev = 5.630
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Run progress: 48.61% complete, ETA 00:43:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 619359.735 ops/s
[info] # Warmup Iteration   2: 678361.814 ops/s
[info] # Warmup Iteration   3: 699708.240 ops/s
[info] Iteration   1: 701737.333 ops/s
[info]                  ·gc.alloc.rate:            963.231 MB/sec
[info]                  ·gc.alloc.rate.norm:       2160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.405 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2263.543 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 693502.752 ops/s
[info]                  ·gc.alloc.rate:            951.512 MB/sec
[info]                  ·gc.alloc.rate.norm:       2160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.626 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1526.910 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 698078.071 ops/s
[info]                  ·gc.alloc.rate:                   957.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.984 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2275.305 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.011 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 693470.190 ops/s
[info]                  ·gc.alloc.rate:                                  951.614 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2160.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.130 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.296 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.066 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2317.644 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 703603.272 ops/s
[info]                  ·gc.alloc.rate:                                  965.499 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2160.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2284.213 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   698078.324 ±(99.9%) 17863.435 ops/s [Average]
[info]   (min, avg, max) = (693470.190, 698078.324, 703603.272), stdev = 4639.077
[info]   CI (99.9%): [680214.889, 715941.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   957.941 ±(99.9%) 24.842 MB/sec [Average]
[info]   (min, avg, max) = (951.512, 957.941, 965.499), stdev = 6.451
[info]   CI (99.9%): [933.100, 982.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2160.001, 2160.001, 2160.001), stdev = 0.001
[info]   CI (99.9%): [2160.001, 2160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.224 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.130), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.059 ±(99.9%) 0.508 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.059, 0.296), stdev = 0.132
[info]   CI (99.9%): [≈ 0, 0.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   946.620 ±(99.9%) 590.234 MB/sec [Average]
[info]   (min, avg, max) = (672.626, 946.620, 1021.066), stdev = 153.282
[info]   CI (99.9%): [356.386, 1536.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2133.523 ±(99.9%) 1308.078 B/op [Average]
[info]   (min, avg, max) = (1526.910, 2133.523, 2317.644), stdev = 339.704
[info]   CI (99.9%): [825.445, 3441.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.802 ±(99.9%) 15.518 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.802, 9.011), stdev = 4.030
[info]   CI (99.9%): [≈ 0, 17.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 10.000), stdev = 3.271
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 48.87% complete, ETA 00:43:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 682628.359 ops/s
[info] # Warmup Iteration   2: 741494.821 ops/s
[info] # Warmup Iteration   3: 705234.683 ops/s
[info] Iteration   1: 743725.015 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 743922.672 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 743524.365 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 744031.328 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 743753.143 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   743791.305 ±(99.9%) 750.570 ops/s [Average]
[info]   (min, avg, max) = (743524.365, 743791.305, 744031.328), stdev = 194.921
[info]   CI (99.9%): [743040.734, 744541.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Run progress: 49.12% complete, ETA 00:43:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34803.452 ops/s
[info] # Warmup Iteration   2: 68291.338 ops/s
[info] # Warmup Iteration   3: 68503.707 ops/s
[info] Iteration   1: 69106.465 ops/s
[info]                  ·gc.alloc.rate:                   1489.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              33928.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.431 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        30598.194 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 91.021 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 70932.277 ops/s
[info]                  ·gc.alloc.rate:                                  1529.188 MB/sec
[info]                  ·gc.alloc.rate.norm:                             33928.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.046 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.405 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       37748.972 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                14.780 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 71710.888 ops/s
[info]                  ·gc.alloc.rate:                                  1545.669 MB/sec
[info]                  ·gc.alloc.rate.norm:                             33928.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.307 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       29881.207 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 71906.335 ops/s
[info]                  ·gc.alloc.rate:                                  1550.144 MB/sec
[info]                  ·gc.alloc.rate.norm:                             33928.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.086 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       37251.793 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 71803.705 ops/s
[info]                  ·gc.alloc.rate:            1548.129 MB/sec
[info]                  ·gc.alloc.rate.norm:       33928.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.785 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 29844.176 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   71091.934 ±(99.9%) 4523.707 ops/s [Average]
[info]   (min, avg, max) = (69106.465, 71091.934, 71906.335), stdev = 1174.792
[info]   CI (99.9%): [66568.227, 75615.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1532.552 ±(99.9%) 97.755 MB/sec [Average]
[info]   (min, avg, max) = (1489.629, 1532.552, 1550.144), stdev = 25.387
[info]   CI (99.9%): [1434.797, 1630.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   33928.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (33928.006, 33928.006, 33928.006), stdev = 0.001
[info]   CI (99.9%): [33928.005, 33928.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.076 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.046), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.230 ±(99.9%) 1.692 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.230, 1.013), stdev = 0.439
[info]   CI (99.9%): [≈ 0, 1.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1493.987 ±(99.9%) 730.716 MB/sec [Average]
[info]   (min, avg, max) = (1343.431, 1493.987, 1702.006), stdev = 189.765
[info]   CI (99.9%): [763.271, 2224.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   33064.869 ±(99.9%) 15648.996 B/op [Average]
[info]   (min, avg, max) = (29844.176, 33064.869, 37748.972), stdev = 4063.995
[info]   CI (99.9%): [17415.873, 48713.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   21.160 ±(99.9%) 152.386 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.160, 91.021), stdev = 39.574
[info]   CI (99.9%): [≈ 0, 173.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 18.000), stdev = 5.857
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Run progress: 49.37% complete, ETA 00:43:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9562.347 ops/s
[info] # Warmup Iteration   2: 26520.446 ops/s
[info] # Warmup Iteration   3: 26602.763 ops/s
[info] Iteration   1: 26644.221 ops/s
[info]                  ·gc.alloc.rate:            960.538 MB/sec
[info]                  ·gc.alloc.rate.norm:       56752.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.937 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 59729.760 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 26543.803 ops/s
[info]                  ·gc.alloc.rate:            957.088 MB/sec
[info]                  ·gc.alloc.rate.norm:       56752.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 59950.223 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 26482.382 ops/s
[info]                  ·gc.alloc.rate:            954.803 MB/sec
[info]                  ·gc.alloc.rate.norm:       56752.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.009 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 60092.811 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 26501.223 ops/s
[info]                  ·gc.alloc.rate:                                  955.411 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56752.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.156 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 9.279 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.626 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       60447.602 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                197.800 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 26603.349 ops/s
[info]                  ·gc.alloc.rate:            959.111 MB/sec
[info]                  ·gc.alloc.rate.norm:       56752.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.628 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40273.767 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   26554.996 ±(99.9%) 262.498 ops/s [Average]
[info]   (min, avg, max) = (26482.382, 26554.996, 26644.221), stdev = 68.170
[info]   CI (99.9%): [26292.498, 26817.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   957.390 ±(99.9%) 9.347 MB/sec [Average]
[info]   (min, avg, max) = (954.803, 957.390, 960.538), stdev = 2.427
[info]   CI (99.9%): [948.043, 966.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   56752.017 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (56752.015, 56752.017, 56752.020), stdev = 0.002
[info]   CI (99.9%): [56752.008, 56752.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.269 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.156), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.856 ±(99.9%) 15.979 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.856, 9.279), stdev = 4.150
[info]   CI (99.9%): [≈ 0, 17.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   946.245 ±(99.9%) 571.867 MB/sec [Average]
[info]   (min, avg, max) = (680.628, 946.245, 1017.626), stdev = 148.512
[info]   CI (99.9%): [374.377, 1518.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   56098.832 ±(99.9%) 34079.460 B/op [Average]
[info]   (min, avg, max) = (40273.767, 56098.832, 60447.602), stdev = 8850.327
[info]   CI (99.9%): [22019.373, 90178.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   39.560 ±(99.9%) 340.623 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 39.560, 197.800), stdev = 88.459
[info]   CI (99.9%): [≈ 0, 380.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.600, 10.000), stdev = 3.578
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Run progress: 49.62% complete, ETA 00:42:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7678.398 ops/s
[info] # Warmup Iteration   2: 26751.269 ops/s
[info] # Warmup Iteration   3: 27199.452 ops/s
[info] Iteration   1: 27503.001 ops/s
[info]                  ·gc.alloc.rate:            753.746 MB/sec
[info]                  ·gc.alloc.rate.norm:       43144.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.615 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38500.137 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 27366.734 ops/s
[info]                  ·gc.alloc.rate:            750.113 MB/sec
[info]                  ·gc.alloc.rate.norm:       43145.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.684 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38691.428 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 27085.202 ops/s
[info]                  ·gc.alloc.rate:            742.433 MB/sec
[info]                  ·gc.alloc.rate.norm:       43144.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.743 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39094.196 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 27539.341 ops/s
[info]                  ·gc.alloc.rate:            754.837 MB/sec
[info]                  ·gc.alloc.rate.norm:       43144.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.684 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38448.421 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 27375.565 ops/s
[info]                  ·gc.alloc.rate:                                  750.325 MB/sec
[info]                  ·gc.alloc.rate.norm:                             43144.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.063 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.635 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1012.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58247.840 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                229.775 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   27373.968 ±(99.9%) 687.311 ops/s [Average]
[info]   (min, avg, max) = (27085.202, 27373.968, 27539.341), stdev = 178.492
[info]   CI (99.9%): [26686.657, 28061.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   750.291 ±(99.9%) 18.704 MB/sec [Average]
[info]   (min, avg, max) = (742.433, 750.291, 754.837), stdev = 4.857
[info]   CI (99.9%): [731.587, 768.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   43144.216 ±(99.9%) 1.724 B/op [Average]
[info]   (min, avg, max) = (43144.015, 43144.216, 43145.017), stdev = 0.448
[info]   CI (99.9%): [43142.491, 43145.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.109 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.063), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.727 ±(99.9%) 6.259 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.727, 3.635), stdev = 1.625
[info]   CI (99.9%): [≈ 0, 6.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   740.745 ±(99.9%) 586.046 MB/sec [Average]
[info]   (min, avg, max) = (672.615, 740.745, 1012.998), stdev = 152.194
[info]   CI (99.9%): [154.699, 1326.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   42596.404 ±(99.9%) 33705.064 B/op [Average]
[info]   (min, avg, max) = (38448.421, 42596.404, 58247.840), stdev = 8753.098
[info]   CI (99.9%): [8891.340, 76301.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   45.955 ±(99.9%) 395.686 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45.955, 229.775), stdev = 102.758
[info]   CI (99.9%): [≈ 0, 441.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 10.000), stdev = 0.837
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Run progress: 49.87% complete, ETA 00:42:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 164020.824 ops/s
[info] # Warmup Iteration   2: 176683.538 ops/s
[info] # Warmup Iteration   3: 179925.246 ops/s
[info] Iteration   1: 180616.693 ops/s
[info]                  ·gc.alloc.rate:            470.021 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.689 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2942.797 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 180711.599 ops/s
[info]                  ·gc.alloc.rate:            470.218 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.659 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2941.299 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 180081.295 ops/s
[info]                  ·gc.alloc.rate:            468.543 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.277 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5903.272 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 179208.386 ops/s
[info]                  ·gc.alloc.rate:            466.338 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.683 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2965.979 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 176327.254 ops/s
[info]                  ·gc.alloc.rate:            458.854 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3014.516 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   179389.045 ±(99.9%) 6979.838 ops/s [Average]
[info]   (min, avg, max) = (176327.254, 179389.045, 180711.599), stdev = 1812.642
[info]   CI (99.9%): [172409.207, 186368.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   466.795 ±(99.9%) 18.106 MB/sec [Average]
[info]   (min, avg, max) = (458.854, 466.795, 470.218), stdev = 4.702
[info]   CI (99.9%): [448.689, 484.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.002, 4096.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   405.202 ±(99.9%) 581.358 MB/sec [Average]
[info]   (min, avg, max) = (337.659, 405.202, 675.277), stdev = 150.977
[info]   CI (99.9%): [≈ 0, 986.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3553.573 ±(99.9%) 5059.189 B/op [Average]
[info]   (min, avg, max) = (2941.299, 3553.573, 5903.272), stdev = 1313.855
[info]   CI (99.9%): [≈ 0, 8612.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Run progress: 50.13% complete, ETA 00:42:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4606.212 ops/s
[info] # Warmup Iteration   2: 21423.034 ops/s
[info] # Warmup Iteration   3: 21613.395 ops/s
[info] Iteration   1: 21730.626 ops/s
[info]                  ·gc.alloc.rate:            1359.100 MB/sec
[info]                  ·gc.alloc.rate.norm:       98448.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.414 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 97456.682 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 21540.208 ops/s
[info]                  ·gc.alloc.rate:                                  1347.043 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98448.019 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.081 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.934 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.230 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       98900.224 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                292.028 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 22035.238 ops/s
[info]                  ·gc.alloc.rate:                                  1378.200 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98448.025 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.574 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       97245.433 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 22323.099 ops/s
[info]                  ·gc.alloc.rate:            1396.033 MB/sec
[info]                  ·gc.alloc.rate.norm:       98448.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.254 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 95995.402 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 21921.630 ops/s
[info]                  ·gc.alloc.rate:                                  1371.534 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98448.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.094 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.762 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       97746.584 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   21910.160 ±(99.9%) 1147.775 ops/s [Average]
[info]   (min, avg, max) = (21540.208, 21910.160, 22323.099), stdev = 298.074
[info]   CI (99.9%): [20762.385, 23057.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1370.382 ±(99.9%) 71.845 MB/sec [Average]
[info]   (min, avg, max) = (1347.043, 1370.382, 1396.033), stdev = 18.658
[info]   CI (99.9%): [1298.538, 1442.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   98448.020 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (98448.018, 98448.020, 98448.025), stdev = 0.003
[info]   CI (99.9%): [98448.010, 98448.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.136 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.081), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.320 ±(99.9%) 9.973 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.320, 5.934), stdev = 2.590
[info]   CI (99.9%): [≈ 0, 11.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1356.605 ±(99.9%) 27.733 MB/sec [Average]
[info]   (min, avg, max) = (1345.414, 1356.605, 1361.762), stdev = 7.202
[info]   CI (99.9%): [1328.872, 1384.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   97468.865 ±(99.9%) 4014.229 B/op [Average]
[info]   (min, avg, max) = (95995.402, 97468.865, 98900.224), stdev = 1042.483
[info]   CI (99.9%): [93454.636, 101483.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   58.406 ±(99.9%) 502.890 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 58.406, 292.028), stdev = 130.599
[info]   CI (99.9%): [≈ 0, 561.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.400, 17.000), stdev = 5.727
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Run progress: 50.38% complete, ETA 00:42:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60304.618 ops/s
[info] # Warmup Iteration   2: 80508.444 ops/s
[info] # Warmup Iteration   3: 80646.383 ops/s
[info] Iteration   1: 81424.446 ops/s
[info]                  ·gc.alloc.rate:            1257.402 MB/sec
[info]                  ·gc.alloc.rate.norm:       24304.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.171 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19544.681 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 78310.563 ops/s
[info]                  ·gc.alloc.rate:                                  1209.158 MB/sec
[info]                  ·gc.alloc.rate.norm:                             24304.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.036 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.727 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.426 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27163.586 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                66.938 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   3: 80237.011 ops/s
[info]                  ·gc.alloc.rate:                                  1238.918 MB/sec
[info]                  ·gc.alloc.rate.norm:                             24304.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.033 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.650 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.412 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26706.990 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 80866.973 ops/s
[info]                  ·gc.alloc.rate:                                  1248.662 MB/sec
[info]                  ·gc.alloc.rate.norm:                             24304.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.087 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       19874.470 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 80750.462 ops/s
[info]                  ·gc.alloc.rate:            1246.796 MB/sec
[info]                  ·gc.alloc.rate.norm:       24304.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.299 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26536.039 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   80317.891 ±(99.9%) 4616.350 ops/s [Average]
[info]   (min, avg, max) = (78310.563, 80317.891, 81424.446), stdev = 1198.852
[info]   CI (99.9%): [75701.541, 84934.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1240.187 ±(99.9%) 71.426 MB/sec [Average]
[info]   (min, avg, max) = (1209.158, 1240.187, 1257.402), stdev = 18.549
[info]   CI (99.9%): [1168.761, 1311.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   24304.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24304.005, 24304.005, 24304.005), stdev = 0.001
[info]   CI (99.9%): [24304.004, 24304.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.071 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.036), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.288 ±(99.9%) 1.415 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.288, 0.727), stdev = 0.367
[info]   CI (99.9%): [≈ 0, 1.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1221.279 ±(99.9%) 721.426 MB/sec [Average]
[info]   (min, avg, max) = (1011.171, 1221.279, 1361.412), stdev = 187.352
[info]   CI (99.9%): [499.853, 1942.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   23965.153 ±(99.9%) 14991.739 B/op [Average]
[info]   (min, avg, max) = (19544.681, 23965.153, 27163.586), stdev = 3893.307
[info]   CI (99.9%): [8973.414, 38956.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   13.388 ±(99.9%) 115.272 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.388, 66.938), stdev = 29.936
[info]   CI (99.9%): [≈ 0, 128.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 12.000), stdev = 4.669
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Run progress: 50.63% complete, ETA 00:42:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91072.428 ops/s
[info] # Warmup Iteration   2: 139859.646 ops/s
[info] # Warmup Iteration   3: 138248.265 ops/s
[info] Iteration   1: 140675.487 ops/s
[info]                  ·gc.alloc.rate:            1190.870 MB/sec
[info]                  ·gc.alloc.rate.norm:       13320.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.428 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11290.557 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 140613.776 ops/s
[info]                  ·gc.alloc.rate:                                  1189.848 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13320.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.041 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.462 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1348.711 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15098.421 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                52.192 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   3: 141141.474 ops/s
[info]                  ·gc.alloc.rate:                                  1194.385 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13320.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.016 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.182 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.062 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11387.069 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 142491.597 ops/s
[info]                  ·gc.alloc.rate:            1206.092 MB/sec
[info]                  ·gc.alloc.rate.norm:       13320.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.756 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15039.149 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 142443.819 ops/s
[info]                  ·gc.alloc.rate:            1205.371 MB/sec
[info]                  ·gc.alloc.rate.norm:       13320.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.401 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15044.216 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   141473.231 ±(99.9%) 3583.495 ops/s [Average]
[info]   (min, avg, max) = (140613.776, 141473.231, 142491.597), stdev = 930.622
[info]   CI (99.9%): [137889.736, 145056.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1197.313 ±(99.9%) 30.308 MB/sec [Average]
[info]   (min, avg, max) = (1189.848, 1197.313, 1206.092), stdev = 7.871
[info]   CI (99.9%): [1167.005, 1227.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   13320.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13320.003, 13320.003, 13320.003), stdev = 0.001
[info]   CI (99.9%): [13320.002, 13320.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.070 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.041), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.129 ±(99.9%) 0.779 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.129, 0.462), stdev = 0.202
[info]   CI (99.9%): [≈ 0, 0.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1220.472 ±(99.9%) 721.858 MB/sec [Average]
[info]   (min, avg, max) = (1009.428, 1220.472, 1361.756), stdev = 187.464
[info]   CI (99.9%): [498.613, 1942.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   13571.883 ±(99.9%) 7851.163 B/op [Average]
[info]   (min, avg, max) = (11290.557, 13571.883, 15098.421), stdev = 2038.922
[info]   CI (99.9%): [5720.719, 21423.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   10.438 ±(99.9%) 89.878 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.438, 52.192), stdev = 23.341
[info]   CI (99.9%): [≈ 0, 100.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 14.000), stdev = 5.595
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Run progress: 50.88% complete, ETA 00:41:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 396072.240 ops/s
[info] # Warmup Iteration   2: 453987.738 ops/s
[info] # Warmup Iteration   3: 469797.172 ops/s
[info] Iteration   1: 449467.401 ops/s
[info]                  ·gc.alloc.rate:            497.993 MB/sec
[info]                  ·gc.alloc.rate.norm:       1744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.981 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1180.128 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 468888.805 ops/s
[info]                  ·gc.alloc.rate:            519.550 MB/sec
[info]                  ·gc.alloc.rate.norm:       1744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.759 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2258.286 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 465335.504 ops/s
[info]                  ·gc.alloc.rate:            515.561 MB/sec
[info]                  ·gc.alloc.rate.norm:       1744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1137.797 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 457690.345 ops/s
[info]                  ·gc.alloc.rate:            507.155 MB/sec
[info]                  ·gc.alloc.rate.norm:       1744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.801 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2313.620 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 465060.538 ops/s
[info]                  ·gc.alloc.rate:            515.305 MB/sec
[info]                  ·gc.alloc.rate.norm:       1744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.741 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2276.828 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   461288.519 ±(99.9%) 29892.522 ops/s [Average]
[info]   (min, avg, max) = (449467.401, 461288.519, 468888.805), stdev = 7762.993
[info]   CI (99.9%): [431395.996, 491181.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   511.113 ±(99.9%) 33.142 MB/sec [Average]
[info]   (min, avg, max) = (497.993, 511.113, 519.550), stdev = 8.607
[info]   CI (99.9%): [477.970, 544.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1744.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1744.001, 1744.001, 1744.001), stdev = 0.001
[info]   CI (99.9%): [1744.001, 1744.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   538.327 ±(99.9%) 708.861 MB/sec [Average]
[info]   (min, avg, max) = (336.355, 538.327, 672.801), stdev = 184.089
[info]   CI (99.9%): [≈ 0, 1247.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1833.332 ±(99.9%) 2372.443 B/op [Average]
[info]   (min, avg, max) = (1137.797, 1833.332, 2313.620), stdev = 616.116
[info]   CI (99.9%): [≈ 0, 4205.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 51.13% complete, ETA 00:41:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 470929.306 ops/s
[info] # Warmup Iteration   2: 538691.535 ops/s
[info] # Warmup Iteration   3: 534597.503 ops/s
[info] Iteration   1: 539026.414 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 537358.379 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 536900.644 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 537378.658 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 537123.891 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   537557.597 ±(99.9%) 3249.643 ops/s [Average]
[info]   (min, avg, max) = (536900.644, 537557.597, 539026.414), stdev = 843.922
[info]   CI (99.9%): [534307.954, 540807.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Run progress: 51.39% complete, ETA 00:41:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75632.139 ops/s
[info] # Warmup Iteration   2: 104741.613 ops/s
[info] # Warmup Iteration   3: 104930.838 ops/s
[info] Iteration   1: 104762.442 ops/s
[info]                  ·gc.alloc.rate:            1277.851 MB/sec
[info]                  ·gc.alloc.rate.norm:       19200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.401 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20214.960 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 105493.250 ops/s
[info]                  ·gc.alloc.rate:                                  1286.681 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19200.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.057 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.852 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.278 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20193.781 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                59.627 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 104954.260 ops/s
[info]                  ·gc.alloc.rate:                                  1280.192 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19200.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.019 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15313.001 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 105940.103 ops/s
[info]                  ·gc.alloc.rate:                                  1292.718 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19200.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.119 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.913 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20227.726 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 105509.630 ops/s
[info]                  ·gc.alloc.rate:                                  1287.389 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19200.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.059 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.865 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20310.726 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   105331.937 ±(99.9%) 1820.858 ops/s [Average]
[info]   (min, avg, max) = (104762.442, 105331.937, 105940.103), stdev = 472.871
[info]   CI (99.9%): [103511.079, 107152.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1284.966 ±(99.9%) 22.969 MB/sec [Average]
[info]   (min, avg, max) = (1277.851, 1284.966, 1292.718), stdev = 5.965
[info]   CI (99.9%): [1261.997, 1307.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   19200.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19200.004, 19200.004, 19200.004), stdev = 0.001
[info]   CI (99.9%): [19200.003, 19200.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.092 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.057), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.219 ±(99.9%) 1.373 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.219, 0.852), stdev = 0.357
[info]   CI (99.9%): [≈ 0, 1.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1288.695 ±(99.9%) 576.799 MB/sec [Average]
[info]   (min, avg, max) = (1021.019, 1288.695, 1361.913), stdev = 149.793
[info]   CI (99.9%): [711.897, 1865.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   19252.039 ±(99.9%) 8480.796 B/op [Average]
[info]   (min, avg, max) = (15313.001, 19252.039, 20310.726), stdev = 2202.436
[info]   CI (99.9%): [10771.243, 27732.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   11.925 ±(99.9%) 102.682 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.925, 59.627), stdev = 26.666
[info]   CI (99.9%): [≈ 0, 114.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 15.000), stdev = 5.339
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Run progress: 51.64% complete, ETA 00:41:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 119255.213 ops/s
[info] # Warmup Iteration   2: 147179.308 ops/s
[info] # Warmup Iteration   3: 148555.492 ops/s
[info] Iteration   1: 151974.594 ops/s
[info]                  ·gc.alloc.rate:                                  2557.924 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26496.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.085 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.631 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28202.103 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 148314.878 ops/s
[info]                  ·gc.alloc.rate:                                  2496.315 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26496.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.049 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.240 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25285.202 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 148765.309 ops/s
[info]                  ·gc.alloc.rate:                                  2504.265 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26496.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.113 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.823 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28808.427 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 148657.747 ops/s
[info]                  ·gc.alloc.rate:                                  2502.666 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26496.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.743 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25226.362 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 149130.799 ops/s
[info]                  ·gc.alloc.rate:                                  2510.107 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26496.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.066 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.297 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25146.871 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   149368.665 ±(99.9%) 5720.299 ops/s [Average]
[info]   (min, avg, max) = (148314.878, 149368.665, 151974.594), stdev = 1485.543
[info]   CI (99.9%): [143648.367, 155088.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   2514.256 ±(99.9%) 95.883 MB/sec [Average]
[info]   (min, avg, max) = (2496.315, 2514.256, 2557.924), stdev = 24.901
[info]   CI (99.9%): [2418.372, 2610.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   26496.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (26496.003, 26496.003, 26496.003), stdev = 0.001
[info]   CI (99.9%): [26496.002, 26496.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.012 MB/sec [Average]
[info]   (min, avg, max) = (0.003, 0.006, 0.011), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.068 ±(99.9%) 0.126 B/op [Average]
[info]   (min, avg, max) = (0.028, 0.068, 0.113), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2518.547 ±(99.9%) 717.724 MB/sec [Average]
[info]   (min, avg, max) = (2382.240, 2518.547, 2722.823), stdev = 186.391
[info]   CI (99.9%): [1800.823, 3236.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   26533.793 ±(99.9%) 6981.550 B/op [Average]
[info]   (min, avg, max) = (25146.871, 26533.793, 28808.427), stdev = 1813.086
[info]   CI (99.9%): [19552.243, 33515.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   37.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava
[info] # Run progress: 51.89% complete, ETA 00:40:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7482.674 ops/s
[info] # Warmup Iteration   2: 607965.587 ops/s
[info] # Warmup Iteration   3: 616998.830 ops/s
[info] Iteration   1: 618621.939 ops/s
[info]                  ·gc.alloc.rate:            342.721 MB/sec
[info]                  ·gc.alloc.rate.norm:       872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 847.352 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 618586.787 ops/s
[info]                  ·gc.alloc.rate:                   342.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             333.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        847.397 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.695 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 618716.942 ops/s
[info]                  ·gc.alloc.rate:            342.777 MB/sec
[info]                  ·gc.alloc.rate.norm:       872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.704 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 848.920 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 619981.179 ops/s
[info]                  ·gc.alloc.rate:            343.624 MB/sec
[info]                  ·gc.alloc.rate.norm:       872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.840 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 847.174 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 619541.925 ops/s
[info]                  ·gc.alloc.rate:                   343.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             333.044 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        846.114 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.692 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava":
[info]   619089.755 ±(99.9%) 2442.894 ops/s [Average]
[info]   (min, avg, max) = (618586.787, 619089.755, 619981.179), stdev = 634.412
[info]   CI (99.9%): [616646.861, 621532.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   343.015 ±(99.9%) 1.549 MB/sec [Average]
[info]   (min, avg, max) = (342.721, 343.015, 343.624), stdev = 0.402
[info]   CI (99.9%): [341.467, 344.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   872.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (872.001, 872.001, 872.001), stdev = 0.001
[info]   CI (99.9%): [872.001, 872.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   333.335 ±(99.9%) 1.548 MB/sec [Average]
[info]   (min, avg, max) = (333.033, 333.335, 333.840), stdev = 0.402
[info]   CI (99.9%): [331.786, 334.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   847.391 ±(99.9%) 3.859 B/op [Average]
[info]   (min, avg, max) = (846.114, 847.391, 848.920), stdev = 1.002
[info]   CI (99.9%): [843.532, 851.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.677 ±(99.9%) 3.572 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.677, 1.695), stdev = 0.928
[info]   CI (99.9%): [≈ 0, 4.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Run progress: 52.14% complete, ETA 00:40:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 199185.499 ops/s
[info] # Warmup Iteration   2: 318241.072 ops/s
[info] # Warmup Iteration   3: 319814.006 ops/s
[info] Iteration   1: 328389.437 ops/s
[info]                  ·gc.alloc.rate:            342.143 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1612.192 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 330732.062 ops/s
[info]                  ·gc.alloc.rate:                   344.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.634 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1597.622 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.170 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 330762.332 ops/s
[info]                  ·gc.alloc.rate:            344.610 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1600.623 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 331230.315 ops/s
[info]                  ·gc.alloc.rate:            345.096 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.333 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1598.357 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 331352.737 ops/s
[info]                  ·gc.alloc.rate:            345.252 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1597.701 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   330493.377 ±(99.9%) 4651.735 ops/s [Average]
[info]   (min, avg, max) = (328389.437, 330493.377, 331352.737), stdev = 1208.041
[info]   CI (99.9%): [325841.642, 335145.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   344.328 ±(99.9%) 4.848 MB/sec [Average]
[info]   (min, avg, max) = (342.143, 344.328, 345.252), stdev = 1.259
[info]   CI (99.9%): [339.480, 349.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1640.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1640.001, 1640.001, 1640.001), stdev = 0.001
[info]   CI (99.9%): [1640.001, 1640.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   336.198 ±(99.9%) 1.215 MB/sec [Average]
[info]   (min, avg, max) = (335.634, 336.198, 336.347), stdev = 0.316
[info]   CI (99.9%): [334.983, 337.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1601.299 ±(99.9%) 23.910 B/op [Average]
[info]   (min, avg, max) = (1597.622, 1601.299, 1612.192), stdev = 6.209
[info]   CI (99.9%): [1577.389, 1625.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.634 ±(99.9%) 5.459 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.634, 3.170), stdev = 1.418
[info]   CI (99.9%): [≈ 0, 6.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Run progress: 52.39% complete, ETA 00:40:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 850662.618 ops/s
[info] # Warmup Iteration   2: 830698.403 ops/s
[info] # Warmup Iteration   3: 892236.107 ops/s
[info] Iteration   1: 893479.801 ops/s
[info]                  ·gc.alloc.rate:            308.794 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.980 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 593.656 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 893481.119 ops/s
[info]                  ·gc.alloc.rate:            308.756 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.983 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 593.735 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 893111.397 ops/s
[info]                  ·gc.alloc.rate:            308.651 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 593.972 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 888891.039 ops/s
[info]                  ·gc.alloc.rate:            307.241 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 596.804 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 875973.699 ops/s
[info]                  ·gc.alloc.rate:            302.770 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.052 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 605.595 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   888987.411 ±(99.9%) 28991.810 ops/s [Average]
[info]   (min, avg, max) = (875973.699, 888987.411, 893481.119), stdev = 7529.081
[info]   CI (99.9%): [859995.601, 917979.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   307.242 ±(99.9%) 9.945 MB/sec [Average]
[info]   (min, avg, max) = (302.770, 307.242, 308.794), stdev = 2.583
[info]   CI (99.9%): [297.298, 317.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (544.000, 544.000, 544.000), stdev = 0.001
[info]   CI (99.9%): [544.000, 544.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   337.016 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (336.980, 337.016, 337.064), stdev = 0.039
[info]   CI (99.9%): [336.866, 337.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   596.752 ±(99.9%) 19.693 B/op [Average]
[info]   (min, avg, max) = (593.656, 596.752, 605.595), stdev = 5.114
[info]   CI (99.9%): [577.059, 616.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Run progress: 52.64% complete, ETA 00:40:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39699.294 ops/s
[info] # Warmup Iteration   2: 73775.266 ops/s
[info] # Warmup Iteration   3: 76464.002 ops/s
[info] Iteration   1: 77387.697 ops/s
[info]                  ·gc.alloc.rate:                                  3420.668 MB/sec
[info]                  ·gc.alloc.rate.norm:                             69576.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.023 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.467 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3743.898 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76150.461 B/op
[info]                  ·gc.count:                                       11.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 76529.134 ops/s
[info]                  ·gc.alloc.rate:                                  3382.208 MB/sec
[info]                  ·gc.alloc.rate.norm:                             69576.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.546 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.619 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       63001.686 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 76406.884 ops/s
[info]                  ·gc.alloc.rate:                                  3378.703 MB/sec
[info]                  ·gc.alloc.rate.norm:                             69576.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.176 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.944 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70116.376 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 76432.014 ops/s
[info]                  ·gc.alloc.rate:                                  3378.773 MB/sec
[info]                  ·gc.alloc.rate.norm:                             69576.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.412 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.857 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70092.529 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   5: 77337.765 ops/s
[info]                  ·gc.alloc.rate:                                  3418.532 MB/sec
[info]                  ·gc.alloc.rate.norm:                             69576.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.022 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.447 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.573 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69271.546 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   76818.699 ±(99.9%) 1921.615 ops/s [Average]
[info]   (min, avg, max) = (76406.884, 76818.699, 77387.697), stdev = 499.037
[info]   CI (99.9%): [74897.084, 78740.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3395.777 ±(99.9%) 83.970 MB/sec [Average]
[info]   (min, avg, max) = (3378.703, 3395.777, 3420.668), stdev = 21.807
[info]   CI (99.9%): [3311.807, 3479.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   69576.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (69576.005, 69576.005, 69576.006), stdev = 0.001
[info]   CI (99.9%): [69576.005, 69576.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.026 MB/sec [Average]
[info]   (min, avg, max) = (0.009, 0.020, 0.027), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.410 ±(99.9%) 0.538 B/op [Average]
[info]   (min, avg, max) = (0.176, 0.410, 0.546), stdev = 0.140
[info]   CI (99.9%): [≈ 0, 0.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3403.778 ±(99.9%) 927.502 MB/sec [Average]
[info]   (min, avg, max) = (3062.619, 3403.778, 3743.898), stdev = 240.869
[info]   CI (99.9%): [2476.276, 4331.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   69726.520 ±(99.9%) 17956.491 B/op [Average]
[info]   (min, avg, max) = (63001.686, 69726.520, 76150.461), stdev = 4663.244
[info]   CI (99.9%): [51770.028, 87683.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   50.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 10.000, 11.000), stdev = 0.707
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.800, 10.000), stdev = 1.095
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Run progress: 52.90% complete, ETA 00:40:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 178751.616 ops/s
[info] # Warmup Iteration   2: 225856.220 ops/s
[info] # Warmup Iteration   3: 227593.898 ops/s
[info] Iteration   1: 225950.714 ops/s
[info]                  ·gc.alloc.rate:                                  1539.153 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10720.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.054 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.376 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1688.805 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11762.307 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                23.200 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   2: 234935.387 ops/s
[info]                  ·gc.alloc.rate:                                  1599.907 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10720.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.031 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.210 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.659 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11401.785 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 235333.126 ops/s
[info]                  ·gc.alloc.rate:            1602.722 MB/sec
[info]                  ·gc.alloc.rate.norm:       10720.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9105.501 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 229712.969 ops/s
[info]                  ·gc.alloc.rate:                                  1564.460 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10720.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.778 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11660.936 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 231353.339 ops/s
[info]                  ·gc.alloc.rate:                                  1575.703 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10720.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.875 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11578.388 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   231457.107 ±(99.9%) 14974.884 ops/s [Average]
[info]   (min, avg, max) = (225950.714, 231457.107, 235333.126), stdev = 3888.930
[info]   CI (99.9%): [216482.223, 246431.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1576.389 ±(99.9%) 101.437 MB/sec [Average]
[info]   (min, avg, max) = (1539.153, 1576.389, 1602.722), stdev = 26.343
[info]   CI (99.9%): [1474.952, 1677.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10720.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10720.002, 10720.002, 10720.002), stdev = 0.001
[info]   CI (99.9%): [10720.002, 10720.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.093 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.054), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.123 ±(99.9%) 0.641 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.123, 0.376), stdev = 0.166
[info]   CI (99.9%): [≈ 0, 0.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1631.092 ±(99.9%) 581.060 MB/sec [Average]
[info]   (min, avg, max) = (1361.342, 1631.092, 1701.875), stdev = 150.899
[info]   CI (99.9%): [1050.032, 2212.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   11101.783 ±(99.9%) 4327.153 B/op [Average]
[info]   (min, avg, max) = (9105.501, 11101.783, 11762.307), stdev = 1123.748
[info]   CI (99.9%): [6774.630, 15428.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.640 ±(99.9%) 39.951 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.640, 23.200), stdev = 10.375
[info]   CI (99.9%): [≈ 0, 44.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 15.000), stdev = 4.919
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava
[info] # Run progress: 53.15% complete, ETA 00:39:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36111.429 ops/s
[info] # Warmup Iteration   2: 1048768.224 ops/s
[info] # Warmup Iteration   3: 1033437.948 ops/s
[info] Iteration   1: 1061446.843 ops/s
[info]                  ·gc.alloc.rate:            437.014 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.411 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 989.630 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 1071532.408 ops/s
[info]                  ·gc.alloc.rate:            441.148 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.702 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 490.173 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 1070728.610 ops/s
[info]                  ·gc.alloc.rate:            440.814 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.702 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 490.546 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 1068869.595 ops/s
[info]                  ·gc.alloc.rate:                   440.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             333.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        490.433 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.981 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1065308.075 ops/s
[info]                  ·gc.alloc.rate:                   438.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             666.744 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        985.123 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.984 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava":
[info]   1067577.106 ±(99.9%) 16105.585 ops/s [Average]
[info]   (min, avg, max) = (1061446.843, 1067577.106, 1071532.408), stdev = 4182.569
[info]   CI (99.9%): [1051471.521, 1083682.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   439.524 ±(99.9%) 6.612 MB/sec [Average]
[info]   (min, avg, max) = (437.014, 439.524, 441.148), stdev = 1.717
[info]   CI (99.9%): [432.912, 446.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   466.924 ±(99.9%) 703.569 MB/sec [Average]
[info]   (min, avg, max) = (333.061, 466.924, 667.411), stdev = 182.715
[info]   CI (99.9%): [≈ 0, 1170.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   689.181 ±(99.9%) 1048.216 B/op [Average]
[info]   (min, avg, max) = (490.173, 689.181, 989.630), stdev = 272.218
[info]   CI (99.9%): [≈ 0, 1737.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.393 ±(99.9%) 2.072 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.393, 0.984), stdev = 0.538
[info]   CI (99.9%): [≈ 0, 2.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 10.000), stdev = 2.490
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Run progress: 53.40% complete, ETA 00:39:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 604885.771 ops/s
[info] # Warmup Iteration   2: 968726.255 ops/s
[info] # Warmup Iteration   3: 981016.173 ops/s
[info] Iteration   1: 977014.280 ops/s
[info]                  ·gc.alloc.rate:            641.314 MB/sec
[info]                  ·gc.alloc.rate.norm:       1032.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.890 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1079.593 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 982661.480 ops/s
[info]                  ·gc.alloc.rate:            644.424 MB/sec
[info]                  ·gc.alloc.rate.norm:       1032.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.440 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 538.786 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 967326.125 ops/s
[info]                  ·gc.alloc.rate:            634.213 MB/sec
[info]                  ·gc.alloc.rate.norm:       1032.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.737 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1094.686 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 973471.026 ops/s
[info]                  ·gc.alloc.rate:            638.256 MB/sec
[info]                  ·gc.alloc.rate.norm:       1032.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1087.746 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 964491.086 ops/s
[info]                  ·gc.alloc.rate:            632.369 MB/sec
[info]                  ·gc.alloc.rate.norm:       1032.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1097.876 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   972992.799 ±(99.9%) 28183.105 ops/s [Average]
[info]   (min, avg, max) = (964491.086, 972992.799, 982661.480), stdev = 7319.063
[info]   CI (99.9%): [944809.695, 1001175.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   638.115 ±(99.9%) 19.088 MB/sec [Average]
[info]   (min, avg, max) = (632.369, 638.115, 644.424), stdev = 4.957
[info]   CI (99.9%): [619.027, 657.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1032.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1032.000, 1032.000, 1032.000), stdev = 0.001
[info]   CI (99.9%): [1032.000, 1032.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   605.107 ±(99.9%) 578.333 MB/sec [Average]
[info]   (min, avg, max) = (336.440, 605.107, 672.737), stdev = 150.191
[info]   CI (99.9%): [26.773, 1183.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   979.737 ±(99.9%) 949.566 B/op [Average]
[info]   (min, avg, max) = (538.786, 979.737, 1097.876), stdev = 246.599
[info]   CI (99.9%): [30.171, 1929.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 9.000), stdev = 1.949
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Run progress: 53.65% complete, ETA 00:39:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1155315.889 ops/s
[info] # Warmup Iteration   2: 1303756.714 ops/s
[info] # Warmup Iteration   3: 1298692.194 ops/s
[info] Iteration   1: 1295548.541 ops/s
[info]                  ·gc.alloc.rate:                   533.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        818.094 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.809 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1295615.421 ops/s
[info]                  ·gc.alloc.rate:            533.309 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.301 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 408.625 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 1287267.178 ops/s
[info]                  ·gc.alloc.rate:            529.872 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.607 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 822.556 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 1291064.353 ops/s
[info]                  ·gc.alloc.rate:                   531.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.445 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        820.991 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.812 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1295283.802 ops/s
[info]                  ·gc.alloc.rate:            533.221 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.325 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 408.720 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1292955.859 ±(99.9%) 14298.478 ops/s [Average]
[info]   (min, avg, max) = (1287267.178, 1292955.859, 1295615.421), stdev = 3713.269
[info]   CI (99.9%): [1278657.381, 1307254.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   532.261 ±(99.9%) 5.916 MB/sec [Average]
[info]   (min, avg, max) = (529.872, 532.261, 533.356), stdev = 1.536
[info]   CI (99.9%): [526.345, 538.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   538.407 ±(99.9%) 710.391 MB/sec [Average]
[info]   (min, avg, max) = (336.301, 538.407, 673.445), stdev = 184.486
[info]   CI (99.9%): [≈ 0, 1248.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   655.797 ±(99.9%) 868.700 B/op [Average]
[info]   (min, avg, max) = (408.625, 655.797, 822.556), stdev = 225.599
[info]   CI (99.9%): [≈ 0, 1524.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.324 ±(99.9%) 1.710 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.324, 0.812), stdev = 0.444
[info]   CI (99.9%): [≈ 0, 2.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 53.90% complete, ETA 00:39:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1334905.143 ops/s
[info] # Warmup Iteration   2: 1455780.350 ops/s
[info] # Warmup Iteration   3: 1435040.904 ops/s
[info] Iteration   1: 1460380.182 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1460791.387 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1461963.404 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1461187.180 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1452636.345 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   1459391.700 ±(99.9%) 14714.353 ops/s [Average]
[info]   (min, avg, max) = (1452636.345, 1459391.700, 1461963.404), stdev = 3821.271
[info]   CI (99.9%): [1444677.346, 1474106.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Run progress: 54.16% complete, ETA 00:39:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21547.196 ops/s
[info] # Warmup Iteration   2: 34924.960 ops/s
[info] # Warmup Iteration   3: 35539.401 ops/s
[info] Iteration   1: 35665.676 ops/s
[info]                  ·gc.alloc.rate:                                  1744.415 MB/sec
[info]                  ·gc.alloc.rate.norm:                             76992.343 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.145 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.388 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1689.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74577.032 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                176.375 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   2: 36263.251 ops/s
[info]                  ·gc.alloc.rate:                                  1773.387 MB/sec
[info]                  ·gc.alloc.rate.norm:                             76984.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.207 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.556 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73865.776 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 35774.102 ops/s
[info]                  ·gc.alloc.rate:                                  1749.702 MB/sec
[info]                  ·gc.alloc.rate.norm:                             76984.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁵ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.128 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       89850.312 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 35472.308 ops/s
[info]                  ·gc.alloc.rate:                                  1735.098 MB/sec
[info]                  ·gc.alloc.rate.norm:                             76984.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.101 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.935 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75512.604 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 35495.257 ops/s
[info]                  ·gc.alloc.rate:                                  1736.022 MB/sec
[info]                  ·gc.alloc.rate.norm:                             76984.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.058 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.738 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75463.683 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   35734.119 ±(99.9%) 1235.607 ops/s [Average]
[info]   (min, avg, max) = (35472.308, 35734.119, 36263.251), stdev = 320.883
[info]   CI (99.9%): [34498.511, 36969.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1747.725 ±(99.9%) 59.958 MB/sec [Average]
[info]   (min, avg, max) = (1735.098, 1747.725, 1773.387), stdev = 15.571
[info]   CI (99.9%): [1687.767, 1807.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   76985.678 ±(99.9%) 14.347 B/op [Average]
[info]   (min, avg, max) = (76984.011, 76985.678, 76992.343), stdev = 3.726
[info]   CI (99.9%): [76971.331, 77000.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.246 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.031, 0.145), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.351 ±(99.9%) 10.847 B/op [Average]
[info]   (min, avg, max) = (0.001, 1.351, 6.388), stdev = 2.817
[info]   CI (99.9%): [≈ 0, 12.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1767.410 ±(99.9%) 591.694 MB/sec [Average]
[info]   (min, avg, max) = (1689.691, 1767.410, 2042.128), stdev = 153.661
[info]   CI (99.9%): [1175.716, 2359.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   77853.881 ±(99.9%) 25956.290 B/op [Average]
[info]   (min, avg, max) = (73865.776, 77853.881, 89850.312), stdev = 6740.766
[info]   CI (99.9%): [51897.592, 103810.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   35.275 ±(99.9%) 303.728 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35.275, 176.375), stdev = 78.877
[info]   CI (99.9%): [≈ 0, 339.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 15.000), stdev = 4.722
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Run progress: 54.41% complete, ETA 00:38:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32133.280 ops/s
[info] # Warmup Iteration   2: 40775.483 ops/s
[info] # Warmup Iteration   3: 40601.148 ops/s
[info] Iteration   1: 40921.001 ops/s
[info]                  ·gc.alloc.rate:            816.921 MB/sec
[info]                  ·gc.alloc.rate.norm:       31424.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38891.184 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 41200.741 ops/s
[info]                  ·gc.alloc.rate:            822.553 MB/sec
[info]                  ·gc.alloc.rate.norm:       31424.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25751.909 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 40980.123 ops/s
[info]                  ·gc.alloc.rate:            818.130 MB/sec
[info]                  ·gc.alloc.rate.norm:       31424.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.107 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38836.148 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 41093.171 ops/s
[info]                  ·gc.alloc.rate:                   820.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.085 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        25819.580 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 127.567 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 41358.126 ops/s
[info]                  ·gc.alloc.rate:                                  825.679 MB/sec
[info]                  ·gc.alloc.rate.norm:                             31424.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.126 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.780 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.702 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25906.413 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   41110.633 ±(99.9%) 674.330 ops/s [Average]
[info]   (min, avg, max) = (40921.001, 41110.633, 41358.126), stdev = 175.121
[info]   CI (99.9%): [40436.302, 41784.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   820.737 ±(99.9%) 13.503 MB/sec [Average]
[info]   (min, avg, max) = (816.921, 820.737, 825.679), stdev = 3.507
[info]   CI (99.9%): [807.235, 834.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31424.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (31424.010, 31424.010, 31424.011), stdev = 0.001
[info]   CI (99.9%): [31424.009, 31424.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.216 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.126), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.956 ±(99.9%) 8.232 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.956, 4.780), stdev = 2.138
[info]   CI (99.9%): [≈ 0, 9.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   810.204 ±(99.9%) 706.168 MB/sec [Average]
[info]   (min, avg, max) = (674.081, 810.204, 1011.107), stdev = 183.390
[info]   CI (99.9%): [104.035, 1516.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   31041.047 ±(99.9%) 27498.520 B/op [Average]
[info]   (min, avg, max) = (25751.909, 31041.047, 38891.184), stdev = 7141.278
[info]   CI (99.9%): [3542.527, 58539.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   25.513 ±(99.9%) 219.678 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25.513, 127.567), stdev = 57.050
[info]   CI (99.9%): [≈ 0, 245.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.800, 10.000), stdev = 3.114
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Run progress: 54.66% complete, ETA 00:38:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48811.099 ops/s
[info] # Warmup Iteration   2: 79034.369 ops/s
[info] # Warmup Iteration   3: 80274.798 ops/s
[info] Iteration   1: 80227.491 ops/s
[info]                  ·gc.alloc.rate:            845.605 MB/sec
[info]                  ·gc.alloc.rate.norm:       16592.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.985 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19797.767 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 80634.320 ops/s
[info]                  ·gc.alloc.rate:            849.870 MB/sec
[info]                  ·gc.alloc.rate.norm:       16592.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.646 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13132.066 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 80240.072 ops/s
[info]                  ·gc.alloc.rate:            845.860 MB/sec
[info]                  ·gc.alloc.rate.norm:       16592.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.113 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19794.314 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 79036.334 ops/s
[info]                  ·gc.alloc.rate:                                  833.159 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16592.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.082 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.630 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.730 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13476.784 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                79.587 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 78697.690 ops/s
[info]                  ·gc.alloc.rate:                                  829.520 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16592.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.045 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.908 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.982 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20421.615 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   79767.181 ±(99.9%) 3259.080 ops/s [Average]
[info]   (min, avg, max) = (78697.690, 79767.181, 80634.320), stdev = 846.373
[info]   CI (99.9%): [76508.101, 83026.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   840.803 ±(99.9%) 34.256 MB/sec [Average]
[info]   (min, avg, max) = (829.520, 840.803, 849.870), stdev = 8.896
[info]   CI (99.9%): [806.547, 875.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   16592.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16592.005, 16592.005, 16592.005), stdev = 0.001
[info]   CI (99.9%): [16592.005, 16592.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.082), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.508 ±(99.9%) 2.851 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.508, 1.630), stdev = 0.740
[info]   CI (99.9%): [≈ 0, 3.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   877.691 ±(99.9%) 713.854 MB/sec [Average]
[info]   (min, avg, max) = (672.646, 877.691, 1020.982), stdev = 185.386
[info]   CI (99.9%): [163.838, 1591.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   17324.509 ±(99.9%) 14173.113 B/op [Average]
[info]   (min, avg, max) = (13132.066, 17324.509, 20421.615), stdev = 3680.712
[info]   CI (99.9%): [3151.397, 31497.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   15.917 ±(99.9%) 137.054 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.917, 79.587), stdev = 35.593
[info]   CI (99.9%): [≈ 0, 152.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.400, 13.000), stdev = 4.561
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Run progress: 54.91% complete, ETA 00:38:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 243935.474 ops/s
[info] # Warmup Iteration   2: 264992.847 ops/s
[info] # Warmup Iteration   3: 267229.176 ops/s
[info] Iteration   1: 266812.476 ops/s
[info]                  ·gc.alloc.rate:            867.798 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.940 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5964.538 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 267456.502 ops/s
[info]                  ·gc.alloc.rate:            869.886 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.985 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3966.964 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 266549.126 ops/s
[info]                  ·gc.alloc.rate:            866.955 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5970.713 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 267162.955 ops/s
[info]                  ·gc.alloc.rate:                                  869.031 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5120.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.035 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.208 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            677.392 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3990.935 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                19.621 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 264993.287 ops/s
[info]                  ·gc.alloc.rate:                                  861.981 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5120.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.159 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.119 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6065.249 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   266594.869 ±(99.9%) 3693.230 ops/s [Average]
[info]   (min, avg, max) = (264993.287, 266594.869, 267456.502), stdev = 959.120
[info]   CI (99.9%): [262901.639, 270288.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   867.130 ±(99.9%) 11.900 MB/sec [Average]
[info]   (min, avg, max) = (861.981, 867.130, 869.886), stdev = 3.090
[info]   CI (99.9%): [855.231, 879.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.002, 5120.002, 5120.002), stdev = 0.001
[info]   CI (99.9%): [5120.001, 5120.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.066 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.035), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.073 ±(99.9%) 0.392 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.073, 0.208), stdev = 0.102
[info]   CI (99.9%): [≈ 0, 0.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   878.888 ±(99.9%) 714.467 MB/sec [Average]
[info]   (min, avg, max) = (673.985, 878.888, 1021.119), stdev = 185.545
[info]   CI (99.9%): [164.421, 1593.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5191.680 ±(99.9%) 4265.813 B/op [Average]
[info]   (min, avg, max) = (3966.964, 5191.680, 6065.249), stdev = 1107.818
[info]   CI (99.9%): [925.867, 9457.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   3.924 ±(99.9%) 33.789 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.924, 19.621), stdev = 8.775
[info]   CI (99.9%): [≈ 0, 37.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 9.000), stdev = 3.082
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Run progress: 55.16% complete, ETA 00:38:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12286.833 ops/s
[info] # Warmup Iteration   2: 22163.083 ops/s
[info] # Warmup Iteration   3: 22384.731 ops/s
[info] Iteration   1: 23272.580 ops/s
[info]                  ·gc.alloc.rate:            1093.549 MB/sec
[info]                  ·gc.alloc.rate.norm:       73960.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.082 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 68247.310 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 23191.878 ops/s
[info]                  ·gc.alloc.rate:            1090.116 MB/sec
[info]                  ·gc.alloc.rate.norm:       73960.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.427 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 68485.629 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 22612.480 ops/s
[info]                  ·gc.alloc.rate:                                  1062.806 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73960.018 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.045 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.125 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70795.223 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                278.174 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 22764.742 ops/s
[info]                  ·gc.alloc.rate:                                  1069.643 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73960.018 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.044 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.049 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70598.929 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 23538.555 ops/s
[info]                  ·gc.alloc.rate:                                  1106.064 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73960.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.057 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.452 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       91037.223 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   23076.047 ±(99.9%) 1463.448 ops/s [Average]
[info]   (min, avg, max) = (22612.480, 23076.047, 23538.555), stdev = 380.053
[info]   CI (99.9%): [21612.599, 24539.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1084.435 ±(99.9%) 68.607 MB/sec [Average]
[info]   (min, avg, max) = (1062.806, 1084.435, 1106.064), stdev = 17.817
[info]   CI (99.9%): [1015.828, 1153.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73960.019 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (73960.017, 73960.019, 73960.023), stdev = 0.003
[info]   CI (99.9%): [73960.009, 73960.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.093 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.045), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.246 ±(99.9%) 6.471 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.246, 3.125), stdev = 1.681
[info]   CI (99.9%): [≈ 0, 7.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1083.664 ±(99.9%) 598.286 MB/sec [Average]
[info]   (min, avg, max) = (1009.082, 1083.664, 1361.452), stdev = 155.373
[info]   CI (99.9%): [485.379, 1681.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   73832.863 ±(99.9%) 37306.903 B/op [Average]
[info]   (min, avg, max) = (68247.310, 73832.863, 91037.223), stdev = 9688.484
[info]   CI (99.9%): [36525.959, 111139.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   55.635 ±(99.9%) 479.032 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 55.635, 278.174), stdev = 124.403
[info]   CI (99.9%): [≈ 0, 534.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 13.000), stdev = 4.301
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Run progress: 55.42% complete, ETA 00:37:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41637.266 ops/s
[info] # Warmup Iteration   2: 50889.101 ops/s
[info] # Warmup Iteration   3: 51884.637 ops/s
[info] Iteration   1: 52226.832 ops/s
[info]                  ·gc.alloc.rate:            1106.766 MB/sec
[info]                  ·gc.alloc.rate.norm:       33360.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30473.224 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 52245.469 ops/s
[info]                  ·gc.alloc.rate:            1107.275 MB/sec
[info]                  ·gc.alloc.rate.norm:       33360.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.070 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30461.560 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 52483.023 ops/s
[info]                  ·gc.alloc.rate:                                  1112.250 MB/sec
[info]                  ·gc.alloc.rate.norm:                             33360.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.052 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.548 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.002 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       40730.901 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                99.880 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 52768.225 ops/s
[info]                  ·gc.alloc.rate:            1118.565 MB/sec
[info]                  ·gc.alloc.rate.norm:       33360.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.251 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30457.718 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 52889.018 ops/s
[info]                  ·gc.alloc.rate:            1121.093 MB/sec
[info]                  ·gc.alloc.rate.norm:       33360.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.160 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30386.326 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   52522.513 ±(99.9%) 1155.899 ops/s [Average]
[info]   (min, avg, max) = (52226.832, 52522.513, 52889.018), stdev = 300.183
[info]   CI (99.9%): [51366.615, 53678.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1113.190 ±(99.9%) 24.991 MB/sec [Average]
[info]   (min, avg, max) = (1106.766, 1113.190, 1121.093), stdev = 6.490
[info]   CI (99.9%): [1088.199, 1138.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   33360.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (33360.008, 33360.008, 33360.008), stdev = 0.001
[info]   CI (99.9%): [33360.007, 33360.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.089 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.052), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.310 ±(99.9%) 2.666 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.310, 1.548), stdev = 0.692
[info]   CI (99.9%): [≈ 0, 2.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1084.495 ±(99.9%) 589.069 MB/sec [Average]
[info]   (min, avg, max) = (1010.993, 1084.495, 1358.002), stdev = 152.979
[info]   CI (99.9%): [495.426, 1673.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   32501.946 ±(99.9%) 17713.936 B/op [Average]
[info]   (min, avg, max) = (30386.326, 32501.946, 40730.901), stdev = 4600.253
[info]   CI (99.9%): [14788.010, 50215.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   19.976 ±(99.9%) 171.999 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.976, 99.880), stdev = 44.668
[info]   CI (99.9%): [≈ 0, 191.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 11.000), stdev = 3.782
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Run progress: 55.67% complete, ETA 00:37:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53791.707 ops/s
[info] # Warmup Iteration   2: 95629.375 ops/s
[info] # Warmup Iteration   3: 95307.046 ops/s
[info] Iteration   1: 95980.360 ops/s
[info]                  ·gc.alloc.rate:            1314.584 MB/sec
[info]                  ·gc.alloc.rate.norm:       21560.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.028 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16548.702 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 95751.127 ops/s
[info]                  ·gc.alloc.rate:                                  1311.483 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21560.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.171 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.809 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1352.677 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       22237.213 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                76.642 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 97233.931 ops/s
[info]                  ·gc.alloc.rate:                                  1331.704 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21559.984 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.067 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.276 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       22038.738 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 97504.197 ops/s
[info]                  ·gc.alloc.rate:            1335.592 MB/sec
[info]                  ·gc.alloc.rate.norm:       21560.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.384 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21976.369 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 97433.056 ops/s
[info]                  ·gc.alloc.rate:                                  1334.614 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21559.984 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.450 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21993.508 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   96780.534 ±(99.9%) 3253.167 ops/s [Average]
[info]   (min, avg, max) = (95751.127, 96780.534, 97504.197), stdev = 844.837
[info]   CI (99.9%): [93527.368, 100033.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1325.596 ±(99.9%) 44.698 MB/sec [Average]
[info]   (min, avg, max) = (1311.483, 1325.596, 1335.592), stdev = 11.608
[info]   CI (99.9%): [1280.897, 1370.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21560.004 ±(99.9%) 0.080 B/op [Average]
[info]   (min, avg, max) = (21559.984, 21560.004, 21560.025), stdev = 0.021
[info]   CI (99.9%): [21559.924, 21560.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.035 ±(99.9%) 0.292 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.171), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.581 ±(99.9%) 4.799 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.581, 2.809), stdev = 1.246
[info]   CI (99.9%): [≈ 0, 5.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1289.163 ±(99.9%) 603.187 MB/sec [Average]
[info]   (min, avg, max) = (1009.028, 1289.163, 1361.450), stdev = 156.646
[info]   CI (99.9%): [685.976, 1892.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   20958.906 ±(99.9%) 9501.740 B/op [Average]
[info]   (min, avg, max) = (16548.702, 20958.906, 22237.213), stdev = 2467.572
[info]   CI (99.9%): [11457.166, 30460.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   15.328 ±(99.9%) 131.983 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.328, 76.642), stdev = 34.275
[info]   CI (99.9%): [≈ 0, 147.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 13.000), stdev = 4.438
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Run progress: 55.92% complete, ETA 00:37:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 251539.923 ops/s
[info] # Warmup Iteration   2: 278860.829 ops/s
[info] # Warmup Iteration   3: 290991.827 ops/s
[info] Iteration   1: 294659.817 ops/s
[info]                  ·gc.alloc.rate:            938.960 MB/sec
[info]                  ·gc.alloc.rate.norm:       5016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5390.231 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 294216.937 ops/s
[info]                  ·gc.alloc.rate:            937.533 MB/sec
[info]                  ·gc.alloc.rate.norm:       5016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.982 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5398.272 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 293563.015 ops/s
[info]                  ·gc.alloc.rate:                   935.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5410.535 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 21.428 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 297103.824 ops/s
[info]                  ·gc.alloc.rate:                                  946.767 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.091 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.481 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5409.615 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 297575.280 ops/s
[info]                  ·gc.alloc.rate:            948.472 MB/sec
[info]                  ·gc.alloc.rate.norm:       5016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.831 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3600.581 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   295423.775 ±(99.9%) 6929.570 ops/s [Average]
[info]   (min, avg, max) = (293563.015, 295423.775, 297575.280), stdev = 1799.587
[info]   CI (99.9%): [288494.204, 302353.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   941.431 ±(99.9%) 22.406 MB/sec [Average]
[info]   (min, avg, max) = (935.424, 941.431, 948.472), stdev = 5.819
[info]   CI (99.9%): [919.025, 963.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5016.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5016.001, 5016.001, 5016.001), stdev = 0.001
[info]   CI (99.9%): [5016.001, 5016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.091), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.096 ±(99.9%) 0.829 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.096, 0.481), stdev = 0.215
[info]   CI (99.9%): [≈ 0, 0.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   945.777 ±(99.9%) 570.672 MB/sec [Average]
[info]   (min, avg, max) = (680.831, 945.777, 1021.061), stdev = 148.202
[info]   CI (99.9%): [375.106, 1516.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5041.847 ±(99.9%) 3102.601 B/op [Average]
[info]   (min, avg, max) = (3600.581, 5041.847, 5410.535), stdev = 805.736
[info]   CI (99.9%): [1939.245, 8144.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.286 ±(99.9%) 36.900 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.286, 21.428), stdev = 9.583
[info]   CI (99.9%): [≈ 0, 41.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.800, 10.000), stdev = 3.962
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 56.17% complete, ETA 00:37:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 296506.543 ops/s
[info] # Warmup Iteration   2: 320992.607 ops/s
[info] # Warmup Iteration   3: 322733.754 ops/s
[info] Iteration   1: 322799.330 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 322780.836 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 322759.532 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 322572.237 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 322650.171 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   322712.421 ±(99.9%) 375.215 ops/s [Average]
[info]   (min, avg, max) = (322572.237, 322712.421, 322799.330), stdev = 97.442
[info]   CI (99.9%): [322337.206, 323087.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Run progress: 56.42% complete, ETA 00:37:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55517.376 ops/s
[info] # Warmup Iteration   2: 75860.290 ops/s
[info] # Warmup Iteration   3: 77007.651 ops/s
[info] Iteration   1: 78085.093 ops/s
[info]                  ·gc.alloc.rate:            1157.227 MB/sec
[info]                  ·gc.alloc.rate.norm:       23328.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.000 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20339.974 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 77193.556 ops/s
[info]                  ·gc.alloc.rate:                   1143.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              23328.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.266 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        27433.990 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 81.487 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 78525.690 ops/s
[info]                  ·gc.alloc.rate:                                  1163.721 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23328.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.146 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.925 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.967 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20466.337 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 78567.807 ops/s
[info]                  ·gc.alloc.rate:                                  1164.412 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23328.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27274.558 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 78769.166 ops/s
[info]                  ·gc.alloc.rate:            1167.421 MB/sec
[info]                  ·gc.alloc.rate.norm:       23328.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.093 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20403.988 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   78228.263 ±(99.9%) 2425.787 ops/s [Average]
[info]   (min, avg, max) = (77193.556, 78228.263, 78769.166), stdev = 629.969
[info]   CI (99.9%): [75802.476, 80654.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1159.341 ±(99.9%) 36.141 MB/sec [Average]
[info]   (min, avg, max) = (1143.923, 1159.341, 1167.421), stdev = 9.386
[info]   CI (99.9%): [1123.199, 1195.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   23328.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (23328.005, 23328.005, 23328.006), stdev = 0.001
[info]   CI (99.9%): [23328.004, 23328.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.251 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.146), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.585 ±(99.9%) 5.036 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.585, 2.925), stdev = 1.308
[info]   CI (99.9%): [≈ 0, 5.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1151.546 ±(99.9%) 709.909 MB/sec [Average]
[info]   (min, avg, max) = (1009.000, 1151.546, 1361.403), stdev = 184.361
[info]   CI (99.9%): [441.637, 1861.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   23183.769 ±(99.9%) 14662.528 B/op [Average]
[info]   (min, avg, max) = (20339.974, 23183.769, 27433.990), stdev = 3807.812
[info]   CI (99.9%): [8521.241, 37846.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   16.297 ±(99.9%) 140.326 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.297, 81.487), stdev = 36.442
[info]   CI (99.9%): [≈ 0, 156.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.400, 16.000), stdev = 6.229
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Run progress: 56.68% complete, ETA 00:36:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45178.521 ops/s
[info] # Warmup Iteration   2: 68896.591 ops/s
[info] # Warmup Iteration   3: 67789.689 ops/s
[info] Iteration   1: 70338.455 ops/s
[info]                  ·gc.alloc.rate:                   1413.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              31624.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1681.050 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        37620.017 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 14.905 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 71122.585 ops/s
[info]                  ·gc.alloc.rate:                                  1428.920 MB/sec
[info]                  ·gc.alloc.rate.norm:                             31624.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.082 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.811 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       30040.596 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                88.441 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 71703.908 ops/s
[info]                  ·gc.alloc.rate:                                  1440.537 MB/sec
[info]                  ·gc.alloc.rate.norm:                             31624.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.339 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       29885.374 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 71012.353 ops/s
[info]                  ·gc.alloc.rate:                                  1427.441 MB/sec
[info]                  ·gc.alloc.rate.norm:                             31624.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.086 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       30176.123 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 71520.553 ops/s
[info]                  ·gc.alloc.rate:                                  1437.075 MB/sec
[info]                  ·gc.alloc.rate.norm:                             31624.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.975 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       37453.331 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   71139.571 ±(99.9%) 2039.282 ops/s [Average]
[info]   (min, avg, max) = (70338.455, 71139.571, 71703.908), stdev = 529.595
[info]   CI (99.9%): [69100.288, 73178.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1429.418 ±(99.9%) 40.937 MB/sec [Average]
[info]   (min, avg, max) = (1413.119, 1429.418, 1440.537), stdev = 10.631
[info]   CI (99.9%): [1388.481, 1470.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31624.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (31624.006, 31624.006, 31624.006), stdev = 0.001
[info]   CI (99.9%): [31624.005, 31624.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.082), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.380 ±(99.9%) 3.082 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.380, 1.811), stdev = 0.800
[info]   CI (99.9%): [≈ 0, 3.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1492.765 ±(99.9%) 699.240 MB/sec [Average]
[info]   (min, avg, max) = (1357.375, 1492.765, 1701.975), stdev = 181.590
[info]   CI (99.9%): [793.525, 2192.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   33035.088 ±(99.9%) 15830.293 B/op [Average]
[info]   (min, avg, max) = (29885.374, 33035.088, 37620.017), stdev = 4111.077
[info]   CI (99.9%): [17204.796, 48865.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   20.669 ±(99.9%) 147.986 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.669, 88.441), stdev = 38.432
[info]   CI (99.9%): [≈ 0, 168.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 18.000), stdev = 6.107
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Run progress: 56.93% complete, ETA 00:36:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43919.964 ops/s
[info] # Warmup Iteration   2: 78914.974 ops/s
[info] # Warmup Iteration   3: 79697.297 ops/s
[info] Iteration   1: 79569.975 ops/s
[info]                  ·gc.alloc.rate:            900.567 MB/sec
[info]                  ·gc.alloc.rate.norm:       17808.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.483 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19922.180 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 78157.946 ops/s
[info]                  ·gc.alloc.rate:            884.190 MB/sec
[info]                  ·gc.alloc.rate.norm:       17808.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20281.519 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 79744.664 ops/s
[info]                  ·gc.alloc.rate:                   902.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              17808.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.664 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13238.168 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.146 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 77324.375 ops/s
[info]                  ·gc.alloc.rate:                                  874.826 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17808.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.101 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.056 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.395 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20689.781 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                94.907 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 77733.332 ops/s
[info]                  ·gc.alloc.rate:                                  879.782 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17808.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.400 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20674.551 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   78506.058 ±(99.9%) 4209.693 ops/s [Average]
[info]   (min, avg, max) = (77324.375, 78506.058, 79744.664), stdev = 1093.244
[info]   CI (99.9%): [74296.366, 82715.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   888.309 ±(99.9%) 47.711 MB/sec [Average]
[info]   (min, avg, max) = (874.826, 888.309, 902.178), stdev = 12.390
[info]   CI (99.9%): [840.598, 936.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17808.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17808.005, 17808.005, 17808.006), stdev = 0.001
[info]   CI (99.9%): [17808.004, 17808.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.173 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.101), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.418 ±(99.9%) 3.528 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.418, 2.056), stdev = 0.916
[info]   CI (99.9%): [≈ 0, 3.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   944.589 ±(99.9%) 590.111 MB/sec [Average]
[info]   (min, avg, max) = (670.664, 944.589, 1021.400), stdev = 153.250
[info]   CI (99.9%): [354.478, 1534.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   18961.240 ±(99.9%) 12379.592 B/op [Average]
[info]   (min, avg, max) = (13238.168, 18961.240, 20689.781), stdev = 3214.941
[info]   CI (99.9%): [6581.647, 31340.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   21.611 ±(99.9%) 159.292 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.611, 94.907), stdev = 41.368
[info]   CI (99.9%): [≈ 0, 180.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.200, 14.000), stdev = 4.494
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Run progress: 57.18% complete, ETA 00:36:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80926.342 ops/s
[info] # Warmup Iteration   2: 99748.025 ops/s
[info] # Warmup Iteration   3: 100482.312 ops/s
[info] Iteration   1: 100250.686 ops/s
[info]                  ·gc.alloc.rate:            1055.696 MB/sec
[info]                  ·gc.alloc.rate.norm:       16576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.416 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21125.043 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 101420.091 ops/s
[info]                  ·gc.alloc.rate:            1068.274 MB/sec
[info]                  ·gc.alloc.rate.norm:       16576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.297 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15660.880 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 101894.978 ops/s
[info]                  ·gc.alloc.rate:                                  1073.012 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16576.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.097 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.500 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15711.200 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                61.734 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 99268.471 ops/s
[info]                  ·gc.alloc.rate:                                  1045.772 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16576.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.026 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.411 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.447 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16190.432 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 100937.461 ops/s
[info]                  ·gc.alloc.rate:                                  1063.317 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16576.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.041 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15922.609 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   100754.337 ±(99.9%) 3964.147 ops/s [Average]
[info]   (min, avg, max) = (99268.471, 100754.337, 101894.978), stdev = 1029.476
[info]   CI (99.9%): [96790.190, 104718.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1061.214 ±(99.9%) 41.399 MB/sec [Average]
[info]   (min, avg, max) = (1045.772, 1061.214, 1073.012), stdev = 10.751
[info]   CI (99.9%): [1019.816, 1102.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   16576.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16576.004, 16576.004, 16576.004), stdev = 0.001
[info]   CI (99.9%): [16576.004, 16576.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.097), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.390 ±(99.9%) 2.479 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.390, 1.500), stdev = 0.644
[info]   CI (99.9%): [≈ 0, 2.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1082.919 ±(99.9%) 565.367 MB/sec [Average]
[info]   (min, avg, max) = (1009.297, 1082.919, 1345.416), stdev = 146.824
[info]   CI (99.9%): [517.551, 1648.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   16922.033 ±(99.9%) 9082.950 B/op [Average]
[info]   (min, avg, max) = (15660.880, 16922.033, 21125.043), stdev = 2358.813
[info]   CI (99.9%): [7839.082, 26004.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   12.347 ±(99.9%) 106.309 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.347, 61.734), stdev = 27.608
[info]   CI (99.9%): [≈ 0, 118.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.600, 13.000), stdev = 4.722
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Run progress: 57.43% complete, ETA 00:36:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18322.616 ops/s
[info] # Warmup Iteration   2: 43416.432 ops/s
[info] # Warmup Iteration   3: 42881.058 ops/s
[info] Iteration   1: 43709.830 ops/s
[info]                  ·gc.alloc.rate:                                  2096.830 MB/sec
[info]                  ·gc.alloc.rate.norm:                             75512.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.115 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.125 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73537.994 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 44156.003 ops/s
[info]                  ·gc.alloc.rate:                                  2118.198 MB/sec
[info]                  ·gc.alloc.rate.norm:                             75512.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.992 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72795.354 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 43886.790 ops/s
[info]                  ·gc.alloc.rate:                                  2105.395 MB/sec
[info]                  ·gc.alloc.rate.norm:                             75512.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73239.794 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 43441.650 ops/s
[info]                  ·gc.alloc.rate:                                  2083.879 MB/sec
[info]                  ·gc.alloc.rate.norm:                             75512.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.176 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.967 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73993.280 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 43054.000 ops/s
[info]                  ·gc.alloc.rate:                                  2065.400 MB/sec
[info]                  ·gc.alloc.rate.norm:                             75512.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.095 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74659.994 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   43649.655 ±(99.9%) 1627.225 ops/s [Average]
[info]   (min, avg, max) = (43054.000, 43649.655, 44156.003), stdev = 422.585
[info]   CI (99.9%): [42022.429, 45276.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2093.940 ±(99.9%) 78.059 MB/sec [Average]
[info]   (min, avg, max) = (2065.400, 2093.940, 2118.198), stdev = 20.272
[info]   CI (99.9%): [2015.881, 2171.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   75512.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (75512.009, 75512.010, 75512.010), stdev = 0.001
[info]   CI (99.9%): [75512.008, 75512.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.194 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.025, 0.115), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.883 ±(99.9%) 6.982 B/op [Average]
[info]   (min, avg, max) = (0.032, 0.883, 4.125), stdev = 1.813
[info]   CI (99.9%): [≈ 0, 7.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2042.022 ±(99.9%) 0.190 MB/sec [Average]
[info]   (min, avg, max) = (2041.967, 2042.022, 2042.095), stdev = 0.049
[info]   CI (99.9%): [2041.832, 2042.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   73645.283 ±(99.9%) 2756.004 B/op [Average]
[info]   (min, avg, max) = (72795.354, 73645.283, 74659.994), stdev = 715.726
[info]   CI (99.9%): [70889.279, 76401.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Run progress: 57.68% complete, ETA 00:36:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 92158.456 ops/s
[info] # Warmup Iteration   2: 117212.484 ops/s
[info] # Warmup Iteration   3: 119463.994 ops/s
[info] Iteration   1: 118665.464 ops/s
[info]                  ·gc.alloc.rate:                   818.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              10864.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.265 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13376.001 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.835 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 118965.928 ops/s
[info]                  ·gc.alloc.rate:            821.057 MB/sec
[info]                  ·gc.alloc.rate.norm:       10864.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.658 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8900.427 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 116553.901 ops/s
[info]                  ·gc.alloc.rate:                   804.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              10864.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13618.221 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.995 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 118609.335 ops/s
[info]                  ·gc.alloc.rate:                   818.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              10864.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8918.597 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 61.873 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 117964.857 ops/s
[info]                  ·gc.alloc.rate:                                  814.214 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10864.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.156 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.075 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.692 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9082.427 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   118151.897 ±(99.9%) 3715.533 ops/s [Average]
[info]   (min, avg, max) = (116553.901, 118151.897, 118965.928), stdev = 964.912
[info]   CI (99.9%): [114436.364, 121867.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   815.446 ±(99.9%) 25.586 MB/sec [Average]
[info]   (min, avg, max) = (804.424, 815.446, 821.057), stdev = 6.645
[info]   CI (99.9%): [789.860, 841.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10864.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10864.003, 10864.004, 10864.004), stdev = 0.001
[info]   CI (99.9%): [10864.003, 10864.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.268 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.156), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.415 ±(99.9%) 3.574 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.415, 2.075), stdev = 0.928
[info]   CI (99.9%): [≈ 0, 3.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   808.401 ±(99.9%) 702.839 MB/sec [Average]
[info]   (min, avg, max) = (672.031, 808.401, 1008.359), stdev = 182.525
[info]   CI (99.9%): [105.562, 1511.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   10779.135 ±(99.9%) 9563.655 B/op [Average]
[info]   (min, avg, max) = (8900.427, 10779.135, 13618.221), stdev = 2483.651
[info]   CI (99.9%): [1215.480, 20342.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.565 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.662), stdev = 1.965
[info]   CI (99.9%): [≈ 0, 8.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   15.941 ±(99.9%) 100.353 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.941, 61.873), stdev = 26.061
[info]   CI (99.9%): [≈ 0, 116.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.000, 11.000), stdev = 3.674
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Run progress: 57.93% complete, ETA 00:35:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 113217.121 ops/s
[info] # Warmup Iteration   2: 164084.795 ops/s
[info] # Warmup Iteration   3: 165960.777 ops/s
[info] Iteration   1: 164465.501 ops/s
[info]                  ·gc.alloc.rate:                   244.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             334.978 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3206.401 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.375 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 165393.438 ops/s
[info]                  ·gc.alloc.rate:            245.452 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3194.829 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 165362.431 ops/s
[info]                  ·gc.alloc.rate:            245.451 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.750 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3195.390 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 165126.466 ops/s
[info]                  ·gc.alloc.rate:      245.151 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 164703.056 ops/s
[info]                  ·gc.alloc.rate:            244.457 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3207.900 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   165010.178 ±(99.9%) 1582.388 ops/s [Average]
[info]   (min, avg, max) = (164465.501, 165010.178, 165393.438), stdev = 410.941
[info]   CI (99.9%): [163427.790, 166592.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   244.911 ±(99.9%) 2.433 MB/sec [Average]
[info]   (min, avg, max) = (244.046, 244.911, 245.452), stdev = 0.632
[info]   CI (99.9%): [242.479, 247.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2336.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2336.002, 2336.003, 2336.003), stdev = 0.001
[info]   CI (99.9%): [2336.002, 2336.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   268.424 ±(99.9%) 577.803 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 268.424, 335.750), stdev = 150.054
[info]   CI (99.9%): [≈ 0, 846.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2560.904 ±(99.9%) 5512.588 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2560.904, 3207.900), stdev = 1431.602
[info]   CI (99.9%): [≈ 0, 8073.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.275 ±(99.9%) 10.977 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.275, 6.375), stdev = 2.851
[info]   CI (99.9%): [≈ 0, 12.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.600, 5.000), stdev = 2.074
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Run progress: 58.19% complete, ETA 00:35:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 687611.585 ops/s
[info] # Warmup Iteration   2: 759763.009 ops/s
[info] # Warmup Iteration   3: 789738.759 ops/s
[info] Iteration   1: 790812.097 ops/s
[info]                  ·gc.alloc.rate:            980.648 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.984 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2008.406 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 782521.097 ops/s
[info]                  ·gc.alloc.rate:            970.315 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.991 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2029.805 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 790669.299 ops/s
[info]                  ·gc.alloc.rate:                                  980.547 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1952.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.093 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.185 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.137 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2016.877 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                7.956 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 780357.614 ops/s
[info]                  ·gc.alloc.rate:                                  967.749 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1952.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.025 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.726 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1373.058 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 760612.886 ops/s
[info]                  ·gc.alloc.rate:            943.400 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.231 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2113.042 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   780994.599 ±(99.9%) 47479.128 ops/s [Average]
[info]   (min, avg, max) = (760612.886, 780994.599, 790812.097), stdev = 12330.179
[info]   CI (99.9%): [733515.470, 828473.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   968.532 ±(99.9%) 58.606 MB/sec [Average]
[info]   (min, avg, max) = (943.400, 968.532, 980.648), stdev = 15.220
[info]   CI (99.9%): [909.925, 1027.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.155 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.093), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.047 ±(99.9%) 0.308 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.047, 0.185), stdev = 0.080
[info]   CI (99.9%): [≈ 0, 0.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   946.614 ±(99.9%) 572.668 MB/sec [Average]
[info]   (min, avg, max) = (680.726, 946.614, 1021.231), stdev = 148.720
[info]   CI (99.9%): [373.946, 1519.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1908.238 ±(99.9%) 1163.150 B/op [Average]
[info]   (min, avg, max) = (1373.058, 1908.238, 2113.042), stdev = 302.066
[info]   CI (99.9%): [745.088, 3071.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.591 ±(99.9%) 13.701 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.591, 7.956), stdev = 3.558
[info]   CI (99.9%): [≈ 0, 15.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.600, 11.000), stdev = 4.336
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 58.44% complete, ETA 00:35:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 754404.067 ops/s
[info] # Warmup Iteration   2: 811338.316 ops/s
[info] # Warmup Iteration   3: 815148.884 ops/s
[info] Iteration   1: 813147.272 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 815369.948 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 807088.340 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 815836.788 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 809561.100 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   812200.690 ±(99.9%) 14569.609 ops/s [Average]
[info]   (min, avg, max) = (807088.340, 812200.690, 815836.788), stdev = 3783.681
[info]   CI (99.9%): [797631.080, 826770.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻³, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Run progress: 58.69% complete, ETA 00:35:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 152127.843 ops/s
[info] # Warmup Iteration   2: 203270.536 ops/s
[info] # Warmup Iteration   3: 202244.256 ops/s
[info] Iteration   1: 201947.761 ops/s
[info]                  ·gc.alloc.rate:            657.883 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.306 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5232.628 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 201281.532 ops/s
[info]                  ·gc.alloc.rate:            655.614 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.250 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5250.302 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 202379.868 ops/s
[info]                  ·gc.alloc.rate:            659.271 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5221.693 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 201818.328 ops/s
[info]                  ·gc.alloc.rate:            657.610 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.496 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5236.283 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 201812.143 ops/s
[info]                  ·gc.alloc.rate:            657.475 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5236.153 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   201847.926 ±(99.9%) 1510.964 ops/s [Average]
[info]   (min, avg, max) = (201281.532, 201847.926, 202379.868), stdev = 392.393
[info]   CI (99.9%): [200336.962, 203358.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   657.571 ±(99.9%) 5.031 MB/sec [Average]
[info]   (min, avg, max) = (655.614, 657.571, 659.271), stdev = 1.307
[info]   CI (99.9%): [652.539, 662.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5128.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5128.002, 5128.002, 5128.002), stdev = 0.001
[info]   CI (99.9%): [5128.002, 5128.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   671.342 ±(99.9%) 0.357 MB/sec [Average]
[info]   (min, avg, max) = (671.250, 671.342, 671.496), stdev = 0.093
[info]   CI (99.9%): [670.985, 671.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   5235.412 ±(99.9%) 39.410 B/op [Average]
[info]   (min, avg, max) = (5221.693, 5235.412, 5250.302), stdev = 10.235
[info]   CI (99.9%): [5196.001, 5274.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Run progress: 58.94% complete, ETA 00:34:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94337.082 ops/s
[info] # Warmup Iteration   2: 126371.873 ops/s
[info] # Warmup Iteration   3: 125492.826 ops/s
[info] Iteration   1: 123880.120 ops/s
[info]                  ·gc.alloc.rate:                                  1525.298 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19384.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.057 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.725 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1688.162 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21453.743 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                42.315 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   2: 127615.398 ops/s
[info]                  ·gc.alloc.rate:                                  1571.483 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19384.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.070 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.861 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.299 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16791.411 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 128174.238 ops/s
[info]                  ·gc.alloc.rate:                                  1578.970 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19384.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.276 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20897.744 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 128004.691 ops/s
[info]                  ·gc.alloc.rate:                                  1576.458 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19384.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.837 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20925.656 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 125892.501 ops/s
[info]                  ·gc.alloc.rate:            1550.444 MB/sec
[info]                  ·gc.alloc.rate.norm:       19384.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.494 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17021.716 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   126713.390 ±(99.9%) 7025.824 ops/s [Average]
[info]   (min, avg, max) = (123880.120, 126713.390, 128174.238), stdev = 1824.584
[info]   CI (99.9%): [119687.566, 133739.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1560.531 ±(99.9%) 87.316 MB/sec [Average]
[info]   (min, avg, max) = (1525.298, 1560.531, 1578.970), stdev = 22.676
[info]   CI (99.9%): [1473.214, 1647.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19384.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19384.003, 19384.003, 19384.004), stdev = 0.001
[info]   CI (99.9%): [19384.003, 19384.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.133 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.070), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.326 ±(99.9%) 1.654 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.326, 0.861), stdev = 0.430
[info]   CI (99.9%): [≈ 0, 1.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1563.014 ±(99.9%) 709.049 MB/sec [Average]
[info]   (min, avg, max) = (1361.299, 1563.014, 1702.276), stdev = 184.138
[info]   CI (99.9%): [853.964, 2272.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   19418.054 ±(99.9%) 8874.891 B/op [Average]
[info]   (min, avg, max) = (16791.411, 19418.054, 21453.743), stdev = 2304.781
[info]   CI (99.9%): [10543.163, 28292.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   8.463 ±(99.9%) 72.869 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.463, 42.315), stdev = 18.924
[info]   CI (99.9%): [≈ 0, 81.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 15.000), stdev = 4.930
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Run progress: 59.19% complete, ETA 00:34:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 108604.455 ops/s
[info] # Warmup Iteration   2: 168929.881 ops/s
[info] # Warmup Iteration   3: 165721.255 ops/s
[info] Iteration   1: 168711.566 ops/s
[info]                  ·gc.alloc.rate:            900.252 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.616 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6275.996 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 169548.378 ops/s
[info]                  ·gc.alloc.rate:            904.727 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.994 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9368.083 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 168836.061 ops/s
[info]                  ·gc.alloc.rate:                   900.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              8400.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.990 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9407.527 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 37.258 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 164275.706 ops/s
[info]                  ·gc.alloc.rate:                                  876.616 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8400.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.144 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.380 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.651 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6522.209 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 165651.951 ops/s
[info]                  ·gc.alloc.rate:                                  884.005 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8400.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.030 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.285 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.044 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9702.181 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   167404.732 ±(99.9%) 8867.938 ops/s [Average]
[info]   (min, avg, max) = (164275.706, 167404.732, 169548.378), stdev = 2302.975
[info]   CI (99.9%): [158536.794, 176272.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   893.306 ±(99.9%) 47.234 MB/sec [Average]
[info]   (min, avg, max) = (876.616, 893.306, 904.727), stdev = 12.267
[info]   CI (99.9%): [846.072, 940.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8400.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8400.002, 8400.003, 8400.003), stdev = 0.001
[info]   CI (99.9%): [8400.002, 8400.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.035 ±(99.9%) 0.240 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.144), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.333 ±(99.9%) 2.303 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.333, 1.380), stdev = 0.598
[info]   CI (99.9%): [≈ 0, 2.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   878.459 ±(99.9%) 709.783 MB/sec [Average]
[info]   (min, avg, max) = (672.616, 878.459, 1021.044), stdev = 184.328
[info]   CI (99.9%): [168.676, 1588.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   8255.199 ±(99.9%) 6551.931 B/op [Average]
[info]   (min, avg, max) = (6275.996, 8255.199, 9702.181), stdev = 1701.516
[info]   CI (99.9%): [1703.268, 14807.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   7.452 ±(99.9%) 64.160 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.452, 37.258), stdev = 16.662
[info]   CI (99.9%): [≈ 0, 71.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.800, 13.000), stdev = 5.263
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Run progress: 59.45% complete, ETA 00:34:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 291157.474 ops/s
[info] # Warmup Iteration   2: 312759.598 ops/s
[info] # Warmup Iteration   3: 314728.867 ops/s
[info] Iteration   1: 315194.668 ops/s
[info]                  ·gc.alloc.rate:            611.938 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3365.980 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 314612.481 ops/s
[info]                  ·gc.alloc.rate:            611.371 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.516 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3361.640 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 315443.674 ops/s
[info]                  ·gc.alloc.rate:            612.390 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.987 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1681.662 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 317844.462 ops/s
[info]                  ·gc.alloc.rate:            617.072 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.029 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3338.080 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 313930.694 ops/s
[info]                  ·gc.alloc.rate:            609.455 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.989 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3379.595 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   315405.196 ±(99.9%) 5710.900 ops/s [Average]
[info]   (min, avg, max) = (313930.694, 315405.196, 317844.462), stdev = 1483.103
[info]   CI (99.9%): [309694.296, 321116.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   612.445 ±(99.9%) 10.850 MB/sec [Average]
[info]   (min, avg, max) = (609.455, 612.445, 617.072), stdev = 2.818
[info]   CI (99.9%): [601.595, 623.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3056.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3056.001, 3056.001, 3056.001), stdev = 0.001
[info]   CI (99.9%): [3056.001, 3056.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   606.306 ±(99.9%) 579.734 MB/sec [Average]
[info]   (min, avg, max) = (336.987, 606.306, 674.029), stdev = 150.555
[info]   CI (99.9%): [26.572, 1186.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3025.391 ±(99.9%) 2893.053 B/op [Average]
[info]   (min, avg, max) = (1681.662, 3025.391, 3379.595), stdev = 751.317
[info]   CI (99.9%): [132.338, 5918.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Run progress: 59.70% complete, ETA 00:34:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24855.552 ops/s
[info] # Warmup Iteration   2: 61278.453 ops/s
[info] # Warmup Iteration   3: 62687.361 ops/s
[info] Iteration   1: 63607.186 ops/s
[info]                  ·gc.alloc.rate:                                  2685.191 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66448.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.146 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.766 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67377.848 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 63856.566 ops/s
[info]                  ·gc.alloc.rate:            2695.400 MB/sec
[info]                  ·gc.alloc.rate.norm:       66448.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2722.506 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 67116.219 B/op
[info]                  ·gc.count:                 8.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 63856.994 ops/s
[info]                  ·gc.alloc.rate:                                  2695.852 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66448.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.277 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.876 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67114.118 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 63735.744 ops/s
[info]                  ·gc.alloc.rate:                                  2690.500 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66448.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.799 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67245.724 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 64197.970 ops/s
[info]                  ·gc.alloc.rate:                                  2710.026 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66448.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.230 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.826 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66761.859 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   63850.892 ±(99.9%) 846.231 ops/s [Average]
[info]   (min, avg, max) = (63607.186, 63850.892, 64197.970), stdev = 219.763
[info]   CI (99.9%): [63004.661, 64697.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2695.394 ±(99.9%) 35.624 MB/sec [Average]
[info]   (min, avg, max) = (2685.191, 2695.394, 2710.026), stdev = 9.251
[info]   CI (99.9%): [2659.770, 2731.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66448.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66448.006, 66448.006, 66448.007), stdev = 0.001
[info]   CI (99.9%): [66448.006, 66448.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.019 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.011), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.135 ±(99.9%) 0.473 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.135, 0.277), stdev = 0.123
[info]   CI (99.9%): [≈ 0, 0.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2722.755 ±(99.9%) 0.558 MB/sec [Average]
[info]   (min, avg, max) = (2722.506, 2722.755, 2722.876), stdev = 0.145
[info]   CI (99.9%): [2722.197, 2723.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   67123.154 ±(99.9%) 883.461 B/op [Average]
[info]   (min, avg, max) = (66761.859, 67123.154, 67377.848), stdev = 229.432
[info]   CI (99.9%): [66239.693, 68006.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   40.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.000, 8.000), stdev = 0.001
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 9.000), stdev = 0.837
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Run progress: 59.95% complete, ETA 00:34:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 133268.542 ops/s
[info] # Warmup Iteration   2: 167491.170 ops/s
[info] # Warmup Iteration   3: 166250.737 ops/s
[info] Iteration   1: 166905.064 ops/s
[info]                  ·gc.alloc.rate:            819.377 MB/sec
[info]                  ·gc.alloc.rate.norm:       7728.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.951 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9534.850 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 167920.599 ops/s
[info]                  ·gc.alloc.rate:                   824.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              7728.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.301 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6312.097 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.243 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 167929.340 ops/s
[info]                  ·gc.alloc.rate:            824.475 MB/sec
[info]                  ·gc.alloc.rate.norm:       7728.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.070 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9477.002 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 166204.174 ops/s
[info]                  ·gc.alloc.rate:                   816.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              7728.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.121 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6383.487 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 31.539 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 168425.936 ops/s
[info]                  ·gc.alloc.rate:                                  827.092 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7728.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.033 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.306 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.298 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9542.582 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   167477.022 ±(99.9%) 3470.426 ops/s [Average]
[info]   (min, avg, max) = (166204.174, 167477.022, 168425.936), stdev = 901.259
[info]   CI (99.9%): [164006.597, 170947.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   822.277 ±(99.9%) 17.082 MB/sec [Average]
[info]   (min, avg, max) = (816.107, 822.277, 827.092), stdev = 4.436
[info]   CI (99.9%): [805.195, 839.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7728.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7728.002, 7728.003, 7728.003), stdev = 0.001
[info]   CI (99.9%): [7728.002, 7728.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.056 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.033), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.061 ±(99.9%) 0.527 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.061, 0.306), stdev = 0.137
[info]   CI (99.9%): [≈ 0, 0.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   878.148 ±(99.9%) 718.809 MB/sec [Average]
[info]   (min, avg, max) = (673.301, 878.148, 1021.298), stdev = 186.672
[info]   CI (99.9%): [159.339, 1596.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8250.004 ±(99.9%) 6687.961 B/op [Average]
[info]   (min, avg, max) = (6312.097, 8250.004, 9542.582), stdev = 1736.842
[info]   CI (99.9%): [1562.043, 14937.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.561 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   7.556 ±(99.9%) 52.663 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.556, 31.539), stdev = 13.676
[info]   CI (99.9%): [≈ 0, 60.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.400, 15.000), stdev = 4.450
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Run progress: 60.20% complete, ETA 00:33:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 191070.643 ops/s
[info] # Warmup Iteration   2: 282407.941 ops/s
[info] # Warmup Iteration   3: 290200.675 ops/s
[info] Iteration   1: 292983.743 ops/s
[info]                  ·gc.alloc.rate:            288.884 MB/sec
[info]                  ·gc.alloc.rate.norm:       1552.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1807.007 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 292056.261 ops/s
[info]                  ·gc.alloc.rate:      287.975 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 292814.535 ops/s
[info]                  ·gc.alloc.rate:            288.739 MB/sec
[info]                  ·gc.alloc.rate.norm:       1552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1808.106 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 291919.148 ops/s
[info]                  ·gc.alloc.rate:            287.841 MB/sec
[info]                  ·gc.alloc.rate.norm:       1552.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1813.642 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 291169.766 ops/s
[info]                  ·gc.alloc.rate:            287.147 MB/sec
[info]                  ·gc.alloc.rate.norm:       1552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.414 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1818.282 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   292188.691 ±(99.9%) 2824.513 ops/s [Average]
[info]   (min, avg, max) = (291169.766, 292188.691, 292983.743), stdev = 733.517
[info]   CI (99.9%): [289364.178, 295013.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   288.117 ±(99.9%) 2.731 MB/sec [Average]
[info]   (min, avg, max) = (287.147, 288.117, 288.884), stdev = 0.709
[info]   CI (99.9%): [285.386, 290.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1552.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1552.001, 1552.001, 1552.002), stdev = 0.001
[info]   CI (99.9%): [1552.001, 1552.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   269.103 ±(99.9%) 579.264 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.103, 336.414), stdev = 150.433
[info]   CI (99.9%): [≈ 0, 848.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1449.407 ±(99.9%) 3120.007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1449.407, 1818.282), stdev = 810.256
[info]   CI (99.9%): [≈ 0, 4569.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 5.000), stdev = 1.949
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Run progress: 60.45% complete, ETA 00:33:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1015472.350 ops/s
[info] # Warmup Iteration   2: 1131020.476 ops/s
[info] # Warmup Iteration   3: 1149676.279 ops/s
[info] Iteration   1: 1158867.872 ops/s
[info]                  ·gc.alloc.rate:            859.908 MB/sec
[info]                  ·gc.alloc.rate.norm:       1168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.636 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 913.632 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 1151954.526 ops/s
[info]                  ·gc.alloc.rate:                   854.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.858 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1379.669 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.910 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 1141997.117 ops/s
[info]                  ·gc.alloc.rate:            848.327 MB/sec
[info]                  ·gc.alloc.rate.norm:       1168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1386.935 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 1152434.544 ops/s
[info]                  ·gc.alloc.rate:                                  855.166 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1168.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.063 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.086 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       924.288 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                5.458 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 1127305.289 ops/s
[info]                  ·gc.alloc.rate:                                  836.772 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1168.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.030 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.915 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       950.448 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1146511.869 ±(99.9%) 47421.080 ops/s [Average]
[info]   (min, avg, max) = (1127305.289, 1146511.869, 1158867.872), stdev = 12315.104
[info]   CI (99.9%): [1099090.790, 1193932.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   851.020 ±(99.9%) 34.532 MB/sec [Average]
[info]   (min, avg, max) = (836.772, 851.020, 859.908), stdev = 8.968
[info]   CI (99.9%): [816.488, 885.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1168.000, 1168.000, 1168.000), stdev = 0.001
[info]   CI (99.9%): [1168.000, 1168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.063), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.026 ±(99.9%) 0.148 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.086), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   809.496 ±(99.9%) 699.977 MB/sec [Average]
[info]   (min, avg, max) = (672.636, 809.496, 1009.858), stdev = 181.782
[info]   CI (99.9%): [109.519, 1509.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1110.995 ±(99.9%) 958.640 B/op [Average]
[info]   (min, avg, max) = (913.632, 1110.995, 1386.935), stdev = 248.956
[info]   CI (99.9%): [152.355, 2069.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.274 ±(99.9%) 9.135 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.274, 5.458), stdev = 2.372
[info]   CI (99.9%): [≈ 0, 10.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 10.000), stdev = 3.347
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 60.71% complete, ETA 00:33:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1083906.700 ops/s
[info] # Warmup Iteration   2: 1194311.345 ops/s
[info] # Warmup Iteration   3: 1189154.140 ops/s
[info] Iteration   1: 1207994.248 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1209357.350 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1209900.913 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1198677.252 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1205842.775 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1206354.508 ±(99.9%) 17591.684 ops/s [Average]
[info]   (min, avg, max) = (1198677.252, 1206354.508, 1209900.913), stdev = 4568.505
[info]   CI (99.9%): [1188762.823, 1223946.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Run progress: 60.96% complete, ETA 00:33:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 161741.778 ops/s
[info] # Warmup Iteration   2: 299425.169 ops/s
[info] # Warmup Iteration   3: 304868.192 ops/s
[info] Iteration   1: 306336.651 ops/s
[info]                  ·gc.alloc.rate:                   836.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3453.192 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.422 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 296372.975 ops/s
[info]                  ·gc.alloc.rate:            808.777 MB/sec
[info]                  ·gc.alloc.rate.norm:       4296.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.956 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5359.299 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   3: 297342.291 ops/s
[info]                  ·gc.alloc.rate:                   811.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.000 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3557.531 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.526 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 301777.495 ops/s
[info]                  ·gc.alloc.rate:                   823.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.654 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5277.169 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 24.319 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 309064.676 ops/s
[info]                  ·gc.alloc.rate:                                  843.499 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4296.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.065 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.329 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.655 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3466.625 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   302178.818 ±(99.9%) 21262.693 ops/s [Average]
[info]   (min, avg, max) = (296372.975, 302178.818, 309064.676), stdev = 5521.854
[info]   CI (99.9%): [280916.125, 323441.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   824.681 ±(99.9%) 58.147 MB/sec [Average]
[info]   (min, avg, max) = (808.777, 824.681, 843.499), stdev = 15.100
[info]   CI (99.9%): [766.535, 882.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4296.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4296.001, 4296.001, 4296.001), stdev = 0.001
[info]   CI (99.9%): [4296.001, 4296.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.111 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.065), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.066 ±(99.9%) 0.566 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.066, 0.329), stdev = 0.147
[info]   CI (99.9%): [≈ 0, 0.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   809.063 ±(99.9%) 707.533 MB/sec [Average]
[info]   (min, avg, max) = (672.000, 809.063, 1011.654), stdev = 183.744
[info]   CI (99.9%): [101.530, 1516.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4222.763 ±(99.9%) 3855.457 B/op [Average]
[info]   (min, avg, max) = (3453.192, 4222.763, 5359.299), stdev = 1001.250
[info]   CI (99.9%): [367.307, 8078.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.564 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.662), stdev = 1.964
[info]   CI (99.9%): [≈ 0, 8.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   6.253 ±(99.9%) 39.458 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.253, 24.319), stdev = 10.247
[info]   CI (99.9%): [≈ 0, 45.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.000, 14.000), stdev = 4.416
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Run progress: 61.21% complete, ETA 00:33:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2371.909 ops/s
[info] # Warmup Iteration   2: 4262.492 ops/s
[info] # Warmup Iteration   3: 4315.504 ops/s
[info] Iteration   1: 4410.343 ops/s
[info]                  ·gc.alloc.rate:            870.317 MB/sec
[info]                  ·gc.alloc.rate.norm:       310640.092 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1006.784 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 359348.801 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 4373.224 ops/s
[info]                  ·gc.alloc.rate:            862.971 MB/sec
[info]                  ·gc.alloc.rate.norm:       310640.108 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.306 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 241647.144 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 4301.066 ops/s
[info]                  ·gc.alloc.rate:                   848.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              310640.095 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.132 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        368938.895 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 243.685 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 4308.166 ops/s
[info]                  ·gc.alloc.rate:                   850.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              310640.095 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.983 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        245478.697 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1703.024 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 4307.771 ops/s
[info]                  ·gc.alloc.rate:                                  850.410 MB/sec
[info]                  ·gc.alloc.rate.norm:                             310640.102 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.114 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 41.632 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.260 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       373048.737 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   4340.114 ±(99.9%) 188.838 ops/s [Average]
[info]   (min, avg, max) = (4301.066, 4340.114, 4410.343), stdev = 49.041
[info]   CI (99.9%): [4151.276, 4528.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   856.577 ±(99.9%) 36.854 MB/sec [Average]
[info]   (min, avg, max) = (848.829, 856.577, 870.317), stdev = 9.571
[info]   CI (99.9%): [819.723, 893.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   310640.098 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (310640.092, 310640.098, 310640.108), stdev = 0.006
[info]   CI (99.9%): [310640.074, 310640.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.196 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.114), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   8.326 ±(99.9%) 71.693 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.326, 41.632), stdev = 18.618
[info]   CI (99.9%): [≈ 0, 80.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   875.893 ±(99.9%) 718.293 MB/sec [Average]
[info]   (min, avg, max) = (671.306, 875.893, 1021.260), stdev = 186.538
[info]   CI (99.9%): [157.601, 1594.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   317692.455 ±(99.9%) 261329.979 B/op [Average]
[info]   (min, avg, max) = (241647.144, 317692.455, 373048.737), stdev = 67866.566
[info]   CI (99.9%): [56362.476, 579022.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   389.342 ±(99.9%) 2856.841 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 389.342, 1703.024), stdev = 741.913
[info]   CI (99.9%): [≈ 0, 3246.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 11.000), stdev = 3.317
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Run progress: 61.46% complete, ETA 00:32:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2028.150 ops/s
[info] # Warmup Iteration   2: 4518.701 ops/s
[info] # Warmup Iteration   3: 4563.612 ops/s
[info] Iteration   1: 4558.410 ops/s
[info]                  ·gc.alloc.rate:                   812.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              280456.089 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1005.480 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        347225.825 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 229.951 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 4597.191 ops/s
[info]                  ·gc.alloc.rate:            819.049 MB/sec
[info]                  ·gc.alloc.rate.norm:       280456.096 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.519 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 229596.876 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 4576.050 ops/s
[info]                  ·gc.alloc.rate:                   815.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              280456.096 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1006.371 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        346165.247 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 229.097 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 4600.162 ops/s
[info]                  ·gc.alloc.rate:                   819.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              280456.089 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.400 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        229724.975 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1367.411 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 4658.499 ops/s
[info]                  ·gc.alloc.rate:                                  830.056 MB/sec
[info]                  ·gc.alloc.rate.norm:                             280456.088 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.055 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 18.500 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.271 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       344724.985 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                225.016 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   4598.063 ±(99.9%) 145.544 ops/s [Average]
[info]   (min, avg, max) = (4558.410, 4598.063, 4658.499), stdev = 37.797
[info]   CI (99.9%): [4452.518, 4743.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   819.249 ±(99.9%) 26.041 MB/sec [Average]
[info]   (min, avg, max) = (812.132, 819.249, 830.056), stdev = 6.763
[info]   CI (99.9%): [793.208, 845.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   280456.092 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (280456.088, 280456.092, 280456.096), stdev = 0.004
[info]   CI (99.9%): [280456.076, 280456.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.094 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.055), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.700 ±(99.9%) 31.857 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.700, 18.500), stdev = 8.273
[info]   CI (99.9%): [≈ 0, 35.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   874.808 ±(99.9%) 716.915 MB/sec [Average]
[info]   (min, avg, max) = (670.519, 874.808, 1020.271), stdev = 186.180
[info]   CI (99.9%): [157.893, 1591.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   299487.581 ±(99.9%) 245474.391 B/op [Average]
[info]   (min, avg, max) = (229596.876, 299487.581, 347225.825), stdev = 63748.920
[info]   CI (99.9%): [54013.191, 544961.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 6.123 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 3.996), stdev = 1.590
[info]   CI (99.9%): [≈ 0, 7.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   410.295 ±(99.9%) 2095.063 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 410.295, 1367.411), stdev = 544.081
[info]   CI (99.9%): [≈ 0, 2505.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 10.200, 14.000), stdev = 4.147
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 61.71% complete, ETA 00:32:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20042.008 ops/s
[info] # Warmup Iteration   2: 29526.007 ops/s
[info] # Warmup Iteration   3: 30061.878 ops/s
[info] Iteration   1: 30065.131 ops/s
[info]                  ·gc.alloc.rate:            510.825 MB/sec
[info]                  ·gc.alloc.rate.norm:       26744.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.348 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17609.354 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 30344.987 ops/s
[info]                  ·gc.alloc.rate:            515.525 MB/sec
[info]                  ·gc.alloc.rate.norm:       26744.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.622 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 34893.801 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 30420.637 ops/s
[info]                  ·gc.alloc.rate:            516.861 MB/sec
[info]                  ·gc.alloc.rate.norm:       26744.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17403.322 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 30467.447 ops/s
[info]                  ·gc.alloc.rate:            517.695 MB/sec
[info]                  ·gc.alloc.rate.norm:       26744.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.728 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 34752.962 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 30757.135 ops/s
[info]                  ·gc.alloc.rate:                   522.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              26744.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.670 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        17179.154 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 34.086 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   30411.067 ±(99.9%) 957.007 ops/s [Average]
[info]   (min, avg, max) = (30065.131, 30411.067, 30757.135), stdev = 248.532
[info]   CI (99.9%): [29454.061, 31368.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   516.693 ±(99.9%) 16.254 MB/sec [Average]
[info]   (min, avg, max) = (510.825, 516.693, 522.562), stdev = 4.221
[info]   CI (99.9%): [500.439, 532.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26744.015 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (26744.013, 26744.015, 26744.018), stdev = 0.002
[info]   CI (99.9%): [26744.007, 26744.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   470.742 ±(99.9%) 709.825 MB/sec [Average]
[info]   (min, avg, max) = (335.670, 470.742, 672.728), stdev = 184.339
[info]   CI (99.9%): [≈ 0, 1180.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   24367.719 ±(99.9%) 36758.298 B/op [Average]
[info]   (min, avg, max) = (17179.154, 24367.719, 34893.801), stdev = 9546.013
[info]   CI (99.9%): [≈ 0, 61126.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   6.817 ±(99.9%) 58.697 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.817, 34.086), stdev = 15.244
[info]   CI (99.9%): [≈ 0, 65.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 2.191
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Run progress: 61.96% complete, ETA 00:32:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1487.743 ops/s
[info] # Warmup Iteration   2: 3738.184 ops/s
[info] # Warmup Iteration   3: 3721.367 ops/s
[info] Iteration   1: 3772.382 ops/s
[info]                  ·gc.alloc.rate:                   962.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              401792.117 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1004.865 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        419263.695 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 277.842 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 3722.492 ops/s
[info]                  ·gc.alloc.rate:                   950.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              401792.110 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1005.509 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        425174.479 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 281.573 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 3747.630 ops/s
[info]                  ·gc.alloc.rate:                   956.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              401792.117 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.149 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        422898.616 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1678.169 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 3826.843 ops/s
[info]                  ·gc.alloc.rate:                                  976.847 MB/sec
[info]                  ·gc.alloc.rate.norm:                             401792.107 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.043 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 17.856 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.262 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       419649.538 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                273.923 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 3771.983 ops/s
[info]                  ·gc.alloc.rate:            962.859 MB/sec
[info]                  ·gc.alloc.rate.norm:       401792.108 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.978 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 426044.794 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   3768.266 ±(99.9%) 148.924 ops/s [Average]
[info]   (min, avg, max) = (3722.492, 3768.266, 3826.843), stdev = 38.675
[info]   CI (99.9%): [3619.342, 3917.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   961.958 ±(99.9%) 37.890 MB/sec [Average]
[info]   (min, avg, max) = (950.211, 961.958, 976.847), stdev = 9.840
[info]   CI (99.9%): [924.068, 999.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   401792.112 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (401792.107, 401792.112, 401792.117), stdev = 0.005
[info]   CI (99.9%): [401792.092, 401792.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.075 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.043), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.571 ±(99.9%) 30.749 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.571, 17.856), stdev = 7.985
[info]   CI (99.9%): [≈ 0, 34.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1011.753 ±(99.9%) 31.350 MB/sec [Average]
[info]   (min, avg, max) = (1004.865, 1011.753, 1020.978), stdev = 8.141
[info]   CI (99.9%): [980.403, 1043.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   422606.224 ±(99.9%) 11933.841 B/op [Average]
[info]   (min, avg, max) = (419263.695, 422606.224, 426044.794), stdev = 3099.181
[info]   CI (99.9%): [410672.383, 434540.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 6.124 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 3.997), stdev = 1.590
[info]   CI (99.9%): [≈ 0, 7.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   502.301 ±(99.9%) 2573.192 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 502.301, 1678.169), stdev = 668.250
[info]   CI (99.9%): [≈ 0, 3075.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.600, 14.000), stdev = 5.683
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Run progress: 62.22% complete, ETA 00:32:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9515.338 ops/s
[info] # Warmup Iteration   2: 13643.221 ops/s
[info] # Warmup Iteration   3: 13687.620 ops/s
[info] Iteration   1: 13963.681 ops/s
[info]                  ·gc.alloc.rate:            875.338 MB/sec
[info]                  ·gc.alloc.rate.norm:       98672.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.002 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 113513.776 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 13646.888 ops/s
[info]                  ·gc.alloc.rate:                   855.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              98686.236 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.567 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        116226.776 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 76.819 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 13923.016 ops/s
[info]                  ·gc.alloc.rate:                   873.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              98736.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        75979.403 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 75.302 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 13930.952 ops/s
[info]                  ·gc.alloc.rate:                                  873.858 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98736.029 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.111 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 12.494 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1012.428 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       114392.846 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                526.809 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   5: 14096.489 ops/s
[info]                  ·gc.alloc.rate:                                  884.206 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98736.036 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.145 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 16.221 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.627 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76003.168 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   13912.205 ±(99.9%) 631.176 ops/s [Average]
[info]   (min, avg, max) = (13646.888, 13912.205, 14096.489), stdev = 163.914
[info]   CI (99.9%): [13281.029, 14543.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   872.452 ±(99.9%) 40.218 MB/sec [Average]
[info]   (min, avg, max) = (855.508, 872.452, 884.206), stdev = 10.445
[info]   CI (99.9%): [832.234, 912.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   98713.273 ±(99.9%) 121.550 B/op [Average]
[info]   (min, avg, max) = (98672.032, 98713.273, 98736.036), stdev = 31.566
[info]   CI (99.9%): [98591.722, 98834.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.051 ±(99.9%) 0.274 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.051, 0.145), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   5.743 ±(99.9%) 30.704 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.743, 16.221), stdev = 7.974
[info]   CI (99.9%): [≈ 0, 36.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   875.937 ±(99.9%) 701.741 MB/sec [Average]
[info]   (min, avg, max) = (672.061, 875.937, 1012.428), stdev = 182.240
[info]   CI (99.9%): [174.196, 1577.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   99223.194 ±(99.9%) 81750.365 B/op [Average]
[info]   (min, avg, max) = (75979.403, 99223.194, 116226.776), stdev = 21230.310
[info]   CI (99.9%): [17472.829, 180973.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.565 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.662), stdev = 1.965
[info]   CI (99.9%): [≈ 0, 8.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   135.786 ±(99.9%) 854.353 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 135.786, 526.809), stdev = 221.873
[info]   CI (99.9%): [≈ 0, 990.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.400, 12.000), stdev = 4.159
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Run progress: 62.47% complete, ETA 00:31:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9603.115 ops/s
[info] # Warmup Iteration   2: 15437.670 ops/s
[info] # Warmup Iteration   3: 16110.969 ops/s
[info] Iteration   1: 16171.103 ops/s
[info]                  ·gc.alloc.rate:            837.644 MB/sec
[info]                  ·gc.alloc.rate.norm:       81536.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.315 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 65345.571 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 16106.606 ops/s
[info]                  ·gc.alloc.rate:                   834.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              81535.921 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1005.651 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        98289.761 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 65.093 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 15837.549 ops/s
[info]                  ·gc.alloc.rate:                   820.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              81536.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.741 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        66661.366 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 66.198 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 15697.138 ops/s
[info]                  ·gc.alloc.rate:                                  813.173 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81536.140 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.056 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.621 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1010.459 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       101317.821 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     5.329 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                534.306 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   5: 16220.166 ops/s
[info]                  ·gc.alloc.rate:                                  840.173 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81536.025 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.055 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.314 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.632 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66053.049 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   16006.512 ±(99.9%) 876.006 ops/s [Average]
[info]   (min, avg, max) = (15697.138, 16006.512, 16220.166), stdev = 227.496
[info]   CI (99.9%): [15130.506, 16882.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   829.127 ±(99.9%) 45.200 MB/sec [Average]
[info]   (min, avg, max) = (813.173, 829.127, 840.173), stdev = 11.738
[info]   CI (99.9%): [783.927, 874.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   81536.024 ±(99.9%) 0.301 B/op [Average]
[info]   (min, avg, max) = (81535.921, 81536.024, 81536.140), stdev = 0.078
[info]   CI (99.9%): [81535.724, 81536.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.117 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.056), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.187 ±(99.9%) 11.539 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.187, 5.621), stdev = 2.997
[info]   CI (99.9%): [≈ 0, 13.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   807.759 ±(99.9%) 704.260 MB/sec [Average]
[info]   (min, avg, max) = (670.741, 807.759, 1010.459), stdev = 182.894
[info]   CI (99.9%): [103.500, 1512.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   79533.514 ±(99.9%) 71394.555 B/op [Average]
[info]   (min, avg, max) = (65345.571, 79533.514, 101317.821), stdev = 18540.939
[info]   CI (99.9%): [8138.959, 150928.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 8.698 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 5.329), stdev = 2.259
[info]   CI (99.9%): [≈ 0, 10.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   133.119 ±(99.9%) 872.786 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 133.119, 534.306), stdev = 226.660
[info]   CI (99.9%): [≈ 0, 1005.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.000, 14.000), stdev = 4.416
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 62.72% complete, ETA 00:31:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 231375.917 ops/s
[info] # Warmup Iteration   2: 261708.079 ops/s
[info] # Warmup Iteration   3: 270802.498 ops/s
[info] Iteration   1: 273223.059 ops/s
[info]                  ·gc.alloc.rate:            963.858 MB/sec
[info]                  ·gc.alloc.rate.norm:       5552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.135 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3871.620 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 274019.144 ops/s
[info]                  ·gc.alloc.rate:                   966.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.777 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5788.799 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.652 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 267510.625 ops/s
[info]                  ·gc.alloc.rate:                   943.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.334 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5933.546 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 27.434 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 274816.044 ops/s
[info]                  ·gc.alloc.rate:                                  969.284 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5552.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.109 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.625 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5848.461 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 276596.201 ops/s
[info]                  ·gc.alloc.rate:            975.930 MB/sec
[info]                  ·gc.alloc.rate.norm:       5552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5810.367 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   273233.015 ±(99.9%) 13224.713 ops/s [Average]
[info]   (min, avg, max) = (267510.625, 273233.015, 276596.201), stdev = 3434.416
[info]   CI (99.9%): [260008.302, 286457.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   963.824 ±(99.9%) 47.046 MB/sec [Average]
[info]   (min, avg, max) = (943.495, 963.824, 975.930), stdev = 12.218
[info]   CI (99.9%): [916.778, 1010.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5552.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5552.001, 5552.002, 5552.002), stdev = 0.001
[info]   CI (99.9%): [5552.001, 5552.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.109), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.125 ±(99.9%) 1.076 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.125, 0.625), stdev = 0.280
[info]   CI (99.9%): [≈ 0, 1.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   946.126 ±(99.9%) 590.330 MB/sec [Average]
[info]   (min, avg, max) = (672.135, 946.126, 1021.346), stdev = 153.307
[info]   CI (99.9%): [355.796, 1536.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5450.559 ±(99.9%) 3405.435 B/op [Average]
[info]   (min, avg, max) = (3871.620, 5450.559, 5933.546), stdev = 884.381
[info]   CI (99.9%): [2045.123, 8855.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.779 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.662), stdev = 2.020
[info]   CI (99.9%): [≈ 0, 8.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   7.017 ±(99.9%) 45.763 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.017, 27.434), stdev = 11.884
[info]   CI (99.9%): [≈ 0, 52.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.600, 11.000), stdev = 4.037
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 62.97% complete, ETA 00:31:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 261456.745 ops/s
[info] # Warmup Iteration   2: 286896.205 ops/s
[info] # Warmup Iteration   3: 277163.802 ops/s
[info] Iteration   1: 289714.409 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 292526.813 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 292302.879 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 292507.426 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 282440.779 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   289898.461 ±(99.9%) 16690.116 ops/s [Average]
[info]   (min, avg, max) = (282440.779, 289898.461, 292526.813), stdev = 4334.370
[info]   CI (99.9%): [273208.345, 306588.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Run progress: 63.22% complete, ETA 00:31:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10072.612 ops/s
[info] # Warmup Iteration   2: 14298.682 ops/s
[info] # Warmup Iteration   3: 14280.219 ops/s
[info] Iteration   1: 14806.159 ops/s
[info]                  ·gc.alloc.rate:            822.282 MB/sec
[info]                  ·gc.alloc.rate.norm:       87416.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.283 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71363.487 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 14744.827 ops/s
[info]                  ·gc.alloc.rate:            818.822 MB/sec
[info]                  ·gc.alloc.rate.norm:       87416.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1006.305 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 107431.403 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 14512.651 ops/s
[info]                  ·gc.alloc.rate:                   806.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              87416.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.744 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        72741.529 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 72.236 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 14707.478 ops/s
[info]                  ·gc.alloc.rate:                   816.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              87415.917 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1006.226 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        107701.607 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.327 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 570.227 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 14981.798 ops/s
[info]                  ·gc.alloc.rate:                                  832.197 MB/sec
[info]                  ·gc.alloc.rate.norm:                             87414.068 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.210 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 22.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.830 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71514.493 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   14750.582 ±(99.9%) 653.056 ops/s [Average]
[info]   (min, avg, max) = (14512.651, 14750.582, 14981.798), stdev = 169.597
[info]   CI (99.9%): [14097.526, 15403.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   819.212 ±(99.9%) 36.406 MB/sec [Average]
[info]   (min, avg, max) = (806.057, 819.212, 832.197), stdev = 9.454
[info]   CI (99.9%): [782.806, 855.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   87415.611 ±(99.9%) 3.324 B/op [Average]
[info]   (min, avg, max) = (87414.068, 87415.611, 87416.030), stdev = 0.863
[info]   CI (99.9%): [87412.286, 87418.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.042 ±(99.9%) 0.361 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.210), stdev = 0.094
[info]   CI (99.9%): [≈ 0, 0.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   4.409 ±(99.9%) 37.966 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.409, 22.047), stdev = 9.860
[info]   CI (99.9%): [≈ 0, 42.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   807.078 ±(99.9%) 700.343 MB/sec [Average]
[info]   (min, avg, max) = (670.744, 807.078, 1006.305), stdev = 181.877
[info]   CI (99.9%): [106.734, 1507.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   86150.504 ±(99.9%) 75309.283 B/op [Average]
[info]   (min, avg, max) = (71363.487, 86150.504, 107701.607), stdev = 19557.582
[info]   CI (99.9%): [10841.220, 161459.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 8.957 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 5.327), stdev = 2.326
[info]   CI (99.9%): [≈ 0, 10.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   128.493 ±(99.9%) 958.464 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 128.493, 570.227), stdev = 248.910
[info]   CI (99.9%): [≈ 0, 1086.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.200, 13.000), stdev = 4.147
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce
[info] # Run progress: 63.48% complete, ETA 00:31:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 537804.109 ops/s
[info] # Warmup Iteration   2: 833347.319 ops/s
[info] # Warmup Iteration   3: 851634.622 ops/s
[info] Iteration   1: 856778.302 ops/s
[info]                  ·gc.alloc.rate:            2774.117 MB/sec
[info]                  ·gc.alloc.rate.norm:       5096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2723.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5002.204 B/op
[info]                  ·gc.count:                 8.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 855824.082 ops/s
[info]                  ·gc.alloc.rate:                                  2770.497 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5096.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.684 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5008.054 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 855871.923 ops/s
[info]                  ·gc.alloc.rate:                                  2770.746 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.566 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5007.387 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 850801.997 ops/s
[info]                  ·gc.alloc.rate:                                  2755.056 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5096.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.925 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5667.312 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 860733.188 ops/s
[info]                  ·gc.alloc.rate:                                  2787.004 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5096.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.164 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4979.270 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce":
[info]   856001.898 ±(99.9%) 13624.342 ops/s [Average]
[info]   (min, avg, max) = (850801.997, 856001.898, 860733.188), stdev = 3538.198
[info]   CI (99.9%): [842377.557, 869626.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate":
[info]   2771.484 ±(99.9%) 43.871 MB/sec [Average]
[info]   (min, avg, max) = (2755.056, 2771.484, 2787.004), stdev = 11.393
[info]   CI (99.9%): [2727.614, 2815.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5096.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5096.000, 5096.000, 5096.001), stdev = 0.001
[info]   CI (99.9%): [5096.000, 5096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.007 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.004 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.009), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2791.079 ±(99.9%) 587.322 MB/sec [Average]
[info]   (min, avg, max) = (2722.566, 2791.079, 3063.925), stdev = 152.526
[info]   CI (99.9%): [2203.757, 3378.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5132.845 ±(99.9%) 1151.369 B/op [Average]
[info]   (min, avg, max) = (4979.270, 5132.845, 5667.312), stdev = 299.007
[info]   CI (99.9%): [3981.477, 6284.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.count":
[info]   41.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.600, 11.000), stdev = 2.074
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala
[info] # Run progress: 63.73% complete, ETA 00:30:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 542106.812 ops/s
[info] # Warmup Iteration   2: 1395620.010 ops/s
[info] # Warmup Iteration   3: 1424036.292 ops/s
[info] Iteration   1: 1418695.204 ops/s
[info]                  ·gc.alloc.rate:                   1333.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.050 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1491.221 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.478 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 1420016.282 ops/s
[info]                  ·gc.alloc.rate:                                  1335.161 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1480.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.074 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.082 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.475 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1500.301 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                4.430 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 1425238.293 ops/s
[info]                  ·gc.alloc.rate:                                  1340.050 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1480.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.026 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.422 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1503.604 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 1426884.396 ops/s
[info]                  ·gc.alloc.rate:            1341.608 MB/sec
[info]                  ·gc.alloc.rate.norm:       1480.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.428 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1501.864 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 1409226.527 ops/s
[info]                  ·gc.alloc.rate:                                  1325.325 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1480.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.770 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1520.699 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala":
[info]   1420012.140 ±(99.9%) 26719.998 ops/s [Average]
[info]   (min, avg, max) = (1409226.527, 1420012.140, 1426884.396), stdev = 6939.099
[info]   CI (99.9%): [1393292.142, 1446732.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1335.216 ±(99.9%) 24.634 MB/sec [Average]
[info]   (min, avg, max) = (1325.325, 1335.216, 1341.608), stdev = 6.397
[info]   CI (99.9%): [1310.582, 1359.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1480.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1480.000, 1480.000, 1480.000), stdev = 0.001
[info]   CI (99.9%): [1480.000, 1480.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.123 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.074), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.023 ±(99.9%) 0.136 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.082), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1356.429 ±(99.9%) 29.852 MB/sec [Average]
[info]   (min, avg, max) = (1344.050, 1356.429, 1361.770), stdev = 7.752
[info]   CI (99.9%): [1326.577, 1386.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1503.538 ±(99.9%) 41.270 B/op [Average]
[info]   (min, avg, max) = (1491.221, 1503.538, 1520.699), stdev = 10.718
[info]   CI (99.9%): [1462.268, 1544.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.182 ±(99.9%) 7.414 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.182, 4.430), stdev = 1.925
[info]   CI (99.9%): [≈ 0, 8.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 18.000), stdev = 6.442
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala
[info] # Run progress: 63.98% complete, ETA 00:30:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7434950.833 ops/s
[info] # Warmup Iteration   2: 8276447.350 ops/s
[info] # Warmup Iteration   3: 8173704.666 ops/s
[info] Iteration   1: 7948013.234 ops/s
[info]                  ·gc.alloc.rate:                                  1979.194 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.078 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.973 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       404.434 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 7965662.162 ops/s
[info]                  ·gc.alloc.rate:                                  1984.344 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.747 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       403.537 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 7957938.421 ops/s
[info]                  ·gc.alloc.rate:                                  1981.673 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.973 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       403.928 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 7966937.397 ops/s
[info]                  ·gc.alloc.rate:                                  1984.145 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.271 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       403.484 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 7949207.624 ops/s
[info]                  ·gc.alloc.rate:                                  1979.564 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.740 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       336.984 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala":
[info]   7957551.767 ±(99.9%) 34150.805 ops/s [Average]
[info]   (min, avg, max) = (7948013.234, 7957551.767, 7966937.397), stdev = 8868.856
[info]   CI (99.9%): [7923400.963, 7991702.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1981.784 ±(99.9%) 9.389 MB/sec [Average]
[info]   (min, avg, max) = (1979.194, 1981.784, 1984.344), stdev = 2.438
[info]   CI (99.9%): [1972.395, 1991.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.017, 0.078), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.003 ±(99.9%) 0.026 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.003, 0.015), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1974.141 ±(99.9%) 586.364 MB/sec [Average]
[info]   (min, avg, max) = (1701.740, 1974.141, 2042.747), stdev = 152.277
[info]   CI (99.9%): [1387.777, 2560.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   390.474 ±(99.9%) 115.149 B/op [Average]
[info]   (min, avg, max) = (336.984, 390.474, 404.434), stdev = 29.904
[info]   CI (99.9%): [275.325, 505.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson
[info] # Run progress: 64.23% complete, ETA 00:30:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45551.466 ops/s
[info] # Warmup Iteration   2: 292558.465 ops/s
[info] # Warmup Iteration   3: 296247.838 ops/s
[info] Iteration   1: 298232.411 ops/s
[info]                  ·gc.alloc.rate:                   1771.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              9352.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1684.966 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8893.566 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 24.607 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Iteration   2: 308908.978 ops/s
[info]                  ·gc.alloc.rate:                                  1835.829 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9352.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.171 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.871 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.227 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8671.415 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 307791.052 ops/s
[info]                  ·gc.alloc.rate:                                  1829.384 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9352.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.848 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10443.251 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 309406.756 ops/s
[info]                  ·gc.alloc.rate:            1838.284 MB/sec
[info]                  ·gc.alloc.rate.norm:       9352.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.750 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8657.404 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 309910.171 ops/s
[info]                  ·gc.alloc.rate:                                  1841.390 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9352.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.099 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10371.357 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson":
[info]   306849.873 ±(99.9%) 18794.284 ops/s [Average]
[info]   (min, avg, max) = (298232.411, 306849.873, 309910.171), stdev = 4880.816
[info]   CI (99.9%): [288055.589, 325644.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1823.341 ±(99.9%) 112.195 MB/sec [Average]
[info]   (min, avg, max) = (1771.821, 1823.341, 1841.390), stdev = 29.137
[info]   CI (99.9%): [1711.146, 1935.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   9352.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9352.001, 9352.001, 9352.001), stdev = 0.001
[info]   CI (99.9%): [9352.001, 9352.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.035 ±(99.9%) 0.292 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.171), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.180 ±(99.9%) 1.487 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.180, 0.871), stdev = 0.386
[info]   CI (99.9%): [≈ 0, 1.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1834.778 ±(99.9%) 730.569 MB/sec [Average]
[info]   (min, avg, max) = (1684.966, 1834.778, 2042.848), stdev = 189.727
[info]   CI (99.9%): [1104.209, 2565.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   9407.399 ±(99.9%) 3534.628 B/op [Average]
[info]   (min, avg, max) = (8657.404, 9407.399, 10443.251), stdev = 917.932
[info]   CI (99.9%): [5872.771, 12942.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   4.921 ±(99.9%) 42.374 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.921, 24.607), stdev = 11.004
[info]   CI (99.9%): [≈ 0, 47.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.600, 22.000), stdev = 7.537
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce
[info] # Run progress: 64.48% complete, ETA 00:30:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 514610.618 ops/s
[info] # Warmup Iteration   2: 964528.424 ops/s
[info] # Warmup Iteration   3: 968720.182 ops/s
[info] Iteration   1: 989688.485 ops/s
[info]                  ·gc.alloc.rate:                                  2178.367 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3464.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.182 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.289 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3247.779 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 1009401.931 ops/s
[info]                  ·gc.alloc.rate:            2221.260 MB/sec
[info]                  ·gc.alloc.rate.norm:       3464.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2382.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3715.246 B/op
[info]                  ·gc.count:                 7.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 988927.652 ops/s
[info]                  ·gc.alloc.rate:                                  2176.288 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3464.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.075 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3250.373 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 984427.474 ops/s
[info]                  ·gc.alloc.rate:                                  2166.427 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3464.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.141 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3265.275 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 975641.577 ops/s
[info]                  ·gc.alloc.rate:                                  2147.122 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3464.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.532 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3843.791 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce":
[info]   989617.424 ±(99.9%) 47714.102 ops/s [Average]
[info]   (min, avg, max) = (975641.577, 989617.424, 1009401.931), stdev = 12391.201
[info]   CI (99.9%): [941903.322, 1037331.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate":
[info]   2177.893 ±(99.9%) 104.781 MB/sec [Average]
[info]   (min, avg, max) = (2147.122, 2177.893, 2221.260), stdev = 27.211
[info]   CI (99.9%): [2073.112, 2282.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3464.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3464.000, 3464.000, 3464.000), stdev = 0.001
[info]   CI (99.9%): [3464.000, 3464.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.038 ±(99.9%) 0.310 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.182), stdev = 0.080
[info]   CI (99.9%): [≈ 0, 0.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.060 ±(99.9%) 0.493 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.060, 0.289), stdev = 0.128
[info]   CI (99.9%): [≈ 0, 0.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   2178.302 ±(99.9%) 717.610 MB/sec [Average]
[info]   (min, avg, max) = (2042.075, 2178.302, 2382.532), stdev = 186.361
[info]   CI (99.9%): [1460.692, 2895.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3464.493 ±(99.9%) 1121.399 B/op [Average]
[info]   (min, avg, max) = (3247.779, 3464.493, 3843.791), stdev = 291.224
[info]   CI (99.9%): [2343.094, 4585.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 10.000), stdev = 2.280
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala
[info] # Run progress: 64.74% complete, ETA 00:30:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_3eb5d47b/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 933817.986 ops/s
[info] # Warmup Iteration   2: 2846087.686 ops/s
[info] # Warmup Iteration   3: 2846473.288 ops/s
[info] Iteration   1: 2899999.975 ops/s
[info]                  ·gc.alloc.rate:                   1650.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1682.395 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        913.221 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.531 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 3011755.728 ops/s
[info]                  ·gc.alloc.rate:                                  1714.794 MB/sec
[info]                  ·gc.alloc.rate.norm:                             896.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.046 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.211 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       889.425 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 3014458.759 ops/s
[info]                  ·gc.alloc.rate:                                  1716.103 MB/sec
[info]                  ·gc.alloc.rate.norm:                             896.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.995 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       888.634 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 2993032.288 ops/s
[info]                  ·gc.alloc.rate:            1703.689 MB/sec
[info]                  ·gc.alloc.rate.norm:       896.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.793 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 895.003 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 3016818.617 ops/s
[info]                  ·gc.alloc.rate:                                  1718.078 MB/sec
[info]                  ·gc.alloc.rate.norm:                             896.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.516 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       887.884 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala":
[info]   2987213.074 ±(99.9%) 191190.824 ops/s [Average]
[info]   (min, avg, max) = (2899999.975, 2987213.074, 3016818.617), stdev = 49651.650
[info]   CI (99.9%): [2796022.249, 3178403.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1700.667 ±(99.9%) 109.756 MB/sec [Average]
[info]   (min, avg, max) = (1650.671, 1700.667, 1718.078), stdev = 28.503
[info]   CI (99.9%): [1590.911, 1810.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   896.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (896.000, 896.000, 896.000), stdev = 0.001
[info]   CI (99.9%): [896.000, 896.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.077 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.046), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.005 ±(99.9%) 0.040 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.024), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1698.182 ±(99.9%) 33.998 MB/sec [Average]
[info]   (min, avg, max) = (1682.395, 1698.182, 1702.516), stdev = 8.829
[info]   CI (99.9%): [1664.184, 1732.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   894.833 ±(99.9%) 41.027 B/op [Average]
[info]   (min, avg, max) = (887.884, 894.833, 913.221), stdev = 10.655
[info]   CI (99.9%): [853.806, 935.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.506 ±(99.9%) 4.358 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.506, 2.531), stdev = 1.132
[info]   CI (99.9%): [≈ 0, 4.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 19.000), stdev = 6.504
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala
[info] # Run progress: 64.99% complete, ETA 00:29:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7720576.248 ops/s
[info] # Warmup Iteration   2: 9788117.537 ops/s
[info] # Warmup Iteration   3: 10047416.445 ops/s
[info] Iteration   1: 10034845.376 ops/s
[info]                  ·gc.alloc.rate:            612.010 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 105.520 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 10005601.940 ops/s
[info]                  ·gc.alloc.rate:            610.120 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.600 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 105.831 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 10065040.645 ops/s
[info]                  ·gc.alloc.rate:            613.808 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.666 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 105.205 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 9602272.656 ops/s
[info]                  ·gc.alloc.rate:            585.635 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.348 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55.136 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 9545798.724 ops/s
[info]                  ·gc.alloc.rate:            582.297 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.788 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 110.919 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala":
[info]   9850711.868 ±(99.9%) 978940.504 ops/s [Average]
[info]   (min, avg, max) = (9545798.724, 9850711.868, 10065040.645), stdev = 254227.740
[info]   CI (99.9%): [8871771.364, 10829652.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   600.774 ±(99.9%) 59.469 MB/sec [Average]
[info]   (min, avg, max) = (582.297, 600.774, 613.808), stdev = 15.444
[info]   CI (99.9%): [541.305, 660.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   605.420 ±(99.9%) 579.197 MB/sec [Average]
[info]   (min, avg, max) = (336.348, 605.420, 672.788), stdev = 150.416
[info]   CI (99.9%): [26.223, 1184.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   96.522 ±(99.9%) 89.545 B/op [Average]
[info]   (min, avg, max) = (55.136, 96.522, 110.919), stdev = 23.255
[info]   CI (99.9%): [6.977, 186.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 65.24% complete, ETA 00:29:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7699314.140 ops/s
[info] # Warmup Iteration   2: 8115981.484 ops/s
[info] # Warmup Iteration   3: 7901360.423 ops/s
[info] Iteration   1: 8071994.444 ops/s
[info]                  ·gc.alloc.rate:            451.269 MB/sec
[info]                  ·gc.alloc.rate.norm:       88.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 131.173 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 8087603.982 ops/s
[info]                  ·gc.alloc.rate:            452.094 MB/sec
[info]                  ·gc.alloc.rate.norm:       88.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.318 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 65.464 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 8101660.511 ops/s
[info]                  ·gc.alloc.rate:            452.961 MB/sec
[info]                  ·gc.alloc.rate.norm:       88.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.753 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 130.701 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 8128453.287 ops/s
[info]                  ·gc.alloc.rate:            454.555 MB/sec
[info]                  ·gc.alloc.rate.norm:       88.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.439 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 65.133 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 8123192.448 ops/s
[info]                  ·gc.alloc.rate:            454.122 MB/sec
[info]                  ·gc.alloc.rate.norm:       88.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.325 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 65.173 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScalaPrealloc":
[info]   8102580.934 ±(99.9%) 91425.485 ops/s [Average]
[info]   (min, avg, max) = (8071994.444, 8102580.934, 8128453.287), stdev = 23742.908
[info]   CI (99.9%): [8011155.449, 8194006.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   453.000 ±(99.9%) 5.271 MB/sec [Average]
[info]   (min, avg, max) = (451.269, 453.000, 454.555), stdev = 1.369
[info]   CI (99.9%): [447.729, 458.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   88.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (88.000, 88.000, 88.000), stdev = 0.001
[info]   CI (99.9%): [88.000, 88.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   470.900 ±(99.9%) 709.386 MB/sec [Average]
[info]   (min, avg, max) = (336.318, 470.900, 672.753), stdev = 184.225
[info]   CI (99.9%): [≈ 0, 1180.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   91.529 ±(99.9%) 138.527 B/op [Average]
[info]   (min, avg, max) = (65.133, 91.529, 131.173), stdev = 35.975
[info]   CI (99.9%): [≈ 0, 230.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson
[info] # Run progress: 65.49% complete, ETA 00:29:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74526.646 ops/s
[info] # Warmup Iteration   2: 471652.029 ops/s
[info] # Warmup Iteration   3: 471132.925 ops/s
[info] Iteration   1: 458817.859 ops/s
[info]                  ·gc.alloc.rate:                   1594.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1679.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5760.327 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.995 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         24.000 ms
[info] Iteration   2: 478366.220 ops/s
[info]                  ·gc.alloc.rate:                                  1663.208 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.218 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.718 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.282 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5597.268 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.192 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 484646.866 ops/s
[info]                  ·gc.alloc.rate:                                  1684.937 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.840 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5526.893 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 478638.005 ops/s
[info]                  ·gc.alloc.rate:                                  1663.842 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.633 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5596.290 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 484232.433 ops/s
[info]                  ·gc.alloc.rate:                                  1683.280 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.689 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5531.846 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson":
[info]   476940.277 ±(99.9%) 40655.975 ops/s [Average]
[info]   (min, avg, max) = (458817.859, 476940.277, 484646.866), stdev = 10558.228
[info]   CI (99.9%): [436284.302, 517596.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1658.047 ±(99.9%) 141.472 MB/sec [Average]
[info]   (min, avg, max) = (1594.966, 1658.047, 1684.937), stdev = 36.740
[info]   CI (99.9%): [1516.575, 1799.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5472.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5472.001, 5472.001, 5472.001), stdev = 0.001
[info]   CI (99.9%): [5472.001, 5472.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.045 ±(99.9%) 0.373 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.045, 0.218), stdev = 0.097
[info]   CI (99.9%): [≈ 0, 0.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.148 ±(99.9%) 1.227 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.148, 0.718), stdev = 0.319
[info]   CI (99.9%): [≈ 0, 1.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1697.090 ±(99.9%) 38.935 MB/sec [Average]
[info]   (min, avg, max) = (1679.006, 1697.090, 1701.840), stdev = 10.111
[info]   CI (99.9%): [1658.155, 1736.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   5602.525 ±(99.9%) 363.696 B/op [Average]
[info]   (min, avg, max) = (5526.893, 5602.525, 5760.327), stdev = 94.451
[info]   CI (99.9%): [5238.829, 5966.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   3.637 ±(99.9%) 26.850 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.637, 15.995), stdev = 6.973
[info]   CI (99.9%): [≈ 0, 30.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.600, 24.000), stdev = 8.649
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala
[info] # Run progress: 65.74% complete, ETA 00:29:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 951066.177 ops/s
[info] # Warmup Iteration   2: 1916425.117 ops/s
[info] # Warmup Iteration   3: 1915530.572 ops/s
[info] Iteration   1: 1965085.918 ops/s
[info]                  ·gc.alloc.rate:                   1248.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        807.223 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.534 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 1962870.643 ops/s
[info]                  ·gc.alloc.rate:                   1246.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.230 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1080.565 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.739 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 1981392.040 ops/s
[info]                  ·gc.alloc.rate:                                  1258.843 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1000.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.078 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.062 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.480 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1081.534 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 1983890.508 ops/s
[info]                  ·gc.alloc.rate:            1260.252 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.935 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 810.103 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1982609.938 ops/s
[info]                  ·gc.alloc.rate:            1259.558 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.363 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1080.826 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala":
[info]   1975169.809 ±(99.9%) 39601.613 ops/s [Average]
[info]   (min, avg, max) = (1962870.643, 1975169.809, 1983890.508), stdev = 10284.413
[info]   CI (99.9%): [1935568.196, 2014771.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1254.847 ±(99.9%) 25.029 MB/sec [Average]
[info]   (min, avg, max) = (1246.783, 1254.847, 1260.252), stdev = 6.500
[info]   CI (99.9%): [1229.818, 1279.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1000.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1000.000, 1000.000, 1000.000), stdev = 0.001
[info]   CI (99.9%): [1000.000, 1000.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.135 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.078), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.012 ±(99.9%) 0.107 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1219.813 ±(99.9%) 722.274 MB/sec [Average]
[info]   (min, avg, max) = (1008.059, 1219.813, 1361.480), stdev = 187.572
[info]   CI (99.9%): [497.540, 1942.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   972.050 ±(99.9%) 574.343 B/op [Average]
[info]   (min, avg, max) = (807.223, 972.050, 1081.534), stdev = 149.155
[info]   CI (99.9%): [397.707, 1546.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.820 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.855 ±(99.9%) 6.272 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.855, 3.739), stdev = 1.629
[info]   CI (99.9%): [≈ 0, 7.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 15.000), stdev = 6.140
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala
[info] # Run progress: 65.99% complete, ETA 00:28:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6575371.342 ops/s
[info] # Warmup Iteration   2: 5154223.029 ops/s
[info] # Warmup Iteration   3: 5151643.598 ops/s
[info] Iteration   1: 5060222.219 ops/s
[info]                  ·gc.alloc.rate:            668.848 MB/sec
[info]                  ·gc.alloc.rate.norm:       208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.230 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 209.674 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 5152038.138 ops/s
[info]                  ·gc.alloc.rate:            680.776 MB/sec
[info]                  ·gc.alloc.rate.norm:       208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.002 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 205.930 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 5057639.471 ops/s
[info]                  ·gc.alloc.rate:            668.341 MB/sec
[info]                  ·gc.alloc.rate.norm:       208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 209.774 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 5050355.922 ops/s
[info]                  ·gc.alloc.rate:            667.509 MB/sec
[info]                  ·gc.alloc.rate.norm:       208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.195 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 210.083 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 5052821.886 ops/s
[info]                  ·gc.alloc.rate:                   667.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        209.961 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.037 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala":
[info]   5074615.527 ±(99.9%) 167327.048 ops/s [Average]
[info]   (min, avg, max) = (5050355.922, 5074615.527, 5152038.138), stdev = 43454.303
[info]   CI (99.9%): [4907288.479, 5241942.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   670.647 ±(99.9%) 21.895 MB/sec [Average]
[info]   (min, avg, max) = (667.509, 670.647, 680.776), stdev = 5.686
[info]   CI (99.9%): [648.751, 692.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   208.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (208.000, 208.000, 208.000), stdev = 0.001
[info]   CI (99.9%): [208.000, 208.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   674.104 ±(99.9%) 0.389 MB/sec [Average]
[info]   (min, avg, max) = (674.002, 674.104, 674.230), stdev = 0.101
[info]   CI (99.9%): [673.716, 674.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   209.084 ±(99.9%) 6.817 B/op [Average]
[info]   (min, avg, max) = (205.930, 209.084, 210.083), stdev = 1.770
[info]   CI (99.9%): [202.268, 215.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.207 ±(99.9%) 1.786 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.207, 1.037), stdev = 0.464
[info]   CI (99.9%): [≈ 0, 1.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson
[info] # Run progress: 66.25% complete, ETA 00:28:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80754.786 ops/s
[info] # Warmup Iteration   2: 376299.164 ops/s
[info] # Warmup Iteration   3: 374082.002 ops/s
[info] Iteration   1: 378287.347 ops/s
[info]                  ·gc.alloc.rate:                   1766.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              7352.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1682.421 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7000.687 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 19.400 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Iteration   2: 384839.555 ops/s
[info]                  ·gc.alloc.rate:                                  1797.759 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7352.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.078 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.320 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.491 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8352.843 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 382464.921 ops/s
[info]                  ·gc.alloc.rate:                                  1786.366 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7352.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.693 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7003.518 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 387097.800 ops/s
[info]                  ·gc.alloc.rate:                                  1807.981 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7352.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6919.676 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 386289.314 ops/s
[info]                  ·gc.alloc.rate:                                  1804.857 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7352.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.780 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8321.170 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson":
[info]   383795.787 ±(99.9%) 13658.193 ops/s [Average]
[info]   (min, avg, max) = (378287.347, 383795.787, 387097.800), stdev = 3546.989
[info]   CI (99.9%): [370137.594, 397453.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1792.763 ±(99.9%) 64.295 MB/sec [Average]
[info]   (min, avg, max) = (1766.850, 1792.763, 1807.981), stdev = 16.697
[info]   CI (99.9%): [1728.467, 1857.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   7352.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7352.001, 7352.001, 7352.001), stdev = 0.001
[info]   CI (99.9%): [7352.001, 7352.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.133 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.078), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.067 ±(99.9%) 0.545 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.320), stdev = 0.141
[info]   CI (99.9%): [≈ 0, 0.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1834.210 ±(99.9%) 733.271 MB/sec [Average]
[info]   (min, avg, max) = (1682.421, 1834.210, 2042.780), stdev = 190.428
[info]   CI (99.9%): [1100.939, 2567.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   7519.579 ±(99.9%) 2876.620 B/op [Average]
[info]   (min, avg, max) = (6919.676, 7519.579, 8352.843), stdev = 747.049
[info]   CI (99.9%): [4642.959, 10396.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   3.880 ±(99.9%) 33.408 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.880, 19.400), stdev = 8.676
[info]   CI (99.9%): [≈ 0, 37.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.200, 21.000), stdev = 7.155
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala
[info] # Run progress: 66.50% complete, ETA 00:28:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_3eb5d47b/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1133525.844 ops/s
[info] # Warmup Iteration   2: 2299530.436 ops/s
[info] # Warmup Iteration   3: 2260262.040 ops/s
[info] Iteration   1: 2307977.744 ops/s
[info]                  ·gc.alloc.rate:            1220.131 MB/sec
[info]                  ·gc.alloc.rate.norm:       832.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1342.962 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 915.758 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 2260246.492 ops/s
[info]                  ·gc.alloc.rate:                   1194.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        937.918 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.247 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 2312102.282 ops/s
[info]                  ·gc.alloc.rate:                                  1222.225 MB/sec
[info]                  ·gc.alloc.rate.norm:                             832.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.091 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.062 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.138 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       695.115 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 2351470.099 ops/s
[info]                  ·gc.alloc.rate:                                  1242.860 MB/sec
[info]                  ·gc.alloc.rate.norm:                             832.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       911.314 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 2353085.507 ops/s
[info]                  ·gc.alloc.rate:                                  1243.977 MB/sec
[info]                  ·gc.alloc.rate.norm:                             832.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.606 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       910.673 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala":
[info]   2316976.425 ±(99.9%) 146839.072 ops/s [Average]
[info]   (min, avg, max) = (2260246.492, 2316976.425, 2353085.507), stdev = 38133.641
[info]   CI (99.9%): [2170137.353, 2463815.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1224.815 ±(99.9%) 77.435 MB/sec [Average]
[info]   (min, avg, max) = (1194.880, 1224.815, 1243.977), stdev = 20.110
[info]   CI (99.9%): [1147.379, 1302.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   832.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (832.000, 832.000, 832.000), stdev = 0.001
[info]   CI (99.9%): [832.000, 832.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.157 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.091), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.013 ±(99.9%) 0.107 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1286.808 ±(99.9%) 572.783 MB/sec [Average]
[info]   (min, avg, max) = (1021.138, 1286.808, 1361.606), stdev = 148.750
[info]   CI (99.9%): [714.025, 1859.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   874.155 ±(99.9%) 387.780 B/op [Average]
[info]   (min, avg, max) = (695.115, 874.155, 937.918), stdev = 100.705
[info]   CI (99.9%): [486.375, 1261.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.649 ±(99.9%) 5.592 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.649, 3.247), stdev = 1.452
[info]   CI (99.9%): [≈ 0, 6.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.600, 18.000), stdev = 7.733
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala
[info] # Run progress: 66.75% complete, ETA 00:28:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5913981.276 ops/s
[info] # Warmup Iteration   2: 6805640.590 ops/s
[info] # Warmup Iteration   3: 6919612.654 ops/s
[info] Iteration   1: 6857358.434 ops/s
[info]                  ·gc.alloc.rate:                   1045.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.242 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        308.982 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.153 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 6884468.945 ops/s
[info]                  ·gc.alloc.rate:            1049.869 MB/sec
[info]                  ·gc.alloc.rate.norm:       240.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.234 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 230.711 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 6749272.781 ops/s
[info]                  ·gc.alloc.rate:                                  1029.377 MB/sec
[info]                  ·gc.alloc.rate.norm:                             240.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.130 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       237.198 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.932 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 6798851.095 ops/s
[info]                  ·gc.alloc.rate:                                  1036.890 MB/sec
[info]                  ·gc.alloc.rate.norm:                             240.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.273 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       236.385 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 6788149.455 ops/s
[info]                  ·gc.alloc.rate:            1035.013 MB/sec
[info]                  ·gc.alloc.rate.norm:       240.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.093 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 236.772 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala":
[info]   6815620.142 ±(99.9%) 210204.732 ops/s [Average]
[info]   (min, avg, max) = (6749272.781, 6815620.142, 6884468.945), stdev = 54589.501
[info]   CI (99.9%): [6605415.410, 7025824.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1039.367 ±(99.9%) 31.936 MB/sec [Average]
[info]   (min, avg, max) = (1029.377, 1039.367, 1049.869), stdev = 8.294
[info]   CI (99.9%): [1007.432, 1071.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   240.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (240.000, 240.000, 240.000), stdev = 0.001
[info]   CI (99.9%): [240.000, 240.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.221 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.130), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.006 ±(99.9%) 0.052 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.030), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1083.040 ±(99.9%) 566.872 MB/sec [Average]
[info]   (min, avg, max) = (1009.234, 1083.040, 1346.242), stdev = 147.215
[info]   CI (99.9%): [516.168, 1649.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   250.010 ±(99.9%) 127.350 B/op [Average]
[info]   (min, avg, max) = (230.711, 250.010, 308.982), stdev = 33.072
[info]   CI (99.9%): [122.659, 377.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.690 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.217 ±(99.9%) 1.560 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.217, 0.932), stdev = 0.405
[info]   CI (99.9%): [≈ 0, 1.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.600, 18.000), stdev = 6.580
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 67.00% complete, ETA 00:28:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5742911.131 ops/s
[info] # Warmup Iteration   2: 6661476.847 ops/s
[info] # Warmup Iteration   3: 6742139.779 ops/s
[info] Iteration   1: 6658799.915 ops/s
[info]                  ·gc.alloc.rate:            812.503 MB/sec
[info]                  ·gc.alloc.rate.norm:       192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.249 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 159.330 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 6745397.712 ops/s
[info]                  ·gc.alloc.rate:            822.678 MB/sec
[info]                  ·gc.alloc.rate.norm:       192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.644 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 156.985 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 6770868.768 ops/s
[info]                  ·gc.alloc.rate:            825.896 MB/sec
[info]                  ·gc.alloc.rate.norm:       192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.073 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 234.584 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 6755228.575 ops/s
[info]                  ·gc.alloc.rate:                   824.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        156.743 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.931 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 6634993.333 ops/s
[info]                  ·gc.alloc.rate:                                  809.256 MB/sec
[info]                  ·gc.alloc.rate.norm:                             192.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.082 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.954 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       242.226 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScalaPrealloc":
[info]   6713057.660 ±(99.9%) 237403.451 ops/s [Average]
[info]   (min, avg, max) = (6634993.333, 6713057.660, 6770868.768), stdev = 61652.922
[info]   CI (99.9%): [6475654.210, 6950461.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   818.877 ±(99.9%) 28.794 MB/sec [Average]
[info]   (min, avg, max) = (809.256, 818.877, 825.896), stdev = 7.478
[info]   CI (99.9%): [790.082, 847.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (192.000, 192.000, 192.000), stdev = 0.001
[info]   CI (99.9%): [192.000, 192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.141 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.082), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.004 ±(99.9%) 0.033 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.019), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   809.930 ±(99.9%) 721.083 MB/sec [Average]
[info]   (min, avg, max) = (672.644, 809.930, 1020.954), stdev = 187.263
[info]   CI (99.9%): [88.846, 1531.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   189.973 ±(99.9%) 170.606 B/op [Average]
[info]   (min, avg, max) = (156.743, 189.973, 242.226), stdev = 44.306
[info]   CI (99.9%): [19.367, 360.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   0.186 ±(99.9%) 1.603 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.186, 0.931), stdev = 0.416
[info]   CI (99.9%): [≈ 0, 1.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 10.000), stdev = 2.510
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson
[info] # Run progress: 67.25% complete, ETA 00:27:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 159280.637 ops/s
[info] # Warmup Iteration   2: 556776.419 ops/s
[info] # Warmup Iteration   3: 573194.352 ops/s
[info] Iteration   1: 574519.732 ops/s
[info]                  ·gc.alloc.rate:                   1665.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              4560.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1683.821 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4611.343 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 14.599 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Iteration   2: 583641.994 ops/s
[info]                  ·gc.alloc.rate:                                  1690.609 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.100 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.270 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.575 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4589.579 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 578202.781 ops/s
[info]                  ·gc.alloc.rate:                                  1675.607 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.320 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4632.697 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 574282.651 ops/s
[info]                  ·gc.alloc.rate:                                  1664.034 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.141 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4664.427 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 578772.940 ops/s
[info]                  ·gc.alloc.rate:            1676.623 MB/sec
[info]                  ·gc.alloc.rate.norm:       4560.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.716 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4628.247 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson":
[info]   577884.020 ±(99.9%) 14705.017 ops/s [Average]
[info]   (min, avg, max) = (574282.651, 577884.020, 583641.994), stdev = 3818.846
[info]   CI (99.9%): [563179.003, 592589.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1674.389 ±(99.9%) 41.453 MB/sec [Average]
[info]   (min, avg, max) = (1664.034, 1674.389, 1690.609), stdev = 10.765
[info]   CI (99.9%): [1632.936, 1715.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4560.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4560.001, 4560.001, 4560.001), stdev = 0.001
[info]   CI (99.9%): [4560.001, 4560.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.171 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.100), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.056 ±(99.9%) 0.460 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.056, 0.270), stdev = 0.119
[info]   CI (99.9%): [≈ 0, 0.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1698.315 ±(99.9%) 31.220 MB/sec [Average]
[info]   (min, avg, max) = (1683.821, 1698.315, 1702.320), stdev = 8.108
[info]   CI (99.9%): [1667.094, 1729.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4625.259 ±(99.9%) 106.592 B/op [Average]
[info]   (min, avg, max) = (4589.579, 4625.259, 4664.427), stdev = 27.682
[info]   CI (99.9%): [4518.666, 4731.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 9.180 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 5.331), stdev = 2.384
[info]   CI (99.9%): [≈ 0, 10.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.920 ±(99.9%) 25.140 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.920, 14.599), stdev = 6.529
[info]   CI (99.9%): [≈ 0, 28.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.000, 21.000), stdev = 7.280
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 67.51% complete, ETA 00:27:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 403765.766 ops/s
[info] # Warmup Iteration   2: 714966.241 ops/s
[info] # Warmup Iteration   3: 722049.621 ops/s
[info] Iteration   1: 732956.471 ops/s
[info]                  ·gc.alloc.rate:                                  2395.512 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5144.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.075 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.161 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2721.843 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5844.747 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 737342.768 ops/s
[info]                  ·gc.alloc.rate:                                  2409.400 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5144.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.265 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5086.068 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 733546.826 ops/s
[info]                  ·gc.alloc.rate:                                  2398.133 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5144.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.393 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5112.383 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 725922.091 ops/s
[info]                  ·gc.alloc.rate:                                  2373.166 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5144.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.356 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5166.089 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 725070.117 ops/s
[info]                  ·gc.alloc.rate:                                  2370.782 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5144.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.707 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5172.045 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   730967.655 ±(99.9%) 20329.088 ops/s [Average]
[info]   (min, avg, max) = (725070.117, 730967.655, 737342.768), stdev = 5279.400
[info]   CI (99.9%): [710638.567, 751296.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2389.399 ±(99.9%) 64.542 MB/sec [Average]
[info]   (min, avg, max) = (2370.782, 2389.399, 2409.400), stdev = 16.761
[info]   CI (99.9%): [2324.856, 2453.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5144.001, 5144.001, 5144.001), stdev = 0.001
[info]   CI (99.9%): [5144.000, 5144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.124 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.017, 0.075), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.037 ±(99.9%) 0.267 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.037, 0.161), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2450.913 ±(99.9%) 583.201 MB/sec [Average]
[info]   (min, avg, max) = (2382.265, 2450.913, 2721.843), stdev = 151.455
[info]   CI (99.9%): [1867.712, 3034.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5276.266 ±(99.9%) 1231.612 B/op [Average]
[info]   (min, avg, max) = (5086.068, 5276.266, 5844.747), stdev = 319.846
[info]   CI (99.9%): [4044.655, 6507.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   36.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.000, 9.000), stdev = 1.581
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava
[info] # Run progress: 67.76% complete, ETA 00:27:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.890 ops/s
[info] # Warmup Iteration   2: 5130706.645 ops/s
[info] # Warmup Iteration   3: 5255579.340 ops/s
[info] Iteration   1: 5157053.650 ops/s
[info]                  ·gc.alloc.rate:      314.572 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 5401093.786 ops/s
[info]                  ·gc.alloc.rate:            329.347 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.631 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 97.249 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 5297536.610 ops/s
[info]                  ·gc.alloc.rate:            323.091 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.676 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 99.145 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 5368706.365 ops/s
[info]                  ·gc.alloc.rate:            327.483 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.749 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 97.837 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 5395780.257 ops/s
[info]                  ·gc.alloc.rate:            329.075 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.689 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 97.346 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava":
[info]   5324034.134 ±(99.9%) 393001.109 ops/s [Average]
[info]   (min, avg, max) = (5157053.650, 5324034.134, 5401093.786), stdev = 102061.140
[info]   CI (99.9%): [4931033.025, 5717035.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   324.714 ±(99.9%) 23.864 MB/sec [Average]
[info]   (min, avg, max) = (314.572, 324.714, 329.347), stdev = 6.198
[info]   CI (99.9%): [300.849, 348.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   266.949 ±(99.9%) 574.628 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 266.949, 333.749), stdev = 149.229
[info]   CI (99.9%): [≈ 0, 841.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   78.315 ±(99.9%) 168.605 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 78.315, 99.145), stdev = 43.786
[info]   CI (99.9%): [≈ 0, 246.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.800, 5.000), stdev = 2.168
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 68.01% complete, ETA 00:27:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 162311.868 ops/s
[info] # Warmup Iteration   2: 781346.514 ops/s
[info] # Warmup Iteration   3: 800995.249 ops/s
[info] Iteration   1: 792150.564 ops/s
[info]                  ·gc.alloc.rate:            982.624 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.669 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2003.739 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 771091.972 ops/s
[info]                  ·gc.alloc.rate:                   956.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2057.039 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.719 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 790986.227 ops/s
[info]                  ·gc.alloc.rate:                   980.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2006.763 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.278 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 793678.357 ops/s
[info]                  ·gc.alloc.rate:                                  984.198 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1952.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.234 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.465 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2025.000 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 809041.072 ops/s
[info]                  ·gc.alloc.rate:            1003.328 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.097 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1986.570 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   791389.638 ±(99.9%) 52003.240 ops/s [Average]
[info]   (min, avg, max) = (771091.972, 791389.638, 809041.072), stdev = 13505.076
[info]   CI (99.9%): [739386.398, 843392.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   981.509 ±(99.9%) 64.107 MB/sec [Average]
[info]   (min, avg, max) = (956.535, 981.509, 1003.328), stdev = 16.648
[info]   CI (99.9%): [917.402, 1045.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.047 ±(99.9%) 0.403 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.047, 0.234), stdev = 0.105
[info]   CI (99.9%): [≈ 0, 0.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.093 ±(99.9%) 0.800 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.093, 0.465), stdev = 0.208
[info]   CI (99.9%): [≈ 0, 0.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1013.430 ±(99.9%) 26.802 MB/sec [Average]
[info]   (min, avg, max) = (1008.007, 1013.430, 1021.097), stdev = 6.960
[info]   CI (99.9%): [986.629, 1040.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2015.822 ±(99.9%) 103.087 B/op [Average]
[info]   (min, avg, max) = (1986.570, 2015.822, 2057.039), stdev = 26.771
[info]   CI (99.9%): [1912.735, 2118.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.779 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.662), stdev = 2.020
[info]   CI (99.9%): [≈ 0, 8.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.399 ±(99.9%) 15.486 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.399, 9.278), stdev = 4.022
[info]   CI (99.9%): [≈ 0, 17.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.400, 14.000), stdev = 5.857
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 68.26% complete, ETA 00:27:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6571265.044 ops/s
[info] # Warmup Iteration   2: 7382391.090 ops/s
[info] # Warmup Iteration   3: 7797826.009 ops/s
[info] Iteration   1: 7749671.935 ops/s
[info]                  ·gc.alloc.rate:            354.597 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.301 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 136.915 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 7716423.334 ops/s
[info]                  ·gc.alloc.rate:            352.936 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 68.752 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 7738802.877 ops/s
[info]                  ·gc.alloc.rate:            353.985 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 68.554 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   4: 7711223.515 ops/s
[info]                  ·gc.alloc.rate:            352.734 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 68.799 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 7809821.143 ops/s
[info]                  ·gc.alloc.rate:            357.227 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.035 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 67.930 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   7745188.561 ±(99.9%) 151835.912 ops/s [Average]
[info]   (min, avg, max) = (7711223.515, 7745188.561, 7809821.143), stdev = 39431.304
[info]   CI (99.9%): [7593352.649, 7897024.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   354.296 ±(99.9%) 6.960 MB/sec [Average]
[info]   (min, avg, max) = (352.734, 354.296, 357.227), stdev = 1.808
[info]   CI (99.9%): [347.336, 361.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.489 ±(99.9%) 580.792 MB/sec [Average]
[info]   (min, avg, max) = (337.017, 404.489, 674.301), stdev = 150.830
[info]   CI (99.9%): [≈ 0, 985.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   82.190 ±(99.9%) 117.807 B/op [Average]
[info]   (min, avg, max) = (67.930, 82.190, 136.915), stdev = 30.594
[info]   CI (99.9%): [≈ 0, 199.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 68.51% complete, ETA 00:26:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25702.534 ops/s
[info] # Warmup Iteration   2: 248037.959 ops/s
[info] # Warmup Iteration   3: 260933.843 ops/s
[info] Iteration   1: 259563.585 ops/s
[info]                  ·gc.alloc.rate:                   1437.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              8720.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1679.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        10182.585 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.039 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   2: 263657.134 ops/s
[info]                  ·gc.alloc.rate:                                  1460.500 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8720.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.133 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.793 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.982 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8072.087 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                27.835 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   3: 270175.353 ops/s
[info]                  ·gc.alloc.rate:                                  1497.189 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8720.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.038 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.223 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.836 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7931.675 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 270964.572 ops/s
[info]                  ·gc.alloc.rate:                                  1501.104 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8720.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.822 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9885.984 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 271896.666 ops/s
[info]                  ·gc.alloc.rate:            1506.153 MB/sec
[info]                  ·gc.alloc.rate.norm:       8720.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.275 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7881.218 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   267251.462 ±(99.9%) 20730.710 ops/s [Average]
[info]   (min, avg, max) = (259563.585, 267251.462, 271896.666), stdev = 5383.700
[info]   CI (99.9%): [246520.752, 287982.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1480.561 ±(99.9%) 115.189 MB/sec [Average]
[info]   (min, avg, max) = (1437.858, 1480.561, 1506.153), stdev = 29.914
[info]   CI (99.9%): [1365.372, 1595.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8720.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8720.002, 8720.002, 8720.002), stdev = 0.001
[info]   CI (99.9%): [8720.001, 8720.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.221 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.133), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.204 ±(99.9%) 1.321 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.204, 0.793), stdev = 0.343
[info]   CI (99.9%): [≈ 0, 1.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1491.188 ±(99.9%) 701.192 MB/sec [Average]
[info]   (min, avg, max) = (1351.982, 1491.188, 1701.822), stdev = 182.097
[info]   CI (99.9%): [789.996, 2192.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   8790.710 ±(99.9%) 4398.203 B/op [Average]
[info]   (min, avg, max) = (7881.218, 8790.710, 10182.585), stdev = 1142.199
[info]   CI (99.9%): [4392.507, 13188.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   6.375 ±(99.9%) 46.683 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.375, 27.835), stdev = 12.123
[info]   CI (99.9%): [≈ 0, 53.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.400, 23.000), stdev = 8.649
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 68.77% complete, ETA 00:26:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4941.963 ops/s
[info] # Warmup Iteration   2: 7054.561 ops/s
[info] # Warmup Iteration   3: 7083.446 ops/s
[info] Iteration   1: 7212.436 ops/s
[info]                  ·gc.alloc.rate:                                  1736.552 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378984.061 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.123 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 26.886 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1691.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       369196.429 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                726.765 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   2: 7152.678 ops/s
[info]                  ·gc.alloc.rate:                                  1722.511 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378984.057 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.078 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 17.174 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.091 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       374491.429 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 7224.917 ops/s
[info]                  ·gc.alloc.rate:                                  1739.403 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378984.061 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.070 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 15.210 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       444850.424 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 7315.738 ops/s
[info]                  ·gc.alloc.rate:                                  1761.435 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378984.056 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.049 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10.531 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.780 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       366148.924 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 7312.580 ops/s
[info]                  ·gc.alloc.rate:                                  1760.965 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378984.056 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.064 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 13.810 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       366299.109 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   7243.670 ±(99.9%) 269.195 ops/s [Average]
[info]   (min, avg, max) = (7152.678, 7243.670, 7315.738), stdev = 69.909
[info]   CI (99.9%): [6974.475, 7512.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1744.173 ±(99.9%) 64.722 MB/sec [Average]
[info]   (min, avg, max) = (1722.511, 1744.173, 1761.435), stdev = 16.808
[info]   CI (99.9%): [1679.451, 1808.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   378984.058 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (378984.056, 378984.058, 378984.061), stdev = 0.003
[info]   CI (99.9%): [378984.048, 378984.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.077 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.049, 0.077, 0.123), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   16.722 ±(99.9%) 23.783 B/op [Average]
[info]   (min, avg, max) = (10.531, 16.722, 26.886), stdev = 6.176
[info]   CI (99.9%): [≈ 0, 40.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1767.861 ±(99.9%) 589.720 MB/sec [Average]
[info]   (min, avg, max) = (1691.703, 1767.861, 2041.706), stdev = 153.148
[info]   CI (99.9%): [1178.141, 2357.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   384197.263 ±(99.9%) 131206.428 B/op [Average]
[info]   (min, avg, max) = (366148.924, 384197.263, 444850.424), stdev = 34073.893
[info]   CI (99.9%): [252990.835, 515403.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   145.353 ±(99.9%) 1251.533 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 145.353, 726.765), stdev = 325.019
[info]   CI (99.9%): [≈ 0, 1396.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 13.000), stdev = 3.647
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava
[info] # Run progress: 69.02% complete, ETA 00:26:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52.962 ops/s
[info] # Warmup Iteration   2: 11201.692 ops/s
[info] # Warmup Iteration   3: 11211.143 ops/s
[info] Iteration   1: 11251.762 ops/s
[info]                  ·gc.alloc.rate:                   259.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              36280.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:             329.680 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        46116.848 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 465.827 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 11268.006 ops/s
[info]                  ·gc.alloc.rate:                   259.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              36280.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:             333.011 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        46520.674 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 93.041 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 11276.376 ops/s
[info]                  ·gc.alloc.rate:            259.963 MB/sec
[info]                  ·gc.alloc.rate.norm:       36280.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.565 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46551.757 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 11336.207 ops/s
[info]                  ·gc.alloc.rate:      261.302 MB/sec
[info]                  ·gc.alloc.rate.norm: 36280.036 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 11284.260 ops/s
[info]                  ·gc.alloc.rate:            260.086 MB/sec
[info]                  ·gc.alloc.rate.norm:       36280.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.663 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46543.508 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava":
[info]   11283.322 ±(99.9%) 122.927 ops/s [Average]
[info]   (min, avg, max) = (11251.762, 11283.322, 11336.207), stdev = 31.924
[info]   CI (99.9%): [11160.395, 11406.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   260.083 ±(99.9%) 2.835 MB/sec [Average]
[info]   (min, avg, max) = (259.358, 260.083, 261.302), stdev = 0.736
[info]   CI (99.9%): [257.248, 262.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   36280.037 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (36280.036, 36280.037, 36280.039), stdev = 0.002
[info]   CI (99.9%): [36280.031, 36280.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   265.984 ±(99.9%) 572.585 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 265.984, 333.663), stdev = 148.698
[info]   CI (99.9%): [≈ 0, 838.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   37146.557 ±(99.9%) 79963.870 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37146.557, 46551.757), stdev = 20766.363
[info]   CI (99.9%): [≈ 0, 117110.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   111.774 ±(99.9%) 777.755 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 111.774, 465.827), stdev = 201.981
[info]   CI (99.9%): [≈ 0, 889.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.000, 5.000), stdev = 2.236
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 69.27% complete, ETA 00:26:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6151.197 ops/s
[info] # Warmup Iteration   2: 12852.894 ops/s
[info] # Warmup Iteration   3: 12855.529 ops/s
[info] Iteration   1: 12865.016 ops/s
[info]                  ·gc.alloc.rate:            326.956 MB/sec
[info]                  ·gc.alloc.rate.norm:       39992.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.764 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 41069.498 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 12885.509 ops/s
[info]                  ·gc.alloc.rate:            327.358 MB/sec
[info]                  ·gc.alloc.rate.norm:       39992.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.630 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 41002.584 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 12809.087 ops/s
[info]                  ·gc.alloc.rate:            325.430 MB/sec
[info]                  ·gc.alloc.rate.norm:       39992.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.659 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 41249.009 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 12920.567 ops/s
[info]                  ·gc.alloc.rate:            328.369 MB/sec
[info]                  ·gc.alloc.rate.norm:       39992.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.781 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40894.707 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 12756.657 ops/s
[info]                  ·gc.alloc.rate:            324.221 MB/sec
[info]                  ·gc.alloc.rate.norm:       39992.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.774 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 41417.108 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   12847.367 ±(99.9%) 249.685 ops/s [Average]
[info]   (min, avg, max) = (12756.657, 12847.367, 12920.567), stdev = 64.842
[info]   CI (99.9%): [12597.682, 13097.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   326.467 ±(99.9%) 6.319 MB/sec [Average]
[info]   (min, avg, max) = (324.221, 326.467, 328.369), stdev = 1.641
[info]   CI (99.9%): [320.148, 332.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39992.032 ±(99.9%) 0.004 B/op [Average]
[info]   (min, avg, max) = (39992.032, 39992.032, 39992.034), stdev = 0.001
[info]   CI (99.9%): [39992.028, 39992.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   335.722 ±(99.9%) 0.275 MB/sec [Average]
[info]   (min, avg, max) = (335.630, 335.722, 335.781), stdev = 0.071
[info]   CI (99.9%): [335.447, 335.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   41126.581 ±(99.9%) 798.008 B/op [Average]
[info]   (min, avg, max) = (40894.707, 41126.581, 41417.108), stdev = 207.240
[info]   CI (99.9%): [40328.573, 41924.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 69.52% complete, ETA 00:25:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18566.771 ops/s
[info] # Warmup Iteration   2: 22755.581 ops/s
[info] # Warmup Iteration   3: 22881.472 ops/s
[info] Iteration   1: 22803.962 ops/s
[info]                  ·gc.alloc.rate:            427.243 MB/sec
[info]                  ·gc.alloc.rate.norm:       29496.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.957 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23262.866 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 22686.425 ops/s
[info]                  ·gc.alloc.rate:            425.166 MB/sec
[info]                  ·gc.alloc.rate.norm:       29496.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.096 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46765.630 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 22859.257 ops/s
[info]                  ·gc.alloc.rate:            428.339 MB/sec
[info]                  ·gc.alloc.rate.norm:       29496.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.994 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23205.889 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 22842.474 ops/s
[info]                  ·gc.alloc.rate:            428.007 MB/sec
[info]                  ·gc.alloc.rate.norm:       29496.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.969 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23222.140 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 22855.428 ops/s
[info]                  ·gc.alloc.rate:            428.276 MB/sec
[info]                  ·gc.alloc.rate.norm:       29496.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.974 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23207.920 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   22809.509 ±(99.9%) 278.011 ops/s [Average]
[info]   (min, avg, max) = (22686.425, 22809.509, 22859.257), stdev = 72.199
[info]   CI (99.9%): [22531.498, 23087.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   427.406 ±(99.9%) 5.106 MB/sec [Average]
[info]   (min, avg, max) = (425.166, 427.406, 428.339), stdev = 1.326
[info]   CI (99.9%): [422.300, 432.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29496.020 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (29496.018, 29496.020, 29496.023), stdev = 0.002
[info]   CI (99.9%): [29496.012, 29496.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.398 ±(99.9%) 580.546 MB/sec [Average]
[info]   (min, avg, max) = (336.957, 404.398, 674.096), stdev = 150.766
[info]   CI (99.9%): [≈ 0, 984.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   27932.889 ±(99.9%) 40538.991 B/op [Average]
[info]   (min, avg, max) = (23205.889, 27932.889, 46765.630), stdev = 10527.847
[info]   CI (99.9%): [≈ 0, 68471.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 69.77% complete, ETA 00:25:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 652.602 ops/s
[info] # Warmup Iteration   2: 2136.002 ops/s
[info] # Warmup Iteration   3: 2160.977 ops/s
[info] Iteration   1: 2160.169 ops/s
[info]                  ·gc.alloc.rate:            1348.602 MB/sec
[info]                  ·gc.alloc.rate.norm:       982672.215 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1342.489 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 978218.055 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 2189.145 ops/s
[info]                  ·gc.alloc.rate:                                  1366.613 MB/sec
[info]                  ·gc.alloc.rate.norm:                             982664.201 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.748 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.071 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       971488.906 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.661 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3351.613 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   3: 2201.264 ops/s
[info]                  ·gc.alloc.rate:                                  1374.245 MB/sec
[info]                  ·gc.alloc.rate.norm:                             982664.185 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.105 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 75.204 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.202 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       973337.577 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 2196.542 ops/s
[info]                  ·gc.alloc.rate:                                  1371.180 MB/sec
[info]                  ·gc.alloc.rate.norm:                             982664.200 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.058 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 41.635 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.257 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       975552.728 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 2198.188 ops/s
[info]                  ·gc.alloc.rate:                                  1372.346 MB/sec
[info]                  ·gc.alloc.rate.norm:                             982664.186 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10.336 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.176 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       974665.459 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   2189.061 ±(99.9%) 64.518 ops/s [Average]
[info]   (min, avg, max) = (2160.169, 2189.061, 2201.264), stdev = 16.755
[info]   CI (99.9%): [2124.543, 2253.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1366.597 ±(99.9%) 40.219 MB/sec [Average]
[info]   (min, avg, max) = (1348.602, 1366.597, 1374.245), stdev = 10.445
[info]   CI (99.9%): [1326.378, 1406.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   982665.797 ±(99.9%) 13.814 B/op [Average]
[info]   (min, avg, max) = (982664.185, 982665.797, 982672.215), stdev = 3.587
[info]   CI (99.9%): [982651.983, 982679.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.038 ±(99.9%) 0.168 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.105), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   26.985 ±(99.9%) 120.470 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26.985, 75.204), stdev = 31.286
[info]   CI (99.9%): [≈ 0, 147.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1355.439 ±(99.9%) 32.602 MB/sec [Average]
[info]   (min, avg, max) = (1342.489, 1355.439, 1361.257), stdev = 8.467
[info]   CI (99.9%): [1322.837, 1388.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   974652.545 ±(99.9%) 9676.751 B/op [Average]
[info]   (min, avg, max) = (971488.906, 974652.545, 978218.055), stdev = 2513.022
[info]   CI (99.9%): [964975.794, 984329.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.661), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   670.323 ±(99.9%) 5771.679 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 670.323, 3351.613), stdev = 1498.887
[info]   CI (99.9%): [≈ 0, 6442.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.800, 19.000), stdev = 6.907
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 70.03% complete, ETA 00:25:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5007.989 ops/s
[info] # Warmup Iteration   2: 6974.206 ops/s
[info] # Warmup Iteration   3: 7130.056 ops/s
[info] Iteration   1: 7021.533 ops/s
[info]                  ·gc.alloc.rate:                                  1546.157 MB/sec
[info]                  ·gc.alloc.rate.norm:                             346632.058 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.091 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 20.473 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1686.930 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       378192.084 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                895.836 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        16.000 ms
[info] Iteration   2: 7124.648 ops/s
[info]                  ·gc.alloc.rate:                                  1568.898 MB/sec
[info]                  ·gc.alloc.rate.norm:                             346632.062 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.047 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10.349 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.323 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       300770.326 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 7163.347 ops/s
[info]                  ·gc.alloc.rate:                                  1577.401 MB/sec
[info]                  ·gc.alloc.rate.norm:                             346632.057 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.775 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.562 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       373916.494 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 7135.083 ops/s
[info]                  ·gc.alloc.rate:                                  1571.274 MB/sec
[info]                  ·gc.alloc.rate.norm:                             346632.062 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.289 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.603 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       375383.450 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 7025.056 ops/s
[info]                  ·gc.alloc.rate:                                  1547.351 MB/sec
[info]                  ·gc.alloc.rate.norm:                             346632.058 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.294 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.541 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       305007.734 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   7093.933 ±(99.9%) 254.265 ops/s [Average]
[info]   (min, avg, max) = (7021.533, 7093.933, 7163.347), stdev = 66.032
[info]   CI (99.9%): [6839.668, 7348.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1562.216 ±(99.9%) 55.673 MB/sec [Average]
[info]   (min, avg, max) = (1546.157, 1562.216, 1577.401), stdev = 14.458
[info]   CI (99.9%): [1506.543, 1617.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   346632.059 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (346632.057, 346632.059, 346632.062), stdev = 0.002
[info]   CI (99.9%): [346632.051, 346632.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.029, 0.091), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   6.436 ±(99.9%) 34.437 B/op [Average]
[info]   (min, avg, max) = (0.289, 6.436, 20.473), stdev = 8.943
[info]   CI (99.9%): [≈ 0, 40.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1562.592 ±(99.9%) 707.481 MB/sec [Average]
[info]   (min, avg, max) = (1361.323, 1562.592, 1701.603), stdev = 183.731
[info]   CI (99.9%): [855.111, 2270.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   346654.018 ±(99.9%) 154061.836 B/op [Average]
[info]   (min, avg, max) = (300770.326, 346654.018, 378192.084), stdev = 40009.370
[info]   CI (99.9%): [192592.181, 500715.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   179.167 ±(99.9%) 1542.684 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 179.167, 895.836), stdev = 400.630
[info]   CI (99.9%): [≈ 0, 1721.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 16.000), stdev = 5.413
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava
[info] # Run progress: 70.28% complete, ETA 00:25:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2657.614 ops/s
[info] # Warmup Iteration   2: 52688.770 ops/s
[info] # Warmup Iteration   3: 52499.972 ops/s
[info] Iteration   1: 53727.615 ops/s
[info]                  ·gc.alloc.rate:            530.515 MB/sec
[info]                  ·gc.alloc.rate.norm:       15544.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.650 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9775.886 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 52799.617 ops/s
[info]                  ·gc.alloc.rate:            521.351 MB/sec
[info]                  ·gc.alloc.rate.norm:       15544.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      666.656 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19876.242 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 53231.486 ops/s
[info]                  ·gc.alloc.rate:                   525.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              15544.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             666.719 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        19715.332 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 19.696 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 53805.344 ops/s
[info]                  ·gc.alloc.rate:            531.344 MB/sec
[info]                  ·gc.alloc.rate.norm:       15544.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9762.261 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 52217.690 ops/s
[info]                  ·gc.alloc.rate:            515.659 MB/sec
[info]                  ·gc.alloc.rate.norm:       15544.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20117.818 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava":
[info]   53156.350 ±(99.9%) 2555.333 ops/s [Average]
[info]   (min, avg, max) = (52217.690, 53156.350, 53805.344), stdev = 663.612
[info]   CI (99.9%): [50601.017, 55711.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   524.905 ±(99.9%) 25.223 MB/sec [Average]
[info]   (min, avg, max) = (515.659, 524.905, 531.344), stdev = 6.550
[info]   CI (99.9%): [499.682, 550.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   15544.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15544.008, 15544.008, 15544.008), stdev = 0.001
[info]   CI (99.9%): [15544.007, 15544.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   533.624 ±(99.9%) 702.841 MB/sec [Average]
[info]   (min, avg, max) = (333.650, 533.624, 667.391), stdev = 182.525
[info]   CI (99.9%): [≈ 0, 1236.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   15849.508 ±(99.9%) 21380.707 B/op [Average]
[info]   (min, avg, max) = (9762.261, 15849.508, 20117.818), stdev = 5552.502
[info]   CI (99.9%): [≈ 0, 37230.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   3.939 ±(99.9%) 33.917 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.939, 19.696), stdev = 8.808
[info]   CI (99.9%): [≈ 0, 37.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.000, 10.000), stdev = 2.739
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 70.53% complete, ETA 00:25:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_3eb5d47b/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 19785.333 ops/s
[info] # Warmup Iteration   2: 37761.726 ops/s
[info] # Warmup Iteration   3: 38419.561 ops/s
[info] Iteration   1: 38520.940 ops/s
[info]                  ·gc.alloc.rate:                   573.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431.930 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.646 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        27405.036 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 27.215 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 37499.244 ops/s
[info]                  ·gc.alloc.rate:            558.174 MB/sec
[info]                  ·gc.alloc.rate.norm:       23431.787 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.647 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14090.231 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 37437.714 ops/s
[info]                  ·gc.alloc.rate:                   557.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431.843 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.660 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        28199.120 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 28.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 37475.513 ops/s
[info]                  ·gc.alloc.rate:            557.800 MB/sec
[info]                  ·gc.alloc.rate.norm:       23431.934 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.269 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28198.506 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 37619.152 ops/s
[info]                  ·gc.alloc.rate:                   560.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431.823 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        14017.055 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 27.867 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   37710.513 ±(99.9%) 1763.975 ops/s [Average]
[info]   (min, avg, max) = (37437.714, 37710.513, 38520.940), stdev = 458.099
[info]   CI (99.9%): [35946.537, 39474.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   561.338 ±(99.9%) 26.303 MB/sec [Average]
[info]   (min, avg, max) = (557.280, 561.338, 573.417), stdev = 6.831
[info]   CI (99.9%): [535.035, 587.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   23431.864 ±(99.9%) 0.253 B/op [Average]
[info]   (min, avg, max) = (23431.787, 23431.864, 23431.934), stdev = 0.066
[info]   CI (99.9%): [23431.610, 23432.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   536.646 ±(99.9%) 707.667 MB/sec [Average]
[info]   (min, avg, max) = (335.006, 536.646, 671.269), stdev = 183.779
[info]   CI (99.9%): [≈ 0, 1244.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   22381.989 ±(99.9%) 29302.063 B/op [Average]
[info]   (min, avg, max) = (14017.055, 22381.989, 28199.120), stdev = 7609.653
[info]   CI (99.9%): [≈ 0, 51684.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.400 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   16.617 ±(99.9%) 58.422 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.617, 28.003), stdev = 15.172
[info]   CI (99.9%): [≈ 0, 75.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 10.000), stdev = 3.286
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 70.78% complete, ETA 00:24:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62587.025 ops/s
[info] # Warmup Iteration   2: 74942.165 ops/s
[info] # Warmup Iteration   3: 75706.569 ops/s
[info] Iteration   1: 75246.714 ops/s
[info]                  ·gc.alloc.rate:            565.549 MB/sec
[info]                  ·gc.alloc.rate.norm:       11832.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.654 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14072.788 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 74171.403 ops/s
[info]                  ·gc.alloc.rate:            557.487 MB/sec
[info]                  ·gc.alloc.rate.norm:       11832.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.620 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14275.571 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 74754.165 ops/s
[info]                  ·gc.alloc.rate:            561.999 MB/sec
[info]                  ·gc.alloc.rate.norm:       11832.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.393 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7082.225 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 74795.085 ops/s
[info]                  ·gc.alloc.rate:            562.242 MB/sec
[info]                  ·gc.alloc.rate.norm:       11832.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.717 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14156.876 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 72630.401 ops/s
[info]                  ·gc.alloc.rate:            545.916 MB/sec
[info]                  ·gc.alloc.rate.norm:       11832.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.650 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14578.792 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   74319.554 ±(99.9%) 3922.097 ops/s [Average]
[info]   (min, avg, max) = (72630.401, 74319.554, 75246.714), stdev = 1018.556
[info]   CI (99.9%): [70397.456, 78241.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   558.639 ±(99.9%) 29.528 MB/sec [Average]
[info]   (min, avg, max) = (545.916, 558.639, 565.549), stdev = 7.668
[info]   CI (99.9%): [529.111, 588.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   11832.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11832.005, 11832.006, 11832.006), stdev = 0.001
[info]   CI (99.9%): [11832.005, 11832.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   605.407 ±(99.9%) 579.073 MB/sec [Average]
[info]   (min, avg, max) = (336.393, 605.407, 672.717), stdev = 150.383
[info]   CI (99.9%): [26.334, 1184.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   12833.250 ±(99.9%) 12401.515 B/op [Average]
[info]   (min, avg, max) = (7082.225, 12833.250, 14578.792), stdev = 3220.634
[info]   CI (99.9%): [431.735, 25234.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 71.03% complete, ETA 00:24:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88751.468 ops/s
[info] # Warmup Iteration   2: 103713.346 ops/s
[info] # Warmup Iteration   3: 96580.918 ops/s
[info] Iteration   1: 96464.096 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 96422.494 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 96510.685 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 96541.067 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 96518.661 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   96491.401 ±(99.9%) 183.415 ops/s [Average]
[info]   (min, avg, max) = (96422.494, 96491.401, 96541.067), stdev = 47.632
[info]   CI (99.9%): [96307.986, 96674.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.004, 0.004), stdev = 0.001
[info]   CI (99.9%): [0.004, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 71.28% complete, ETA 00:24:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1962.884 ops/s
[info] # Warmup Iteration   2: 5617.342 ops/s
[info] # Warmup Iteration   3: 5784.489 ops/s
[info] Iteration   1: 5807.082 ops/s
[info]                  ·gc.alloc.rate:                   1653.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              448119.439 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1682.631 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        455965.394 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1263.562 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Iteration   2: 5847.679 ops/s
[info]                  ·gc.alloc.rate:                                  1664.778 MB/sec
[info]                  ·gc.alloc.rate.norm:                             448120.520 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.108 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 29.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.361 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       457967.809 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 5791.821 ops/s
[info]                  ·gc.alloc.rate:                                  1648.986 MB/sec
[info]                  ·gc.alloc.rate.norm:                             448120.356 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.043 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 11.800 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.510 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       462394.146 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 5806.040 ops/s
[info]                  ·gc.alloc.rate:                                  1653.619 MB/sec
[info]                  ·gc.alloc.rate.norm:                             448119.186 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.085 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 22.974 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.476 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       461358.994 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 5875.722 ops/s
[info]                  ·gc.alloc.rate:                                  1672.804 MB/sec
[info]                  ·gc.alloc.rate.norm:                             448120.381 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.049 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 13.121 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.368 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       364691.057 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   5825.669 ±(99.9%) 134.307 ops/s [Average]
[info]   (min, avg, max) = (5791.821, 5825.669, 5875.722), stdev = 34.879
[info]   CI (99.9%): [5691.362, 5959.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1658.773 ±(99.9%) 37.593 MB/sec [Average]
[info]   (min, avg, max) = (1648.986, 1658.773, 1672.804), stdev = 9.763
[info]   CI (99.9%): [1621.180, 1696.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   448119.976 ±(99.9%) 2.371 B/op [Average]
[info]   (min, avg, max) = (448119.186, 448119.976, 448120.520), stdev = 0.616
[info]   CI (99.9%): [448117.605, 448122.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.057 ±(99.9%) 0.159 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.057, 0.108), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   15.381 ±(99.9%) 42.960 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.381, 29.009), stdev = 11.157
[info]   CI (99.9%): [≈ 0, 58.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1629.869 ±(99.9%) 578.853 MB/sec [Average]
[info]   (min, avg, max) = (1361.368, 1629.869, 1702.476), stdev = 150.326
[info]   CI (99.9%): [1051.016, 2208.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   440475.480 ±(99.9%) 163434.171 B/op [Average]
[info]   (min, avg, max) = (364691.057, 440475.480, 462394.146), stdev = 42443.335
[info]   CI (99.9%): [277041.309, 603909.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   252.712 ±(99.9%) 2175.930 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 252.712, 1263.562), stdev = 565.082
[info]   CI (99.9%): [≈ 0, 2428.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.200, 21.000), stdev = 7.190
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala
[info] # Run progress: 71.54% complete, ETA 00:24:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4472624.945 ops/s
[info] # Warmup Iteration   2: 5119894.668 ops/s
[info] # Warmup Iteration   3: 5058452.680 ops/s
[info] Iteration   1: 5106426.651 ops/s
[info]                  ·gc.alloc.rate:                                  1530.971 MB/sec
[info]                  ·gc.alloc.rate.norm:                             472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.049 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.195 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       416.575 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.027 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   2: 5051068.719 ops/s
[info]                  ·gc.alloc.rate:                                  1514.590 MB/sec
[info]                  ·gc.alloc.rate.norm:                             472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.074 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.658 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       530.297 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 5071622.495 ops/s
[info]                  ·gc.alloc.rate:            1521.016 MB/sec
[info]                  ·gc.alloc.rate.norm:       472.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.556 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 422.517 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 5076130.748 ops/s
[info]                  ·gc.alloc.rate:                                  1522.394 MB/sec
[info]                  ·gc.alloc.rate.norm:                             472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       527.704 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 5079907.469 ops/s
[info]                  ·gc.alloc.rate:                                  1523.538 MB/sec
[info]                  ·gc.alloc.rate.norm:                             472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.613 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       421.835 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala":
[info]   5077031.217 ±(99.9%) 76444.758 ops/s [Average]
[info]   (min, avg, max) = (5051068.719, 5077031.217, 5106426.651), stdev = 19852.461
[info]   CI (99.9%): [5000586.458, 5153475.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1522.502 ±(99.9%) 22.586 MB/sec [Average]
[info]   (min, avg, max) = (1514.590, 1522.502, 1530.971), stdev = 5.866
[info]   CI (99.9%): [1499.916, 1545.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (472.000, 472.000, 472.000), stdev = 0.001
[info]   CI (99.9%): [472.000, 472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.074), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.008 ±(99.9%) 0.041 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.023), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1495.617 ±(99.9%) 725.159 MB/sec [Average]
[info]   (min, avg, max) = (1351.195, 1495.617, 1702.063), stdev = 188.322
[info]   CI (99.9%): [770.458, 2220.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   463.786 ±(99.9%) 229.439 B/op [Average]
[info]   (min, avg, max) = (416.575, 463.786, 530.297), stdev = 59.584
[info]   CI (99.9%): [234.347, 693.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.205 ±(99.9%) 1.768 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.205, 1.027), stdev = 0.459
[info]   CI (99.9%): [≈ 0, 1.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 11.000), stdev = 3.391
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson
[info] # Run progress: 71.79% complete, ETA 00:24:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 101462.614 ops/s
[info] # Warmup Iteration   2: 323018.431 ops/s
[info] # Warmup Iteration   3: 330445.482 ops/s
[info] Iteration   1: 327574.808 ops/s
[info]                  ·gc.alloc.rate:                                  1789.716 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8600.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.025 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.118 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1687.730 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8109.938 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                22.403 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        17.000 ms
[info] Iteration   2: 334430.996 ops/s
[info]                  ·gc.alloc.rate:                                  1827.002 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8600.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.041 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.195 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.949 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9611.795 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 336537.004 ops/s
[info]                  ·gc.alloc.rate:            1839.372 MB/sec
[info]                  ·gc.alloc.rate.norm:       8600.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.427 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7959.712 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 335010.540 ops/s
[info]                  ·gc.alloc.rate:            1830.802 MB/sec
[info]                  ·gc.alloc.rate.norm:       8600.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.151 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7995.678 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 332715.253 ops/s
[info]                  ·gc.alloc.rate:                                  1818.329 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8600.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9661.187 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson":
[info]   333253.720 ±(99.9%) 13310.136 ops/s [Average]
[info]   (min, avg, max) = (327574.808, 333253.720, 336537.004), stdev = 3456.600
[info]   CI (99.9%): [319943.584, 346563.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1821.044 ±(99.9%) 73.452 MB/sec [Average]
[info]   (min, avg, max) = (1789.716, 1821.044, 1839.372), stdev = 19.075
[info]   CI (99.9%): [1747.592, 1894.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8600.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8600.001, 8600.001, 8600.001), stdev = 0.001
[info]   CI (99.9%): [8600.001, 8600.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.041), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.064 ±(99.9%) 0.343 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.064, 0.195), stdev = 0.089
[info]   CI (99.9%): [≈ 0, 0.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1835.392 ±(99.9%) 727.760 MB/sec [Average]
[info]   (min, avg, max) = (1687.730, 1835.392, 2042.700), stdev = 188.997
[info]   CI (99.9%): [1107.632, 2563.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   8667.662 ±(99.9%) 3412.924 B/op [Average]
[info]   (min, avg, max) = (7959.712, 8667.662, 9661.187), stdev = 886.326
[info]   CI (99.9%): [5254.738, 12080.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   4.481 ±(99.9%) 38.580 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.481, 22.403), stdev = 10.019
[info]   CI (99.9%): [≈ 0, 43.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.800, 17.000), stdev = 5.263
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala
[info] # Run progress: 72.04% complete, ETA 00:23:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2600142.973 ops/s
[info] # Warmup Iteration   2: 3318130.916 ops/s
[info] # Warmup Iteration   3: 3303678.539 ops/s
[info] Iteration   1: 3259164.690 ops/s
[info]                  ·gc.alloc.rate:            480.513 MB/sec
[info]                  ·gc.alloc.rate.norm:       232.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.450 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 162.444 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 3340018.238 ops/s
[info]                  ·gc.alloc.rate:            492.269 MB/sec
[info]                  ·gc.alloc.rate.norm:       232.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 317.034 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 3332190.893 ops/s
[info]                  ·gc.alloc.rate:            491.136 MB/sec
[info]                  ·gc.alloc.rate.norm:       232.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.361 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 158.888 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 3353937.553 ops/s
[info]                  ·gc.alloc.rate:            494.384 MB/sec
[info]                  ·gc.alloc.rate.norm:       232.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 157.859 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 3326213.069 ops/s
[info]                  ·gc.alloc.rate:            490.273 MB/sec
[info]                  ·gc.alloc.rate.norm:       232.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 318.341 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala":
[info]   3322304.889 ±(99.9%) 141666.019 ops/s [Average]
[info]   (min, avg, max) = (3259164.690, 3322304.889, 3353937.553), stdev = 36790.215
[info]   CI (99.9%): [3180638.869, 3463970.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   489.715 ±(99.9%) 20.677 MB/sec [Average]
[info]   (min, avg, max) = (480.513, 489.715, 494.384), stdev = 5.370
[info]   CI (99.9%): [469.038, 510.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   232.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (232.000, 232.000, 232.000), stdev = 0.001
[info]   CI (99.9%): [232.000, 232.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   470.927 ±(99.9%) 709.318 MB/sec [Average]
[info]   (min, avg, max) = (336.361, 470.927, 672.733), stdev = 184.208
[info]   CI (99.9%): [≈ 0, 1180.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   222.913 ±(99.9%) 333.215 B/op [Average]
[info]   (min, avg, max) = (157.859, 222.913, 318.341), stdev = 86.535
[info]   CI (99.9%): [≈ 0, 556.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 2.191
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 72.29% complete, ETA 00:23:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2784796.083 ops/s
[info] # Warmup Iteration   2: 3216224.971 ops/s
[info] # Warmup Iteration   3: 3262224.833 ops/s
[info] Iteration   1: 3266794.479 ops/s
[info]                  ·gc.alloc.rate:            381.915 MB/sec
[info]                  ·gc.alloc.rate.norm:       184.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.386 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 162.065 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 3266116.862 ops/s
[info]                  ·gc.alloc.rate:            381.745 MB/sec
[info]                  ·gc.alloc.rate.norm:       184.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.302 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 162.097 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 3259877.792 ops/s
[info]                  ·gc.alloc.rate:            381.058 MB/sec
[info]                  ·gc.alloc.rate.norm:       184.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 162.406 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 3263162.477 ops/s
[info]                  ·gc.alloc.rate:            381.441 MB/sec
[info]                  ·gc.alloc.rate.norm:       184.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.326 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 162.237 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 3187959.335 ops/s
[info]                  ·gc.alloc.rate:            372.659 MB/sec
[info]                  ·gc.alloc.rate.norm:       184.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.343 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 166.069 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScalaPrealloc":
[info]   3248782.189 ±(99.9%) 131349.554 ops/s [Average]
[info]   (min, avg, max) = (3187959.335, 3248782.189, 3266794.479), stdev = 34111.062
[info]   CI (99.9%): [3117432.635, 3380131.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   379.764 ±(99.9%) 15.345 MB/sec [Average]
[info]   (min, avg, max) = (372.659, 379.764, 381.915), stdev = 3.985
[info]   CI (99.9%): [364.419, 395.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   184.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (184.000, 184.000, 184.000), stdev = 0.001
[info]   CI (99.9%): [184.000, 184.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   336.339 ±(99.9%) 0.118 MB/sec [Average]
[info]   (min, avg, max) = (336.302, 336.339, 336.386), stdev = 0.031
[info]   CI (99.9%): [336.221, 336.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   162.975 ±(99.9%) 6.681 B/op [Average]
[info]   (min, avg, max) = (162.065, 162.975, 166.069), stdev = 1.735
[info]   CI (99.9%): [156.294, 169.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson
[info] # Run progress: 72.54% complete, ETA 00:23:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65232.708 ops/s
[info] # Warmup Iteration   2: 352653.586 ops/s
[info] # Warmup Iteration   3: 359022.771 ops/s
[info] Iteration   1: 356640.777 ops/s
[info]                  ·gc.alloc.rate:            1399.413 MB/sec
[info]                  ·gc.alloc.rate.norm:       6176.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1342.815 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5926.218 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 362157.927 ops/s
[info]                  ·gc.alloc.rate:                                  1420.888 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6176.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.146 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.634 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.324 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5873.637 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                20.264 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   3: 361385.783 ops/s
[info]                  ·gc.alloc.rate:                                  1417.868 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6176.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.045 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.197 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5929.780 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 366510.207 ops/s
[info]                  ·gc.alloc.rate:            1438.056 MB/sec
[info]                  ·gc.alloc.rate.norm:       6176.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.410 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5846.828 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 366181.600 ops/s
[info]                  ·gc.alloc.rate:                                  1436.660 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6176.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.618 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7315.021 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson":
[info]   362575.258 ±(99.9%) 15557.817 ops/s [Average]
[info]   (min, avg, max) = (356640.777, 362575.258, 366510.207), stdev = 4040.316
[info]   CI (99.9%): [347017.442, 378133.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1422.577 ±(99.9%) 60.869 MB/sec [Average]
[info]   (min, avg, max) = (1399.413, 1422.577, 1438.056), stdev = 15.808
[info]   CI (99.9%): [1361.708, 1483.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   6176.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6176.001, 6176.001, 6176.001), stdev = 0.001
[info]   CI (99.9%): [6176.001, 6176.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.038 ±(99.9%) 0.244 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.146), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.167 ±(99.9%) 1.059 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.167, 0.634), stdev = 0.275
[info]   CI (99.9%): [≈ 0, 1.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1423.702 ±(99.9%) 598.982 MB/sec [Average]
[info]   (min, avg, max) = (1342.815, 1423.702, 1701.618), stdev = 155.554
[info]   CI (99.9%): [824.720, 2022.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   6178.297 ±(99.9%) 2450.636 B/op [Average]
[info]   (min, avg, max) = (5846.828, 6178.297, 7315.021), stdev = 636.422
[info]   CI (99.9%): [3727.660, 8628.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   4.053 ±(99.9%) 34.896 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.053, 20.264), stdev = 9.062
[info]   CI (99.9%): [≈ 0, 38.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 19.000), stdev = 7.092
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 72.80% complete, ETA 00:23:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4493129.668 ops/s
[info] # Warmup Iteration   2: 6731197.440 ops/s
[info] # Warmup Iteration   3: 6821366.993 ops/s
[info] Iteration   1: 6872630.437 ops/s
[info]                  ·gc.alloc.rate:                                  4261.158 MB/sec
[info]                  ·gc.alloc.rate.norm:                             976.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            4083.903 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       935.401 B/op
[info]                  ·gc.count:                                       12.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 6809441.650 ops/s
[info]                  ·gc.alloc.rate:                                  4222.454 MB/sec
[info]                  ·gc.alloc.rate.norm:                             976.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            4424.868 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1022.787 B/op
[info]                  ·gc.count:                                       13.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 6797743.416 ops/s
[info]                  ·gc.alloc.rate:                                  4214.596 MB/sec
[info]                  ·gc.alloc.rate.norm:                             976.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            4083.888 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       945.731 B/op
[info]                  ·gc.count:                                       12.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 6770478.700 ops/s
[info]                  ·gc.alloc.rate:                                  4199.222 MB/sec
[info]                  ·gc.alloc.rate.norm:                             976.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            4085.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       949.532 B/op
[info]                  ·gc.count:                                       12.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   5: 6782591.758 ops/s
[info]                  ·gc.alloc.rate:                                  4205.626 MB/sec
[info]                  ·gc.alloc.rate.norm:                             976.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            4424.792 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1026.862 B/op
[info]                  ·gc.count:                                       13.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   6806577.192 ±(99.9%) 153152.966 ops/s [Average]
[info]   (min, avg, max) = (6770478.700, 6806577.192, 6872630.437), stdev = 39773.339
[info]   CI (99.9%): [6653424.226, 6959730.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   4220.611 ±(99.9%) 93.644 MB/sec [Average]
[info]   (min, avg, max) = (4199.222, 4220.611, 4261.158), stdev = 24.319
[info]   CI (99.9%): [4126.967, 4314.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   976.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (976.000, 976.000, 976.000), stdev = 0.001
[info]   CI (99.9%): [976.000, 976.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.005 MB/sec [Average]
[info]   (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   4220.559 ±(99.9%) 718.046 MB/sec [Average]
[info]   (min, avg, max) = (4083.888, 4220.559, 4424.868), stdev = 186.474
[info]   CI (99.9%): [3502.513, 4938.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   976.063 ±(99.9%) 172.647 B/op [Average]
[info]   (min, avg, max) = (935.401, 976.063, 1026.862), stdev = 44.836
[info]   CI (99.9%): [803.416, 1148.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   62.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (12.000, 12.400, 13.000), stdev = 0.548
[info]   CI (99.9%): [62.000, 62.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   52.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 10.400, 11.000), stdev = 0.548
[info]   CI (99.9%): [52.000, 52.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava
[info] # Run progress: 73.05% complete, ETA 00:22:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.907 ops/s
[info] # Warmup Iteration   2: 38426900.339 ops/s
[info] # Warmup Iteration   3: 40022394.996 ops/s
[info] Iteration   1: 36649755.057 ops/s
[info]                  ·gc.alloc.rate:            372.544 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14.333 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 37076435.852 ops/s
[info]                  ·gc.alloc.rate:            376.841 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.681 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14.167 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 37212836.788 ops/s
[info]                  ·gc.alloc.rate:            378.408 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.828 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14.115 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 36917641.287 ops/s
[info]                  ·gc.alloc.rate:            375.316 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.525 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28.457 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 37293774.239 ops/s
[info]                  ·gc.alloc.rate:            379.118 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.740 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14.085 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava":
[info]   37030088.645 ±(99.9%) 986195.479 ops/s [Average]
[info]   (min, avg, max) = (36649755.057, 37030088.645, 37293774.239), stdev = 256111.834
[info]   CI (99.9%): [36043893.166, 38016284.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   376.445 ±(99.9%) 10.123 MB/sec [Average]
[info]   (min, avg, max) = (372.544, 376.445, 379.118), stdev = 2.629
[info]   CI (99.9%): [366.322, 386.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   400.499 ±(99.9%) 574.794 MB/sec [Average]
[info]   (min, avg, max) = (333.681, 400.499, 667.525), stdev = 149.272
[info]   CI (99.9%): [≈ 0, 975.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   17.031 ±(99.9%) 24.597 B/op [Average]
[info]   (min, avg, max) = (14.085, 17.031, 28.457), stdev = 6.388
[info]   CI (99.9%): [≈ 0, 41.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 10.000), stdev = 2.387
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 73.30% complete, ETA 00:22:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2934642.746 ops/s
[info] # Warmup Iteration   2: 6991370.063 ops/s
[info] # Warmup Iteration   3: 7321281.577 ops/s
[info] Iteration   1: 7402267.157 ops/s
[info]                  ·gc.alloc.rate:                                  2783.708 MB/sec
[info]                  ·gc.alloc.rate.norm:                             592.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.550 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       578.994 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   2: 7444914.442 ops/s
[info]                  ·gc.alloc.rate:            2799.669 MB/sec
[info]                  ·gc.alloc.rate.norm:       592.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2722.402 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 575.661 B/op
[info]                  ·gc.count:                 8.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 7440834.752 ops/s
[info]                  ·gc.alloc.rate:                                  2799.674 MB/sec
[info]                  ·gc.alloc.rate.norm:                             592.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3064.509 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       648.000 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 7466511.046 ops/s
[info]                  ·gc.alloc.rate:            2808.069 MB/sec
[info]                  ·gc.alloc.rate.norm:       592.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2722.773 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 574.018 B/op
[info]                  ·gc.count:                 8.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 7439234.233 ops/s
[info]                  ·gc.alloc.rate:                                  2797.724 MB/sec
[info]                  ·gc.alloc.rate.norm:                             592.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.678 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       576.120 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   7438752.326 ±(99.9%) 89154.143 ops/s [Average]
[info]   (min, avg, max) = (7402267.157, 7438752.326, 7466511.046), stdev = 23153.048
[info]   CI (99.9%): [7349598.183, 7527906.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2797.769 ±(99.9%) 33.956 MB/sec [Average]
[info]   (min, avg, max) = (2783.708, 2797.769, 2808.069), stdev = 8.818
[info]   CI (99.9%): [2763.813, 2831.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   592.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (592.000, 592.000, 592.000), stdev = 0.001
[info]   CI (99.9%): [592.000, 592.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   2790.982 ±(99.9%) 588.787 MB/sec [Average]
[info]   (min, avg, max) = (2722.402, 2790.982, 3064.509), stdev = 152.906
[info]   CI (99.9%): [2202.196, 3379.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   590.559 ±(99.9%) 123.840 B/op [Average]
[info]   (min, avg, max) = (574.018, 590.559, 648.000), stdev = 32.161
[info]   CI (99.9%): [466.719, 714.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   41.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.200, 13.000), stdev = 2.683
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 73.55% complete, ETA 00:22:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35876423.805 ops/s
[info] # Warmup Iteration   2: 33002113.901 ops/s
[info] # Warmup Iteration   3: 37313926.362 ops/s
[info] Iteration   1: 37308176.384 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 37073228.346 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 36517846.371 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 37328727.628 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 37341462.495 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   37113888.245 ±(99.9%) 1351314.105 ops/s [Average]
[info]   (min, avg, max) = (36517846.371, 37113888.245, 37341462.495), stdev = 350931.982
[info]   CI (99.9%): [35762574.140, 38465202.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 73.80% complete, ETA 00:22:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21188431.724 ops/s
[info] # Warmup Iteration   2: 27161379.488 ops/s
[info] # Warmup Iteration   3: 26266892.073 ops/s
[info] Iteration   1: 26260288.379 ops/s
[info]                  ·gc.alloc.rate:            1334.548 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.949 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 80.803 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 26104708.480 ops/s
[info]                  ·gc.alloc.rate:                                  1326.484 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.104 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.818 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81.890 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.201 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 26470421.041 ops/s
[info]                  ·gc.alloc.rate:                                  1345.241 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.324 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80.956 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 26519701.721 ops/s
[info]                  ·gc.alloc.rate:                                  1347.855 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.440 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80.806 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 26524128.811 ops/s
[info]                  ·gc.alloc.rate:                                  1348.033 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.343 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80.790 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   26375849.686 ±(99.9%) 716509.073 ops/s [Average]
[info]   (min, avg, max) = (26104708.480, 26375849.686, 26524128.811), stdev = 186075.131
[info]   CI (99.9%): [25659340.614, 27092358.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   1340.432 ±(99.9%) 36.792 MB/sec [Average]
[info]   (min, avg, max) = (1326.484, 1340.432, 1348.033), stdev = 9.555
[info]   CI (99.9%): [1303.640, 1377.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.104), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen":
[info]   1357.975 ±(99.9%) 22.379 MB/sec [Average]
[info]   (min, avg, max) = (1347.949, 1357.975, 1361.440), stdev = 5.812
[info]   CI (99.9%): [1335.595, 1380.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen.norm":
[info]   81.049 ±(99.9%) 1.828 B/op [Average]
[info]   (min, avg, max) = (80.790, 81.049, 81.890), stdev = 0.475
[info]   CI (99.9%): [79.221, 82.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.040 ±(99.9%) 0.346 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.201), stdev = 0.090
[info]   CI (99.9%): [≈ 0, 0.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 12.000), stdev = 3.782
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 74.06% complete, ETA 00:22:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3151937.453 ops/s
[info] # Warmup Iteration   2: 5716265.411 ops/s
[info] # Warmup Iteration   3: 5997732.946 ops/s
[info] Iteration   1: 6083820.850 ops/s
[info]                  ·gc.alloc.rate:                                  2938.175 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.886 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       792.517 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 6111818.372 ops/s
[info]                  ·gc.alloc.rate:                                  2950.634 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.596 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       701.264 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 6137359.013 ops/s
[info]                  ·gc.alloc.rate:                                  2963.992 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.888 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       785.614 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 6107177.108 ops/s
[info]                  ·gc.alloc.rate:                                  2949.814 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3064.335 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       789.506 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 6083921.921 ops/s
[info]                  ·gc.alloc.rate:                                  2938.570 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.874 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       704.473 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   6104819.453 ±(99.9%) 85909.379 ops/s [Average]
[info]   (min, avg, max) = (6083820.850, 6104819.453, 6137359.013), stdev = 22310.393
[info]   CI (99.9%): [6018910.074, 6190728.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2948.237 ±(99.9%) 40.895 MB/sec [Average]
[info]   (min, avg, max) = (2938.175, 2948.237, 2963.992), stdev = 10.620
[info]   CI (99.9%): [2907.342, 2989.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   760.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (760.000, 760.000, 760.000), stdev = 0.001
[info]   CI (99.9%): [760.000, 760.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.002, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2927.716 ±(99.9%) 718.782 MB/sec [Average]
[info]   (min, avg, max) = (2722.596, 2927.716, 3064.335), stdev = 186.665
[info]   CI (99.9%): [2208.934, 3646.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   754.675 ±(99.9%) 182.402 B/op [Average]
[info]   (min, avg, max) = (701.264, 754.675, 792.517), stdev = 47.369
[info]   CI (99.9%): [572.273, 937.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   43.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 8.000), stdev = 0.837
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 74.31% complete, ETA 00:21:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13321462.686 ops/s
[info] # Warmup Iteration   2: 19594923.585 ops/s
[info] # Warmup Iteration   3: 19139484.462 ops/s
[info] Iteration   1: 19611063.698 ops/s
[info]                  ·gc.alloc.rate:                                  2292.487 MB/sec
[info]                  ·gc.alloc.rate.norm:                             184.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.075 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.212 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       163.912 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 19686385.519 ops/s
[info]                  ·gc.alloc.rate:                                  2300.899 MB/sec
[info]                  ·gc.alloc.rate.norm:                             184.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.148 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       190.497 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 19536699.137 ops/s
[info]                  ·gc.alloc.rate:                                  2283.764 MB/sec
[info]                  ·gc.alloc.rate.norm:                             184.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.447 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       191.951 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 19267569.406 ops/s
[info]                  ·gc.alloc.rate:                                  2252.273 MB/sec
[info]                  ·gc.alloc.rate.norm:                             184.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.469 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       194.636 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 19398379.446 ops/s
[info]                  ·gc.alloc.rate:            2267.645 MB/sec
[info]                  ·gc.alloc.rate.norm:       184.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.180 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 165.705 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   19500019.441 ±(99.9%) 646553.531 ops/s [Average]
[info]   (min, avg, max) = (19267569.406, 19500019.441, 19686385.519), stdev = 167907.899
[info]   CI (99.9%): [18853465.910, 20146572.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   2279.414 ±(99.9%) 75.224 MB/sec [Average]
[info]   (min, avg, max) = (2252.273, 2279.414, 2300.899), stdev = 19.536
[info]   CI (99.9%): [2204.189, 2354.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   184.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (184.000, 184.000, 184.000), stdev = 0.001
[info]   CI (99.9%): [184.000, 184.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.075), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   2246.291 ±(99.9%) 717.424 MB/sec [Average]
[info]   (min, avg, max) = (2042.180, 2246.291, 2382.469), stdev = 186.313
[info]   CI (99.9%): [1528.868, 2963.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   181.340 ±(99.9%) 58.442 B/op [Average]
[info]   (min, avg, max) = (163.912, 181.340, 194.636), stdev = 15.177
[info]   CI (99.9%): [122.898, 239.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava
[info] # Run progress: 74.56% complete, ETA 00:21:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.903 ops/s
[info] # Warmup Iteration   2: 50108543.351 ops/s
[info] # Warmup Iteration   3: 51800065.951 ops/s
[info] Iteration   1: 54000895.405 ops/s
[info]                  ·gc.alloc.rate:            1647.166 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1669.001 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 48.636 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  25.000 ms
[info] Iteration   2: 55123285.803 ops/s
[info]                  ·gc.alloc.rate:                                  1681.570 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.609 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1692.502 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       48.312 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     7.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.209 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   3: 56413038.146 ops/s
[info]                  ·gc.alloc.rate:                                  1720.481 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.028 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       47.485 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 56267518.500 ops/s
[info]                  ·gc.alloc.rate:                                  1715.832 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.759 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       47.606 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 56724159.836 ops/s
[info]                  ·gc.alloc.rate:            1729.908 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.830 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 47.221 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava":
[info]   55705779.538 ±(99.9%) 4347474.492 ops/s [Average]
[info]   (min, avg, max) = (54000895.405, 55705779.538, 56724159.836), stdev = 1129025.320
[info]   CI (99.9%): [51358305.046, 60053254.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   1698.992 ±(99.9%) 131.862 MB/sec [Average]
[info]   (min, avg, max) = (1647.166, 1698.992, 1729.908), stdev = 34.244
[info]   CI (99.9%): [1567.130, 1830.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.122 ±(99.9%) 1.048 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.122, 0.609), stdev = 0.272
[info]   CI (99.9%): [≈ 0, 1.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.003 ±(99.9%) 0.030 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.017), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   1693.424 ±(99.9%) 54.846 MB/sec [Average]
[info]   (min, avg, max) = (1669.001, 1693.424, 1702.028), stdev = 14.243
[info]   CI (99.9%): [1638.578, 1748.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   47.852 ±(99.9%) 2.294 B/op [Average]
[info]   (min, avg, max) = (47.221, 47.852, 48.636), stdev = 0.596
[info]   CI (99.9%): [45.558, 50.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   1.466 ±(99.9%) 12.622 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.466, 7.330), stdev = 3.278
[info]   CI (99.9%): [≈ 0, 14.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.042 ±(99.9%) 0.360 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.209), stdev = 0.094
[info]   CI (99.9%): [≈ 0, 0.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 10.200, 25.000), stdev = 8.871
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 74.81% complete, ETA 00:21:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3825599.276 ops/s
[info] # Warmup Iteration   2: 11134944.600 ops/s
[info] # Warmup Iteration   3: 10850005.834 ops/s
[info] Iteration   1: 11337248.069 ops/s
[info]                  ·gc.alloc.rate:                                  2247.746 MB/sec
[info]                  ·gc.alloc.rate.norm:                             312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.197 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.578 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       283.522 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 11380540.808 ops/s
[info]                  ·gc.alloc.rate:                                  2255.463 MB/sec
[info]                  ·gc.alloc.rate.norm:                             312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       329.510 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 11360085.297 ops/s
[info]                  ·gc.alloc.rate:                                  2251.628 MB/sec
[info]                  ·gc.alloc.rate.norm:                             312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.333 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       330.111 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 11438874.733 ops/s
[info]                  ·gc.alloc.rate:                                  2268.335 MB/sec
[info]                  ·gc.alloc.rate.norm:                             312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.995 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       281.006 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 11281628.521 ops/s
[info]                  ·gc.alloc.rate:                                  2236.989 MB/sec
[info]                  ·gc.alloc.rate.norm:                             312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.390 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       332.419 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   11359675.486 ±(99.9%) 222058.727 ops/s [Average]
[info]   (min, avg, max) = (11281628.521, 11359675.486, 11438874.733), stdev = 57667.946
[info]   CI (99.9%): [11137616.759, 11581734.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2252.032 ±(99.9%) 44.004 MB/sec [Average]
[info]   (min, avg, max) = (2236.989, 2252.032, 2268.335), stdev = 11.428
[info]   CI (99.9%): [2208.028, 2296.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   312.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (312.000, 312.000, 312.000), stdev = 0.001
[info]   CI (99.9%): [312.000, 312.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.041 ±(99.9%) 0.336 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.041, 0.197), stdev = 0.087
[info]   CI (99.9%): [≈ 0, 0.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.006 ±(99.9%) 0.047 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.006, 0.027), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   2246.668 ±(99.9%) 716.674 MB/sec [Average]
[info]   (min, avg, max) = (2042.578, 2246.668, 2383.390), stdev = 186.118
[info]   CI (99.9%): [1529.994, 2963.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   311.313 ±(99.9%) 102.258 B/op [Average]
[info]   (min, avg, max) = (281.006, 311.313, 332.419), stdev = 26.556
[info]   CI (99.9%): [209.056, 413.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 75.06% complete, ETA 00:21:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30871551.198 ops/s
[info] # Warmup Iteration   2: 43644957.115 ops/s
[info] # Warmup Iteration   3: 45912789.569 ops/s
[info] Iteration   1: 45816760.314 ops/s
[info]                  ·gc.alloc.rate:            931.440 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.133 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 34.669 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 45549984.045 ops/s
[info]                  ·gc.alloc.rate:            926.008 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23.248 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 45166645.348 ops/s
[info]                  ·gc.alloc.rate:            918.225 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.129 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35.168 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 37969177.468 ops/s
[info]                  ·gc.alloc.rate:                                  771.922 MB/sec
[info]                  ·gc.alloc.rate.norm:                             32.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.039 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.721 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28.053 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.166 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 37177380.484 ops/s
[info]                  ·gc.alloc.rate:                                  755.771 MB/sec
[info]                  ·gc.alloc.rate.norm:                             32.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.116 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.958 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       43.228 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   42335989.532 ±(99.9%) 16799847.257 ops/s [Average]
[info]   (min, avg, max) = (37177380.484, 42335989.532, 45816760.314), stdev = 4362866.982
[info]   CI (99.9%): [25536142.275, 59135836.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   860.673 ±(99.9%) 341.549 MB/sec [Average]
[info]   (min, avg, max) = (755.771, 860.673, 931.440), stdev = 88.699
[info]   CI (99.9%): [519.125, 1202.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   32.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (32.000, 32.000, 32.000), stdev = 0.001
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.194 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.116), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   877.737 ±(99.9%) 713.850 MB/sec [Average]
[info]   (min, avg, max) = (672.745, 877.737, 1020.958), stdev = 185.385
[info]   CI (99.9%): [163.887, 1591.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   32.873 ±(99.9%) 29.300 B/op [Average]
[info]   (min, avg, max) = (23.248, 32.873, 43.228), stdev = 7.609
[info]   CI (99.9%): [3.574, 62.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.033 ±(99.9%) 0.285 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.166), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 10.000), stdev = 3.286
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 75.31% complete, ETA 00:21:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35068889.529 ops/s
[info] # Warmup Iteration   2: 46332692.571 ops/s
[info] # Warmup Iteration   3: 48584872.443 ops/s
[info] Iteration   1: 48603062.820 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 48573845.655 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 48575573.617 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 48703799.980 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 48709286.116 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   48633113.638 ±(99.9%) 262051.844 ops/s [Average]
[info]   (min, avg, max) = (48573845.655, 48633113.638, 48709286.116), stdev = 68054.032
[info]   CI (99.9%): [48371061.794, 48895165.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 75.57% complete, ETA 00:20:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33136229.468 ops/s
[info] # Warmup Iteration   2: 32780931.953 ops/s
[info] # Warmup Iteration   3: 32642216.472 ops/s
[info] Iteration   1: 33498044.101 ops/s
[info]                  ·gc.alloc.rate:                                  2553.572 MB/sec
[info]                  ·gc.alloc.rate.norm:                             120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       111.954 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 33865674.495 ops/s
[info]                  ·gc.alloc.rate:                                  2581.911 MB/sec
[info]                  ·gc.alloc.rate.norm:                             120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.050 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       126.560 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 33847471.439 ops/s
[info]                  ·gc.alloc.rate:                                  2581.216 MB/sec
[info]                  ·gc.alloc.rate.norm:                             120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.751 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       126.626 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 33558037.214 ops/s
[info]                  ·gc.alloc.rate:                                  2558.170 MB/sec
[info]                  ·gc.alloc.rate.norm:                             120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.380 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       111.754 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 33824574.806 ops/s
[info]                  ·gc.alloc.rate:                                  2578.685 MB/sec
[info]                  ·gc.alloc.rate.norm:                             120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.945 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       126.713 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   33718760.411 ±(99.9%) 677687.619 ops/s [Average]
[info]   (min, avg, max) = (33498044.101, 33718760.411, 33865674.495), stdev = 175993.323
[info]   CI (99.9%): [33041072.792, 34396448.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   2570.711 ±(99.9%) 52.742 MB/sec [Average]
[info]   (min, avg, max) = (2553.572, 2570.711, 2581.911), stdev = 13.697
[info]   CI (99.9%): [2517.969, 2623.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (120.000, 120.000, 120.000), stdev = 0.001
[info]   CI (99.9%): [120.000, 120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.005 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen":
[info]   2586.896 ±(99.9%) 718.949 MB/sec [Average]
[info]   (min, avg, max) = (2382.354, 2586.896, 2723.751), stdev = 186.709
[info]   CI (99.9%): [1867.947, 3305.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen.norm":
[info]   120.721 ±(99.9%) 31.172 B/op [Average]
[info]   (min, avg, max) = (111.754, 120.721, 126.713), stdev = 8.095
[info]   CI (99.9%): [89.549, 151.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   38.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 75.82% complete, ETA 00:20:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1375907.477 ops/s
[info] # Warmup Iteration   2: 2159642.414 ops/s
[info] # Warmup Iteration   3: 2159875.297 ops/s
[info] Iteration   1: 2145086.229 ops/s
[info]                  ·gc.alloc.rate:                                  1723.083 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1264.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.165 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.121 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1690.281 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1239.938 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.932 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   2: 2179717.100 ops/s
[info]                  ·gc.alloc.rate:                                  1750.755 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1264.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.199 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1228.944 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 2186181.714 ops/s
[info]                  ·gc.alloc.rate:                                  1755.292 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1264.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.890 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1470.382 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 2170053.391 ops/s
[info]                  ·gc.alloc.rate:            1742.494 MB/sec
[info]                  ·gc.alloc.rate.norm:       1264.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.671 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1234.387 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 2201946.858 ops/s
[info]                  ·gc.alloc.rate:                                  1769.171 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1264.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.674 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1216.491 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   2176597.059 ±(99.9%) 81228.614 ops/s [Average]
[info]   (min, avg, max) = (2145086.229, 2176597.059, 2201946.858), stdev = 21094.813
[info]   CI (99.9%): [2095368.444, 2257825.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1748.159 ±(99.9%) 65.575 MB/sec [Average]
[info]   (min, avg, max) = (1723.083, 1748.159, 1769.171), stdev = 17.030
[info]   CI (99.9%): [1682.584, 1813.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1264.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1264.000, 1264.000, 1264.000), stdev = 0.001
[info]   CI (99.9%): [1264.000, 1264.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.035 ±(99.9%) 0.280 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.165), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.026 ±(99.9%) 0.206 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.121), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1767.743 ±(99.9%) 590.457 MB/sec [Average]
[info]   (min, avg, max) = (1690.281, 1767.743, 2041.890), stdev = 153.340
[info]   CI (99.9%): [1177.286, 2358.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   1278.028 ±(99.9%) 415.403 B/op [Average]
[info]   (min, avg, max) = (1216.491, 1278.028, 1470.382), stdev = 107.879
[info]   CI (99.9%): [862.625, 1693.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.586 ±(99.9%) 5.050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.586, 2.932), stdev = 1.311
[info]   CI (99.9%): [≈ 0, 5.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 13.000), stdev = 3.937
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce
[info] # Run progress: 76.07% complete, ETA 00:20:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 395888.574 ops/s
[info] # Warmup Iteration   2: 560945.943 ops/s
[info] # Warmup Iteration   3: 566337.640 ops/s
[info] Iteration   1: 577160.971 ops/s
[info]                  ·gc.alloc.rate:                                  2086.190 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.157 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.428 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.739 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5569.531 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 586367.889 ops/s
[info]                  ·gc.alloc.rate:                                  2119.144 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5481.923 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 586836.173 ops/s
[info]                  ·gc.alloc.rate:                                  2120.587 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.398 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6390.248 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 582793.125 ops/s
[info]                  ·gc.alloc.rate:                                  2106.533 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.678 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5515.583 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 571844.528 ops/s
[info]                  ·gc.alloc.rate:            2066.428 MB/sec
[info]                  ·gc.alloc.rate.norm:       5688.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.085 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5620.996 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce":
[info]   581000.537 ±(99.9%) 24705.058 ops/s [Average]
[info]   (min, avg, max) = (571844.528, 581000.537, 586836.173), stdev = 6415.825
[info]   CI (99.9%): [556295.479, 605705.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2099.776 ±(99.9%) 89.285 MB/sec [Average]
[info]   (min, avg, max) = (2066.428, 2099.776, 2120.587), stdev = 23.187
[info]   CI (99.9%): [2010.491, 2189.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5688.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5688.001, 5688.001, 5688.001), stdev = 0.001
[info]   CI (99.9%): [5688.001, 5688.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.033 ±(99.9%) 0.268 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.157), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.089 ±(99.9%) 0.730 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.089, 0.428), stdev = 0.190
[info]   CI (99.9%): [≈ 0, 0.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2110.453 ±(99.9%) 585.382 MB/sec [Average]
[info]   (min, avg, max) = (2042.085, 2110.453, 2382.398), stdev = 152.022
[info]   CI (99.9%): [1525.072, 2695.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5715.656 ±(99.9%) 1466.343 B/op [Average]
[info]   (min, avg, max) = (5481.923, 5715.656, 6390.248), stdev = 380.805
[info]   CI (99.9%): [4249.314, 7181.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 8.000), stdev = 1.304
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala
[info] # Run progress: 76.32% complete, ETA 00:20:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 219586.343 ops/s
[info] # Warmup Iteration   2: 579201.672 ops/s
[info] # Warmup Iteration   3: 588677.772 ops/s
[info] Iteration   1: 595126.731 ops/s
[info]                  ·gc.alloc.rate:            692.598 MB/sec
[info]                  ·gc.alloc.rate.norm:       1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.280 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1775.611 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 595043.503 ops/s
[info]                  ·gc.alloc.rate:            692.854 MB/sec
[info]                  ·gc.alloc.rate.norm:       1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1006.187 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2660.494 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 592619.944 ops/s
[info]                  ·gc.alloc.rate:            690.024 MB/sec
[info]                  ·gc.alloc.rate.norm:       1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.669 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1783.268 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 595109.223 ops/s
[info]                  ·gc.alloc.rate:            692.765 MB/sec
[info]                  ·gc.alloc.rate.norm:       1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.507 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1775.784 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 593382.320 ops/s
[info]                  ·gc.alloc.rate:                   690.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.512 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1780.934 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.601 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala":
[info]   594256.344 ±(99.9%) 4534.253 ops/s [Average]
[info]   (min, avg, max) = (592619.944, 594256.344, 595126.731), stdev = 1177.531
[info]   CI (99.9%): [589722.091, 598790.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   691.802 ±(99.9%) 5.057 MB/sec [Average]
[info]   (min, avg, max) = (690.024, 691.802, 692.854), stdev = 1.313
[info]   CI (99.9%): [686.744, 696.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1832.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1832.001, 1832.001, 1832.001), stdev = 0.001
[info]   CI (99.9%): [1832.001, 1832.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   738.431 ±(99.9%) 576.365 MB/sec [Average]
[info]   (min, avg, max) = (671.280, 738.431, 1006.187), stdev = 149.680
[info]   CI (99.9%): [162.066, 1314.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1955.218 ±(99.9%) 1518.212 B/op [Average]
[info]   (min, avg, max) = (1775.611, 1955.218, 2660.494), stdev = 394.275
[info]   CI (99.9%): [437.006, 3473.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.120 ±(99.9%) 18.255 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.120, 10.601), stdev = 4.741
[info]   CI (99.9%): [≈ 0, 20.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.time":
[info]   53.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.600, 15.000), stdev = 2.510
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala
[info] # Run progress: 76.57% complete, ETA 00:19:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3185485.023 ops/s
[info] # Warmup Iteration   2: 3637663.421 ops/s
[info] # Warmup Iteration   3: 3697172.792 ops/s
[info] Iteration   1: 3676777.242 ops/s
[info]                  ·gc.alloc.rate:                   1457.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.842 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        577.118 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.426 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 3676428.503 ops/s
[info]                  ·gc.alloc.rate:                                  1457.547 MB/sec
[info]                  ·gc.alloc.rate.norm:                             624.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.137 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.058 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.899 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       728.611 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 3707038.784 ops/s
[info]                  ·gc.alloc.rate:                                  1469.547 MB/sec
[info]                  ·gc.alloc.rate.norm:                             624.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       578.067 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 3710941.593 ops/s
[info]                  ·gc.alloc.rate:            1471.615 MB/sec
[info]                  ·gc.alloc.rate.norm:       624.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.889 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 577.474 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 3743830.411 ops/s
[info]                  ·gc.alloc.rate:                                  1484.151 MB/sec
[info]                  ·gc.alloc.rate.norm:                             624.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.773 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       715.498 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala":
[info]   3703003.307 ±(99.9%) 107889.872 ops/s [Average]
[info]   (min, avg, max) = (3676428.503, 3703003.307, 3743830.411), stdev = 28018.657
[info]   CI (99.9%): [3595113.435, 3810893.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1468.039 ±(99.9%) 43.023 MB/sec [Average]
[info]   (min, avg, max) = (1457.334, 1468.039, 1484.151), stdev = 11.173
[info]   CI (99.9%): [1425.015, 1511.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   624.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (624.000, 624.000, 624.000), stdev = 0.001
[info]   CI (99.9%): [624.000, 624.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.235 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.137), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.012 ±(99.9%) 0.100 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.058), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1494.955 ±(99.9%) 727.540 MB/sec [Average]
[info]   (min, avg, max) = (1347.842, 1494.955, 1701.899), stdev = 188.940
[info]   CI (99.9%): [767.415, 2222.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   635.353 ±(99.9%) 305.292 B/op [Average]
[info]   (min, avg, max) = (577.118, 635.353, 728.611), stdev = 79.283
[info]   CI (99.9%): [330.062, 940.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.285 ±(99.9%) 2.455 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.285, 1.426), stdev = 0.638
[info]   CI (99.9%): [≈ 0, 2.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 12.000), stdev = 3.782
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson
[info] # Run progress: 76.83% complete, ETA 00:19:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39000.486 ops/s
[info] # Warmup Iteration   2: 210891.340 ops/s
[info] # Warmup Iteration   3: 219267.600 ops/s
[info] Iteration   1: 221079.985 ops/s
[info]                  ·gc.alloc.rate:                   1549.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              11032.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1678.873 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11950.233 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.742 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         24.000 ms
[info] Iteration   2: 222411.967 ops/s
[info]                  ·gc.alloc.rate:                                  1558.611 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11032.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.074 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.524 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1697.604 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12015.807 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                28.284 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 223000.779 ops/s
[info]                  ·gc.alloc.rate:                                  1562.975 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11032.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9608.965 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 222285.026 ops/s
[info]                  ·gc.alloc.rate:            1557.742 MB/sec
[info]                  ·gc.alloc.rate.norm:       11032.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.569 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12050.592 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 225041.110 ops/s
[info]                  ·gc.alloc.rate:                                  1577.229 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11032.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.335 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9521.922 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson":
[info]   222763.774 ±(99.9%) 5590.249 ops/s [Average]
[info]   (min, avg, max) = (221079.985, 222763.774, 225041.110), stdev = 1451.770
[info]   CI (99.9%): [217173.524, 228354.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1561.286 ±(99.9%) 38.843 MB/sec [Average]
[info]   (min, avg, max) = (1549.872, 1561.286, 1577.229), stdev = 10.088
[info]   CI (99.9%): [1522.443, 1600.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   11032.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11032.002, 11032.002, 11032.002), stdev = 0.001
[info]   CI (99.9%): [11032.002, 11032.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.125 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.074), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.112 ±(99.9%) 0.888 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.112, 0.524), stdev = 0.230
[info]   CI (99.9%): [≈ 0, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1560.149 ±(99.9%) 699.587 MB/sec [Average]
[info]   (min, avg, max) = (1361.335, 1560.149, 1701.569), stdev = 181.681
[info]   CI (99.9%): [860.562, 2259.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   11029.504 ±(99.9%) 5149.612 B/op [Average]
[info]   (min, avg, max) = (9521.922, 11029.504, 12050.592), stdev = 1337.338
[info]   CI (99.9%): [5879.892, 16179.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   6.605 ±(99.9%) 47.330 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.605, 28.284), stdev = 12.291
[info]   CI (99.9%): [≈ 0, 53.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 9.000, 24.000), stdev = 8.660
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce
[info] # Run progress: 77.08% complete, ETA 00:19:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 514726.286 ops/s
[info] # Warmup Iteration   2: 820421.162 ops/s
[info] # Warmup Iteration   3: 827045.021 ops/s
[info] Iteration   1: 808853.503 ops/s
[info]                  ·gc.alloc.rate:                                  1858.142 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.147 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.287 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2035.412 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3960.975 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                6.481 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   2: 825465.633 ops/s
[info]                  ·gc.alloc.rate:                                  1896.190 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.657 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3245.028 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 835938.178 ops/s
[info]                  ·gc.alloc.rate:            1920.356 MB/sec
[info]                  ·gc.alloc.rate.norm:       3616.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.181 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3845.394 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 834151.886 ops/s
[info]                  ·gc.alloc.rate:                                  1916.286 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3616.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.192 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3853.585 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 838310.738 ops/s
[info]                  ·gc.alloc.rate:                                  1925.891 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3616.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.887 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3195.418 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce":
[info]   828543.987 ±(99.9%) 46316.038 ops/s [Average]
[info]   (min, avg, max) = (808853.503, 828543.987, 838310.738), stdev = 12028.128
[info]   CI (99.9%): [782227.949, 874860.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1903.373 ±(99.9%) 106.498 MB/sec [Average]
[info]   (min, avg, max) = (1858.142, 1903.373, 1925.891), stdev = 27.657
[info]   CI (99.9%): [1796.875, 2009.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3616.000, 3616.001, 3616.001), stdev = 0.001
[info]   CI (99.9%): [3616.000, 3616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.251 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.147), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.060 ±(99.9%) 0.489 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.060, 0.287), stdev = 0.127
[info]   CI (99.9%): [≈ 0, 0.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1904.666 ±(99.9%) 713.280 MB/sec [Average]
[info]   (min, avg, max) = (1701.657, 1904.666, 2042.192), stdev = 185.237
[info]   CI (99.9%): [1191.385, 2617.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3620.080 ±(99.9%) 1418.091 B/op [Average]
[info]   (min, avg, max) = (3195.418, 3620.080, 3960.975), stdev = 368.274
[info]   CI (99.9%): [2201.989, 5038.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.296 ±(99.9%) 11.160 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.296, 6.481), stdev = 2.898
[info]   CI (99.9%): [≈ 0, 12.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 11.000), stdev = 2.828
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala
[info] # Run progress: 77.33% complete, ETA 00:19:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_3eb5d47b/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 562008.944 ops/s
[info] # Warmup Iteration   2: 1301618.696 ops/s
[info] # Warmup Iteration   3: 1317434.444 ops/s
[info] Iteration   1: 1296866.030 ops/s
[info]                  ·gc.alloc.rate:                   876.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1006.339 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1221.498 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.808 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 1274002.479 ops/s
[info]                  ·gc.alloc.rate:            861.346 MB/sec
[info]                  ·gc.alloc.rate.norm:       1064.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.506 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 829.495 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 1270998.465 ops/s
[info]                  ·gc.alloc.rate:            859.127 MB/sec
[info]                  ·gc.alloc.rate.norm:       1064.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.062 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1247.213 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   4: 1292867.858 ops/s
[info]                  ·gc.alloc.rate:                   874.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.462 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        822.285 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.677 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1310962.627 ops/s
[info]                  ·gc.alloc.rate:                                  886.540 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1064.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.099 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.119 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.460 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1225.928 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala":
[info]   1289139.492 ±(99.9%) 64089.666 ops/s [Average]
[info]   (min, avg, max) = (1270998.465, 1289139.492, 1310962.627), stdev = 16643.883
[info]   CI (99.9%): [1225049.826, 1353229.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   871.523 ±(99.9%) 43.674 MB/sec [Average]
[info]   (min, avg, max) = (859.127, 871.523, 886.540), stdev = 11.342
[info]   CI (99.9%): [827.849, 915.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1064.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1064.000, 1064.000, 1064.000), stdev = 0.001
[info]   CI (99.9%): [1064.000, 1064.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.171 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.099), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.024 ±(99.9%) 0.205 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.119), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   876.366 ±(99.9%) 713.558 MB/sec [Average]
[info]   (min, avg, max) = (671.506, 876.366, 1021.460), stdev = 185.309
[info]   CI (99.9%): [162.808, 1589.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1069.284 ±(99.9%) 856.437 B/op [Average]
[info]   (min, avg, max) = (822.285, 1069.284, 1247.213), stdev = 222.414
[info]   CI (99.9%): [212.847, 1925.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.297 ±(99.9%) 9.523 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.297, 5.677), stdev = 2.473
[info]   CI (99.9%): [≈ 0, 10.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 10.000, 14.000), stdev = 4.062
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala
[info] # Run progress: 77.58% complete, ETA 00:19:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7980749.955 ops/s
[info] # Warmup Iteration   2: 9019130.192 ops/s
[info] # Warmup Iteration   3: 9381026.353 ops/s
[info] Iteration   1: 9484826.582 ops/s
[info]                  ·gc.alloc.rate:            385.640 MB/sec
[info]                  ·gc.alloc.rate.norm:       64.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55.819 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 9445570.779 ops/s
[info]                  ·gc.alloc.rate:            384.015 MB/sec
[info]                  ·gc.alloc.rate.norm:       64.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.317 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56.051 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 9462058.687 ops/s
[info]                  ·gc.alloc.rate:            384.721 MB/sec
[info]                  ·gc.alloc.rate.norm:       64.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55.953 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 9452975.105 ops/s
[info]                  ·gc.alloc.rate:            384.356 MB/sec
[info]                  ·gc.alloc.rate.norm:       64.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.343 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56.005 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 9433644.681 ops/s
[info]                  ·gc.alloc.rate:            383.550 MB/sec
[info]                  ·gc.alloc.rate.norm:       64.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56.122 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala":
[info]   9455815.167 ±(99.9%) 74198.311 ops/s [Average]
[info]   (min, avg, max) = (9433644.681, 9455815.167, 9484826.582), stdev = 19269.066
[info]   CI (99.9%): [9381616.856, 9530013.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   384.456 ±(99.9%) 3.043 MB/sec [Average]
[info]   (min, avg, max) = (383.550, 384.456, 385.640), stdev = 0.790
[info]   CI (99.9%): [381.413, 387.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   64.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (64.000, 64.000, 64.000), stdev = 0.001
[info]   CI (99.9%): [64.000, 64.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   336.337 ±(99.9%) 0.048 MB/sec [Average]
[info]   (min, avg, max) = (336.317, 336.337, 336.350), stdev = 0.012
[info]   CI (99.9%): [336.290, 336.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   55.990 ±(99.9%) 0.439 B/op [Average]
[info]   (min, avg, max) = (55.819, 55.990, 56.122), stdev = 0.114
[info]   CI (99.9%): [55.551, 56.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 77.83% complete, ETA 00:18:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8277588.757 ops/s
[info] # Warmup Iteration   2: 9953169.071 ops/s
[info] # Warmup Iteration   3: 10050254.055 ops/s
[info] Iteration   1: 9936376.622 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 10053431.023 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 10049470.444 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 9370663.997 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 10048237.880 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScalaPrealloc":
[info]   9891635.993 ±(99.9%) 1137451.540 ops/s [Average]
[info]   (min, avg, max) = (9370663.997, 9891635.993, 10053431.023), stdev = 295392.553
[info]   CI (99.9%): [8754184.453, 11029087.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson
[info] # Run progress: 78.09% complete, ETA 00:18:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 99853.585 ops/s
[info] # Warmup Iteration   2: 478601.962 ops/s
[info] # Warmup Iteration   3: 482734.202 ops/s
[info] Iteration   1: 481012.406 ops/s
[info]                  ·gc.alloc.rate:                   1645.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              5384.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.961 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4398.291 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.257 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 489176.367 ops/s
[info]                  ·gc.alloc.rate:                                  1673.427 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5384.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.058 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.187 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.272 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5473.589 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.143 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 488245.565 ops/s
[info]                  ·gc.alloc.rate:                                  1670.508 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5384.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.233 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5486.251 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 484096.589 ops/s
[info]                  ·gc.alloc.rate:                                  1655.765 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5384.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.683 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5533.308 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 491293.215 ops/s
[info]                  ·gc.alloc.rate:                                  1680.306 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5384.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.611 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5452.264 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson":
[info]   486764.828 ±(99.9%) 15960.937 ops/s [Average]
[info]   (min, avg, max) = (481012.406, 486764.828, 491293.215), stdev = 4145.005
[info]   CI (99.9%): [470803.892, 502725.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1665.033 ±(99.9%) 54.950 MB/sec [Average]
[info]   (min, avg, max) = (1645.158, 1665.033, 1680.306), stdev = 14.270
[info]   CI (99.9%): [1610.083, 1719.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5384.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5384.001, 5384.001, 5384.001), stdev = 0.001
[info]   CI (99.9%): [5384.001, 5384.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.097 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.058), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.043 ±(99.9%) 0.312 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.043, 0.187), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1630.152 ±(99.9%) 616.050 MB/sec [Average]
[info]   (min, avg, max) = (1343.961, 1630.152, 1702.233), stdev = 159.986
[info]   CI (99.9%): [1014.102, 2246.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   5268.741 ±(99.9%) 1877.198 B/op [Average]
[info]   (min, avg, max) = (4398.291, 5268.741, 5533.308), stdev = 487.502
[info]   CI (99.9%): [3391.543, 7145.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   3.480 ±(99.9%) 25.601 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.480, 15.257), stdev = 6.648
[info]   CI (99.9%): [≈ 0, 29.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 18.000), stdev = 5.857
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce
[info] # Run progress: 78.34% complete, ETA 00:18:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 269044.727 ops/s
[info] # Warmup Iteration   2: 331594.903 ops/s
[info] # Warmup Iteration   3: 337007.292 ops/s
[info] Iteration   1: 340739.952 ops/s
[info]                  ·gc.alloc.rate:                                  2311.440 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10680.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2381.918 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11005.644 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 335734.221 ops/s
[info]                  ·gc.alloc.rate:                                  2277.713 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10680.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.203 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11169.947 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 337446.301 ops/s
[info]                  ·gc.alloc.rate:                                  2290.028 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10680.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.955 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11113.385 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 340325.927 ops/s
[info]                  ·gc.alloc.rate:                                  2309.393 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10680.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.780 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11019.385 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 341048.650 ops/s
[info]                  ·gc.alloc.rate:                                  2314.126 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10680.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.177 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9424.919 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce":
[info]   339059.010 ±(99.9%) 9039.662 ops/s [Average]
[info]   (min, avg, max) = (335734.221, 339059.010, 341048.650), stdev = 2347.571
[info]   CI (99.9%): [330019.349, 348098.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2300.540 ±(99.9%) 61.290 MB/sec [Average]
[info]   (min, avg, max) = (2277.713, 2300.540, 2314.126), stdev = 15.917
[info]   CI (99.9%): [2239.250, 2361.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   10680.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10680.001, 10680.001, 10680.001), stdev = 0.001
[info]   CI (99.9%): [10680.001, 10680.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.013 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.004, 0.010), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.019 ±(99.9%) 0.062 B/op [Average]
[info]   (min, avg, max) = (0.006, 0.019, 0.047), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2314.406 ±(99.9%) 585.996 MB/sec [Average]
[info]   (min, avg, max) = (2042.177, 2314.406, 2382.955), stdev = 152.181
[info]   CI (99.9%): [1728.410, 2900.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   10746.656 ±(99.9%) 2857.083 B/op [Average]
[info]   (min, avg, max) = (9424.919, 10746.656, 11169.947), stdev = 741.975
[info]   CI (99.9%): [7889.572, 13603.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala
[info] # Run progress: 78.59% complete, ETA 00:18:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 190184.345 ops/s
[info] # Warmup Iteration   2: 407976.466 ops/s
[info] # Warmup Iteration   3: 408868.663 ops/s
[info] Iteration   1: 410885.831 ops/s
[info]                  ·gc.alloc.rate:                   1083.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              4152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.622 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5151.435 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.551 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 413406.338 ops/s
[info]                  ·gc.alloc.rate:                   1090.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              4152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.674 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3837.036 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.536 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 412436.512 ops/s
[info]                  ·gc.alloc.rate:                                  1087.829 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4152.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.111 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.422 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.991 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3881.628 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                15.252 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 416918.409 ops/s
[info]                  ·gc.alloc.rate:                                  1099.707 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4152.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.034 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.128 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.056 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3855.050 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 416164.299 ops/s
[info]                  ·gc.alloc.rate:                                  1097.799 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4152.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.544 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5149.514 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala":
[info]   413962.278 ±(99.9%) 9758.394 ops/s [Average]
[info]   (min, avg, max) = (410885.831, 413962.278, 416918.409), stdev = 2534.224
[info]   CI (99.9%): [404203.884, 423720.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1091.895 ±(99.9%) 25.903 MB/sec [Average]
[info]   (min, avg, max) = (1083.751, 1091.895, 1099.707), stdev = 6.727
[info]   CI (99.9%): [1065.992, 1117.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   4152.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4152.001, 4152.001, 4152.001), stdev = 0.001
[info]   CI (99.9%): [4152.001, 4152.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.184 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.111), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.111 ±(99.9%) 0.701 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.111, 0.422), stdev = 0.182
[info]   CI (99.9%): [≈ 0, 0.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1150.377 ±(99.9%) 713.156 MB/sec [Average]
[info]   (min, avg, max) = (1007.674, 1150.377, 1361.544), stdev = 185.204
[info]   CI (99.9%): [437.221, 1863.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   4374.933 ±(99.9%) 2726.824 B/op [Average]
[info]   (min, avg, max) = (3837.036, 4374.933, 5151.435), stdev = 708.148
[info]   CI (99.9%): [1648.108, 7101.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.437 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.068 ±(99.9%) 24.568 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.068, 15.252), stdev = 6.380
[info]   CI (99.9%): [≈ 0, 28.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.800, 18.000), stdev = 6.573
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala
[info] # Run progress: 78.84% complete, ETA 00:18:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 408822.914 ops/s
[info] # Warmup Iteration   2: 436356.842 ops/s
[info] # Warmup Iteration   3: 441557.719 ops/s
[info] Iteration   1: 439663.728 ops/s
[info]                  ·gc.alloc.rate:            866.903 MB/sec
[info]                  ·gc.alloc.rate.norm:       3104.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.926 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3619.685 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 440569.002 ops/s
[info]                  ·gc.alloc.rate:            868.677 MB/sec
[info]                  ·gc.alloc.rate.norm:       3104.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.955 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2408.211 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 436575.433 ops/s
[info]                  ·gc.alloc.rate:            860.794 MB/sec
[info]                  ·gc.alloc.rate.norm:       3104.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.950 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3645.458 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 427300.091 ops/s
[info]                  ·gc.alloc.rate:                                  842.771 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3104.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.015 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.057 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            677.492 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2495.266 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                12.268 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 426257.224 ops/s
[info]                  ·gc.alloc.rate:                                  840.892 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3104.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.037 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.137 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.439 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3770.458 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala":
[info]   434073.096 ±(99.9%) 26305.501 ops/s [Average]
[info]   (min, avg, max) = (426257.224, 434073.096, 440569.002), stdev = 6831.455
[info]   CI (99.9%): [407767.595, 460378.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   856.007 ±(99.9%) 51.151 MB/sec [Average]
[info]   (min, avg, max) = (840.892, 856.007, 868.677), stdev = 13.284
[info]   CI (99.9%): [804.857, 907.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3104.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3104.001, 3104.001, 3104.001), stdev = 0.001
[info]   CI (99.9%): [3104.001, 3104.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.063 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.037), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.039 ±(99.9%) 0.231 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.137), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   878.953 ±(99.9%) 714.585 MB/sec [Average]
[info]   (min, avg, max) = (673.955, 878.953, 1021.439), stdev = 185.575
[info]   CI (99.9%): [164.368, 1593.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3187.816 ±(99.9%) 2599.419 B/op [Average]
[info]   (min, avg, max) = (2408.211, 3187.816, 3770.458), stdev = 675.061
[info]   CI (99.9%): [588.397, 5787.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.454 ±(99.9%) 21.126 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.454, 12.268), stdev = 5.486
[info]   CI (99.9%): [≈ 0, 23.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 9.000), stdev = 3.082
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson
[info] # Run progress: 79.09% complete, ETA 00:17:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57105.846 ops/s
[info] # Warmup Iteration   2: 95072.080 ops/s
[info] # Warmup Iteration   3: 97799.496 ops/s
[info] Iteration   1: 97324.744 ops/s
[info]                  ·gc.alloc.rate:                                  3525.891 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57000.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.074 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3745.478 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       60549.873 B/op
[info]                  ·gc.count:                                       11.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 97404.550 ops/s
[info]                  ·gc.alloc.rate:                                  3527.829 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57000.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.071 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.089 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       55000.702 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 96418.743 ops/s
[info]                  ·gc.alloc.rate:                                  3493.098 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57000.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3405.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       55562.480 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 97715.078 ops/s
[info]                  ·gc.alloc.rate:                                  3539.652 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57000.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3745.129 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       60308.865 B/op
[info]                  ·gc.count:                                       11.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 98007.453 ops/s
[info]                  ·gc.alloc.rate:                                  3548.904 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57000.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.325 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54661.804 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson":
[info]   97374.113 ±(99.9%) 2305.144 ops/s [Average]
[info]   (min, avg, max) = (96418.743, 97374.113, 98007.453), stdev = 598.638
[info]   CI (99.9%): [95068.970, 99679.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3527.075 ±(99.9%) 81.482 MB/sec [Average]
[info]   (min, avg, max) = (3493.098, 3527.075, 3548.904), stdev = 21.161
[info]   CI (99.9%): [3445.593, 3608.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   57000.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (57000.004, 57000.004, 57000.005), stdev = 0.001
[info]   CI (99.9%): [57000.004, 57000.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.007 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.003, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.049 ±(99.9%) 0.108 B/op [Average]
[info]   (min, avg, max) = (0.016, 0.049, 0.074), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3540.605 ±(99.9%) 719.549 MB/sec [Average]
[info]   (min, avg, max) = (3403.325, 3540.605, 3745.478), stdev = 186.865
[info]   CI (99.9%): [2821.056, 4260.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   57216.745 ±(99.9%) 11365.290 B/op [Average]
[info]   (min, avg, max) = (54661.804, 57216.745, 60549.873), stdev = 2951.530
[info]   CI (99.9%): [45851.455, 68582.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   52.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (10.000, 10.400, 11.000), stdev = 0.548
[info]   CI (99.9%): [52.000, 52.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.400, 12.000), stdev = 1.673
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce
[info] # Run progress: 79.35% complete, ETA 00:17:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 248177.332 ops/s
[info] # Warmup Iteration   2: 311480.135 ops/s
[info] # Warmup Iteration   3: 314112.769 ops/s
[info] Iteration   1: 312060.510 ops/s
[info]                  ·gc.alloc.rate:            761.332 MB/sec
[info]                  ·gc.alloc.rate.norm:       3840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3399.854 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 305967.713 ops/s
[info]                  ·gc.alloc.rate:            746.366 MB/sec
[info]                  ·gc.alloc.rate.norm:       3840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.988 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3467.624 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 313015.460 ops/s
[info]                  ·gc.alloc.rate:            763.777 MB/sec
[info]                  ·gc.alloc.rate.norm:       3840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.279 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5084.354 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 313232.444 ops/s
[info]                  ·gc.alloc.rate:            764.181 MB/sec
[info]                  ·gc.alloc.rate.norm:       3840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.092 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3387.308 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 312763.679 ops/s
[info]                  ·gc.alloc.rate:                                  763.061 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3840.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.135 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            677.416 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3409.006 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                16.760 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce":
[info]   311407.961 ±(99.9%) 11832.960 ops/s [Average]
[info]   (min, avg, max) = (305967.713, 311407.961, 313232.444), stdev = 3072.982
[info]   CI (99.9%): [299575.001, 323240.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   759.743 ±(99.9%) 29.101 MB/sec [Average]
[info]   (min, avg, max) = (746.366, 759.743, 764.181), stdev = 7.557
[info]   CI (99.9%): [730.642, 788.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3840.001, 3840.001, 3840.001), stdev = 0.001
[info]   CI (99.9%): [3840.001, 3840.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.046 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.027), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.027 ±(99.9%) 0.232 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.135), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   742.169 ±(99.9%) 579.308 MB/sec [Average]
[info]   (min, avg, max) = (673.988, 742.169, 1011.279), stdev = 150.445
[info]   CI (99.9%): [162.860, 1321.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3749.629 ±(99.9%) 2875.545 B/op [Average]
[info]   (min, avg, max) = (3387.308, 3749.629, 5084.354), stdev = 746.770
[info]   CI (99.9%): [874.084, 6625.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.352 ±(99.9%) 28.862 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.352, 16.760), stdev = 7.495
[info]   CI (99.9%): [≈ 0, 32.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 10.000), stdev = 2.168
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala
[info] # Run progress: 79.60% complete, ETA 00:17:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 376221.214 ops/s
[info] # Warmup Iteration   2: 634256.941 ops/s
[info] # Warmup Iteration   3: 637496.430 ops/s
[info] Iteration   1: 619066.697 ops/s
[info]                  ·gc.alloc.rate:            453.737 MB/sec
[info]                  ·gc.alloc.rate.norm:       1152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.552 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1702.475 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 645499.706 ops/s
[info]                  ·gc.alloc.rate:            472.486 MB/sec
[info]                  ·gc.alloc.rate.norm:       1152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 818.541 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 643699.608 ops/s
[info]                  ·gc.alloc.rate:            471.150 MB/sec
[info]                  ·gc.alloc.rate.norm:       1152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.702 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 820.818 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 641615.038 ops/s
[info]                  ·gc.alloc.rate:            469.594 MB/sec
[info]                  ·gc.alloc.rate.norm:       1152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.381 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1647.019 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 640723.129 ops/s
[info]                  ·gc.alloc.rate:            468.912 MB/sec
[info]                  ·gc.alloc.rate.norm:       1152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 824.645 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala":
[info]   638120.836 ±(99.9%) 41633.814 ops/s [Average]
[info]   (min, avg, max) = (619066.697, 638120.836, 645499.706), stdev = 10812.169
[info]   CI (99.9%): [596487.021, 679754.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   467.176 ±(99.9%) 29.417 MB/sec [Average]
[info]   (min, avg, max) = (453.737, 467.176, 472.486), stdev = 7.640
[info]   CI (99.9%): [437.759, 496.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1152.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1152.001, 1152.001, 1152.001), stdev = 0.001
[info]   CI (99.9%): [1152.001, 1152.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   469.804 ±(99.9%) 707.115 MB/sec [Average]
[info]   (min, avg, max) = (335.665, 469.804, 671.381), stdev = 183.636
[info]   CI (99.9%): [≈ 0, 1176.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1162.700 ±(99.9%) 1801.520 B/op [Average]
[info]   (min, avg, max) = (818.541, 1162.700, 1702.475), stdev = 467.849
[info]   CI (99.9%): [≈ 0, 2964.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala
[info] # Run progress: 79.85% complete, ETA 00:17:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2249815.718 ops/s
[info] # Warmup Iteration   2: 2499098.245 ops/s
[info] # Warmup Iteration   3: 2548780.827 ops/s
[info] Iteration   1: 2547851.867 ops/s
[info]                  ·gc.alloc.rate:            1178.276 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.946 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 623.379 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 2510715.783 ops/s
[info]                  ·gc.alloc.rate:                                  1161.083 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.041 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1349.921 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       846.402 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.923 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 2533888.970 ops/s
[info]                  ·gc.alloc.rate:                                  1171.895 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.075 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.076 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       634.309 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 2549224.735 ops/s
[info]                  ·gc.alloc.rate:            1179.364 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 840.133 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 2517051.662 ops/s
[info]                  ·gc.alloc.rate:            1164.113 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.016 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 638.511 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala":
[info]   2531746.603 ±(99.9%) 67460.244 ops/s [Average]
[info]   (min, avg, max) = (2510715.783, 2531746.603, 2549224.735), stdev = 17519.211
[info]   CI (99.9%): [2464286.360, 2599206.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1170.946 ±(99.9%) 31.604 MB/sec [Average]
[info]   (min, avg, max) = (1161.083, 1170.946, 1179.364), stdev = 8.208
[info]   CI (99.9%): [1139.342, 1202.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.131 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.075), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.015 ±(99.9%) 0.082 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.047), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1152.396 ±(99.9%) 714.250 MB/sec [Average]
[info]   (min, avg, max) = (1008.946, 1152.396, 1361.021), stdev = 185.489
[info]   CI (99.9%): [438.146, 1866.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   716.547 ±(99.9%) 446.029 B/op [Average]
[info]   (min, avg, max) = (623.379, 716.547, 846.402), stdev = 115.832
[info]   CI (99.9%): [270.518, 1162.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.585 ±(99.9%) 5.033 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.585, 2.923), stdev = 1.307
[info]   CI (99.9%): [≈ 0, 5.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 11.000), stdev = 4.324
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 80.10% complete, ETA 00:16:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2272840.067 ops/s
[info] # Warmup Iteration   2: 2495453.774 ops/s
[info] # Warmup Iteration   3: 2498371.528 ops/s
[info] Iteration   1: 2497601.882 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2495101.153 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2499455.018 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2498551.000 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2497511.814 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2497644.174 ±(99.9%) 6264.773 ops/s [Average]
[info]   (min, avg, max) = (2495101.153, 2497644.174, 2499455.018), stdev = 1626.942
[info]   CI (99.9%): [2491379.401, 2503908.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson
[info] # Run progress: 80.35% complete, ETA 00:16:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 296571.988 ops/s
[info] # Warmup Iteration   2: 427084.478 ops/s
[info] # Warmup Iteration   3: 431610.905 ops/s
[info] Iteration   1: 425610.419 ops/s
[info]                  ·gc.alloc.rate:            612.249 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1243.933 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 430003.838 ops/s
[info]                  ·gc.alloc.rate:            618.651 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.867 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2462.407 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 428332.399 ops/s
[info]                  ·gc.alloc.rate:            616.046 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.671 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2472.098 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 431656.870 ops/s
[info]                  ·gc.alloc.rate:            620.859 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.712 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2453.088 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 431593.279 ops/s
[info]                  ·gc.alloc.rate:            620.742 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.656 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2453.343 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson":
[info]   429439.361 ±(99.9%) 9772.124 ops/s [Average]
[info]   (min, avg, max) = (425610.419, 429439.361, 431656.870), stdev = 2537.790
[info]   CI (99.9%): [419667.237, 439211.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   617.709 ±(99.9%) 13.961 MB/sec [Average]
[info]   (min, avg, max) = (612.249, 617.709, 620.859), stdev = 3.626
[info]   CI (99.9%): [603.749, 631.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2264.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2264.001, 2264.001, 2264.001), stdev = 0.001
[info]   CI (99.9%): [2264.001, 2264.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   605.460 ±(99.9%) 579.184 MB/sec [Average]
[info]   (min, avg, max) = (336.394, 605.460, 672.867), stdev = 150.412
[info]   CI (99.9%): [26.276, 1184.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2216.974 ±(99.9%) 2094.761 B/op [Average]
[info]   (min, avg, max) = (1243.933, 2216.974, 2472.098), stdev = 544.003
[info]   CI (99.9%): [122.213, 4311.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 8.000), stdev = 1.732
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce
[info] # Run progress: 80.60% complete, ETA 00:16:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 339089.252 ops/s
[info] # Warmup Iteration   2: 586985.137 ops/s
[info] # Warmup Iteration   3: 592830.855 ops/s
[info] Iteration   1: 588879.425 ops/s
[info]                  ·gc.alloc.rate:                                  2047.030 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.138 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.368 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2038.680 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5449.678 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                8.902 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 600402.997 ops/s
[info]                  ·gc.alloc.rate:                                  2087.713 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.575 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5353.691 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 593997.496 ops/s
[info]                  ·gc.alloc.rate:                                  2064.894 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.419 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6313.448 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 600845.472 ops/s
[info]                  ·gc.alloc.rate:                                  2088.689 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5349.860 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 591866.798 ops/s
[info]                  ·gc.alloc.rate:                                  2057.431 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.005 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5430.971 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce":
[info]   595198.437 ±(99.9%) 20325.458 ops/s [Average]
[info]   (min, avg, max) = (588879.425, 595198.437, 600845.472), stdev = 5278.457
[info]   CI (99.9%): [574872.979, 615523.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate":
[info]   2069.151 ±(99.9%) 71.291 MB/sec [Average]
[info]   (min, avg, max) = (2047.030, 2069.151, 2088.689), stdev = 18.514
[info]   CI (99.9%): [1997.861, 2140.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5472.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5472.001, 5472.001, 5472.001), stdev = 0.001
[info]   CI (99.9%): [5472.001, 5472.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.232 MB/sec [Average]
[info]   (min, avg, max) = (0.002, 0.030, 0.138), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.080 ±(99.9%) 0.620 B/op [Average]
[info]   (min, avg, max) = (0.006, 0.080, 0.368), stdev = 0.161
[info]   CI (99.9%): [≈ 0, 0.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2109.549 ±(99.9%) 587.403 MB/sec [Average]
[info]   (min, avg, max) = (2038.680, 2109.549, 2382.419), stdev = 152.547
[info]   CI (99.9%): [1522.145, 2696.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5579.529 ±(99.9%) 1589.200 B/op [Average]
[info]   (min, avg, max) = (5349.860, 5579.529, 6313.448), stdev = 412.710
[info]   CI (99.9%): [3990.329, 7168.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.780 ±(99.9%) 15.329 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.780, 8.902), stdev = 3.981
[info]   CI (99.9%): [≈ 0, 17.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 8.000), stdev = 1.581
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala
[info] # Run progress: 80.86% complete, ETA 00:16:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74907.125 ops/s
[info] # Warmup Iteration   2: 587491.113 ops/s
[info] # Warmup Iteration   3: 602144.595 ops/s
[info] Iteration   1: 601461.465 ops/s
[info]                  ·gc.alloc.rate:            929.191 MB/sec
[info]                  ·gc.alloc.rate.norm:       2432.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1006.994 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2635.638 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 600035.059 ops/s
[info]                  ·gc.alloc.rate:            926.971 MB/sec
[info]                  ·gc.alloc.rate.norm:       2432.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1006.952 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2641.839 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 600502.336 ops/s
[info]                  ·gc.alloc.rate:            928.058 MB/sec
[info]                  ·gc.alloc.rate.norm:       2432.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2639.794 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   4: 606190.810 ops/s
[info]                  ·gc.alloc.rate:                   936.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.543 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1753.712 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 12.106 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 610317.101 ops/s
[info]                  ·gc.alloc.rate:                                  943.430 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2432.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.208 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.536 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.539 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2633.353 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala":
[info]   603701.354 ±(99.9%) 17075.558 ops/s [Average]
[info]   (min, avg, max) = (600035.059, 603701.354, 610317.101), stdev = 4434.468
[info]   CI (99.9%): [586625.797, 620776.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   932.895 ±(99.9%) 27.135 MB/sec [Average]
[info]   (min, avg, max) = (926.971, 932.895, 943.430), stdev = 7.047
[info]   CI (99.9%): [905.760, 960.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2432.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2432.001, 2432.001, 2432.001), stdev = 0.001
[info]   CI (99.9%): [2432.001, 2432.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.042 ±(99.9%) 0.358 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.208), stdev = 0.093
[info]   CI (99.9%): [≈ 0, 0.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.107 ±(99.9%) 0.924 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.107, 0.536), stdev = 0.240
[info]   CI (99.9%): [≈ 0, 1.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   943.676 ±(99.9%) 577.679 MB/sec [Average]
[info]   (min, avg, max) = (675.543, 943.676, 1021.539), stdev = 150.021
[info]   CI (99.9%): [365.997, 1521.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2460.867 ±(99.9%) 1522.260 B/op [Average]
[info]   (min, avg, max) = (1753.712, 2460.867, 2641.839), stdev = 395.326
[info]   CI (99.9%): [938.607, 3983.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.664), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.421 ±(99.9%) 20.848 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.421, 12.106), stdev = 5.414
[info]   CI (99.9%): [≈ 0, 23.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.time":
[info]   53.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 10.600, 15.000), stdev = 5.320
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala
[info] # Run progress: 81.11% complete, ETA 00:16:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4622074.664 ops/s
[info] # Warmup Iteration   2: 5275500.204 ops/s
[info] # Warmup Iteration   3: 5300740.451 ops/s
[info] Iteration   1: 5369752.846 ops/s
[info]                  ·gc.alloc.rate:            1337.237 MB/sec
[info]                  ·gc.alloc.rate.norm:       392.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.066 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 395.175 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 5302364.256 ops/s
[info]                  ·gc.alloc.rate:                                  1320.557 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.151 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.160 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       403.162 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.989 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 5312539.108 ops/s
[info]                  ·gc.alloc.rate:                                  1323.392 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.799 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       403.377 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 5312851.435 ops/s
[info]                  ·gc.alloc.rate:                                  1323.177 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.126 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       302.516 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 5301816.691 ops/s
[info]                  ·gc.alloc.rate:                                  1320.687 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.824 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       404.210 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala":
[info]   5319864.867 ±(99.9%) 109314.780 ops/s [Average]
[info]   (min, avg, max) = (5301816.691, 5319864.867, 5369752.846), stdev = 28388.701
[info]   CI (99.9%): [5210550.087, 5429179.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1325.010 ±(99.9%) 26.816 MB/sec [Average]
[info]   (min, avg, max) = (1320.557, 1325.010, 1337.237), stdev = 6.964
[info]   CI (99.9%): [1298.194, 1351.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.257 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.151), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.009 ±(99.9%) 0.076 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.045), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1290.195 ±(99.9%) 579.596 MB/sec [Average]
[info]   (min, avg, max) = (1021.126, 1290.195, 1361.824), stdev = 150.519
[info]   CI (99.9%): [710.599, 1869.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   381.688 ±(99.9%) 171.007 B/op [Average]
[info]   (min, avg, max) = (302.516, 381.688, 404.210), stdev = 44.410
[info]   CI (99.9%): [210.681, 552.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.198 ±(99.9%) 1.702 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.198, 0.989), stdev = 0.442
[info]   CI (99.9%): [≈ 0, 1.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 12.000), stdev = 3.912
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson
[info] # Run progress: 81.36% complete, ETA 00:15:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 93691.989 ops/s
[info] # Warmup Iteration   2: 310721.782 ops/s
[info] # Warmup Iteration   3: 318849.273 ops/s
[info] Iteration   1: 318630.376 ops/s
[info]                  ·gc.alloc.rate:                   1682.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              8312.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1684.307 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8321.039 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 23.032 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   2: 323349.470 ops/s
[info]                  ·gc.alloc.rate:                                  1707.655 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8312.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.082 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.400 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.924 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8284.102 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 323770.954 ops/s
[info]                  ·gc.alloc.rate:            1709.653 MB/sec
[info]                  ·gc.alloc.rate.norm:       8312.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.689 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8273.281 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 323309.829 ops/s
[info]                  ·gc.alloc.rate:            1707.200 MB/sec
[info]                  ·gc.alloc.rate.norm:       8312.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.638 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8284.922 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 323239.692 ops/s
[info]                  ·gc.alloc.rate:                                  1706.869 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8312.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.634 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8286.510 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson":
[info]   322460.064 ±(99.9%) 8282.446 ops/s [Average]
[info]   (min, avg, max) = (318630.376, 322460.064, 323770.954), stdev = 2150.925
[info]   CI (99.9%): [314177.618, 330742.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1702.771 ±(99.9%) 43.881 MB/sec [Average]
[info]   (min, avg, max) = (1682.477, 1702.771, 1709.653), stdev = 11.396
[info]   CI (99.9%): [1658.890, 1746.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8312.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8312.001, 8312.001, 8312.001), stdev = 0.001
[info]   CI (99.9%): [8312.001, 8312.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.141 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.082), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.081 ±(99.9%) 0.686 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.081, 0.400), stdev = 0.178
[info]   CI (99.9%): [≈ 0, 0.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1698.238 ±(99.9%) 29.992 MB/sec [Average]
[info]   (min, avg, max) = (1684.307, 1698.238, 1701.924), stdev = 7.789
[info]   CI (99.9%): [1668.246, 1728.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   8289.971 ±(99.9%) 69.837 B/op [Average]
[info]   (min, avg, max) = (8273.281, 8289.971, 8321.039), stdev = 18.137
[info]   CI (99.9%): [8220.134, 8359.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   4.606 ±(99.9%) 39.662 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.606, 23.032), stdev = 10.300
[info]   CI (99.9%): [≈ 0, 44.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.000, 20.000), stdev = 6.745
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce
[info] # Run progress: 81.61% complete, ETA 00:15:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 206091.569 ops/s
[info] # Warmup Iteration   2: 438240.197 ops/s
[info] # Warmup Iteration   3: 437836.635 ops/s
[info] Iteration   1: 442383.087 ops/s
[info]                  ·gc.alloc.rate:            1121.834 MB/sec
[info]                  ·gc.alloc.rate.norm:       3992.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.955 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3597.442 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 435742.396 ops/s
[info]                  ·gc.alloc.rate:            1104.971 MB/sec
[info]                  ·gc.alloc.rate.norm:       3992.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.903 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3652.158 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 441455.644 ops/s
[info]                  ·gc.alloc.rate:                                  1119.599 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3992.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.152 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.541 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1354.773 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4830.528 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                11.874 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 445055.181 ops/s
[info]                  ·gc.alloc.rate:                                  1128.680 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3992.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.027 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3611.247 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 444448.630 ops/s
[info]                  ·gc.alloc.rate:            1127.092 MB/sec
[info]                  ·gc.alloc.rate.norm:       3992.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.941 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3616.031 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce":
[info]   441816.987 ±(99.9%) 14247.790 ops/s [Average]
[info]   (min, avg, max) = (435742.396, 441816.987, 445055.181), stdev = 3700.106
[info]   CI (99.9%): [427569.198, 456064.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1120.435 ±(99.9%) 36.230 MB/sec [Average]
[info]   (min, avg, max) = (1104.971, 1120.435, 1128.680), stdev = 9.409
[info]   CI (99.9%): [1084.205, 1156.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3992.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3992.001, 3992.001, 3992.001), stdev = 0.001
[info]   CI (99.9%): [3992.001, 3992.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.255 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.152), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.121 ±(99.9%) 0.909 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.121, 0.541), stdev = 0.236
[info]   CI (99.9%): [≈ 0, 1.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1083.720 ±(99.9%) 583.783 MB/sec [Average]
[info]   (min, avg, max) = (1010.903, 1083.720, 1354.773), stdev = 151.607
[info]   CI (99.9%): [499.937, 1667.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3861.481 ±(99.9%) 2087.396 B/op [Average]
[info]   (min, avg, max) = (3597.442, 3861.481, 4830.528), stdev = 542.090
[info]   CI (99.9%): [1774.085, 5948.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   2.375 ±(99.9%) 20.449 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.375, 11.874), stdev = 5.310
[info]   CI (99.9%): [≈ 0, 22.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.200, 11.000), stdev = 3.962
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala
[info] # Run progress: 81.86% complete, ETA 00:15:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2595939.260 ops/s
[info] # Warmup Iteration   2: 3091365.364 ops/s
[info] # Warmup Iteration   3: 3106606.975 ops/s
[info] Iteration   1: 3118757.515 ops/s
[info]                  ·gc.alloc.rate:            523.173 MB/sec
[info]                  ·gc.alloc.rate.norm:       264.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.839 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 339.524 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 3124730.240 ops/s
[info]                  ·gc.alloc.rate:            524.011 MB/sec
[info]                  ·gc.alloc.rate.norm:       264.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.322 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 169.441 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 3094013.190 ops/s
[info]                  ·gc.alloc.rate:            518.918 MB/sec
[info]                  ·gc.alloc.rate.norm:       264.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.730 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 342.252 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 3126944.839 ops/s
[info]                  ·gc.alloc.rate:            524.431 MB/sec
[info]                  ·gc.alloc.rate.norm:       264.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.343 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 169.316 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 3115638.203 ops/s
[info]                  ·gc.alloc.rate:            522.500 MB/sec
[info]                  ·gc.alloc.rate.norm:       264.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.649 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 339.865 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala":
[info]   3116016.798 ±(99.9%) 50469.876 ops/s [Average]
[info]   (min, avg, max) = (3094013.190, 3116016.798, 3126944.839), stdev = 13106.866
[info]   CI (99.9%): [3065546.922, 3166486.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   522.607 ±(99.9%) 8.445 MB/sec [Average]
[info]   (min, avg, max) = (518.918, 522.607, 524.431), stdev = 2.193
[info]   CI (99.9%): [514.161, 531.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   264.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (264.000, 264.000, 264.000), stdev = 0.001
[info]   CI (99.9%): [264.000, 264.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   538.177 ±(99.9%) 709.510 MB/sec [Average]
[info]   (min, avg, max) = (336.322, 538.177, 672.839), stdev = 184.258
[info]   CI (99.9%): [≈ 0, 1247.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   272.079 ±(99.9%) 361.031 B/op [Average]
[info]   (min, avg, max) = (169.316, 272.079, 342.252), stdev = 93.759
[info]   CI (99.9%): [≈ 0, 633.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 82.12% complete, ETA 00:15:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2788647.339 ops/s
[info] # Warmup Iteration   2: 3255329.188 ops/s
[info] # Warmup Iteration   3: 3275286.501 ops/s
[info] Iteration   1: 3256505.154 ops/s
[info]                  ·gc.alloc.rate:            479.951 MB/sec
[info]                  ·gc.alloc.rate.norm:       232.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.328 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 162.575 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 3246854.056 ops/s
[info]                  ·gc.alloc.rate:            478.497 MB/sec
[info]                  ·gc.alloc.rate.norm:       232.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.642 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 326.131 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 3257256.336 ops/s
[info]                  ·gc.alloc.rate:            480.133 MB/sec
[info]                  ·gc.alloc.rate.norm:       232.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.381 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 162.539 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 3256098.432 ops/s
[info]                  ·gc.alloc.rate:            479.915 MB/sec
[info]                  ·gc.alloc.rate.norm:       232.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 162.598 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 3333304.501 ops/s
[info]                  ·gc.alloc.rate:            491.258 MB/sec
[info]                  ·gc.alloc.rate.norm:       232.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.664 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 317.670 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScalaPrealloc":
[info]   3270003.696 ±(99.9%) 137238.591 ops/s [Average]
[info]   (min, avg, max) = (3246854.056, 3270003.696, 3333304.501), stdev = 35640.426
[info]   CI (99.9%): [3132765.105, 3407242.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   481.951 ±(99.9%) 20.193 MB/sec [Average]
[info]   (min, avg, max) = (478.497, 481.951, 491.258), stdev = 5.244
[info]   CI (99.9%): [461.758, 502.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   232.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (232.000, 232.000, 232.000), stdev = 0.001
[info]   CI (99.9%): [232.000, 232.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   470.873 ±(99.9%) 709.285 MB/sec [Average]
[info]   (min, avg, max) = (336.328, 470.873, 672.664), stdev = 184.199
[info]   CI (99.9%): [≈ 0, 1180.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   226.303 ±(99.9%) 336.238 B/op [Average]
[info]   (min, avg, max) = (162.539, 226.303, 326.131), stdev = 87.320
[info]   CI (99.9%): [≈ 0, 562.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 2.191
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson
[info] # Run progress: 82.37% complete, ETA 00:15:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67673.472 ops/s
[info] # Warmup Iteration   2: 333044.065 ops/s
[info] # Warmup Iteration   3: 343440.315 ops/s
[info] Iteration   1: 345992.412 ops/s
[info]                  ·gc.alloc.rate:            1250.197 MB/sec
[info]                  ·gc.alloc.rate.norm:       5688.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1006.978 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4581.435 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 344038.773 ops/s
[info]                  ·gc.alloc.rate:                   1243.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              5688.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1342.619 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6143.554 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 18.284 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   3: 341506.577 ops/s
[info]                  ·gc.alloc.rate:                                  1234.097 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.164 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.755 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1360.861 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6272.262 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.070 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 348353.267 ops/s
[info]                  ·gc.alloc.rate:            1258.810 MB/sec
[info]                  ·gc.alloc.rate.norm:       5688.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.052 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4613.683 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 348114.539 ops/s
[info]                  ·gc.alloc.rate:                                  1258.267 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6155.640 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson":
[info]   345601.114 ±(99.9%) 11102.100 ops/s [Average]
[info]   (min, avg, max) = (341506.577, 345601.114, 348353.267), stdev = 2883.180
[info]   CI (99.9%): [334499.014, 356703.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1248.886 ±(99.9%) 40.424 MB/sec [Average]
[info]   (min, avg, max) = (1234.097, 1248.886, 1258.810), stdev = 10.498
[info]   CI (99.9%): [1208.462, 1289.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5688.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5688.001, 5688.001, 5688.001), stdev = 0.001
[info]   CI (99.9%): [5688.001, 5688.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.033 ±(99.9%) 0.281 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.164), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.153 ±(99.9%) 1.295 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.153, 0.755), stdev = 0.336
[info]   CI (99.9%): [≈ 0, 1.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1218.645 ±(99.9%) 720.157 MB/sec [Average]
[info]   (min, avg, max) = (1006.978, 1218.645, 1361.715), stdev = 187.022
[info]   CI (99.9%): [498.488, 1938.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   5553.315 ±(99.9%) 3365.472 B/op [Average]
[info]   (min, avg, max) = (4581.435, 5553.315, 6272.262), stdev = 874.002
[info]   CI (99.9%): [2187.843, 8918.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   4.271 ±(99.9%) 30.596 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.271, 18.284), stdev = 7.946
[info]   CI (99.9%): [≈ 0, 34.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.000, 19.000), stdev = 7.106
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 82.62% complete, ETA 00:14:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1161368.422 ops/s
[info] # Warmup Iteration   2: 2126430.155 ops/s
[info] # Warmup Iteration   3: 2159789.005 ops/s
[info] Iteration   1: 2202259.401 ops/s
[info]                  ·gc.alloc.rate:                                  3133.857 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2240.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.941 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2189.312 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 2170342.133 ops/s
[info]                  ·gc.alloc.rate:                                  3089.249 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2240.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.882 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2221.606 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 2156981.515 ops/s
[info]                  ·gc.alloc.rate:                                  3069.637 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2240.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.257 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2235.345 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 2196749.023 ops/s
[info]                  ·gc.alloc.rate:                                  3126.154 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2240.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.286 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2194.953 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 2198656.317 ops/s
[info]                  ·gc.alloc.rate:                                  3129.137 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2240.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.540 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2193.042 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2184997.678 ±(99.9%) 77547.944 ops/s [Average]
[info]   (min, avg, max) = (2156981.515, 2184997.678, 2202259.401), stdev = 20138.955
[info]   CI (99.9%): [2107449.734, 2262545.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3109.607 ±(99.9%) 109.851 MB/sec [Average]
[info]   (min, avg, max) = (3069.637, 3109.607, 3133.857), stdev = 28.528
[info]   CI (99.9%): [2999.756, 3219.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2240.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2240.000, 2240.000, 2240.000), stdev = 0.001
[info]   CI (99.9%): [2240.000, 2240.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.005 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.002, 0.004), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.002 ±(99.9%) 0.004 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   3063.381 ±(99.9%) 1.353 MB/sec [Average]
[info]   (min, avg, max) = (3062.941, 3063.381, 3063.882), stdev = 0.351
[info]   CI (99.9%): [3062.028, 3064.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2206.852 ±(99.9%) 78.668 B/op [Average]
[info]   (min, avg, max) = (2189.312, 2206.852, 2235.345), stdev = 20.430
[info]   CI (99.9%): [2128.184, 2285.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   45.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.000, 9.000), stdev = 0.001
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava
[info] # Run progress: 82.87% complete, ETA 00:14:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.876 ops/s
[info] # Warmup Iteration   2: 750288.663 ops/s
[info] # Warmup Iteration   3: 768730.483 ops/s
[info] Iteration   1: 775349.093 ops/s
[info]                  ·gc.alloc.rate:            366.479 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 677.462 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 771061.420 ops/s
[info]                  ·gc.alloc.rate:                   364.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             332.988 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        679.853 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.360 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 771350.260 ops/s
[info]                  ·gc.alloc.rate:            364.638 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.740 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 680.956 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 775321.415 ops/s
[info]                  ·gc.alloc.rate:            366.468 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 677.470 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 757662.120 ops/s
[info]                  ·gc.alloc.rate:                   358.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             333.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        691.875 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.384 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava":
[info]   770148.861 ±(99.9%) 28032.618 ops/s [Average]
[info]   (min, avg, max) = (757662.120, 770148.861, 775349.093), stdev = 7279.982
[info]   CI (99.9%): [742116.244, 798181.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   364.020 ±(99.9%) 13.270 MB/sec [Average]
[info]   (min, avg, max) = (358.109, 364.020, 366.479), stdev = 3.446
[info]   CI (99.9%): [350.750, 377.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   744.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (744.001, 744.001, 744.001), stdev = 0.001
[info]   CI (99.9%): [744.000, 744.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   333.429 ±(99.9%) 1.499 MB/sec [Average]
[info]   (min, avg, max) = (332.988, 333.429, 333.740), stdev = 0.389
[info]   CI (99.9%): [331.931, 334.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   681.523 ±(99.9%) 23.040 B/op [Average]
[info]   (min, avg, max) = (677.462, 681.523, 691.875), stdev = 5.983
[info]   CI (99.9%): [658.484, 704.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.549 ±(99.9%) 2.893 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.549, 1.384), stdev = 0.751
[info]   CI (99.9%): [≈ 0, 3.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 83.12% complete, ETA 00:14:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32822.183 ops/s
[info] # Warmup Iteration   2: 259653.979 ops/s
[info] # Warmup Iteration   3: 270254.153 ops/s
[info] Iteration   1: 277579.131 ops/s
[info]                  ·gc.alloc.rate:            490.968 MB/sec
[info]                  ·gc.alloc.rate.norm:       2784.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1903.563 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 277648.732 ops/s
[info]                  ·gc.alloc.rate:                   491.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              2784.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.659 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1903.172 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.776 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 273997.833 ops/s
[info]                  ·gc.alloc.rate:            484.599 MB/sec
[info]                  ·gc.alloc.rate.norm:       2784.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3860.742 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 277838.081 ops/s
[info]                  ·gc.alloc.rate:                   491.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              2784.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.712 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1901.871 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.774 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 277792.055 ops/s
[info]                  ·gc.alloc.rate:                   491.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              2784.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3808.104 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.774 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   276971.166 ±(99.9%) 6413.036 ops/s [Average]
[info]   (min, avg, max) = (273997.833, 276971.166, 277838.081), stdev = 1665.445
[info]   CI (99.9%): [270558.130, 283384.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   489.907 ±(99.9%) 11.466 MB/sec [Average]
[info]   (min, avg, max) = (484.599, 489.907, 491.536), stdev = 2.978
[info]   CI (99.9%): [478.441, 501.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2784.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2784.001, 2784.002, 2784.002), stdev = 0.001
[info]   CI (99.9%): [2784.001, 2784.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   470.289 ±(99.9%) 709.698 MB/sec [Average]
[info]   (min, avg, max) = (335.659, 470.289, 672.349), stdev = 184.306
[info]   CI (99.9%): [≈ 0, 1179.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2675.490 ±(99.9%) 4074.443 B/op [Average]
[info]   (min, avg, max) = (1901.871, 2675.490, 3860.742), stdev = 1058.120
[info]   CI (99.9%): [≈ 0, 6749.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.400 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.265 ±(99.9%) 7.961 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.265, 3.776), stdev = 2.067
[info]   CI (99.9%): [≈ 0, 10.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 9.000), stdev = 2.408
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 83.38% complete, ETA 00:14:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 604221.054 ops/s
[info] # Warmup Iteration   2: 653556.912 ops/s
[info] # Warmup Iteration   3: 651122.535 ops/s
[info] Iteration   1: 669383.692 ops/s
[info]                  ·gc.alloc.rate:            421.927 MB/sec
[info]                  ·gc.alloc.rate.norm:       992.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.070 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 792.490 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 667331.498 ops/s
[info]                  ·gc.alloc.rate:            420.535 MB/sec
[info]                  ·gc.alloc.rate.norm:       992.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.000 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1589.899 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 645677.712 ops/s
[info]                  ·gc.alloc.rate:            406.987 MB/sec
[info]                  ·gc.alloc.rate.norm:       992.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.080 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 821.609 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 670353.066 ops/s
[info]                  ·gc.alloc.rate:            422.417 MB/sec
[info]                  ·gc.alloc.rate.norm:       992.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.984 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 791.370 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 664245.867 ops/s
[info]                  ·gc.alloc.rate:            418.651 MB/sec
[info]                  ·gc.alloc.rate.norm:       992.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 798.642 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   663398.367 ±(99.9%) 39193.490 ops/s [Average]
[info]   (min, avg, max) = (645677.712, 663398.367, 670353.066), stdev = 10178.425
[info]   CI (99.9%): [624204.877, 702591.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   418.104 ±(99.9%) 24.583 MB/sec [Average]
[info]   (min, avg, max) = (406.987, 418.104, 422.417), stdev = 6.384
[info]   CI (99.9%): [393.521, 442.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   992.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (992.001, 992.001, 992.001), stdev = 0.001
[info]   CI (99.9%): [992.001, 992.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.437 ±(99.9%) 580.256 MB/sec [Average]
[info]   (min, avg, max) = (336.984, 404.437, 674.000), stdev = 150.691
[info]   CI (99.9%): [≈ 0, 984.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   958.802 ±(99.9%) 1359.296 B/op [Average]
[info]   (min, avg, max) = (791.370, 958.802, 1589.899), stdev = 353.005
[info]   CI (99.9%): [≈ 0, 2318.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 83.63% complete, ETA 00:13:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3303112.953 ops/s
[info] # Warmup Iteration   2: 3675522.602 ops/s
[info] # Warmup Iteration   3: 3679450.876 ops/s
[info] Iteration   1: 3835569.854 ops/s
[info]                  ·gc.alloc.rate:            1228.440 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.382 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 414.946 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 3779937.587 ops/s
[info]                  ·gc.alloc.rate:                                  1210.699 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.064 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.814 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       562.745 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.387 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 3799956.119 ops/s
[info]                  ·gc.alloc.rate:                                  1216.953 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.063 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.381 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       563.815 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 3830395.913 ops/s
[info]                  ·gc.alloc.rate:                                  1226.494 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.114 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       419.604 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 3826291.780 ops/s
[info]                  ·gc.alloc.rate:            1225.133 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 560.042 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   3814430.251 ±(99.9%) 91157.954 ops/s [Average]
[info]   (min, avg, max) = (3779937.587, 3814430.251, 3835569.854), stdev = 23673.431
[info]   CI (99.9%): [3723272.297, 3905588.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   1221.544 ±(99.9%) 28.792 MB/sec [Average]
[info]   (min, avg, max) = (1210.699, 1221.544, 1228.440), stdev = 7.477
[info]   CI (99.9%): [1192.752, 1250.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   504.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
[info]   CI (99.9%): [504.000, 504.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.133 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.064), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.011 ±(99.9%) 0.055 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.026), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen":
[info]   1221.410 ±(99.9%) 721.453 MB/sec [Average]
[info]   (min, avg, max) = (1011.382, 1221.410, 1361.381), stdev = 187.359
[info]   CI (99.9%): [499.957, 1942.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen.norm":
[info]   504.230 ±(99.9%) 305.772 B/op [Average]
[info]   (min, avg, max) = (414.946, 504.230, 563.815), stdev = 79.408
[info]   CI (99.9%): [198.458, 810.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space.norm":
[info]   0.277 ±(99.9%) 2.388 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.277, 1.387), stdev = 0.620
[info]   CI (99.9%): [≈ 0, 2.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 10.000), stdev = 3.362
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 83.88% complete, ETA 00:13:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6346060.837 ops/s
[info] # Warmup Iteration   2: 6726068.396 ops/s
[info] # Warmup Iteration   3: 6851411.364 ops/s
[info] Iteration   1: 6874800.224 ops/s
[info]                  ·gc.alloc.rate:            559.190 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.186 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 154.323 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 6866037.657 ops/s
[info]                  ·gc.alloc.rate:            558.339 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.078 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 154.533 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 7131740.776 ops/s
[info]                  ·gc.alloc.rate:            579.956 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 74.382 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 7042124.543 ops/s
[info]                  ·gc.alloc.rate:            572.609 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.986 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 150.662 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 7052062.509 ops/s
[info]                  ·gc.alloc.rate:            573.449 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.981 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 150.440 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   6993353.141 ±(99.9%) 452514.576 ops/s [Average]
[info]   (min, avg, max) = (6866037.657, 6993353.141, 7131740.776), stdev = 117516.598
[info]   CI (99.9%): [6540838.565, 7445867.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   568.709 ±(99.9%) 36.648 MB/sec [Average]
[info]   (min, avg, max) = (558.339, 568.709, 579.956), stdev = 9.517
[info]   CI (99.9%): [532.061, 605.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   128.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (128.000, 128.000, 128.000), stdev = 0.001
[info]   CI (99.9%): [128.000, 128.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen":
[info]   606.650 ±(99.9%) 580.403 MB/sec [Average]
[info]   (min, avg, max) = (337.018, 606.650, 674.186), stdev = 150.729
[info]   CI (99.9%): [26.247, 1187.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen.norm":
[info]   136.868 ±(99.9%) 134.713 B/op [Average]
[info]   (min, avg, max) = (74.382, 136.868, 154.533), stdev = 34.985
[info]   CI (99.9%): [2.155, 271.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.095
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 84.13% complete, ETA 00:13:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17980.469 ops/s
[info] # Warmup Iteration   2: 179310.514 ops/s
[info] # Warmup Iteration   3: 182258.317 ops/s
[info] Iteration   1: 183989.470 ops/s
[info]                  ·gc.alloc.rate:            1229.557 MB/sec
[info]                  ·gc.alloc.rate.norm:       10520.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1342.644 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11487.560 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 185274.424 ops/s
[info]                  ·gc.alloc.rate:            1238.680 MB/sec
[info]                  ·gc.alloc.rate.norm:       10520.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.392 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8555.693 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 186656.110 ops/s
[info]                  ·gc.alloc.rate:                                  1247.454 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10520.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.086 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.723 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1356.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11435.600 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                39.317 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 187901.430 ops/s
[info]                  ·gc.alloc.rate:                                  1255.795 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10520.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.427 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11404.904 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 187311.124 ops/s
[info]                  ·gc.alloc.rate:            1251.887 MB/sec
[info]                  ·gc.alloc.rate.norm:       10520.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.393 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11440.212 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   186226.512 ±(99.9%) 6111.834 ops/s [Average]
[info]   (min, avg, max) = (183989.470, 186226.512, 187901.430), stdev = 1587.224
[info]   CI (99.9%): [180114.678, 192338.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1244.675 ±(99.9%) 40.745 MB/sec [Average]
[info]   (min, avg, max) = (1229.557, 1244.675, 1255.795), stdev = 10.581
[info]   CI (99.9%): [1203.929, 1285.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10520.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10520.002, 10520.002, 10520.002), stdev = 0.001
[info]   CI (99.9%): [10520.002, 10520.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.086), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.145 ±(99.9%) 1.243 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.145, 0.723), stdev = 0.323
[info]   CI (99.9%): [≈ 0, 1.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1285.776 ±(99.9%) 599.971 MB/sec [Average]
[info]   (min, avg, max) = (1007.392, 1285.776, 1361.427), stdev = 155.810
[info]   CI (99.9%): [685.806, 1885.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   10864.794 ±(99.9%) 4971.817 B/op [Average]
[info]   (min, avg, max) = (8555.693, 10864.794, 11487.560), stdev = 1291.165
[info]   CI (99.9%): [5892.977, 15836.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   7.863 ±(99.9%) 67.706 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.863, 39.317), stdev = 17.583
[info]   CI (99.9%): [≈ 0, 75.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   52.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 10.400, 19.000), stdev = 6.656
[info]   CI (99.9%): [52.000, 52.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce
[info] # Run progress: 84.38% complete, ETA 00:13:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 420485.775 ops/s
[info] # Warmup Iteration   2: 648943.958 ops/s
[info] # Warmup Iteration   3: 660693.044 ops/s
[info] Iteration   1: 668392.739 ops/s
[info]                  ·gc.alloc.rate:                                  2554.475 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.827 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6412.484 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 670506.456 ops/s
[info]                  ·gc.alloc.rate:                                  2562.398 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.308 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5593.185 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 664489.721 ops/s
[info]                  ·gc.alloc.rate:                                  2539.575 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.675 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6449.746 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 657596.537 ops/s
[info]                  ·gc.alloc.rate:                                  2513.273 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.452 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5702.855 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 670264.723 ops/s
[info]                  ·gc.alloc.rate:                                  2562.354 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.489 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6394.319 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce":
[info]   666250.035 ±(99.9%) 20808.425 ops/s [Average]
[info]   (min, avg, max) = (657596.537, 666250.035, 670506.456), stdev = 5403.882
[info]   CI (99.9%): [645441.610, 687058.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2546.415 ±(99.9%) 79.841 MB/sec [Average]
[info]   (min, avg, max) = (2513.273, 2546.415, 2562.398), stdev = 20.734
[info]   CI (99.9%): [2466.574, 2626.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   6016.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6016.001, 6016.001, 6016.001), stdev = 0.001
[info]   CI (99.9%): [6016.001, 6016.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.004 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.003, 0.004), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.007 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.007, 0.010), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2586.750 ±(99.9%) 718.391 MB/sec [Average]
[info]   (min, avg, max) = (2382.308, 2586.750, 2723.489), stdev = 186.564
[info]   CI (99.9%): [1868.359, 3305.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   6110.518 ±(99.9%) 1634.398 B/op [Average]
[info]   (min, avg, max) = (5593.185, 6110.518, 6449.746), stdev = 424.448
[info]   CI (99.9%): [4476.120, 7744.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.count":
[info]   38.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala
[info] # Run progress: 84.63% complete, ETA 00:13:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2894691.686 ops/s
[info] # Warmup Iteration   2: 3428369.410 ops/s
[info] # Warmup Iteration   3: 3417686.882 ops/s
[info] Iteration   1: 3367978.965 ops/s
[info]                  ·gc.alloc.rate:                                  2173.592 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.023 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.140 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1113.482 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 3344594.468 ops/s
[info]                  ·gc.alloc.rate:                                  2158.938 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.249 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       961.086 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 3373452.647 ops/s
[info]                  ·gc.alloc.rate:                                  2178.473 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.200 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       952.911 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 3298674.849 ops/s
[info]                  ·gc.alloc.rate:                                  2130.006 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.481 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1136.906 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 3363084.349 ops/s
[info]                  ·gc.alloc.rate:            2170.804 MB/sec
[info]                  ·gc.alloc.rate.norm:       1016.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.105 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 955.765 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala":
[info]   3349557.056 ±(99.9%) 117223.176 ops/s [Average]
[info]   (min, avg, max) = (3298674.849, 3349557.056, 3373452.647), stdev = 30442.486
[info]   CI (99.9%): [3232333.880, 3466780.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2162.363 ±(99.9%) 74.953 MB/sec [Average]
[info]   (min, avg, max) = (2130.006, 2162.363, 2178.473), stdev = 19.465
[info]   CI (99.9%): [2087.409, 2237.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1016.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1016.000, 1016.000, 1016.000), stdev = 0.001
[info]   CI (99.9%): [1016.000, 1016.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.037 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.023), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.003 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.011), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   2178.635 ±(99.9%) 717.710 MB/sec [Average]
[info]   (min, avg, max) = (2042.105, 2178.635, 2383.481), stdev = 186.387
[info]   CI (99.9%): [1460.925, 2896.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1024.030 ±(99.9%) 357.211 B/op [Average]
[info]   (min, avg, max) = (952.911, 1024.030, 1136.906), stdev = 92.767
[info]   CI (99.9%): [666.819, 1381.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 10.000), stdev = 2.280
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson
[info] # Run progress: 84.89% complete, ETA 00:12:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45409.213 ops/s
[info] # Warmup Iteration   2: 249343.893 ops/s
[info] # Warmup Iteration   3: 247002.663 ops/s
[info] Iteration   1: 248445.383 ops/s
[info]                  ·gc.alloc.rate:                   1770.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              11216.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1683.809 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        10663.842 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 29.540 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Iteration   2: 254949.926 ops/s
[info]                  ·gc.alloc.rate:                                  1816.782 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11216.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.061 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.378 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.265 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12608.029 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 254612.423 ops/s
[info]                  ·gc.alloc.rate:            1814.188 MB/sec
[info]                  ·gc.alloc.rate.norm:       11216.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.693 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10520.513 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 254729.979 ops/s
[info]                  ·gc.alloc.rate:                                  1815.545 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11216.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.197 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10515.764 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 253582.127 ops/s
[info]                  ·gc.alloc.rate:                                  1806.831 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11216.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12676.035 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson":
[info]   253263.968 ±(99.9%) 10568.239 ops/s [Average]
[info]   (min, avg, max) = (248445.383, 253263.968, 254949.926), stdev = 2744.538
[info]   CI (99.9%): [242695.729, 263832.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1804.868 ±(99.9%) 74.420 MB/sec [Average]
[info]   (min, avg, max) = (1770.995, 1804.868, 1816.782), stdev = 19.327
[info]   CI (99.9%): [1730.449, 1879.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   11216.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11216.002, 11216.002, 11216.002), stdev = 0.001
[info]   CI (99.9%): [11216.001, 11216.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.061), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.080 ±(99.9%) 0.640 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.080, 0.378), stdev = 0.166
[info]   CI (99.9%): [≈ 0, 0.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1834.400 ±(99.9%) 730.825 MB/sec [Average]
[info]   (min, avg, max) = (1683.809, 1834.400, 2042.265), stdev = 189.793
[info]   CI (99.9%): [1103.574, 2565.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   11396.837 ±(99.9%) 4384.009 B/op [Average]
[info]   (min, avg, max) = (10515.764, 11396.837, 12676.035), stdev = 1138.513
[info]   CI (99.9%): [7012.828, 15780.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.032 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.664), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   5.908 ±(99.9%) 50.869 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.908, 29.540), stdev = 13.211
[info]   CI (99.9%): [≈ 0, 56.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.200, 21.000), stdev = 7.190
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce
[info] # Run progress: 85.14% complete, ETA 00:12:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 477167.475 ops/s
[info] # Warmup Iteration   2: 728508.078 ops/s
[info] # Warmup Iteration   3: 704607.430 ops/s
[info] Iteration   1: 721894.048 ops/s
[info]                  ·gc.alloc.rate:                                  1566.333 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3416.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.023 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.049 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1688.145 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3681.660 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                7.262 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   2: 733799.493 ops/s
[info]                  ·gc.alloc.rate:                                  1592.815 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3416.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.066 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.142 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2920.419 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 717542.314 ops/s
[info]                  ·gc.alloc.rate:                                  1557.345 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3416.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.926 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3733.137 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 727807.208 ops/s
[info]                  ·gc.alloc.rate:                                  1579.521 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3416.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.450 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2944.382 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 736111.362 ops/s
[info]                  ·gc.alloc.rate:                                  1597.574 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3416.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.874 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3639.020 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce":
[info]   727430.885 ±(99.9%) 30104.788 ops/s [Average]
[info]   (min, avg, max) = (717542.314, 727430.885, 736111.362), stdev = 7818.118
[info]   CI (99.9%): [697326.097, 757535.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1578.717 ±(99.9%) 65.719 MB/sec [Average]
[info]   (min, avg, max) = (1557.345, 1578.717, 1597.574), stdev = 17.067
[info]   CI (99.9%): [1512.999, 1644.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3416.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3416.001, 3416.001, 3416.001), stdev = 0.001
[info]   CI (99.9%): [3416.000, 3416.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.019, 0.066), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.041 ±(99.9%) 0.231 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.041, 0.142), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1563.026 ±(99.9%) 708.398 MB/sec [Average]
[info]   (min, avg, max) = (1361.450, 1563.026, 1701.926), stdev = 183.969
[info]   CI (99.9%): [854.628, 2271.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3383.723 ±(99.9%) 1591.980 B/op [Average]
[info]   (min, avg, max) = (2920.419, 3383.723, 3733.137), stdev = 413.432
[info]   CI (99.9%): [1791.744, 4975.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.452 ±(99.9%) 12.505 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.452, 7.262), stdev = 3.248
[info]   CI (99.9%): [≈ 0, 13.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 15.000), stdev = 4.970
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala
[info] # Run progress: 85.39% complete, ETA 00:12:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_3eb5d47b/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 403155.094 ops/s
[info] # Warmup Iteration   2: 1252893.769 ops/s
[info] # Warmup Iteration   3: 1256961.289 ops/s
[info] Iteration   1: 1261482.627 ops/s
[info]                  ·gc.alloc.rate:                   724.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.649 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        836.854 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.831 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 1263589.585 ops/s
[info]                  ·gc.alloc.rate:            725.864 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.526 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 836.327 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 1266086.941 ops/s
[info]                  ·gc.alloc.rate:            727.347 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.568 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 834.674 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 1254310.375 ops/s
[info]                  ·gc.alloc.rate:                   720.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.747 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        841.683 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.836 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 1267971.889 ops/s
[info]                  ·gc.alloc.rate:                   728.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        833.415 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.961 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala":
[info]   1262688.284 ±(99.9%) 20368.656 ops/s [Average]
[info]   (min, avg, max) = (1254310.375, 1262688.284, 1267971.889), stdev = 5289.675
[info]   CI (99.9%): [1242319.628, 1283056.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   725.261 ±(99.9%) 11.822 MB/sec [Average]
[info]   (min, avg, max) = (720.409, 725.261, 728.228), stdev = 3.070
[info]   CI (99.9%): [713.439, 737.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   904.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (904.000, 904.000, 904.000), stdev = 0.001
[info]   CI (99.9%): [904.000, 904.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   671.171 ±(99.9%) 1.694 MB/sec [Average]
[info]   (min, avg, max) = (670.649, 671.171, 671.568), stdev = 0.440
[info]   CI (99.9%): [669.477, 672.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   836.590 ±(99.9%) 12.151 B/op [Average]
[info]   (min, avg, max) = (833.415, 836.590, 841.683), stdev = 3.156
[info]   CI (99.9%): [824.440, 848.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.437 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.326 ±(99.9%) 7.988 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.326, 4.961), stdev = 2.074
[info]   CI (99.9%): [≈ 0, 9.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala
[info] # Run progress: 85.64% complete, ETA 00:12:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6337263.756 ops/s
[info] # Warmup Iteration   2: 7467777.295 ops/s
[info] # Warmup Iteration   3: 7420343.321 ops/s
[info] Iteration   1: 7517906.047 ops/s
[info]                  ·gc.alloc.rate:                   382.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.420 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        70.429 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.139 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 7433421.183 ops/s
[info]                  ·gc.alloc.rate:            377.753 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.002 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71.370 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 7459629.374 ops/s
[info]                  ·gc.alloc.rate:            379.134 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.380 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70.979 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 7584392.930 ops/s
[info]                  ·gc.alloc.rate:            385.482 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.386 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69.811 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 7487077.584 ops/s
[info]                  ·gc.alloc.rate:            380.518 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70.718 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala":
[info]   7496485.424 ±(99.9%) 224616.243 ops/s [Average]
[info]   (min, avg, max) = (7433421.183, 7496485.424, 7584392.930), stdev = 58332.125
[info]   CI (99.9%): [7271869.181, 7721101.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   381.005 ±(99.9%) 11.496 MB/sec [Average]
[info]   (min, avg, max) = (377.753, 381.005, 385.482), stdev = 2.985
[info]   CI (99.9%): [369.510, 392.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   336.511 ±(99.9%) 1.058 MB/sec [Average]
[info]   (min, avg, max) = (336.370, 336.511, 337.002), stdev = 0.275
[info]   CI (99.9%): [335.454, 337.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   70.661 ±(99.9%) 2.264 B/op [Average]
[info]   (min, avg, max) = (69.811, 70.661, 71.370), stdev = 0.588
[info]   CI (99.9%): [68.397, 72.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.028 ±(99.9%) 0.240 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.139), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 85.89% complete, ETA 00:12:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6700621.147 ops/s
[info] # Warmup Iteration   2: 7305163.494 ops/s
[info] # Warmup Iteration   3: 7533088.720 ops/s
[info] Iteration   1: 7546997.804 ops/s
[info]                  ·gc.alloc.rate:      76.714 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 7603742.183 ops/s
[info]                  ·gc.alloc.rate:            77.306 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      341.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70.590 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 7842998.245 ops/s
[info]                  ·gc.alloc.rate:      79.729 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7855239.429 ops/s
[info]                  ·gc.alloc.rate:      79.884 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7854173.039 ops/s
[info]                  ·gc.alloc.rate:      79.833 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScalaPrealloc":
[info]   7740630.140 ±(99.9%) 586317.607 ops/s [Average]
[info]   (min, avg, max) = (7546997.804, 7740630.140, 7855239.429), stdev = 152264.821
[info]   CI (99.9%): [7154312.533, 8326947.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   78.693 ±(99.9%) 5.976 MB/sec [Average]
[info]   (min, avg, max) = (76.714, 78.693, 79.884), stdev = 1.552
[info]   CI (99.9%): [72.718, 84.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   68.213 ±(99.9%) 587.338 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 68.213, 341.067), stdev = 152.530
[info]   CI (99.9%): [≈ 0, 655.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   14.118 ±(99.9%) 121.561 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.118, 70.590), stdev = 31.569
[info]   CI (99.9%): [≈ 0, 135.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson
[info] # Run progress: 86.15% complete, ETA 00:11:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105062.024 ops/s
[info] # Warmup Iteration   2: 474412.484 ops/s
[info] # Warmup Iteration   3: 480061.547 ops/s
[info] Iteration   1: 473565.714 ops/s
[info]                  ·gc.alloc.rate:                   1600.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              5320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1678.817 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5580.876 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.496 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   2: 487454.061 ops/s
[info]                  ·gc.alloc.rate:                                  1647.562 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5320.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.081 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.260 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.192 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5493.170 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.151 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 484245.094 ops/s
[info]                  ·gc.alloc.rate:                                  1636.623 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5320.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5531.526 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 488031.025 ops/s
[info]                  ·gc.alloc.rate:                                  1649.567 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5320.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.788 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5488.420 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 479183.759 ops/s
[info]                  ·gc.alloc.rate:            1619.613 MB/sec
[info]                  ·gc.alloc.rate.norm:       5320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.451 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4472.006 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson":
[info]   482495.931 ±(99.9%) 23501.482 ops/s [Average]
[info]   (min, avg, max) = (473565.714, 482495.931, 488031.025), stdev = 6103.260
[info]   CI (99.9%): [458994.449, 505997.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1630.741 ±(99.9%) 79.847 MB/sec [Average]
[info]   (min, avg, max) = (1600.341, 1630.741, 1649.567), stdev = 20.736
[info]   CI (99.9%): [1550.894, 1710.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5320.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5320.001, 5320.001, 5320.001), stdev = 0.001
[info]   CI (99.9%): [5320.001, 5320.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.136 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.081), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.056 ±(99.9%) 0.440 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.056, 0.260), stdev = 0.114
[info]   CI (99.9%): [≈ 0, 0.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1628.989 ±(99.9%) 577.143 MB/sec [Average]
[info]   (min, avg, max) = (1361.451, 1628.989, 1701.788), stdev = 149.882
[info]   CI (99.9%): [1051.845, 2206.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   5313.200 ±(99.9%) 1816.361 B/op [Average]
[info]   (min, avg, max) = (4472.006, 5313.200, 5580.876), stdev = 471.703
[info]   CI (99.9%): [3496.839, 7129.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.820 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   3.529 ±(99.9%) 26.008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.529, 15.496), stdev = 6.754
[info]   CI (99.9%): [≈ 0, 29.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.200, 23.000), stdev = 8.319
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala
[info] # Run progress: 86.40% complete, ETA 00:11:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49776.751 ops/s
[info] # Warmup Iteration   2: 582927.638 ops/s
[info] # Warmup Iteration   3: 600820.546 ops/s
[info] Iteration   1: 609923.186 ops/s
[info]                  ·gc.alloc.rate:            995.283 MB/sec
[info]                  ·gc.alloc.rate.norm:       2568.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.294 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2598.991 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 614735.826 ops/s
[info]                  ·gc.alloc.rate:            1002.890 MB/sec
[info]                  ·gc.alloc.rate.norm:       2568.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2578.650 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   3: 609744.144 ops/s
[info]                  ·gc.alloc.rate:                   996.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              2568.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1004.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2590.316 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.987 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.279 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   4: 613188.340 ops/s
[info]                  ·gc.alloc.rate:                                  1000.668 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2568.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.170 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.436 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.223 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1745.646 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.710 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 620050.237 ops/s
[info]                  ·gc.alloc.rate:                                  1011.601 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2568.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.044 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.111 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.046 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2591.978 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala":
[info]   613528.347 ±(99.9%) 16271.652 ops/s [Average]
[info]   (min, avg, max) = (609744.144, 613528.347, 620050.237), stdev = 4225.696
[info]   CI (99.9%): [597256.695, 629799.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1001.302 ±(99.9%) 25.296 MB/sec [Average]
[info]   (min, avg, max) = (995.283, 1001.302, 1011.601), stdev = 6.569
[info]   CI (99.9%): [976.005, 1026.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2568.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2568.001, 2568.001, 2568.001), stdev = 0.001
[info]   CI (99.9%): [2568.001, 2568.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.043 ±(99.9%) 0.283 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.043, 0.170), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.109 ±(99.9%) 0.726 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.109, 0.436), stdev = 0.189
[info]   CI (99.9%): [≈ 0, 0.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   944.067 ±(99.9%) 568.485 MB/sec [Average]
[info]   (min, avg, max) = (680.223, 944.067, 1021.046), stdev = 147.634
[info]   CI (99.9%): [375.581, 1512.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2421.116 ±(99.9%) 1454.273 B/op [Average]
[info]   (min, avg, max) = (1745.646, 2421.116, 2598.991), stdev = 377.670
[info]   CI (99.9%): [966.844, 3875.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.931 ±(99.9%) 6.672 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.931, 3.987), stdev = 1.733
[info]   CI (99.9%): [≈ 0, 7.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.398 ±(99.9%) 17.203 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.398, 10.279), stdev = 4.468
[info]   CI (99.9%): [≈ 0, 19.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 10.000, 15.000), stdev = 6.403
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala
[info] # Run progress: 86.65% complete, ETA 00:11:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2746365.249 ops/s
[info] # Warmup Iteration   2: 3245212.473 ops/s
[info] # Warmup Iteration   3: 3209576.903 ops/s
[info] Iteration   1: 3159638.147 ops/s
[info]                  ·gc.alloc.rate:                                  1493.223 MB/sec
[info]                  ·gc.alloc.rate.norm:                             744.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.062 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1688.243 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       841.169 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.659 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   2: 3185158.018 ops/s
[info]                  ·gc.alloc.rate:                                  1505.462 MB/sec
[info]                  ·gc.alloc.rate.norm:                             744.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.041 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.333 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       672.772 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 3184096.262 ops/s
[info]                  ·gc.alloc.rate:                                  1504.940 MB/sec
[info]                  ·gc.alloc.rate.norm:                             744.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.762 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       841.304 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 3146656.984 ops/s
[info]                  ·gc.alloc.rate:                                  1487.356 MB/sec
[info]                  ·gc.alloc.rate.norm:                             744.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.463 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       681.026 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 3099272.176 ops/s
[info]                  ·gc.alloc.rate:            1465.145 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.594 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 691.417 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala":
[info]   3154964.317 ±(99.9%) 135496.725 ops/s [Average]
[info]   (min, avg, max) = (3099272.176, 3154964.317, 3185158.018), stdev = 35188.069
[info]   CI (99.9%): [3019467.593, 3290461.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1491.225 ±(99.9%) 63.562 MB/sec [Average]
[info]   (min, avg, max) = (1465.145, 1491.225, 1505.462), stdev = 16.507
[info]   CI (99.9%): [1427.663, 1554.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (744.000, 744.000, 744.000), stdev = 0.001
[info]   CI (99.9%): [744.000, 744.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.109 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.011 ±(99.9%) 0.054 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1494.879 ±(99.9%) 703.704 MB/sec [Average]
[info]   (min, avg, max) = (1361.333, 1494.879, 1701.762), stdev = 182.750
[info]   CI (99.9%): [791.175, 2198.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   745.538 ±(99.9%) 337.356 B/op [Average]
[info]   (min, avg, max) = (672.772, 745.538, 841.304), stdev = 87.610
[info]   CI (99.9%): [408.182, 1082.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.332 ±(99.9%) 2.857 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.332, 1.659), stdev = 0.742
[info]   CI (99.9%): [≈ 0, 3.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 14.000), stdev = 4.722
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson
[info] # Run progress: 86.90% complete, ETA 00:11:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 79292.646 ops/s
[info] # Warmup Iteration   2: 263924.813 ops/s
[info] # Warmup Iteration   3: 267161.352 ops/s
[info] Iteration   1: 268291.018 ops/s
[info]                  ·gc.alloc.rate:                   1413.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              8288.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.809 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7882.003 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.908 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 268718.420 ops/s
[info]                  ·gc.alloc.rate:                                  1415.296 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8288.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.030 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.173 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1693.628 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9917.918 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                27.311 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   3: 272758.620 ops/s
[info]                  ·gc.alloc.rate:            1436.201 MB/sec
[info]                  ·gc.alloc.rate.norm:       8288.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.445 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7856.604 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 271627.144 ops/s
[info]                  ·gc.alloc.rate:            1430.911 MB/sec
[info]                  ·gc.alloc.rate.norm:       8288.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.138 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7889.660 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 269181.772 ops/s
[info]                  ·gc.alloc.rate:                                  1417.483 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8288.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.570 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7961.078 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson":
[info]   270115.395 ±(99.9%) 7561.288 ops/s [Average]
[info]   (min, avg, max) = (268291.018, 270115.395, 272758.620), stdev = 1963.643
[info]   CI (99.9%): [262554.107, 277676.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1422.584 ±(99.9%) 39.701 MB/sec [Average]
[info]   (min, avg, max) = (1413.028, 1422.584, 1436.201), stdev = 10.310
[info]   CI (99.9%): [1382.883, 1462.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8288.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8288.001, 8288.002, 8288.002), stdev = 0.001
[info]   CI (99.9%): [8288.001, 8288.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.050 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.030), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.036 ±(99.9%) 0.294 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.173), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1424.518 ±(99.9%) 580.050 MB/sec [Average]
[info]   (min, avg, max) = (1343.809, 1424.518, 1693.628), stdev = 150.637
[info]   CI (99.9%): [844.469, 2004.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   8301.453 ±(99.9%) 3482.767 B/op [Average]
[info]   (min, avg, max) = (7856.604, 8301.453, 9917.918), stdev = 904.464
[info]   CI (99.9%): [4818.685, 11784.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.824 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.664), stdev = 2.032
[info]   CI (99.9%): [≈ 0, 8.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   6.244 ±(99.9%) 45.815 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.244, 27.311), stdev = 11.898
[info]   CI (99.9%): [≈ 0, 52.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 19.000), stdev = 7.092
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce
[info] # Run progress: 87.15% complete, ETA 00:10:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 221167.337 ops/s
[info] # Warmup Iteration   2: 438981.298 ops/s
[info] # Warmup Iteration   3: 449623.614 ops/s
[info] Iteration   1: 451772.459 ops/s
[info]                  ·gc.alloc.rate:            1136.605 MB/sec
[info]                  ·gc.alloc.rate.norm:       3960.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.016 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3522.441 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 448473.904 ops/s
[info]                  ·gc.alloc.rate:            1128.535 MB/sec
[info]                  ·gc.alloc.rate.norm:       3960.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4731.423 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 452559.024 ops/s
[info]                  ·gc.alloc.rate:                                  1138.906 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3960.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.166 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.578 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1018.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3539.677 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                11.583 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 453517.083 ops/s
[info]                  ·gc.alloc.rate:                                  1141.263 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3960.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.015 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.054 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.335 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3543.869 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 452586.097 ops/s
[info]                  ·gc.alloc.rate:                                  1138.673 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3960.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.442 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4734.730 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce":
[info]   451781.713 ±(99.9%) 7507.383 ops/s [Average]
[info]   (min, avg, max) = (448473.904, 451781.713, 453517.083), stdev = 1949.643
[info]   CI (99.9%): [444274.331, 459289.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1136.797 ±(99.9%) 18.885 MB/sec [Average]
[info]   (min, avg, max) = (1128.535, 1136.797, 1141.263), stdev = 4.904
[info]   CI (99.9%): [1117.912, 1155.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3960.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3960.001, 3960.001, 3960.001), stdev = 0.001
[info]   CI (99.9%): [3960.001, 3960.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.037 ±(99.9%) 0.280 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.166), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.128 ±(99.9%) 0.972 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.128, 0.578), stdev = 0.252
[info]   CI (99.9%): [≈ 0, 1.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1152.038 ±(99.9%) 713.489 MB/sec [Average]
[info]   (min, avg, max) = (1011.016, 1152.038, 1361.442), stdev = 185.291
[info]   CI (99.9%): [438.549, 1865.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4014.428 ±(99.9%) 2526.345 B/op [Average]
[info]   (min, avg, max) = (3522.441, 4014.428, 4734.730), stdev = 656.084
[info]   CI (99.9%): [1488.083, 6540.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   2.317 ±(99.9%) 19.946 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.317, 11.583), stdev = 5.180
[info]   CI (99.9%): [≈ 0, 22.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 13.000), stdev = 4.604
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala
[info] # Run progress: 87.41% complete, ETA 00:10:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2245977.510 ops/s
[info] # Warmup Iteration   2: 2712216.382 ops/s
[info] # Warmup Iteration   3: 2729081.928 ops/s
[info] Iteration   1: 2834668.527 ops/s
[info]                  ·gc.alloc.rate:            576.508 MB/sec
[info]                  ·gc.alloc.rate.norm:       320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.983 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 373.550 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 2838280.331 ops/s
[info]                  ·gc.alloc.rate:            576.955 MB/sec
[info]                  ·gc.alloc.rate.norm:       320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.643 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 373.072 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 2850727.310 ops/s
[info]                  ·gc.alloc.rate:            579.465 MB/sec
[info]                  ·gc.alloc.rate.norm:       320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.314 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 185.724 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 2849043.475 ops/s
[info]                  ·gc.alloc.rate:            579.197 MB/sec
[info]                  ·gc.alloc.rate.norm:       320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.712 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 371.666 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 2837902.130 ops/s
[info]                  ·gc.alloc.rate:            576.876 MB/sec
[info]                  ·gc.alloc.rate.norm:       320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 373.135 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala":
[info]   2842124.355 ±(99.9%) 27905.756 ops/s [Average]
[info]   (min, avg, max) = (2834668.527, 2842124.355, 2850727.310), stdev = 7247.036
[info]   CI (99.9%): [2814218.598, 2870030.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   577.800 ±(99.9%) 5.433 MB/sec [Average]
[info]   (min, avg, max) = (576.508, 577.800, 579.465), stdev = 1.411
[info]   CI (99.9%): [572.367, 583.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   320.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (320.000, 320.000, 320.000), stdev = 0.001
[info]   CI (99.9%): [320.000, 320.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   605.463 ±(99.9%) 579.365 MB/sec [Average]
[info]   (min, avg, max) = (336.314, 605.463, 672.983), stdev = 150.459
[info]   CI (99.9%): [26.099, 1184.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   335.429 ±(99.9%) 322.265 B/op [Average]
[info]   (min, avg, max) = (185.724, 335.429, 373.550), stdev = 83.691
[info]   CI (99.9%): [13.165, 657.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 7.000), stdev = 1.225
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 87.66% complete, ETA 00:10:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2226422.388 ops/s
[info] # Warmup Iteration   2: 2798060.942 ops/s
[info] # Warmup Iteration   3: 2853086.590 ops/s
[info] Iteration   1: 2846752.891 ops/s
[info]                  ·gc.alloc.rate:            448.511 MB/sec
[info]                  ·gc.alloc.rate.norm:       248.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 371.961 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 2857063.549 ops/s
[info]                  ·gc.alloc.rate:            450.099 MB/sec
[info]                  ·gc.alloc.rate.norm:       248.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 185.314 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 2854251.829 ops/s
[info]                  ·gc.alloc.rate:            449.749 MB/sec
[info]                  ·gc.alloc.rate.norm:       248.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.389 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 185.491 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 2836799.055 ops/s
[info]                  ·gc.alloc.rate:            446.961 MB/sec
[info]                  ·gc.alloc.rate.norm:       248.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.747 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 373.279 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 2838953.446 ops/s
[info]                  ·gc.alloc.rate:            447.280 MB/sec
[info]                  ·gc.alloc.rate.norm:       248.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.361 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 186.499 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScalaPrealloc":
[info]   2846764.154 ±(99.9%) 34572.976 ops/s [Average]
[info]   (min, avg, max) = (2836799.055, 2846764.154, 2857063.549), stdev = 8978.492
[info]   CI (99.9%): [2812191.177, 2881337.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   448.520 ±(99.9%) 5.435 MB/sec [Average]
[info]   (min, avg, max) = (446.961, 448.520, 450.099), stdev = 1.412
[info]   CI (99.9%): [443.085, 453.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   248.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (248.000, 248.000, 248.000), stdev = 0.001
[info]   CI (99.9%): [248.000, 248.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   470.904 ±(99.9%) 709.415 MB/sec [Average]
[info]   (min, avg, max) = (336.329, 470.904, 672.747), stdev = 184.233
[info]   CI (99.9%): [≈ 0, 1180.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   260.509 ±(99.9%) 394.094 B/op [Average]
[info]   (min, avg, max) = (185.314, 260.509, 373.279), stdev = 102.345
[info]   CI (99.9%): [≈ 0, 654.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 2.191
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson
[info] # Run progress: 87.91% complete, ETA 00:10:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62235.498 ops/s
[info] # Warmup Iteration   2: 344566.333 ops/s
[info] # Warmup Iteration   3: 358569.176 ops/s
[info] Iteration   1: 352804.005 ops/s
[info]                  ·gc.alloc.rate:                   1355.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              6048.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5993.629 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.972 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 359137.114 ops/s
[info]                  ·gc.alloc.rate:                                  1379.870 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6048.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.155 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.679 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1686.536 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7392.127 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.661 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                20.428 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        17.000 ms
[info] Iteration   3: 364007.187 ops/s
[info]                  ·gc.alloc.rate:                                  1398.574 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6048.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.047 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.205 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5887.074 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 363446.526 ops/s
[info]                  ·gc.alloc.rate:                                  1396.358 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6048.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.308 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5896.192 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 363733.325 ops/s
[info]                  ·gc.alloc.rate:                                  1397.685 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6048.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.546 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5891.621 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson":
[info]   360625.632 ±(99.9%) 18511.512 ops/s [Average]
[info]   (min, avg, max) = (352804.005, 360625.632, 364007.187), stdev = 4807.381
[info]   CI (99.9%): [342114.119, 379137.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1385.608 ±(99.9%) 71.154 MB/sec [Average]
[info]   (min, avg, max) = (1355.552, 1385.608, 1398.574), stdev = 18.478
[info]   CI (99.9%): [1314.454, 1456.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   6048.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6048.001, 6048.001, 6048.001), stdev = 0.001
[info]   CI (99.9%): [6048.001, 6048.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.041 ±(99.9%) 0.257 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.041, 0.155), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.179 ±(99.9%) 1.128 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.179, 0.679), stdev = 0.293
[info]   CI (99.9%): [≈ 0, 1.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1422.823 ±(99.9%) 568.458 MB/sec [Average]
[info]   (min, avg, max) = (1343.366, 1422.823, 1686.536), stdev = 147.627
[info]   CI (99.9%): [854.365, 1991.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   6212.129 ±(99.9%) 2545.753 B/op [Average]
[info]   (min, avg, max) = (5887.074, 6212.129, 7392.127), stdev = 661.124
[info]   CI (99.9%): [3666.375, 8757.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.065 ±(99.9%) 7.819 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.065, 4.661), stdev = 2.030
[info]   CI (99.9%): [≈ 0, 8.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   4.680 ±(99.9%) 34.260 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.680, 20.428), stdev = 8.897
[info]   CI (99.9%): [≈ 0, 38.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.200, 18.000), stdev = 7.596
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 88.16% complete, ETA 00:10:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 274619.056 ops/s
[info] # Warmup Iteration   2: 620054.708 ops/s
[info] # Warmup Iteration   3: 624778.026 ops/s
[info] Iteration   1: 618231.624 ops/s
[info]                  ·gc.alloc.rate:                                  1913.951 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4872.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.050 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.126 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1695.516 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4315.972 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                8.479 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 636752.696 ops/s
[info]                  ·gc.alloc.rate:                                  1970.787 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4872.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5048.054 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 635966.463 ops/s
[info]                  ·gc.alloc.rate:            1968.363 MB/sec
[info]                  ·gc.alloc.rate.norm:       4872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5054.363 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 622115.620 ops/s
[info]                  ·gc.alloc.rate:                                  1926.201 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4872.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.813 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5166.951 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 638890.679 ops/s
[info]                  ·gc.alloc.rate:            1977.815 MB/sec
[info]                  ·gc.alloc.rate.norm:       4872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.984 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4192.538 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   630391.416 ±(99.9%) 36537.206 ops/s [Average]
[info]   (min, avg, max) = (618231.624, 630391.416, 638890.679), stdev = 9488.596
[info]   CI (99.9%): [593854.210, 666928.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   1951.423 ±(99.9%) 112.245 MB/sec [Average]
[info]   (min, avg, max) = (1913.951, 1951.423, 1977.815), stdev = 29.150
[info]   CI (99.9%): [1839.178, 2063.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4872.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4872.001, 4872.001, 4872.001), stdev = 0.001
[info]   CI (99.9%): [4872.001, 4872.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.081 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.050), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.032 ±(99.9%) 0.207 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.126), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1904.871 ±(99.9%) 724.599 MB/sec [Average]
[info]   (min, avg, max) = (1695.516, 1904.871, 2042.813), stdev = 188.176
[info]   CI (99.9%): [1180.272, 2629.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4755.576 ±(99.9%) 1779.554 B/op [Average]
[info]   (min, avg, max) = (4192.538, 4755.576, 5166.951), stdev = 462.144
[info]   CI (99.9%): [2976.022, 6535.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.696 ±(99.9%) 14.602 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.696, 8.479), stdev = 3.792
[info]   CI (99.9%): [≈ 0, 16.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 10.000), stdev = 2.510
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 88.41% complete, ETA 00:09:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 344982.470 ops/s
[info] # Warmup Iteration   2: 1349445.300 ops/s
[info] # Warmup Iteration   3: 1367912.023 ops/s
[info] Iteration   1: 1328348.895 ops/s
[info]                  ·gc.alloc.rate:                   1005.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.685 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1194.146 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.579 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 1359303.930 ops/s
[info]                  ·gc.alloc.rate:                   1029.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.955 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1556.451 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.771 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   3: 1368462.166 ops/s
[info]                  ·gc.alloc.rate:                                  1036.232 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1192.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.044 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1012.992 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1165.267 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                4.597 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   4: 1379328.507 ops/s
[info]                  ·gc.alloc.rate:                                  1044.834 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1192.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.180 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.205 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1165.241 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 1383562.682 ops/s
[info]                  ·gc.alloc.rate:            1048.181 MB/sec
[info]                  ·gc.alloc.rate.norm:       1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.510 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1161.670 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1363801.236 ±(99.9%) 84592.202 ops/s [Average]
[info]   (min, avg, max) = (1328348.895, 1363801.236, 1383562.682), stdev = 21968.326
[info]   CI (99.9%): [1279209.034, 1448393.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1032.877 ±(99.9%) 64.738 MB/sec [Average]
[info]   (min, avg, max) = (1005.875, 1032.877, 1048.181), stdev = 16.812
[info]   CI (99.9%): [968.139, 1097.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.045 ±(99.9%) 0.300 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.045, 0.180), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.051 ±(99.9%) 0.343 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.051, 0.205), stdev = 0.089
[info]   CI (99.9%): [≈ 0, 0.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1081.504 ±(99.9%) 565.396 MB/sec [Average]
[info]   (min, avg, max) = (1007.685, 1081.504, 1343.955), stdev = 146.832
[info]   CI (99.9%): [516.108, 1646.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1248.555 ±(99.9%) 664.689 B/op [Average]
[info]   (min, avg, max) = (1161.670, 1248.555, 1556.451), stdev = 172.618
[info]   CI (99.9%): [583.865, 1913.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 6.386 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 3.996), stdev = 1.658
[info]   CI (99.9%): [≈ 0, 7.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.389 ±(99.9%) 7.348 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.389, 4.597), stdev = 1.908
[info]   CI (99.9%): [≈ 0, 8.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.600, 19.000), stdev = 7.127
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 88.66% complete, ETA 00:09:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6076363.480 ops/s
[info] # Warmup Iteration   2: 6426842.655 ops/s
[info] # Warmup Iteration   3: 6796962.455 ops/s
[info] Iteration   1: 6779729.964 ops/s
[info]                  ·gc.alloc.rate:                   206.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.430 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        78.091 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.155 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6767657.795 ops/s
[info]                  ·gc.alloc.rate:            206.349 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.975 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 78.386 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 6802943.918 ops/s
[info]                  ·gc.alloc.rate:      207.451 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6783121.096 ops/s
[info]                  ·gc.alloc.rate:            206.849 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.011 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 78.204 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 6810994.835 ops/s
[info]                  ·gc.alloc.rate:      207.677 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   6788889.522 ±(99.9%) 68182.754 ops/s [Average]
[info]   (min, avg, max) = (6767657.795, 6788889.522, 6810994.835), stdev = 17706.845
[info]   CI (99.9%): [6720706.768, 6857072.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   207.024 ±(99.9%) 2.063 MB/sec [Average]
[info]   (min, avg, max) = (206.349, 207.024, 207.677), stdev = 0.536
[info]   CI (99.9%): [204.961, 209.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   202.083 ±(99.9%) 710.351 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 202.083, 337.011), stdev = 184.476
[info]   CI (99.9%): [≈ 0, 912.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   46.936 ±(99.9%) 164.988 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.936, 78.386), stdev = 42.847
[info]   CI (99.9%): [≈ 0, 211.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.031 ±(99.9%) 0.266 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.155), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 88.92% complete, ETA 00:09:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18320.688 ops/s
[info] # Warmup Iteration   2: 202073.804 ops/s
[info] # Warmup Iteration   3: 209605.433 ops/s
[info] Iteration   1: 208210.421 ops/s
[info]                  ·gc.alloc.rate:                   1432.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1680.449 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        12704.061 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.071 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         24.000 ms
[info] Iteration   2: 208175.665 ops/s
[info]                  ·gc.alloc.rate:                                  1432.491 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10832.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.076 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.571 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10233.498 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                30.217 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   3: 209723.385 ops/s
[info]                  ·gc.alloc.rate:                                  1443.339 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10832.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.024 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.179 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.442 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10217.379 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 207022.656 ops/s
[info]                  ·gc.alloc.rate:                                  1425.020 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10832.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.742 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10351.005 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 207992.428 ops/s
[info]                  ·gc.alloc.rate:                                  1431.221 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10832.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.621 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12878.487 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   208224.911 ±(99.9%) 3727.140 ops/s [Average]
[info]   (min, avg, max) = (207022.656, 208224.911, 209723.385), stdev = 967.926
[info]   CI (99.9%): [204497.771, 211952.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1432.978 ±(99.9%) 25.398 MB/sec [Average]
[info]   (min, avg, max) = (1425.020, 1432.978, 1443.339), stdev = 6.596
[info]   CI (99.9%): [1407.580, 1458.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10832.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10832.002, 10832.002, 10832.002), stdev = 0.001
[info]   CI (99.9%): [10832.002, 10832.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.124 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.076), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.156 ±(99.9%) 0.937 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.156, 0.571), stdev = 0.243
[info]   CI (99.9%): [≈ 0, 1.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1491.719 ±(99.9%) 701.337 MB/sec [Average]
[info]   (min, avg, max) = (1353.342, 1491.719, 1701.621), stdev = 182.135
[info]   CI (99.9%): [790.382, 2193.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   11276.886 ±(99.9%) 5332.282 B/op [Average]
[info]   (min, avg, max) = (10217.379, 11276.886, 12878.487), stdev = 1384.777
[info]   CI (99.9%): [5944.604, 16609.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   8.058 ±(99.9%) 50.569 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.058, 30.217), stdev = 13.133
[info]   CI (99.9%): [≈ 0, 58.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 9.600, 24.000), stdev = 8.764
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 89.17% complete, ETA 00:09:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 368736.378 ops/s
[info] # Warmup Iteration   2: 834299.943 ops/s
[info] # Warmup Iteration   3: 847284.014 ops/s
[info] Iteration   1: 849805.662 ops/s
[info]                  ·gc.alloc.rate:            1382.016 MB/sec
[info]                  ·gc.alloc.rate.norm:       2560.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2497.033 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 845726.311 ops/s
[info]                  ·gc.alloc.rate:                                  1375.626 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2560.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.079 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.147 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1354.924 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2521.474 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                6.198 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 845689.141 ops/s
[info]                  ·gc.alloc.rate:                                  1375.398 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.015 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.383 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2533.915 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 844301.950 ops/s
[info]                  ·gc.alloc.rate:            1373.171 MB/sec
[info]                  ·gc.alloc.rate.norm:       2560.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.408 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2538.071 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 859194.844 ops/s
[info]                  ·gc.alloc.rate:                                  1397.804 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.784 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2494.033 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   848943.582 ±(99.9%) 23447.743 ops/s [Average]
[info]   (min, avg, max) = (844301.950, 848943.582, 859194.844), stdev = 6089.304
[info]   CI (99.9%): [825495.839, 872391.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1380.803 ±(99.9%) 38.735 MB/sec [Average]
[info]   (min, avg, max) = (1373.171, 1380.803, 1397.804), stdev = 10.059
[info]   CI (99.9%): [1342.068, 1419.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2560.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2560.000, 2560.000, 2560.001), stdev = 0.001
[info]   CI (99.9%): [2560.000, 2560.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.079), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.035 ±(99.9%) 0.246 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.147), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1357.504 ±(99.9%) 23.196 MB/sec [Average]
[info]   (min, avg, max) = (1348.023, 1357.504, 1361.784), stdev = 6.024
[info]   CI (99.9%): [1334.308, 1380.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2516.905 ±(99.9%) 78.827 B/op [Average]
[info]   (min, avg, max) = (2494.033, 2516.905, 2538.071), stdev = 20.471
[info]   CI (99.9%): [2438.078, 2595.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.240 ±(99.9%) 10.674 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.240, 6.198), stdev = 2.772
[info]   CI (99.9%): [≈ 0, 11.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 13.000), stdev = 4.450
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 89.42% complete, ETA 00:09:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_3eb5d47b/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 669440.552 ops/s
[info] # Warmup Iteration   2: 2171248.867 ops/s
[info] # Warmup Iteration   3: 2215239.306 ops/s
[info] Iteration   1: 2222087.097 ops/s
[info]                  ·gc.alloc.rate:            914.807 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.093 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 713.370 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 2230227.003 ops/s
[info]                  ·gc.alloc.rate:            917.923 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.187 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 473.819 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 2212498.160 ops/s
[info]                  ·gc.alloc.rate:            910.968 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.255 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 716.492 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 2228912.248 ops/s
[info]                  ·gc.alloc.rate:                                  917.658 MB/sec
[info]                  ·gc.alloc.rate.norm:                             648.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.145 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.103 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1015.859 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       717.344 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.293 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 2252004.423 ops/s
[info]                  ·gc.alloc.rate:                                  927.178 MB/sec
[info]                  ·gc.alloc.rate.norm:                             648.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.025 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.780 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       475.794 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2229145.786 ±(99.9%) 56155.717 ops/s [Average]
[info]   (min, avg, max) = (2212498.160, 2229145.786, 2252004.423), stdev = 14583.461
[info]   CI (99.9%): [2172990.069, 2285301.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   917.707 ±(99.9%) 23.069 MB/sec [Average]
[info]   (min, avg, max) = (910.968, 917.707, 927.178), stdev = 5.991
[info]   CI (99.9%): [894.637, 940.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.243 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.145), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.024 ±(99.9%) 0.172 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.103), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   876.435 ±(99.9%) 704.868 MB/sec [Average]
[info]   (min, avg, max) = (671.187, 876.435, 1015.859), stdev = 183.052
[info]   CI (99.9%): [171.567, 1581.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   619.364 ±(99.9%) 508.179 B/op [Average]
[info]   (min, avg, max) = (473.819, 619.364, 717.344), stdev = 131.972
[info]   CI (99.9%): [111.185, 1127.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.659 ±(99.9%) 5.670 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.659, 3.293), stdev = 1.473
[info]   CI (99.9%): [≈ 0, 6.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.000, 13.000), stdev = 4.637
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 89.67% complete, ETA 00:08:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3947214.294 ops/s
[info] # Warmup Iteration   2: 5948149.385 ops/s
[info] # Warmup Iteration   3: 6042831.533 ops/s
[info] Iteration   1: 6040794.785 ops/s
[info]                  ·gc.alloc.rate:            675.409 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.676 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 175.288 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 6052397.916 ops/s
[info]                  ·gc.alloc.rate:            676.978 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.935 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 174.949 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 6044440.559 ops/s
[info]                  ·gc.alloc.rate:            676.054 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.924 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 175.185 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 6043288.149 ops/s
[info]                  ·gc.alloc.rate:            675.732 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.725 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 175.217 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 5978612.584 ops/s
[info]                  ·gc.alloc.rate:            668.373 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.615 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 177.117 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   6031906.799 ±(99.9%) 115932.296 ops/s [Average]
[info]   (min, avg, max) = (5978612.584, 6031906.799, 6052397.916), stdev = 30107.249
[info]   CI (99.9%): [5915974.503, 6147839.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   674.509 ±(99.9%) 13.400 MB/sec [Average]
[info]   (min, avg, max) = (668.373, 674.509, 676.978), stdev = 3.480
[info]   CI (99.9%): [661.109, 687.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   672.775 ±(99.9%) 0.563 MB/sec [Average]
[info]   (min, avg, max) = (672.615, 672.775, 672.935), stdev = 0.146
[info]   CI (99.9%): [672.212, 673.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   175.551 ±(99.9%) 3.406 B/op [Average]
[info]   (min, avg, max) = (174.949, 175.551, 177.117), stdev = 0.885
[info]   CI (99.9%): [172.145, 178.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 89.92% complete, ETA 00:08:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3950282.773 ops/s
[info] # Warmup Iteration   2: 5781074.053 ops/s
[info] # Warmup Iteration   3: 5983628.520 ops/s
[info] Iteration   1: 5957142.434 ops/s
[info]                  ·gc.alloc.rate:            363.311 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 88.874 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 5968414.629 ops/s
[info]                  ·gc.alloc.rate:            363.983 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.671 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 177.416 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 5816449.781 ops/s
[info]                  ·gc.alloc.rate:            354.800 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.419 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 91.027 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 5822380.681 ops/s
[info]                  ·gc.alloc.rate:            355.246 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.498 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 90.934 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 5867244.511 ops/s
[info]                  ·gc.alloc.rate:            357.891 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.410 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 90.238 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   5886326.407 ±(99.9%) 279598.271 ops/s [Average]
[info]   (min, avg, max) = (5816449.781, 5886326.407, 5968414.629), stdev = 72610.783
[info]   CI (99.9%): [5606728.136, 6165924.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   359.046 ±(99.9%) 16.825 MB/sec [Average]
[info]   (min, avg, max) = (354.800, 359.046, 363.983), stdev = 4.369
[info]   CI (99.9%): [342.222, 375.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   403.668 ±(99.9%) 579.050 MB/sec [Average]
[info]   (min, avg, max) = (336.344, 403.668, 672.671), stdev = 150.377
[info]   CI (99.9%): [≈ 0, 982.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   107.698 ±(99.9%) 150.111 B/op [Average]
[info]   (min, avg, max) = (88.874, 107.698, 177.416), stdev = 38.983
[info]   CI (99.9%): [≈ 0, 257.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 90.18% complete, ETA 00:08:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29283.891 ops/s
[info] # Warmup Iteration   2: 306235.999 ops/s
[info] # Warmup Iteration   3: 309198.897 ops/s
[info] Iteration   1: 308658.410 ops/s
[info]                  ·gc.alloc.rate:                   1590.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              8112.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.586 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6850.863 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.397 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 311661.948 ops/s
[info]                  ·gc.alloc.rate:                                  1606.069 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8112.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.211 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.066 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1696.335 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8567.919 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                23.547 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 315933.221 ops/s
[info]                  ·gc.alloc.rate:            1628.670 MB/sec
[info]                  ·gc.alloc.rate.norm:       8112.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.263 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8478.550 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 311323.148 ops/s
[info]                  ·gc.alloc.rate:                                  1605.393 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8112.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1700.755 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8593.865 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 312320.656 ops/s
[info]                  ·gc.alloc.rate:            1610.109 MB/sec
[info]                  ·gc.alloc.rate.norm:       8112.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.871 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6861.336 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   311979.476 ±(99.9%) 10061.456 ops/s [Average]
[info]   (min, avg, max) = (308658.410, 311979.476, 315933.221), stdev = 2612.928
[info]   CI (99.9%): [301918.021, 322040.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1608.232 ±(99.9%) 52.151 MB/sec [Average]
[info]   (min, avg, max) = (1590.920, 1608.232, 1628.670), stdev = 13.543
[info]   CI (99.9%): [1556.081, 1660.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8112.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8112.001, 8112.001, 8112.001), stdev = 0.001
[info]   CI (99.9%): [8112.001, 8112.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.043 ±(99.9%) 0.362 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.043, 0.211), stdev = 0.094
[info]   CI (99.9%): [≈ 0, 0.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.216 ±(99.9%) 1.830 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.216, 1.066), stdev = 0.475
[info]   CI (99.9%): [≈ 0, 2.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1560.962 ±(99.9%) 732.441 MB/sec [Average]
[info]   (min, avg, max) = (1343.586, 1560.962, 1702.263), stdev = 190.213
[info]   CI (99.9%): [828.521, 2293.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   7870.507 ±(99.9%) 3569.615 B/op [Average]
[info]   (min, avg, max) = (6850.863, 7870.507, 8593.865), stdev = 927.018
[info]   CI (99.9%): [4300.892, 11440.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   5.389 ±(99.9%) 39.496 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.389, 23.547), stdev = 10.257
[info]   CI (99.9%): [≈ 0, 44.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 18.000), stdev = 6.000
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Run progress: 90.43% complete, ETA 00:08:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2907553.791 ops/s
[info] # Warmup Iteration   2: 4156000.679 ops/s
[info] # Warmup Iteration   3: 4263418.478 ops/s
[info] Iteration   1: 4280234.443 ops/s
[info]                  ·gc.alloc.rate:                                  3067.092 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1128.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.964 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1126.482 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 4247916.847 ops/s
[info]                  ·gc.alloc.rate:                                  3043.838 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1128.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.905 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1135.066 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 4262282.793 ops/s
[info]                  ·gc.alloc.rate:                                  3055.394 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1128.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3064.052 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1131.197 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 4230260.465 ops/s
[info]                  ·gc.alloc.rate:                                  3032.629 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1128.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3064.209 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1139.747 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 4270919.363 ops/s
[info]                  ·gc.alloc.rate:                                  3060.712 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1128.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.293 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1128.951 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   4258322.782 ±(99.9%) 75806.201 ops/s [Average]
[info]   (min, avg, max) = (4230260.465, 4258322.782, 4280234.443), stdev = 19686.630
[info]   CI (99.9%): [4182516.581, 4334128.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   3051.933 ±(99.9%) 52.973 MB/sec [Average]
[info]   (min, avg, max) = (3032.629, 3051.933, 3067.092), stdev = 13.757
[info]   CI (99.9%): [2998.960, 3104.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1128.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1128.000, 1128.000, 1128.000), stdev = 0.001
[info]   CI (99.9%): [1128.000, 1128.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.004 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.002, 0.004), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   3063.485 ±(99.9%) 2.351 MB/sec [Average]
[info]   (min, avg, max) = (3062.905, 3063.485, 3064.209), stdev = 0.611
[info]   CI (99.9%): [3061.134, 3065.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1132.289 ±(99.9%) 20.136 B/op [Average]
[info]   (min, avg, max) = (1126.482, 1132.289, 1139.747), stdev = 5.229
[info]   CI (99.9%): [1112.152, 1152.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   45.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.000, 9.000), stdev = 0.001
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava
[info] # Run progress: 90.68% complete, ETA 00:07:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.873 ops/s
[info] # Warmup Iteration   2: 6905805.544 ops/s
[info] # Warmup Iteration   3: 7340150.449 ops/s
[info] Iteration   1: 7514784.688 ops/s
[info]                  ·gc.alloc.rate:            802.014 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 209.694 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 7578668.675 ops/s
[info]                  ·gc.alloc.rate:            808.795 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 138.615 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 7606814.775 ops/s
[info]                  ·gc.alloc.rate:            812.007 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.508 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 138.104 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 7555037.509 ops/s
[info]                  ·gc.alloc.rate:                   806.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1000.448 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        208.438 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.139 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   5: 7536630.918 ops/s
[info]                  ·gc.alloc.rate:                   804.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.387 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        140.220 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      6.661 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.391 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava":
[info]   7558387.313 ±(99.9%) 138064.562 ops/s [Average]
[info]   (min, avg, max) = (7514784.688, 7558387.313, 7606814.775), stdev = 35854.928
[info]   CI (99.9%): [7420322.750, 7696451.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   806.715 ±(99.9%) 14.902 MB/sec [Average]
[info]   (min, avg, max) = (802.014, 806.715, 812.007), stdev = 3.870
[info]   CI (99.9%): [791.814, 821.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (168.000, 168.000, 168.000), stdev = 0.001
[info]   CI (99.9%): [168.000, 168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   801.545 ±(99.9%) 700.266 MB/sec [Average]
[info]   (min, avg, max) = (667.327, 801.545, 1001.054), stdev = 181.857
[info]   CI (99.9%): [101.278, 1501.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   167.014 ±(99.9%) 147.858 B/op [Average]
[info]   (min, avg, max) = (138.104, 167.014, 209.694), stdev = 38.398
[info]   CI (99.9%): [19.156, 314.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 11.238 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 6.661), stdev = 2.919
[info]   CI (99.9%): [≈ 0, 12.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.306 ±(99.9%) 2.347 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.306, 1.391), stdev = 0.610
[info]   CI (99.9%): [≈ 0, 2.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   57.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 11.400, 14.000), stdev = 2.408
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 90.93% complete, ETA 00:07:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1542580.981 ops/s
[info] # Warmup Iteration   2: 3692545.297 ops/s
[info] # Warmup Iteration   3: 3694531.638 ops/s
[info] Iteration   1: 3815113.012 ops/s
[info]                  ·gc.alloc.rate:                                  1977.679 MB/sec
[info]                  ·gc.alloc.rate.norm:                             816.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.067 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2034.070 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       839.267 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.649 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   2: 3853692.552 ops/s
[info]                  ·gc.alloc.rate:                                  1998.294 MB/sec
[info]                  ·gc.alloc.rate.norm:                             816.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.589 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       834.088 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 3814710.232 ops/s
[info]                  ·gc.alloc.rate:                                  1977.563 MB/sec
[info]                  ·gc.alloc.rate.norm:                             816.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.129 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       842.642 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 3864930.499 ops/s
[info]                  ·gc.alloc.rate:                                  2003.710 MB/sec
[info]                  ·gc.alloc.rate.norm:                             816.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.192 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       831.672 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 3812403.462 ops/s
[info]                  ·gc.alloc.rate:            1976.991 MB/sec
[info]                  ·gc.alloc.rate.norm:       816.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 843.121 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   3832169.951 ±(99.9%) 96707.350 ops/s [Average]
[info]   (min, avg, max) = (3812403.462, 3832169.951, 3864930.499), stdev = 25114.592
[info]   CI (99.9%): [3735462.602, 3928877.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1986.847 ±(99.9%) 50.309 MB/sec [Average]
[info]   (min, avg, max) = (1976.991, 1986.847, 2003.710), stdev = 13.065
[info]   CI (99.9%): [1936.538, 2037.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   816.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (816.000, 816.000, 816.000), stdev = 0.001
[info]   CI (99.9%): [816.000, 816.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.067), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.006 ±(99.9%) 0.047 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.028), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   2040.736 ±(99.9%) 14.380 MB/sec [Average]
[info]   (min, avg, max) = (2034.070, 2040.736, 2042.700), stdev = 3.735
[info]   CI (99.9%): [2026.355, 2055.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   838.158 ±(99.9%) 19.692 B/op [Average]
[info]   (min, avg, max) = (831.672, 838.158, 843.121), stdev = 5.114
[info]   CI (99.9%): [818.466, 857.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.330 ±(99.9%) 2.839 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.330, 1.649), stdev = 0.737
[info]   CI (99.9%): [≈ 0, 3.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 12.000), stdev = 3.050
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 91.18% complete, ETA 00:07:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6141560.949 ops/s
[info] # Warmup Iteration   2: 6519481.347 ops/s
[info] # Warmup Iteration   3: 6728586.077 ops/s
[info] Iteration   1: 6772213.143 ops/s
[info]                  ·gc.alloc.rate:            722.881 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.127 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 156.669 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 6783020.175 ops/s
[info]                  ·gc.alloc.rate:            724.036 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.115 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 156.417 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 6640974.471 ops/s
[info]                  ·gc.alloc.rate:            708.768 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.002 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 159.760 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 6761158.288 ops/s
[info]                  ·gc.alloc.rate:            721.642 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 156.925 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 6643339.577 ops/s
[info]                  ·gc.alloc.rate:                   709.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.088 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        159.701 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.789 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   6720141.131 ±(99.9%) 275755.003 ops/s [Average]
[info]   (min, avg, max) = (6640974.471, 6720141.131, 6783020.175), stdev = 71612.699
[info]   CI (99.9%): [6444386.128, 6995896.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   717.289 ±(99.9%) 29.523 MB/sec [Average]
[info]   (min, avg, max) = (708.768, 717.289, 724.036), stdev = 7.667
[info]   CI (99.9%): [687.765, 746.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (168.000, 168.000, 168.000), stdev = 0.001
[info]   CI (99.9%): [168.000, 168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   674.080 ±(99.9%) 0.189 MB/sec [Average]
[info]   (min, avg, max) = (674.002, 674.080, 674.127), stdev = 0.049
[info]   CI (99.9%): [673.891, 674.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   157.894 ±(99.9%) 6.492 B/op [Average]
[info]   (min, avg, max) = (156.417, 157.894, 159.760), stdev = 1.686
[info]   CI (99.9%): [151.403, 164.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.158 ±(99.9%) 1.359 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.158, 0.789), stdev = 0.353
[info]   CI (99.9%): [≈ 0, 1.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Run progress: 91.44% complete, ETA 00:07:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2629952.881 ops/s
[info] # Warmup Iteration   2: 4521750.110 ops/s
[info] # Warmup Iteration   3: 4674000.346 ops/s
[info] Iteration   1: 4769281.295 ops/s
[info]                  ·gc.alloc.rate:                                  2570.093 MB/sec
[info]                  ·gc.alloc.rate.norm:                             848.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.000 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       786.269 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 4749252.872 ops/s
[info]                  ·gc.alloc.rate:                                  2558.974 MB/sec
[info]                  ·gc.alloc.rate.norm:                             848.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.309 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       902.458 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 4752707.918 ops/s
[info]                  ·gc.alloc.rate:                                  2560.400 MB/sec
[info]                  ·gc.alloc.rate.norm:                             848.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.446 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       789.062 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 4749663.876 ops/s
[info]                  ·gc.alloc.rate:                                  2558.777 MB/sec
[info]                  ·gc.alloc.rate.norm:                             848.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.871 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       902.382 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 4665633.665 ops/s
[info]                  ·gc.alloc.rate:                                  2514.260 MB/sec
[info]                  ·gc.alloc.rate.norm:                             848.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.173 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       803.788 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   4737307.925 ±(99.9%) 157500.363 ops/s [Average]
[info]   (min, avg, max) = (4665633.665, 4737307.925, 4769281.295), stdev = 40902.344
[info]   CI (99.9%): [4579807.562, 4894808.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2552.501 ±(99.9%) 84.265 MB/sec [Average]
[info]   (min, avg, max) = (2514.260, 2552.501, 2570.093), stdev = 21.883
[info]   CI (99.9%): [2468.236, 2636.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   848.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (848.000, 848.000, 848.000), stdev = 0.001
[info]   CI (99.9%): [848.000, 848.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.005 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.003, 0.004), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2518.960 ±(99.9%) 717.547 MB/sec [Average]
[info]   (min, avg, max) = (2382.446, 2518.960, 2723.309), stdev = 186.345
[info]   CI (99.9%): [1801.413, 3236.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   836.792 ±(99.9%) 232.112 B/op [Average]
[info]   (min, avg, max) = (786.269, 836.792, 902.458), stdev = 60.279
[info]   CI (99.9%): [604.680, 1068.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   37.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Run progress: 91.69% complete, ETA 00:07:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1804329.833 ops/s
[info] # Warmup Iteration   2: 2793467.089 ops/s
[info] # Warmup Iteration   3: 2806340.680 ops/s
[info] Iteration   1: 2813728.408 ops/s
[info]                  ·gc.alloc.rate:            1172.638 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.096 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 565.630 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 2789245.991 ops/s
[info]                  ·gc.alloc.rate:                   1162.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.921 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        760.753 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.879 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 2815403.714 ops/s
[info]                  ·gc.alloc.rate:                                  1173.278 MB/sec
[info]                  ·gc.alloc.rate.norm:                             656.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.146 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.081 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.978 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       570.847 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 2822916.065 ops/s
[info]                  ·gc.alloc.rate:                                  1176.392 MB/sec
[info]                  ·gc.alloc.rate.norm:                             656.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       759.133 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 2823045.207 ops/s
[info]                  ·gc.alloc.rate:            1176.705 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.201 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 569.308 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   2812867.877 ±(99.9%) 53415.407 ops/s [Average]
[info]   (min, avg, max) = (2789245.991, 2812867.877, 2823045.207), stdev = 13871.812
[info]   CI (99.9%): [2759452.470, 2866283.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1172.266 ±(99.9%) 22.523 MB/sec [Average]
[info]   (min, avg, max) = (1162.318, 1172.266, 1176.705), stdev = 5.849
[info]   CI (99.9%): [1149.744, 1194.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   656.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (656.000, 656.000, 656.000), stdev = 0.001
[info]   CI (99.9%): [656.000, 656.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.250 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.146), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.016 ±(99.9%) 0.140 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.081), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1152.507 ±(99.9%) 710.898 MB/sec [Average]
[info]   (min, avg, max) = (1011.096, 1152.507, 1361.337), stdev = 184.618
[info]   CI (99.9%): [441.609, 1863.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   645.134 ±(99.9%) 403.641 B/op [Average]
[info]   (min, avg, max) = (565.630, 645.134, 760.753), stdev = 104.824
[info]   CI (99.9%): [241.493, 1048.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.376 ±(99.9%) 3.236 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.376, 1.879), stdev = 0.840
[info]   CI (99.9%): [≈ 0, 3.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 13.000), stdev = 4.827
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava
[info] # Run progress: 91.94% complete, ETA 00:06:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.876 ops/s
[info] # Warmup Iteration   2: 8022909.559 ops/s
[info] # Warmup Iteration   3: 8196266.375 ops/s
[info] Iteration   1: 8387722.937 ops/s
[info]                  ·gc.alloc.rate:            809.976 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.097 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 187.866 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 8334486.479 ops/s
[info]                  ·gc.alloc.rate:            804.786 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 126.042 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 8407843.194 ops/s
[info]                  ·gc.alloc.rate:            811.957 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.170 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 187.421 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   4: 8489476.976 ops/s
[info]                  ·gc.alloc.rate:            819.810 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.421 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 123.746 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 8470940.208 ops/s
[info]                  ·gc.alloc.rate:                   818.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.793 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        124.638 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      7.327 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.361 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava":
[info]   8418093.959 ±(99.9%) 242819.274 ops/s [Average]
[info]   (min, avg, max) = (8334486.479, 8418093.959, 8489476.976), stdev = 63059.394
[info]   CI (99.9%): [8175274.685, 8660913.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   812.917 ±(99.9%) 23.548 MB/sec [Average]
[info]   (min, avg, max) = (804.786, 812.917, 819.810), stdev = 6.115
[info]   CI (99.9%): [789.369, 836.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   152.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.000, 152.000), stdev = 0.001
[info]   CI (99.9%): [152.000, 152.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   801.565 ±(99.9%) 701.530 MB/sec [Average]
[info]   (min, avg, max) = (667.347, 801.565, 1001.170), stdev = 182.185
[info]   CI (99.9%): [100.035, 1503.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   149.942 ±(99.9%) 132.563 B/op [Average]
[info]   (min, avg, max) = (123.746, 149.942, 187.866), stdev = 34.426
[info]   CI (99.9%): [17.379, 282.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 12.618 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 7.327), stdev = 3.277
[info]   CI (99.9%): [≈ 0, 14.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.272 ±(99.9%) 2.345 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.272, 1.361), stdev = 0.609
[info]   CI (99.9%): [≈ 0, 2.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   57.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 11.400, 14.000), stdev = 2.408
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 92.19% complete, ETA 00:06:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 960942.180 ops/s
[info] # Warmup Iteration   2: 1736090.777 ops/s
[info] # Warmup Iteration   3: 1838028.469 ops/s
[info] Iteration   1: 1840790.985 ops/s
[info]                  ·gc.alloc.rate:            570.626 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 287.628 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 1837957.341 ops/s
[info]                  ·gc.alloc.rate:            569.774 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.695 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 576.150 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1838877.566 ops/s
[info]                  ·gc.alloc.rate:            570.081 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.725 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 575.866 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 1837244.737 ops/s
[info]                  ·gc.alloc.rate:            569.626 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.788 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 576.380 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 1841220.631 ops/s
[info]                  ·gc.alloc.rate:            570.840 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.380 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 287.565 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   1839218.252 ±(99.9%) 6692.741 ops/s [Average]
[info]   (min, avg, max) = (1837244.737, 1839218.252, 1841220.631), stdev = 1738.084
[info]   CI (99.9%): [1832525.511, 1845910.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   570.189 ±(99.9%) 2.034 MB/sec [Average]
[info]   (min, avg, max) = (569.626, 570.189, 570.840), stdev = 0.528
[info]   CI (99.9%): [568.155, 572.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   488.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (488.000, 488.000, 488.000), stdev = 0.001
[info]   CI (99.9%): [488.000, 488.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.183 ±(99.9%) 709.458 MB/sec [Average]
[info]   (min, avg, max) = (336.327, 538.183, 672.788), stdev = 184.244
[info]   CI (99.9%): [≈ 0, 1247.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   460.718 ±(99.9%) 608.546 B/op [Average]
[info]   (min, avg, max) = (287.565, 460.718, 576.380), stdev = 158.037
[info]   CI (99.9%): [≈ 0, 1069.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 9.000), stdev = 2.408
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 92.44% complete, ETA 00:06:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6122743.867 ops/s
[info] # Warmup Iteration   2: 8639171.391 ops/s
[info] # Warmup Iteration   3: 8940031.607 ops/s
[info] Iteration   1: 8932527.905 ops/s
[info]                  ·gc.alloc.rate:                   862.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        177.815 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.117 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 8743308.270 ops/s
[info]                  ·gc.alloc.rate:            844.219 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.286 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 121.224 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 8652865.060 ops/s
[info]                  ·gc.alloc.rate:            835.575 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.075 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 183.562 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 8552580.637 ops/s
[info]                  ·gc.alloc.rate:                   825.898 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        123.805 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.735 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 8424568.871 ops/s
[info]                  ·gc.alloc.rate:                                  813.484 MB/sec
[info]                  ·gc.alloc.rate.norm:                             152.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.197 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       190.773 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   8661170.148 ±(99.9%) 741242.765 ops/s [Average]
[info]   (min, avg, max) = (8424568.871, 8661170.148, 8932527.905), stdev = 192498.392
[info]   CI (99.9%): [7919927.383, 9402412.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   836.342 ±(99.9%) 71.524 MB/sec [Average]
[info]   (min, avg, max) = (813.484, 836.342, 862.531), stdev = 18.575
[info]   CI (99.9%): [764.818, 907.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   152.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.000, 152.000), stdev = 0.001
[info]   CI (99.9%): [152.000, 152.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.340 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.197), stdev = 0.088
[info]   CI (99.9%): [≈ 0, 0.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.007 ±(99.9%) 0.064 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.037), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   877.014 ±(99.9%) 717.412 MB/sec [Average]
[info]   (min, avg, max) = (672.698, 877.014, 1020.993), stdev = 186.310
[info]   CI (99.9%): [159.602, 1594.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   159.436 ±(99.9%) 131.029 B/op [Average]
[info]   (min, avg, max) = (121.224, 159.436, 190.773), stdev = 34.028
[info]   CI (99.9%): [28.406, 290.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.171 ±(99.9%) 1.232 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.171, 0.735), stdev = 0.320
[info]   CI (99.9%): [≈ 0, 1.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 9.000), stdev = 2.490
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 92.70% complete, ETA 00:06:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5861069.281 ops/s
[info] # Warmup Iteration   2: 8131552.712 ops/s
[info] # Warmup Iteration   3: 8183214.019 ops/s
[info] Iteration   1: 8183054.085 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 8179740.298 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 8181641.550 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 8183218.494 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 8181123.195 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   8181755.525 ±(99.9%) 5546.968 ops/s [Average]
[info]   (min, avg, max) = (8179740.298, 8181755.525, 8183218.494), stdev = 1440.530
[info]   CI (99.9%): [8176208.557, 8187302.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 92.95% complete, ETA 00:06:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2145613.712 ops/s
[info] # Warmup Iteration   2: 3087246.322 ops/s
[info] # Warmup Iteration   3: 3128583.475 ops/s
[info] Iteration   1: 3144463.433 ops/s
[info]                  ·gc.alloc.rate:            1006.803 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.992 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 505.096 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 3198523.893 ops/s
[info]                  ·gc.alloc.rate:            1024.045 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.945 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 496.568 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 3198986.834 ops/s
[info]                  ·gc.alloc.rate:                                  1024.270 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.063 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       498.457 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.966 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 3241962.716 ops/s
[info]                  ·gc.alloc.rate:                                  1038.171 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.060 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.179 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       495.751 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 3220635.214 ops/s
[info]                  ·gc.alloc.rate:            1031.217 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.013 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 499.013 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   3200914.418 ±(99.9%) 139768.514 ops/s [Average]
[info]   (min, avg, max) = (3144463.433, 3200914.418, 3241962.716), stdev = 36297.439
[info]   CI (99.9%): [3061145.904, 3340682.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1024.901 ±(99.9%) 44.932 MB/sec [Average]
[info]   (min, avg, max) = (1006.803, 1024.901, 1038.171), stdev = 11.669
[info]   CI (99.9%): [979.969, 1069.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   504.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
[info]   CI (99.9%): [504.000, 504.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.130 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.063), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.012 ±(99.9%) 0.063 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.031), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1014.627 ±(99.9%) 23.609 MB/sec [Average]
[info]   (min, avg, max) = (1008.945, 1014.627, 1021.179), stdev = 6.131
[info]   CI (99.9%): [991.018, 1038.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   498.977 ±(99.9%) 14.138 B/op [Average]
[info]   (min, avg, max) = (495.751, 498.977, 505.096), stdev = 3.672
[info]   CI (99.9%): [484.839, 513.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.393 ±(99.9%) 3.386 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.393, 1.966), stdev = 0.879
[info]   CI (99.9%): [≈ 0, 3.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.200, 11.000), stdev = 4.382
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Run progress: 93.20% complete, ETA 00:05:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 521383.508 ops/s
[info] # Warmup Iteration   2: 752244.071 ops/s
[info] # Warmup Iteration   3: 760308.645 ops/s
[info] Iteration   1: 759530.351 ops/s
[info]                  ·gc.alloc.rate:            1274.376 MB/sec
[info]                  ·gc.alloc.rate.norm:       2640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.766 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2792.035 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 761713.288 ops/s
[info]                  ·gc.alloc.rate:                                  1277.318 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2640.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.046 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.095 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.204 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2096.189 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                6.882 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 766506.109 ops/s
[info]                  ·gc.alloc.rate:                                  1285.583 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2640.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.034 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.070 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.399 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2795.692 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 763288.046 ops/s
[info]                  ·gc.alloc.rate:            1280.159 MB/sec
[info]                  ·gc.alloc.rate.norm:       2640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.384 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2807.506 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 784289.838 ops/s
[info]                  ·gc.alloc.rate:            1315.715 MB/sec
[info]                  ·gc.alloc.rate.norm:       2640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.704 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2732.278 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   767065.527 ±(99.9%) 38346.524 ops/s [Average]
[info]   (min, avg, max) = (759530.351, 767065.527, 784289.838), stdev = 9958.470
[info]   CI (99.9%): [728719.003, 805412.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   1286.630 ±(99.9%) 64.600 MB/sec [Average]
[info]   (min, avg, max) = (1274.376, 1286.630, 1315.715), stdev = 16.776
[info]   CI (99.9%): [1222.031, 1351.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2640.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2640.001, 2640.001, 2640.001), stdev = 0.001
[info]   CI (99.9%): [2640.000, 2640.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.086 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.046), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.033 ±(99.9%) 0.177 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.095), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1289.291 ±(99.9%) 592.588 MB/sec [Average]
[info]   (min, avg, max) = (1014.204, 1289.291, 1361.704), stdev = 153.893
[info]   CI (99.9%): [696.703, 1881.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2644.740 ±(99.9%) 1186.140 B/op [Average]
[info]   (min, avg, max) = (2096.189, 2644.740, 2807.506), stdev = 308.037
[info]   CI (99.9%): [1458.600, 3830.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.376 ±(99.9%) 11.851 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.376, 6.882), stdev = 3.078
[info]   CI (99.9%): [≈ 0, 13.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 13.000), stdev = 4.243
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava
[info] # Run progress: 93.45% complete, ETA 00:05:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.854 ops/s
[info] # Warmup Iteration   2: 2903786.652 ops/s
[info] # Warmup Iteration   3: 2980302.160 ops/s
[info] Iteration   1: 3008546.638 ops/s
[info]                  ·gc.alloc.rate:                   841.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             666.860 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        348.819 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.348 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 2957843.077 ops/s
[info]                  ·gc.alloc.rate:            826.968 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.244 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 532.726 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 2967361.006 ops/s
[info]                  ·gc.alloc.rate:            829.497 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 354.018 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 2977214.139 ops/s
[info]                  ·gc.alloc.rate:                   832.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1000.415 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        528.909 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.465 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   5: 2983530.659 ops/s
[info]                  ·gc.alloc.rate:                                  834.063 MB/sec
[info]                  ·gc.alloc.rate.norm:                             440.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.479 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.253 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            678.084 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       357.715 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.406 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava":
[info]   2978899.104 ±(99.9%) 74062.376 ops/s [Average]
[info]   (min, avg, max) = (2957843.077, 2978899.104, 3008546.638), stdev = 19233.764
[info]   CI (99.9%): [2904836.727, 3052961.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   832.790 ±(99.9%) 20.824 MB/sec [Average]
[info]   (min, avg, max) = (826.968, 832.790, 841.176), stdev = 5.408
[info]   CI (99.9%): [811.967, 853.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   440.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.000, 440.000, 440.000), stdev = 0.001
[info]   CI (99.9%): [440.000, 440.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.096 ±(99.9%) 0.825 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.096, 0.479), stdev = 0.214
[info]   CI (99.9%): [≈ 0, 0.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.051 ±(99.9%) 0.435 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.051, 0.253), stdev = 0.113
[info]   CI (99.9%): [≈ 0, 0.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   802.801 ±(99.9%) 696.311 MB/sec [Average]
[info]   (min, avg, max) = (666.860, 802.801, 1001.244), stdev = 180.830
[info]   CI (99.9%): [106.490, 1499.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   424.438 ±(99.9%) 374.174 B/op [Average]
[info]   (min, avg, max) = (348.819, 424.438, 532.726), stdev = 97.172
[info]   CI (99.9%): [50.263, 798.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 9.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.844 ±(99.9%) 4.135 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.844, 2.465), stdev = 1.074
[info]   CI (99.9%): [≈ 0, 4.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   54.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 10.800, 15.000), stdev = 4.266
[info]   CI (99.9%): [54.000, 54.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 93.70% complete, ETA 00:05:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 452079.644 ops/s
[info] # Warmup Iteration   2: 1052859.770 ops/s
[info] # Warmup Iteration   3: 1050730.249 ops/s
[info] Iteration   1: 1054917.410 ops/s
[info]                  ·gc.alloc.rate:            777.502 MB/sec
[info]                  ·gc.alloc.rate.norm:       1160.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.186 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1505.664 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 1067199.763 ops/s
[info]                  ·gc.alloc.rate:            786.508 MB/sec
[info]                  ·gc.alloc.rate.norm:       1160.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.737 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 992.201 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 1064070.408 ops/s
[info]                  ·gc.alloc.rate:            784.270 MB/sec
[info]                  ·gc.alloc.rate.norm:       1160.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.783 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 995.103 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1059456.280 ops/s
[info]                  ·gc.alloc.rate:                   780.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.339 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1499.213 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.937 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 1068045.947 ops/s
[info]                  ·gc.alloc.rate:                                  787.262 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.146 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.216 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.845 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1003.198 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1062737.962 ±(99.9%) 21247.414 ops/s [Average]
[info]   (min, avg, max) = (1054917.410, 1062737.962, 1068045.947), stdev = 5517.886
[info]   CI (99.9%): [1041490.548, 1083985.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   783.302 ±(99.9%) 15.641 MB/sec [Average]
[info]   (min, avg, max) = (777.502, 783.302, 787.262), stdev = 4.062
[info]   CI (99.9%): [767.661, 798.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1160.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1160.000, 1160.000, 1160.000), stdev = 0.001
[info]   CI (99.9%): [1160.000, 1160.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.252 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.146), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.043 ±(99.9%) 0.371 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.043, 0.216), stdev = 0.096
[info]   CI (99.9%): [≈ 0, 0.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   808.978 ±(99.9%) 704.144 MB/sec [Average]
[info]   (min, avg, max) = (672.737, 808.978, 1009.339), stdev = 182.864
[info]   CI (99.9%): [104.834, 1513.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1199.076 ±(99.9%) 1066.511 B/op [Average]
[info]   (min, avg, max) = (992.201, 1199.076, 1505.664), stdev = 276.969
[info]   CI (99.9%): [132.565, 2265.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.187 ±(99.9%) 10.225 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.187, 5.937), stdev = 2.655
[info]   CI (99.9%): [≈ 0, 11.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.800, 16.000), stdev = 4.970
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 93.95% complete, ETA 00:05:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1713535.048 ops/s
[info] # Warmup Iteration   2: 1824863.436 ops/s
[info] # Warmup Iteration   3: 1809489.746 ops/s
[info] Iteration   1: 1823250.480 ops/s
[info]                  ·gc.alloc.rate:            509.658 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.848 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 581.750 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 1845236.617 ops/s
[info]                  ·gc.alloc.rate:            515.940 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.111 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 287.492 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 1841433.825 ops/s
[info]                  ·gc.alloc.rate:            514.629 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.921 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 576.193 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 1843661.784 ops/s
[info]                  ·gc.alloc.rate:            515.607 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.184 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 287.740 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1838621.859 ops/s
[info]                  ·gc.alloc.rate:            513.949 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 577.084 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   1838440.913 ±(99.9%) 34072.140 ops/s [Average]
[info]   (min, avg, max) = (1823250.480, 1838440.913, 1845236.617), stdev = 8848.426
[info]   CI (99.9%): [1804368.774, 1872513.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   513.957 ±(99.9%) 9.740 MB/sec [Average]
[info]   (min, avg, max) = (509.658, 513.957, 515.940), stdev = 2.529
[info]   CI (99.9%): [504.216, 523.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   440.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.000, 440.000, 440.000), stdev = 0.001
[info]   CI (99.9%): [440.000, 440.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   539.227 ±(99.9%) 710.339 MB/sec [Average]
[info]   (min, avg, max) = (337.111, 539.227, 674.072), stdev = 184.473
[info]   CI (99.9%): [≈ 0, 1249.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   462.052 ±(99.9%) 613.220 B/op [Average]
[info]   (min, avg, max) = (287.492, 462.052, 581.750), stdev = 159.251
[info]   CI (99.9%): [≈ 0, 1075.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Run progress: 94.21% complete, ETA 00:04:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 617332.945 ops/s
[info] # Warmup Iteration   2: 1084499.915 ops/s
[info] # Warmup Iteration   3: 1105447.078 ops/s
[info] Iteration   1: 1108118.347 ops/s
[info]                  ·gc.alloc.rate:            788.481 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.711 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 955.554 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1089186.025 ops/s
[info]                  ·gc.alloc.rate:            775.066 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.809 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 972.235 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1079335.152 ops/s
[info]                  ·gc.alloc.rate:            767.976 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.739 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 981.109 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1078179.352 ops/s
[info]                  ·gc.alloc.rate:            767.050 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.954 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1473.214 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   5: 1109709.467 ops/s
[info]                  ·gc.alloc.rate:                                  789.656 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.045 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.717 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       959.814 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                5.668 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1092905.669 ±(99.9%) 58671.871 ops/s [Average]
[info]   (min, avg, max) = (1078179.352, 1092905.669, 1109709.467), stdev = 15236.898
[info]   CI (99.9%): [1034233.798, 1151577.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   777.646 ±(99.9%) 41.921 MB/sec [Average]
[info]   (min, avg, max) = (767.050, 777.646, 789.656), stdev = 10.887
[info]   CI (99.9%): [735.725, 819.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.077 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.045), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.013 ±(99.9%) 0.110 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.064), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   740.786 ±(99.9%) 577.290 MB/sec [Average]
[info]   (min, avg, max) = (672.711, 740.786, 1008.954), stdev = 149.920
[info]   CI (99.9%): [163.496, 1318.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   1068.385 ±(99.9%) 872.293 B/op [Average]
[info]   (min, avg, max) = (955.554, 1068.385, 1473.214), stdev = 226.532
[info]   CI (99.9%): [196.092, 1940.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.134 ±(99.9%) 9.761 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.134, 5.668), stdev = 2.535
[info]   CI (99.9%): [≈ 0, 10.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.400, 12.000), stdev = 2.191
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Run progress: 94.46% complete, ETA 00:04:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 989392.510 ops/s
[info] # Warmup Iteration   2: 1674551.061 ops/s
[info] # Warmup Iteration   3: 1683034.928 ops/s
[info] Iteration   1: 1683590.055 ops/s
[info]                  ·gc.alloc.rate:            1368.994 MB/sec
[info]                  ·gc.alloc.rate.norm:       1280.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.972 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1260.344 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 1683812.715 ops/s
[info]                  ·gc.alloc.rate:                                  1369.165 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1280.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.072 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.068 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1354.634 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1266.415 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.113 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 1708259.455 ops/s
[info]                  ·gc.alloc.rate:                                  1389.033 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1280.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.023 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1254.482 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 1695457.713 ops/s
[info]                  ·gc.alloc.rate:            1378.799 MB/sec
[info]                  ·gc.alloc.rate.norm:       1280.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.492 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1263.933 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1707309.849 ops/s
[info]                  ·gc.alloc.rate:                                  1388.419 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1280.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.421 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1255.110 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1695685.957 ±(99.9%) 46389.654 ops/s [Average]
[info]   (min, avg, max) = (1683590.055, 1695685.957, 1708259.455), stdev = 12047.246
[info]   CI (99.9%): [1649296.303, 1742075.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1378.882 ±(99.9%) 37.835 MB/sec [Average]
[info]   (min, avg, max) = (1368.994, 1378.882, 1389.033), stdev = 9.826
[info]   CI (99.9%): [1341.047, 1416.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1280.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1280.000, 1280.000, 1280.000), stdev = 0.001
[info]   CI (99.9%): [1280.000, 1280.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.120 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.072), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.018 ±(99.9%) 0.112 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.068), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1357.372 ±(99.9%) 23.183 MB/sec [Average]
[info]   (min, avg, max) = (1347.972, 1357.372, 1361.492), stdev = 6.020
[info]   CI (99.9%): [1334.189, 1380.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1260.057 ±(99.9%) 20.291 B/op [Average]
[info]   (min, avg, max) = (1254.482, 1260.057, 1266.415), stdev = 5.270
[info]   CI (99.9%): [1239.766, 1280.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.623 ±(99.9%) 5.361 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.623, 3.113), stdev = 1.392
[info]   CI (99.9%): [≈ 0, 5.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 17.000), stdev = 6.164
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava
[info] # Run progress: 94.71% complete, ETA 00:04:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.901 ops/s
[info] # Warmup Iteration   2: 2863372.670 ops/s
[info] # Warmup Iteration   3: 2949160.336 ops/s
[info] Iteration   1: 2971460.498 ops/s
[info]                  ·gc.alloc.rate:                   694.725 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             666.773 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        353.194 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.353 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 2944775.603 ops/s
[info]                  ·gc.alloc.rate:                   688.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             666.822 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        356.401 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.356 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 2963781.879 ops/s
[info]                  ·gc.alloc.rate:            693.182 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.679 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 354.461 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 2960832.661 ops/s
[info]                  ·gc.alloc.rate:            692.256 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.447 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 354.811 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 2975562.423 ops/s
[info]                  ·gc.alloc.rate:                   695.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             666.734 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        352.700 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.352 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava":
[info]   2963282.613 ±(99.9%) 45822.359 ops/s [Average]
[info]   (min, avg, max) = (2944775.603, 2963282.613, 2975562.423), stdev = 11899.921
[info]   CI (99.9%): [2917460.254, 3009104.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   692.869 ±(99.9%) 10.645 MB/sec [Average]
[info]   (min, avg, max) = (688.525, 692.869, 695.658), stdev = 2.764
[info]   CI (99.9%): [682.224, 703.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   368.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (368.000, 368.000, 368.000), stdev = 0.001
[info]   CI (99.9%): [368.000, 368.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   667.091 ±(99.9%) 1.693 MB/sec [Average]
[info]   (min, avg, max) = (666.734, 667.091, 667.679), stdev = 0.440
[info]   CI (99.9%): [665.398, 668.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   354.313 ±(99.9%) 5.608 B/op [Average]
[info]   (min, avg, max) = (352.700, 354.313, 356.401), stdev = 1.456
[info]   CI (99.9%): [348.705, 359.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.400 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.212 ±(99.9%) 0.746 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.212, 0.356), stdev = 0.194
[info]   CI (99.9%): [≈ 0, 0.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 94.96% complete, ETA 00:04:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1022824.898 ops/s
[info] # Warmup Iteration   2: 2413379.191 ops/s
[info] # Warmup Iteration   3: 2403832.289 ops/s
[info] Iteration   1: 2421506.864 ops/s
[info]                  ·gc.alloc.rate:            972.175 MB/sec
[info]                  ·gc.alloc.rate.norm:       632.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.650 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 437.282 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 2418518.287 ops/s
[info]                  ·gc.alloc.rate:            971.114 MB/sec
[info]                  ·gc.alloc.rate.norm:       632.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.147 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 656.752 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 2411446.306 ops/s
[info]                  ·gc.alloc.rate:                   968.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              632.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.076 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        658.693 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.609 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 2444073.206 ops/s
[info]                  ·gc.alloc.rate:                                  981.337 MB/sec
[info]                  ·gc.alloc.rate.norm:                             632.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.151 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.097 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.105 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       657.612 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 2432288.508 ops/s
[info]                  ·gc.alloc.rate:            976.620 MB/sec
[info]                  ·gc.alloc.rate.norm:       632.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.096 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 660.782 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   2425566.634 ±(99.9%) 49207.756 ops/s [Average]
[info]   (min, avg, max) = (2411446.306, 2425566.634, 2444073.206), stdev = 12779.098
[info]   CI (99.9%): [2376358.878, 2474774.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   973.886 ±(99.9%) 19.834 MB/sec [Average]
[info]   (min, avg, max) = (968.183, 973.886, 981.337), stdev = 5.151
[info]   CI (99.9%): [954.052, 993.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   632.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (632.000, 632.000, 632.000), stdev = 0.001
[info]   CI (99.9%): [632.000, 632.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.259 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.151), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.019 ±(99.9%) 0.167 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.097), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   946.615 ±(99.9%) 590.182 MB/sec [Average]
[info]   (min, avg, max) = (672.650, 946.615, 1021.105), stdev = 153.268
[info]   CI (99.9%): [356.433, 1536.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   614.224 ±(99.9%) 380.925 B/op [Average]
[info]   (min, avg, max) = (437.282, 614.224, 660.782), stdev = 98.925
[info]   CI (99.9%): [233.299, 995.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.522 ±(99.9%) 4.492 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.522, 2.609), stdev = 1.167
[info]   CI (99.9%): [≈ 0, 5.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.600, 13.000), stdev = 5.030
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 95.21% complete, ETA 00:04:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1937526.505 ops/s
[info] # Warmup Iteration   2: 2811319.378 ops/s
[info] # Warmup Iteration   3: 2896052.999 ops/s
[info] Iteration   1: 2910294.288 ops/s
[info]                  ·gc.alloc.rate:            680.392 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 364.194 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 2903481.122 ops/s
[info]                  ·gc.alloc.rate:            678.691 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.590 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 364.692 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 2910758.386 ops/s
[info]                  ·gc.alloc.rate:            680.501 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.695 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 363.779 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 2896372.913 ops/s
[info]                  ·gc.alloc.rate:            677.172 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 365.589 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 2840592.169 ops/s
[info]                  ·gc.alloc.rate:            664.100 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.695 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 372.763 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   2892299.776 ±(99.9%) 113574.615 ops/s [Average]
[info]   (min, avg, max) = (2840592.169, 2892299.776, 2910758.386), stdev = 29494.967
[info]   CI (99.9%): [2778725.160, 3005874.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   676.171 ±(99.9%) 26.512 MB/sec [Average]
[info]   (min, avg, max) = (664.100, 676.171, 680.501), stdev = 6.885
[info]   CI (99.9%): [649.659, 702.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   368.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (368.000, 368.000, 368.000), stdev = 0.001
[info]   CI (99.9%): [368.000, 368.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   672.814 ±(99.9%) 1.181 MB/sec [Average]
[info]   (min, avg, max) = (672.590, 672.814, 673.354), stdev = 0.307
[info]   CI (99.9%): [671.633, 673.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   366.203 ±(99.9%) 14.356 B/op [Average]
[info]   (min, avg, max) = (363.779, 366.203, 372.763), stdev = 3.728
[info]   CI (99.9%): [351.847, 380.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 95.47% complete, ETA 00:03:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2164790.482 ops/s
[info] # Warmup Iteration   2: 3001371.390 ops/s
[info] # Warmup Iteration   3: 3003852.316 ops/s
[info] Iteration   1: 3004044.086 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2980503.352 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3003560.468 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3002976.478 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2909078.003 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2980032.477 ±(99.9%) 157492.160 ops/s [Average]
[info]   (min, avg, max) = (2909078.003, 2980032.477, 3004044.086), stdev = 40900.214
[info]   CI (99.9%): [2822540.317, 3137524.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 95.72% complete, ETA 00:03:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1561407.797 ops/s
[info] # Warmup Iteration   2: 2225990.404 ops/s
[info] # Warmup Iteration   3: 2277639.915 ops/s
[info] Iteration   1: 2266331.423 ops/s
[info]                  ·gc.alloc.rate:            1036.604 MB/sec
[info]                  ·gc.alloc.rate.norm:       720.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 700.863 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 2228293.609 ops/s
[info]                  ·gc.alloc.rate:            1019.184 MB/sec
[info]                  ·gc.alloc.rate.norm:       720.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.961 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 712.778 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 2268557.290 ops/s
[info]                  ·gc.alloc.rate:                                  1037.592 MB/sec
[info]                  ·gc.alloc.rate.norm:                             720.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.040 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1012.934 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       702.890 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.773 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 2268480.139 ops/s
[info]                  ·gc.alloc.rate:                                  1037.920 MB/sec
[info]                  ·gc.alloc.rate.norm:                             720.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.056 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.317 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       708.483 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 2244762.127 ops/s
[info]                  ·gc.alloc.rate:            1026.821 MB/sec
[info]                  ·gc.alloc.rate.norm:       720.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 715.953 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2255284.918 ±(99.9%) 69726.296 ops/s [Average]
[info]   (min, avg, max) = (2228293.609, 2255284.918, 2268557.290), stdev = 18107.698
[info]   CI (99.9%): [2185558.621, 2325011.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1031.624 ±(99.9%) 32.095 MB/sec [Average]
[info]   (min, avg, max) = (1019.184, 1031.624, 1037.920), stdev = 8.335
[info]   CI (99.9%): [999.529, 1063.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   720.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (720.000, 720.000, 720.000), stdev = 0.001
[info]   CI (99.9%): [720.000, 720.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.103 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.056), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.013 ±(99.9%) 0.072 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.039), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1014.663 ±(99.9%) 23.741 MB/sec [Average]
[info]   (min, avg, max) = (1008.961, 1014.663, 1021.317), stdev = 6.165
[info]   CI (99.9%): [990.922, 1038.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   708.193 ±(99.9%) 24.595 B/op [Average]
[info]   (min, avg, max) = (700.863, 708.193, 715.953), stdev = 6.387
[info]   CI (99.9%): [683.599, 732.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.555 ±(99.9%) 4.775 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.555, 2.773), stdev = 1.240
[info]   CI (99.9%): [≈ 0, 5.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.200, 11.000), stdev = 4.382
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 95.97% complete, ETA 00:03:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5382.109 ops/s
[info] # Warmup Iteration   2: 8666.970 ops/s
[info] # Warmup Iteration   3: 10128.130 ops/s
[info] Iteration   1: 10047.137 ops/s
[info]                  ·gc.alloc.rate:                   1475.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              231048.041 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1685.052 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        263891.801 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 104.346 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         24.000 ms
[info] Iteration   2: 10935.389 ops/s
[info]                  ·gc.alloc.rate:                                  1602.281 MB/sec
[info]                  ·gc.alloc.rate.norm:                             230663.215 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.936 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       195487.470 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                479.371 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 11498.799 ops/s
[info]                  ·gc.alloc.rate:            1683.668 MB/sec
[info]                  ·gc.alloc.rate.norm:       230472.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.593 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 232925.724 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 11429.484 ops/s
[info]                  ·gc.alloc.rate:                                  1673.637 MB/sec
[info]                  ·gc.alloc.rate.norm:                             230486.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.954 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.561 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       234331.469 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 11512.560 ops/s
[info]                  ·gc.alloc.rate:                                  1685.954 MB/sec
[info]                  ·gc.alloc.rate.norm:                             230496.038 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.156 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.802 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       232662.760 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   11084.674 ±(99.9%) 2414.149 ops/s [Average]
[info]   (min, avg, max) = (10047.137, 11084.674, 11512.560), stdev = 626.947
[info]   CI (99.9%): [8670.525, 13498.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1624.174 ±(99.9%) 346.752 MB/sec [Average]
[info]   (min, avg, max) = (1475.332, 1624.174, 1685.954), stdev = 90.050
[info]   CI (99.9%): [1277.422, 1970.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   230633.069 ±(99.9%) 942.119 B/op [Average]
[info]   (min, avg, max) = (230472.038, 230633.069, 231048.041), stdev = 244.665
[info]   CI (99.9%): [229690.950, 231575.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.231 ±(99.9%) 6.224 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.231, 3.047), stdev = 1.616
[info]   CI (99.9%): [≈ 0, 7.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1629.589 ±(99.9%) 585.408 MB/sec [Average]
[info]   (min, avg, max) = (1357.936, 1629.589, 1701.802), stdev = 152.029
[info]   CI (99.9%): [1044.180, 2214.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   231859.845 ±(99.9%) 93470.079 B/op [Average]
[info]   (min, avg, max) = (195487.470, 231859.845, 263891.801), stdev = 24273.883
[info]   CI (99.9%): [138389.766, 325329.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   116.743 ±(99.9%) 799.738 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 116.743, 479.371), stdev = 207.689
[info]   CI (99.9%): [≈ 0, 916.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 9.200, 24.000), stdev = 8.408
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 96.22% complete, ETA 00:03:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4641.965 ops/s
[info] # Warmup Iteration   2: 13851.717 ops/s
[info] # Warmup Iteration   3: 14283.961 ops/s
[info] Iteration   1: 14377.295 ops/s
[info]                  ·gc.alloc.rate:                   202.980 MB/sec
[info]                  ·gc.alloc.rate.norm:              22224.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:             334.330 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        36605.365 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 145.838 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 14354.564 ops/s
[info]                  ·gc.alloc.rate:      202.728 MB/sec
[info]                  ·gc.alloc.rate.norm: 22224.115 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 14182.467 ops/s
[info]                  ·gc.alloc.rate:            200.390 MB/sec
[info]                  ·gc.alloc.rate.norm:       22240.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.693 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37256.419 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 14463.293 ops/s
[info]                  ·gc.alloc.rate:      204.328 MB/sec
[info]                  ·gc.alloc.rate.norm: 22240.030 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 14260.876 ops/s
[info]                  ·gc.alloc.rate:            201.484 MB/sec
[info]                  ·gc.alloc.rate.norm:       22240.040 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.632 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37047.480 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   14327.699 ±(99.9%) 417.953 ops/s [Average]
[info]   (min, avg, max) = (14182.467, 14327.699, 14463.293), stdev = 108.541
[info]   CI (99.9%): [13909.746, 14745.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   202.382 ±(99.9%) 5.788 MB/sec [Average]
[info]   (min, avg, max) = (200.390, 202.382, 204.328), stdev = 1.503
[info]   CI (99.9%): [196.594, 208.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   22233.649 ±(99.9%) 33.662 B/op [Average]
[info]   (min, avg, max) = (22224.031, 22233.649, 22240.040), stdev = 8.742
[info]   CI (99.9%): [22199.987, 22267.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   201.131 ±(99.9%) 707.007 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.131, 335.693), stdev = 183.607
[info]   CI (99.9%): [≈ 0, 908.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   22181.853 ±(99.9%) 77977.591 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22181.853, 37256.419), stdev = 20250.533
[info]   CI (99.9%): [≈ 0, 100159.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 2.294 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 1.332), stdev = 0.596
[info]   CI (99.9%): [≈ 0, 2.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   29.168 ±(99.9%) 251.142 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 29.168, 145.838), stdev = 65.221
[info]   CI (99.9%): [≈ 0, 280.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 6.000), stdev = 2.950
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 96.47% complete, ETA 00:03:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18593.872 ops/s
[info] # Warmup Iteration   2: 22261.863 ops/s
[info] # Warmup Iteration   3: 37991.334 ops/s
[info] Iteration   1: 37961.128 ops/s
[info]                  ·gc.alloc.rate:            351.537 MB/sec
[info]                  ·gc.alloc.rate.norm:       14576.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.019 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13974.017 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 38094.759 ops/s
[info]                  ·gc.alloc.rate:            352.697 MB/sec
[info]                  ·gc.alloc.rate.norm:       14576.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.968 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13925.970 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 37999.031 ops/s
[info]                  ·gc.alloc.rate:            351.871 MB/sec
[info]                  ·gc.alloc.rate.norm:       14576.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.011 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13960.413 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 37998.467 ops/s
[info]                  ·gc.alloc.rate:            351.882 MB/sec
[info]                  ·gc.alloc.rate.norm:       14576.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.029 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13960.780 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 37998.180 ops/s
[info]                  ·gc.alloc.rate:            351.865 MB/sec
[info]                  ·gc.alloc.rate.norm:       14576.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.013 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13960.780 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   38010.313 ±(99.9%) 192.197 ops/s [Average]
[info]   (min, avg, max) = (37961.128, 38010.313, 38094.759), stdev = 49.913
[info]   CI (99.9%): [37818.116, 38202.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   351.970 ±(99.9%) 1.662 MB/sec [Average]
[info]   (min, avg, max) = (351.537, 351.970, 352.697), stdev = 0.432
[info]   CI (99.9%): [350.309, 353.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14576.012 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (14576.011, 14576.012, 14576.014), stdev = 0.002
[info]   CI (99.9%): [14576.006, 14576.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   337.008 ±(99.9%) 0.090 MB/sec [Average]
[info]   (min, avg, max) = (336.968, 337.008, 337.029), stdev = 0.023
[info]   CI (99.9%): [336.918, 337.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   13956.392 ±(99.9%) 69.173 B/op [Average]
[info]   (min, avg, max) = (13925.970, 13956.392, 13974.017), stdev = 17.964
[info]   CI (99.9%): [13887.219, 14025.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 96.73% complete, ETA 00:02:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 593.718 ops/s
[info] # Warmup Iteration   2: 2620.313 ops/s
[info] # Warmup Iteration   3: 2395.830 ops/s
[info] Iteration   1: 2346.493 ops/s
[info]                  ·gc.alloc.rate:            744.897 MB/sec
[info]                  ·gc.alloc.rate.norm:       499456.511 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.654 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 450347.085 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  34.000 ms
[info] Iteration   2: 2924.563 ops/s
[info]                  ·gc.alloc.rate:            927.908 MB/sec
[info]                  ·gc.alloc.rate.norm:       499181.553 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.219 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 541847.885 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   3: 2988.315 ops/s
[info]                  ·gc.alloc.rate:            947.981 MB/sec
[info]                  ·gc.alloc.rate.norm:       499144.147 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 530427.204 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   4: 2978.341 ops/s
[info]                  ·gc.alloc.rate:                   944.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              499144.137 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.485 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        534319.694 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2463.925 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         24.000 ms
[info] Iteration   5: 3019.864 ops/s
[info]                  ·gc.alloc.rate:                                  958.096 MB/sec
[info]                  ·gc.alloc.rate.norm:                             499144.146 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.067 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 34.696 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.899 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       354731.768 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   2851.515 ±(99.9%) 1095.106 ops/s [Average]
[info]   (min, avg, max) = (2346.493, 2851.515, 3019.864), stdev = 284.396
[info]   CI (99.9%): [1756.409, 3946.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   904.756 ±(99.9%) 346.643 MB/sec [Average]
[info]   (min, avg, max) = (744.897, 904.756, 958.096), stdev = 90.022
[info]   CI (99.9%): [558.113, 1251.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   499214.099 ±(99.9%) 525.526 B/op [Average]
[info]   (min, avg, max) = (499144.137, 499214.099, 499456.511), stdev = 136.477
[info]   CI (99.9%): [498688.573, 499739.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.115 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.067), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   6.939 ±(99.9%) 59.748 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.939, 34.696), stdev = 15.516
[info]   CI (99.9%): [≈ 0, 66.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   875.730 ±(99.9%) 701.252 MB/sec [Average]
[info]   (min, avg, max) = (671.654, 875.730, 1011.485), stdev = 182.113
[info]   CI (99.9%): [174.479, 1576.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   482334.727 ±(99.9%) 309629.027 B/op [Average]
[info]   (min, avg, max) = (354731.768, 482334.727, 541847.885), stdev = 80409.675
[info]   CI (99.9%): [172705.700, 791963.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.032 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.664), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   492.785 ±(99.9%) 4243.027 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 492.785, 2463.925), stdev = 1101.901
[info]   CI (99.9%): [≈ 0, 4735.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   107.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (14.000, 21.400, 34.000), stdev = 7.925
[info]   CI (99.9%): [107.000, 107.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 96.98% complete, ETA 00:02:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_3eb5d47b/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 18924.686 ops/s
[info] # Warmup Iteration   2: 55814.208 ops/s
[info] # Warmup Iteration   3: 56898.863 ops/s
[info] Iteration   1: 56772.370 ops/s
[info]                  ·gc.alloc.rate:            724.842 MB/sec
[info]                  ·gc.alloc.rate.norm:       20100.035 B/op
[info]                  ·gc.churn.G1_Old_Gen:      669.948 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18577.825 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 56693.311 ops/s
[info]                  ·gc.alloc.rate:            723.926 MB/sec
[info]                  ·gc.alloc.rate.norm:       20099.944 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18603.052 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 55554.410 ops/s
[info]                  ·gc.alloc.rate:            709.442 MB/sec
[info]                  ·gc.alloc.rate.norm:       20099.995 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18984.045 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 56007.134 ops/s
[info]                  ·gc.alloc.rate:            715.166 MB/sec
[info]                  ·gc.alloc.rate.norm:       20100.053 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18830.866 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 56996.992 ops/s
[info]                  ·gc.alloc.rate:                   727.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18504.174 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 110.363 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   56404.843 ±(99.9%) 2318.666 ops/s [Average]
[info]   (min, avg, max) = (55554.410, 56404.843, 56996.992), stdev = 602.150
[info]   CI (99.9%): [54086.178, 58723.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   720.244 ±(99.9%) 29.511 MB/sec [Average]
[info]   (min, avg, max) = (709.442, 720.244, 727.845), stdev = 7.664
[info]   CI (99.9%): [690.734, 749.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20100.009 ±(99.9%) 0.162 B/op [Average]
[info]   (min, avg, max) = (20099.944, 20100.009, 20100.053), stdev = 0.042
[info]   CI (99.9%): [20099.847, 20100.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   670.016 ±(99.9%) 0.171 MB/sec [Average]
[info]   (min, avg, max) = (669.948, 670.016, 670.057), stdev = 0.044
[info]   CI (99.9%): [669.846, 670.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   18699.992 ±(99.9%) 771.286 B/op [Average]
[info]   (min, avg, max) = (18504.174, 18699.992, 18984.045), stdev = 200.300
[info]   CI (99.9%): [17928.707, 19471.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   22.073 ±(99.9%) 190.052 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.073, 110.363), stdev = 49.356
[info]   CI (99.9%): [≈ 0, 212.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 10.000, 10.000), stdev = 0.001
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 97.23% complete, ETA 00:02:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69075.848 ops/s
[info] # Warmup Iteration   2: 88383.919 ops/s
[info] # Warmup Iteration   3: 87336.684 ops/s
[info] Iteration   1: 88814.298 ops/s
[info]                  ·gc.alloc.rate:            582.225 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.632 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11922.478 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 88577.912 ops/s
[info]                  ·gc.alloc.rate:            580.900 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.912 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11954.642 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 86735.389 ops/s
[info]                  ·gc.alloc.rate:            568.617 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.685 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12208.768 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 88199.761 ops/s
[info]                  ·gc.alloc.rate:            578.324 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6002.799 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 88523.133 ops/s
[info]                  ·gc.alloc.rate:            580.419 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.749 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11961.663 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   88170.099 ±(99.9%) 3201.602 ops/s [Average]
[info]   (min, avg, max) = (86735.389, 88170.099, 88814.298), stdev = 831.446
[info]   CI (99.9%): [84968.497, 91371.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   578.097 ±(99.9%) 21.109 MB/sec [Average]
[info]   (min, avg, max) = (568.617, 578.097, 582.225), stdev = 5.482
[info]   CI (99.9%): [556.988, 599.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10320.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10320.005, 10320.005, 10320.005), stdev = 0.001
[info]   CI (99.9%): [10320.004, 10320.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   605.474 ±(99.9%) 579.221 MB/sec [Average]
[info]   (min, avg, max) = (336.391, 605.474, 672.912), stdev = 150.422
[info]   CI (99.9%): [26.253, 1184.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   10810.070 ±(99.9%) 10357.423 B/op [Average]
[info]   (min, avg, max) = (6002.799, 10810.070, 12208.768), stdev = 2689.790
[info]   CI (99.9%): [452.647, 21167.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 7.000), stdev = 1.095
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97.48% complete, ETA 00:02:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 82860.257 ops/s
[info] # Warmup Iteration   2: 102311.046 ops/s
[info] # Warmup Iteration   3: 102446.616 ops/s
[info] Iteration   1: 102332.220 ops/s
[info]                  ·gc.alloc.rate:      6.761 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 102657.114 ops/s
[info]                  ·gc.alloc.rate:      6.784 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 102472.242 ops/s
[info]                  ·gc.alloc.rate:      6.770 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 102378.362 ops/s
[info]                  ·gc.alloc.rate:      6.764 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 102155.009 ops/s
[info]                  ·gc.alloc.rate:      6.749 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   102398.989 ±(99.9%) 711.078 ops/s [Average]
[info]   (min, avg, max) = (102155.009, 102398.989, 102657.114), stdev = 184.665
[info]   CI (99.9%): [101687.911, 103110.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   6.766 ±(99.9%) 0.050 MB/sec [Average]
[info]   (min, avg, max) = (6.749, 6.766, 6.784), stdev = 0.013
[info]   CI (99.9%): [6.716, 6.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   104.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.004, 104.004, 104.004), stdev = 0.001
[info]   CI (99.9%): [104.004, 104.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce
[info] # Run progress: 97.73% complete, ETA 00:01:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 265108.706 ops/s
[info] # Warmup Iteration   2: 317375.122 ops/s
[info] # Warmup Iteration   3: 318792.939 ops/s
[info] Iteration   1: 317699.952 ops/s
[info]                  ·gc.alloc.rate:                                  1701.690 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8432.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.116 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.576 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1694.883 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8398.270 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                16.500 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 316275.989 ops/s
[info]                  ·gc.alloc.rate:                                  1694.093 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8432.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.609 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8469.410 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 321165.987 ops/s
[info]                  ·gc.alloc.rate:                                  1720.191 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8432.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.504 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8340.400 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 316490.965 ops/s
[info]                  ·gc.alloc.rate:                                  1696.114 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8432.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.493 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8463.711 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 315059.813 ops/s
[info]                  ·gc.alloc.rate:                                  1687.965 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8432.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8502.147 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce":
[info]   317338.541 ±(99.9%) 8993.534 ops/s [Average]
[info]   (min, avg, max) = (315059.813, 317338.541, 321165.987), stdev = 2335.592
[info]   CI (99.9%): [308345.007, 326332.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1700.011 ±(99.9%) 47.372 MB/sec [Average]
[info]   (min, avg, max) = (1687.965, 1700.011, 1720.191), stdev = 12.302
[info]   CI (99.9%): [1652.639, 1747.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8432.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8432.001, 8432.001, 8432.001), stdev = 0.001
[info]   CI (99.9%): [8432.001, 8432.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.195 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.026, 0.116), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.128 ±(99.9%) 0.965 B/op [Average]
[info]   (min, avg, max) = (0.007, 0.128, 0.576), stdev = 0.250
[info]   CI (99.9%): [≈ 0, 1.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1700.499 ±(99.9%) 12.182 MB/sec [Average]
[info]   (min, avg, max) = (1694.883, 1700.499, 1702.493), stdev = 3.164
[info]   CI (99.9%): [1688.317, 1712.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8434.788 ±(99.9%) 249.663 B/op [Average]
[info]   (min, avg, max) = (8340.400, 8434.788, 8502.147), stdev = 64.837
[info]   CI (99.9%): [8185.125, 8684.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.300 ±(99.9%) 28.413 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.300, 16.500), stdev = 7.379
[info]   CI (99.9%): [≈ 0, 31.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala
[info] # Run progress: 97.98% complete, ETA 00:01:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 207116.773 ops/s
[info] # Warmup Iteration   2: 403386.073 ops/s
[info] # Warmup Iteration   3: 419583.448 ops/s
[info] Iteration   1: 416963.025 ops/s
[info]                  ·gc.alloc.rate:            508.627 MB/sec
[info]                  ·gc.alloc.rate.norm:       1920.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.379 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2534.365 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 417934.881 ops/s
[info]                  ·gc.alloc.rate:                   509.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              1920.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.637 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1264.215 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.508 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 406440.122 ops/s
[info]                  ·gc.alloc.rate:            495.890 MB/sec
[info]                  ·gc.alloc.rate.norm:       1920.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.189 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2602.604 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 407615.168 ops/s
[info]                  ·gc.alloc.rate:            497.330 MB/sec
[info]                  ·gc.alloc.rate.norm:       1920.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.779 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1296.313 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 405157.310 ops/s
[info]                  ·gc.alloc.rate:            494.352 MB/sec
[info]                  ·gc.alloc.rate.norm:       1920.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.577 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2608.321 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala":
[info]   410822.101 ±(99.9%) 23570.739 ops/s [Average]
[info]   (min, avg, max) = (405157.310, 410822.101, 417934.881), stdev = 6121.246
[info]   CI (99.9%): [387251.363, 434392.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   501.188 ±(99.9%) 28.440 MB/sec [Average]
[info]   (min, avg, max) = (494.352, 501.188, 509.742), stdev = 7.386
[info]   CI (99.9%): [472.748, 529.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1920.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1920.001, 1920.001, 1920.001), stdev = 0.001
[info]   CI (99.9%): [1920.001, 1920.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   537.312 ±(99.9%) 708.668 MB/sec [Average]
[info]   (min, avg, max) = (335.637, 537.312, 672.189), stdev = 184.039
[info]   CI (99.9%): [≈ 0, 1245.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2061.164 ±(99.9%) 2747.605 B/op [Average]
[info]   (min, avg, max) = (1264.215, 2061.164, 2608.321), stdev = 713.544
[info]   CI (99.9%): [≈ 0, 4808.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.502 ±(99.9%) 4.320 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.502, 2.508), stdev = 1.122
[info]   CI (99.9%): [≈ 0, 4.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 9.000), stdev = 2.490
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala
[info] # Run progress: 98.24% complete, ETA 00:01:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1046522.407 ops/s
[info] # Warmup Iteration   2: 1137634.875 ops/s
[info] # Warmup Iteration   3: 1143754.669 ops/s
[info] Iteration   1: 1139630.047 ops/s
[info]                  ·gc.alloc.rate:            596.539 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.988 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 930.981 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 1152565.946 ops/s
[info]                  ·gc.alloc.rate:            603.404 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.052 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 460.273 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 1149547.623 ops/s
[info]                  ·gc.alloc.rate:            601.853 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.135 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 922.961 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 1150947.395 ops/s
[info]                  ·gc.alloc.rate:            602.726 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.295 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 921.843 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 1148929.508 ops/s
[info]                  ·gc.alloc.rate:            601.491 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.095 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 923.464 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala":
[info]   1148324.104 ±(99.9%) 19475.754 ops/s [Average]
[info]   (min, avg, max) = (1139630.047, 1148324.104, 1152565.946), stdev = 5057.792
[info]   CI (99.9%): [1128848.349, 1167799.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   601.203 ±(99.9%) 10.444 MB/sec [Average]
[info]   (min, avg, max) = (596.539, 601.203, 603.404), stdev = 2.712
[info]   CI (99.9%): [590.758, 611.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   824.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (824.000, 824.000, 824.000), stdev = 0.001
[info]   CI (99.9%): [824.000, 824.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   606.713 ±(99.9%) 580.466 MB/sec [Average]
[info]   (min, avg, max) = (337.052, 606.713, 674.295), stdev = 150.745
[info]   CI (99.9%): [26.247, 1187.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   831.905 ±(99.9%) 800.085 B/op [Average]
[info]   (min, avg, max) = (460.273, 831.905, 930.981), stdev = 207.780
[info]   CI (99.9%): [31.819, 1631.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson
[info] # Run progress: 98.49% complete, ETA 00:01:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57246.396 ops/s
[info] # Warmup Iteration   2: 93127.793 ops/s
[info] # Warmup Iteration   3: 98380.131 ops/s
[info] Iteration   1: 99681.924 ops/s
[info]                  ·gc.alloc.rate:                                  3465.237 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54704.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.459 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       53744.542 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 97443.719 ops/s
[info]                  ·gc.alloc.rate:                                  3386.794 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54704.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.106 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.905 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54980.385 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 97614.622 ops/s
[info]                  ·gc.alloc.rate:            3392.296 MB/sec
[info]                  ·gc.alloc.rate.norm:       54704.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3403.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54882.398 B/op
[info]                  ·gc.count:                 10.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 97723.056 ops/s
[info]                  ·gc.alloc.rate:                                  3396.677 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54704.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.093 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54823.436 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   5: 97557.700 ops/s
[info]                  ·gc.alloc.rate:                                  3391.546 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54704.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.069 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.628 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54915.021 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson":
[info]   98004.204 ±(99.9%) 3632.216 ops/s [Average]
[info]   (min, avg, max) = (97443.719, 98004.204, 99681.924), stdev = 943.275
[info]   CI (99.9%): [94371.989, 101636.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3406.510 ±(99.9%) 127.132 MB/sec [Average]
[info]   (min, avg, max) = (3386.794, 3406.510, 3465.237), stdev = 33.016
[info]   CI (99.9%): [3279.377, 3533.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   54704.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (54704.004, 54704.004, 54704.005), stdev = 0.001
[info]   CI (99.9%): [54704.004, 54704.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.009 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.007), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.050 ±(99.9%) 0.153 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.106), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3404.089 ±(99.9%) 1.921 MB/sec [Average]
[info]   (min, avg, max) = (3403.358, 3404.089, 3404.628), stdev = 0.499
[info]   CI (99.9%): [3402.168, 3406.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   54669.156 ±(99.9%) 2002.241 B/op [Average]
[info]   (min, avg, max) = (53744.542, 54669.156, 54980.385), stdev = 519.976
[info]   CI (99.9%): [52666.916, 56671.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   50.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (10.000, 10.000, 10.000), stdev = 0.001
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce
[info] # Run progress: 98.74% complete, ETA 00:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 251539.702 ops/s
[info] # Warmup Iteration   2: 315422.332 ops/s
[info] # Warmup Iteration   3: 312477.148 ops/s
[info] Iteration   1: 304482.215 ops/s
[info]                  ·gc.alloc.rate:            755.387 MB/sec
[info]                  ·gc.alloc.rate.norm:       3904.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.222 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3484.522 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 309196.270 ops/s
[info]                  ·gc.alloc.rate:            766.781 MB/sec
[info]                  ·gc.alloc.rate.norm:       3904.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.945 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5147.142 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 312678.073 ops/s
[info]                  ·gc.alloc.rate:            775.478 MB/sec
[info]                  ·gc.alloc.rate.norm:       3904.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3393.168 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 319107.378 ops/s
[info]                  ·gc.alloc.rate:            791.455 MB/sec
[info]                  ·gc.alloc.rate.norm:       3904.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3324.839 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 317576.951 ops/s
[info]                  ·gc.alloc.rate:                                  787.624 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3904.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.170 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.845 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.685 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5044.342 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                16.506 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce":
[info]   312608.178 ±(99.9%) 23152.394 ops/s [Average]
[info]   (min, avg, max) = (304482.215, 312608.178, 319107.378), stdev = 6012.603
[info]   CI (99.9%): [289455.783, 335760.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   775.345 ±(99.9%) 57.179 MB/sec [Average]
[info]   (min, avg, max) = (755.387, 775.345, 791.455), stdev = 14.849
[info]   CI (99.9%): [718.166, 832.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3904.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3904.001, 3904.001, 3904.001), stdev = 0.001
[info]   CI (99.9%): [3904.001, 3904.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.293 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.170), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.169 ±(99.9%) 1.455 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.169, 0.845), stdev = 0.378
[info]   CI (99.9%): [≈ 0, 1.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   810.180 ±(99.9%) 717.621 MB/sec [Average]
[info]   (min, avg, max) = (674.007, 810.180, 1017.685), stdev = 186.364
[info]   CI (99.9%): [92.559, 1527.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4078.803 ±(99.9%) 3584.069 B/op [Average]
[info]   (min, avg, max) = (3324.839, 4078.803, 5147.142), stdev = 930.771
[info]   CI (99.9%): [494.733, 7662.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.301 ±(99.9%) 28.425 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.301, 16.506), stdev = 7.382
[info]   CI (99.9%): [≈ 0, 31.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.000, 10.000), stdev = 1.871
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala
[info] # Run progress: 98.99% complete, ETA 00:00:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 413697.368 ops/s
[info] # Warmup Iteration   2: 722642.108 ops/s
[info] # Warmup Iteration   3: 732797.570 ops/s
[info] Iteration   1: 733834.325 ops/s
[info]                  ·gc.alloc.rate:            559.410 MB/sec
[info]                  ·gc.alloc.rate.norm:       1200.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.326 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 721.459 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 734870.137 ops/s
[info]                  ·gc.alloc.rate:            560.303 MB/sec
[info]                  ·gc.alloc.rate.norm:       1200.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.130 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1439.499 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 735542.453 ops/s
[info]                  ·gc.alloc.rate:                   560.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1438.155 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.425 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 738194.932 ops/s
[info]                  ·gc.alloc.rate:            562.766 MB/sec
[info]                  ·gc.alloc.rate.norm:       1200.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.675 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 715.768 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 731960.567 ops/s
[info]                  ·gc.alloc.rate:            558.068 MB/sec
[info]                  ·gc.alloc.rate.norm:       1200.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.412 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1443.722 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala":
[info]   734880.483 ±(99.9%) 8832.223 ops/s [Average]
[info]   (min, avg, max) = (731960.567, 734880.483, 738194.932), stdev = 2293.700
[info]   CI (99.9%): [726048.260, 743712.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   560.259 ±(99.9%) 6.682 MB/sec [Average]
[info]   (min, avg, max) = (558.068, 560.259, 562.766), stdev = 1.735
[info]   CI (99.9%): [553.576, 566.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1200.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1200.001, 1200.001, 1200.001), stdev = 0.001
[info]   CI (99.9%): [1200.000, 1200.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   537.515 ±(99.9%) 708.354 MB/sec [Average]
[info]   (min, avg, max) = (335.675, 537.515, 672.130), stdev = 183.957
[info]   CI (99.9%): [≈ 0, 1245.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1151.721 ±(99.9%) 1522.472 B/op [Average]
[info]   (min, avg, max) = (715.768, 1151.721, 1443.722), stdev = 395.381
[info]   CI (99.9%): [≈ 0, 2674.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.285 ±(99.9%) 2.454 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.285, 1.425), stdev = 0.637
[info]   CI (99.9%): [≈ 0, 2.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 9.000), stdev = 2.490
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala
[info] # Run progress: 99.24% complete, ETA 00:00:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1729031.996 ops/s
[info] # Warmup Iteration   2: 1909294.857 ops/s
[info] # Warmup Iteration   3: 1944600.856 ops/s
[info] Iteration   1: 1936420.581 ops/s
[info]                  ·gc.alloc.rate:            895.537 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 820.248 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 1936037.462 ops/s
[info]                  ·gc.alloc.rate:                   895.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.985 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        820.427 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.542 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 1946726.231 ops/s
[info]                  ·gc.alloc.rate:            900.310 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 544.485 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 1915874.477 ops/s
[info]                  ·gc.alloc.rate:                                  886.486 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.091 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.075 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.551 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       835.633 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.283 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 1924561.888 ops/s
[info]                  ·gc.alloc.rate:                                  890.167 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.107 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       835.086 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala":
[info]   1931924.128 ±(99.9%) 45887.081 ops/s [Average]
[info]   (min, avg, max) = (1915874.477, 1931924.128, 1946726.231), stdev = 11916.729
[info]   CI (99.9%): [1886037.047, 1977811.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   893.563 ±(99.9%) 20.566 MB/sec [Average]
[info]   (min, avg, max) = (886.486, 893.563, 900.310), stdev = 5.341
[info]   CI (99.9%): [872.997, 914.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.152 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.091), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.018 ±(99.9%) 0.125 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.075), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   946.003 ±(99.9%) 587.244 MB/sec [Average]
[info]   (min, avg, max) = (673.359, 946.003, 1021.107), stdev = 152.505
[info]   CI (99.9%): [358.759, 1533.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   771.176 ±(99.9%) 488.826 B/op [Average]
[info]   (min, avg, max) = (544.485, 771.176, 835.633), stdev = 126.946
[info]   CI (99.9%): [282.350, 1260.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.691 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.998), stdev = 1.738
[info]   CI (99.9%): [≈ 0, 7.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.765 ±(99.9%) 5.496 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.765, 3.283), stdev = 1.427
[info]   CI (99.9%): [≈ 0, 6.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.200, 13.000), stdev = 4.087
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 99.50% complete, ETA 00:00:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1768575.674 ops/s
[info] # Warmup Iteration   2: 1969861.300 ops/s
[info] # Warmup Iteration   3: 1984810.063 ops/s
[info] Iteration   1: 1986618.821 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1987363.743 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1976073.453 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1967909.816 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1993222.899 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   1982237.746 ±(99.9%) 38957.753 ops/s [Average]
[info]   (min, avg, max) = (1967909.816, 1982237.746, 1993222.899), stdev = 10117.205
[info]   CI (99.9%): [1943279.993, 2021195.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson
[info] # Run progress: 99.75% complete, ETA 00:00:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 308386.494 ops/s
[info] # Warmup Iteration   2: 403791.359 ops/s
[info] # Warmup Iteration   3: 407697.189 ops/s
[info] Iteration   1: 410040.697 ops/s
[info]                  ·gc.alloc.rate:            612.763 MB/sec
[info]                  ·gc.alloc.rate.norm:       2352.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1291.085 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 407424.376 ops/s
[info]                  ·gc.alloc.rate:            608.930 MB/sec
[info]                  ·gc.alloc.rate.norm:       2352.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.869 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2598.963 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 420296.163 ops/s
[info]                  ·gc.alloc.rate:            628.080 MB/sec
[info]                  ·gc.alloc.rate.norm:       2352.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.751 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2519.284 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 420242.822 ops/s
[info]                  ·gc.alloc.rate:            628.038 MB/sec
[info]                  ·gc.alloc.rate.norm:       2352.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.825 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2519.728 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 420127.038 ops/s
[info]                  ·gc.alloc.rate:            627.714 MB/sec
[info]                  ·gc.alloc.rate.norm:       2352.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.629 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2520.291 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson":
[info]   415626.219 ±(99.9%) 24493.778 ops/s [Average]
[info]   (min, avg, max) = (407424.376, 415626.219, 420296.163), stdev = 6360.956
[info]   CI (99.9%): [391132.442, 440119.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   621.105 ±(99.9%) 36.440 MB/sec [Average]
[info]   (min, avg, max) = (608.930, 621.105, 628.080), stdev = 9.463
[info]   CI (99.9%): [584.665, 657.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2352.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2352.001, 2352.001, 2352.001), stdev = 0.001
[info]   CI (99.9%): [2352.001, 2352.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   605.488 ±(99.9%) 579.308 MB/sec [Average]
[info]   (min, avg, max) = (336.364, 605.488, 672.869), stdev = 150.445
[info]   CI (99.9%): [26.179, 1184.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2289.870 ±(99.9%) 2154.012 B/op [Average]
[info]   (min, avg, max) = (1291.085, 2289.870, 2598.963), stdev = 559.390
[info]   CI (99.9%): [135.858, 4443.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 8.000), stdev = 1.732
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # Run complete. Total time: 01:25:14
[info] Benchmark                                                                                                Mode  Cnt         Score          Error   Units
[info] AdtBenchmark.readCirce                                                                                  thrpt    5    715588.596 ±    25568.279   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                                   thrpt    5      1891.308 ±       68.627  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                                              thrpt    5      4160.001 ±        0.001    B/op
[info] AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       thrpt    5         0.027 ±        0.208  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  thrpt    5         0.059 ±        0.464    B/op
[info] AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                             thrpt    5      1904.636 ±      724.910  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                        thrpt    5      4188.927 ±     1568.734    B/op
[info] AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                      thrpt    5         0.799 ±        6.882  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                 thrpt    5         1.783 ±       15.349    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                                        thrpt    5        28.000                 counts
[info] AdtBenchmark.readCirce:·gc.time                                                                         thrpt    5        29.000                     ms
[info] AdtBenchmark.readJacksonScala                                                                           thrpt    5   1464958.152 ±    32984.311   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                                            thrpt    5      1042.351 ±       23.732  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       thrpt    5      1120.000 ±        0.001    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.035 ±        0.302  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5         0.038 ±        0.323    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      thrpt    5      1080.865 ±      565.562  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5      1161.843 ±      626.175    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                               thrpt    5         1.066 ±        7.821  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                          thrpt    5         1.147 ±        8.412    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                                 thrpt    5        16.000                 counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                                  thrpt    5        49.000                     ms
[info] AdtBenchmark.readJsoniterScala                                                                          thrpt    5   3321053.278 ±    48497.046   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                                           thrpt    5       219.447 ±        3.263  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      thrpt    5       104.000 ±        0.001    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                     thrpt    5       269.526 ±      580.176  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                thrpt    5       127.632 ±      274.744    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                              thrpt    5         0.133 ±        1.147  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                         thrpt    5         0.063 ±        0.544    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                                thrpt    5         4.000                 counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                                 thrpt    5        11.000                     ms
[info] AdtBenchmark.readPlayJson                                                                               thrpt    5    162510.374 ±     5148.043   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                                thrpt    5      1351.385 ±       42.998  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           thrpt    5     13088.003 ±        0.001    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    thrpt    5         0.028 ±        0.238  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               thrpt    5         0.275 ±        2.316    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          thrpt    5      1355.443 ±       32.362  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     thrpt    5     13127.595 ±      256.406    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                   thrpt    5         1.332 ±        8.883  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                              thrpt    5        13.009 ±       86.806    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                                     thrpt    5        20.000                 counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                                      thrpt    5        46.000                     ms
[info] AdtBenchmark.writeCirce                                                                                 thrpt    5    548629.360 ±    13329.436   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                                  thrpt    5      1753.822 ±       42.453  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                                             thrpt    5      5032.001 ±        0.001    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      thrpt    5         0.030 ±        0.175  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 thrpt    5         0.086 ±        0.499    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                            thrpt    5      1699.047 ±       23.347  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                       thrpt    5      4874.934 ±       84.137    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                     thrpt    5         0.666 ±        5.734  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                thrpt    5         1.927 ±       16.589    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                                       thrpt    5        25.000                 counts
[info] AdtBenchmark.writeCirce:·gc.time                                                                        thrpt    5        32.000                     ms
[info] AdtBenchmark.writeJacksonScala                                                                          thrpt    5   1723503.880 ±    68139.813   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                                           thrpt    5       613.198 ±       24.199  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      thrpt    5       560.000 ±        0.001    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     thrpt    5       604.284 ±      578.177  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                thrpt    5       551.708 ±      526.054    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                                thrpt    5         9.000                 counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                                 thrpt    5        42.000                     ms
[info] AdtBenchmark.writeJsoniterScala                                                                         thrpt    5   7738297.840 ±   778599.942   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          thrpt    5       393.322 ±       39.405  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     thrpt    5        80.000 ±        0.001    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    thrpt    5       403.779 ±      578.848  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               thrpt    5        82.408 ±      122.566    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                             thrpt    5         0.133 ±        1.147  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        thrpt    5         0.027 ±        0.233    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                               thrpt    5         6.000                 counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                                thrpt    5        19.000                     ms
[info] AdtBenchmark.writeJsoniterScalaPrealloc                                                                 thrpt    5   6710622.165 ±   569064.527   ops/s
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             thrpt    5        ≈ 10⁻⁴                   B/op
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       thrpt    5           ≈ 0                 counts
[info] AdtBenchmark.writePlayJson                                                                              thrpt    5    302470.877 ±     6384.303   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                               thrpt    5       956.223 ±       20.136  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          thrpt    5      4976.001 ±        0.001    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   thrpt    5         0.042 ±        0.281  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              thrpt    5         0.221 ±        1.468    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         thrpt    5      1011.635 ±       25.249  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    thrpt    5      5264.380 ±      102.823    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                  thrpt    5         0.933 ±        8.031  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                             thrpt    5         4.873 ±       41.956    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                                    thrpt    5        15.000                 counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                                     thrpt    5        57.000                     ms
[info] AnyRefsBenchmark.readCirce                                                                              thrpt    5   1456748.256 ±    27360.954   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                               thrpt    5      2288.012 ±       42.258  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                                          thrpt    5      2472.000 ±        0.001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   thrpt    5         0.016 ±        0.130  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              thrpt    5         0.018 ±        0.141    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                         thrpt    5      2314.648 ±      586.494  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                    thrpt    5      2501.104 ±      653.722    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                                    thrpt    5        34.000                 counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                                     thrpt    5        29.000                     ms
[info] AnyRefsBenchmark.readDslJsonJava                                                                        thrpt    5   9232680.423 ±  1848773.730   ops/s
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate                                                         thrpt    5      1126.168 ±      225.454  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                    thrpt    5       192.000 ±        0.001    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.119 ±        0.793  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.021 ±        0.140    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                   thrpt    5      1144.415 ±      666.932  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                              thrpt    5       194.334 ±       74.303    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                            thrpt    5         1.599 ±       10.972  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5         0.279 ±        1.946    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.count                                                              thrpt    5        17.000                 counts
[info] AnyRefsBenchmark.readDslJsonJava:·gc.time                                                               thrpt    5        57.000                     ms
[info] AnyRefsBenchmark.readJacksonScala                                                                       thrpt    5   2177797.227 ±    71596.787   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                                        thrpt    5      1527.538 ±       50.291  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   thrpt    5      1104.000 ±        0.001    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.019 ±        0.158  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.014 ±        0.115    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                  thrpt    5      1493.213 ±      725.262  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                             thrpt    5      1078.906 ±      511.432    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                           thrpt    5         1.066 ±        7.821  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5         0.774 ±        5.675    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                                             thrpt    5        22.000                 counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                                              thrpt    5        40.000                     ms
[info] AnyRefsBenchmark.readJsoniterScala                                                                      thrpt    5   9741471.976 ±  1249733.507   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                                       thrpt    5      1237.803 ±      158.526  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  thrpt    5       200.000 ±        0.001    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.029 ±        0.244  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.005 ±        0.039    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 thrpt    5      1289.394 ±      577.628  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            thrpt    5       208.212 ±       86.349    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.666 ±        5.735  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5         0.107 ±        0.921    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                                            thrpt    5        19.000                 counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                                             thrpt    5        27.000                     ms
[info] AnyRefsBenchmark.readPlayJson                                                                           thrpt    5    582370.896 ±    30192.365   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                                            thrpt    5      1498.331 ±       76.369  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       thrpt    5      4048.001 ±        0.001    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.034 ±        0.288  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5         0.093 ±        0.787    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      thrpt    5      1491.437 ±      693.342  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5      4030.343 ±     1899.897    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                               thrpt    5         1.066 ±        7.823  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                          thrpt    5         2.909 ±       21.350    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                                 thrpt    5        22.000                 counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                                  thrpt    5        44.000                     ms
[info] AnyRefsBenchmark.writeCirce                                                                             thrpt    5   1755369.504 ±    45137.890   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                                              thrpt    5      1650.636 ±       42.830  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                                         thrpt    5      1480.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  thrpt    5         0.029 ±        0.241  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             thrpt    5         0.025 ±        0.214    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                        thrpt    5      1631.189 ±      609.263  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                   thrpt    5      1462.391 ±      537.884    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                 thrpt    5         0.666 ±        5.735  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                            thrpt    5         0.599 ±        5.161    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                                   thrpt    5        24.000                 counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                                    thrpt    5        31.000                     ms
[info] AnyRefsBenchmark.writeDslJsonJava                                                                       thrpt    5  18029937.083 ±   940623.420   ops/s
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                        thrpt    5       549.823 ±       28.746  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                   thrpt    5        48.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                  thrpt    5       533.776 ±      703.273  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                             thrpt    5        46.633 ±       61.811    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.133 ±        1.147  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5         0.012 ±        0.102    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.count                                                             thrpt    5         8.000                 counts
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.time                                                              thrpt    5        39.000                     ms
[info] AnyRefsBenchmark.writeJacksonScala                                                                      thrpt    5   4513031.126 ±   235699.906   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                                       thrpt    5      1238.551 ±       64.560  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  thrpt    5       432.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.040 ±        0.337  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.014 ±        0.117    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 thrpt    5      1218.562 ±      720.002  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            thrpt    5       424.816 ±      244.225    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.932 ±        6.687  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5         0.326 ±        2.340    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                                            thrpt    5        18.000                 counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                                             thrpt    5        42.000                     ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                                     thrpt    5  21796339.161 ±   372363.728   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      thrpt    5       664.653 ±       11.291  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 thrpt    5        48.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                thrpt    5       672.836 ±        1.370  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           thrpt    5        48.592 ±        0.881    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.133 ±        1.147  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5         0.010 ±        0.083    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                                           thrpt    5        10.000                 counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                                            thrpt    5        32.000                     ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                                             thrpt    5  20479588.964 ±   423341.616   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         thrpt    5        ≈ 10⁻⁵                   B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   thrpt    5           ≈ 0                 counts
[info] AnyRefsBenchmark.writePlayJson                                                                          thrpt    5   1264295.535 ±    50652.521   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                                           thrpt    5      1844.496 ±       72.859  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      thrpt    5      2296.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               thrpt    5         0.016 ±        0.076  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          thrpt    5         0.020 ±        0.094    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                     thrpt    5      1902.606 ±      706.105  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                thrpt    5      2370.312 ±      965.160    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                              thrpt    5         1.066 ±        9.180  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                         thrpt    5         1.337 ±       11.514    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                                thrpt    5        28.000                 counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                                 thrpt    5        41.000                     ms
[info] ArrayBufferOfBooleansBenchmark.readCirce                                                                thrpt    5    333136.788 ±    12592.654   ops/s
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                 thrpt    5      1833.811 ±       69.791  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                            thrpt    5      8664.001 ±        0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.013 ±        0.095  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.064 ±        0.458    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                           thrpt    5      1837.408 ±      721.363  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      8678.513 ±     3265.375    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         3.203 ±       27.579    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.count                                                      thrpt    5        27.000                 counts
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.time                                                       thrpt    5        25.000                     ms
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala                                                         thrpt    5    435309.467 ±    27156.539   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                          thrpt    5       579.707 ±       35.980  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     thrpt    5      2096.001 ±        0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                    thrpt    5       537.436 ±      709.092  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                               thrpt    5      1949.862 ±     2643.641    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                             thrpt    5         0.266 ±        1.405  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                        thrpt    5         0.978 ±        5.157    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count                                               thrpt    5         8.000                 counts
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time                                                thrpt    5        36.000                     ms
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala                                                        thrpt    5   1052950.666 ±    26805.453   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                         thrpt    5       701.069 ±       17.465  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    thrpt    5      1048.000 ±        0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                   thrpt    5       674.061 ±        0.469  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                              thrpt    5      1007.661 ±       25.823    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                            thrpt    5         0.666 ±        5.737  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         1.007 ±        8.667    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count                                              thrpt    5        10.000                 counts
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time                                               thrpt    5        29.000                     ms
[info] ArrayBufferOfBooleansBenchmark.readPlayJson                                                             thrpt    5    101647.779 ±     2182.117   ops/s
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                              thrpt    5      3520.982 ±       74.981  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                         thrpt    5     54512.004 ±        0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.004 ±        0.004  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.059 ±        0.058    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                        thrpt    5      3540.385 ±      715.687  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                   thrpt    5     54809.806 ±    10764.974    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count                                                   thrpt    5        52.000                 counts
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time                                                    thrpt    5        44.000                     ms
[info] ArrayBufferOfBooleansBenchmark.writeCirce                                                               thrpt    5    332001.782 ±    17761.641   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                thrpt    5       821.817 ±       43.881  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                           thrpt    5      3896.001 ±        0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.019 ±        0.162  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.087 ±        0.749    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                          thrpt    5       878.284 ±      717.939  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      4163.865 ±     3401.887    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         3.151 ±       27.130    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count                                                     thrpt    5        13.000                 counts
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time                                                      thrpt    5        37.000                     ms
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala                                                        thrpt    5    635290.125 ±    35734.331   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                         thrpt    5       474.639 ±       26.579  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    thrpt    5      1176.001 ±        0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                   thrpt    5       469.952 ±      707.897  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                              thrpt    5      1161.824 ±     1715.896    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count                                              thrpt    5         7.000                 counts
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time                                               thrpt    5        31.000                     ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala                                                       thrpt    5   2355595.700 ±   103460.075   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                        thrpt    5      1089.398 ±       47.901  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5       728.000 ±        0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'            thrpt    5         0.023 ±        0.196  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       thrpt    5         0.015 ±        0.133    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                  thrpt    5      1083.595 ±      589.837  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                             thrpt    5       724.827 ±      420.464    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                           thrpt    5         0.932 ±        6.688  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                      thrpt    5         0.631 ±        4.534    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count                                             thrpt    5        16.000                 counts
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time                                              thrpt    5        34.000                     ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc                                               thrpt    5   2515920.135 ±     1587.400   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     thrpt    5           ≈ 0                 counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson                                                            thrpt    5    440168.506 ±    26330.737   ops/s
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                             thrpt    5       633.119 ±       37.902  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                        thrpt    5      2264.001 ±        0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                       thrpt    5       605.450 ±      579.243  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      2161.678 ±     2026.144    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count                                                  thrpt    5         9.000                 counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time                                                   thrpt    5        36.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                                   thrpt    5     19912.648 ±      557.800   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                                    thrpt    5      1245.872 ±       35.431  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                               thrpt    5     98480.029 ±        0.057    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.019 ±        0.066  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         1.488 ±        5.229    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                              thrpt    5      1221.256 ±      721.360  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     96533.188 ±    56928.528    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5        52.902 ±      455.505    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                                         thrpt    5        18.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                                          thrpt    5        31.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                                            thrpt    5     30995.565 ±     1676.873   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                                             thrpt    5       777.030 ±       41.747  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        thrpt    5     39455.803 ±        1.815    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.022 ±        0.186  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         1.080 ±        9.295    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                       thrpt    5       741.499 ±      574.550  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5     37629.203 ±    28390.078    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                thrpt    5         0.932 ±        8.028  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5        46.981 ±      404.518    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                                  thrpt    5        11.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                                   thrpt    5        41.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                                           thrpt    5     32116.764 ±     2189.089   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                                            thrpt    5       431.444 ±       29.426  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5     21144.014 ±        0.006    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                      thrpt    5       471.843 ±      710.720  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5     23195.770 ±    35812.752    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                                 thrpt    5         7.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                                  thrpt    5        21.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                                thrpt    5     25375.307 ±     1038.393   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                                 thrpt    5      1344.689 ±       54.317  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            thrpt    5     83400.031 ±        0.121    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.032 ±        0.170  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         1.955 ±       10.507    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                           thrpt    5      1356.636 ±       28.134  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     84147.133 ±     3281.066    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.932 ±        6.687  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                               thrpt    5        57.824 ±      414.166    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                                      thrpt    5        20.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                                       thrpt    5        38.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                                  thrpt    5     27083.487 ±     1195.995   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                                   thrpt    5      1643.285 ±       72.101  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                                              thrpt    5     95503.725 ±        2.500    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.024 ±        0.092  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         1.420 ±        5.342    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                             thrpt    5      1699.104 ±       23.503  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     98755.758 ±     3497.632    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5        39.296 ±      338.351    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                                        thrpt    5        25.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                                         thrpt    5        33.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                                           thrpt    5     27941.294 ±     1202.836   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                                            thrpt    5      1530.307 ±       66.410  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       thrpt    5     86208.026 ±        0.096    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.015 ±        0.104  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.862 ±        5.882    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                      thrpt    5      1494.096 ±      730.047  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5     84169.567 ±    41013.534    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                               thrpt    5         0.932 ±        8.028  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                          thrpt    5        53.520 ±      460.825    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                                 thrpt    5        22.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                                  thrpt    5        37.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                                          thrpt    5     31208.800 ±      899.961   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           thrpt    5      1610.662 ±       46.921  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5     81224.024 ±        0.089    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.030 ±        0.150  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         1.541 ±        7.602    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                     thrpt    5      1563.425 ±      730.659  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                thrpt    5     78817.431 ±    35836.402    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                              thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                         thrpt    5        40.842 ±      351.659    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                                thrpt    5        23.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                                 thrpt    5        27.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                                  thrpt    5     31915.791 ±     1165.052   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   thrpt    5      1585.235 ±       58.711  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              thrpt    5     78168.023 ±        0.086    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'       thrpt    5         0.031 ±        0.153  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm  thrpt    5         1.514 ±        7.567    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                             thrpt    5      1630.778 ±      580.669  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                        thrpt    5     80429.365 ±    29206.181    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                      thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                 thrpt    5        40.077 ±      345.073    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        thrpt    5        24.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                         thrpt    5        30.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                               thrpt    5      8038.182 ±      387.980   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                                thrpt    5      1045.764 ±       50.841  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           thrpt    5    204776.053 ±        0.008    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.023 ±        0.155  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         4.542 ±       30.535    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                          thrpt    5      1081.720 ±      576.412  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                     thrpt    5    211873.689 ±   114652.981    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.932 ±        6.687  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                              thrpt    5       183.427 ±     1313.647    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                                     thrpt    5        16.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                                      thrpt    5        43.000                     ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                                       thrpt    5     20023.385 ±      945.526   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                                        thrpt    5      1529.681 ±       71.579  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                   thrpt    5    120240.026 ±        0.028    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.024 ±        0.174  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         1.860 ±       13.554    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                  thrpt    5      1494.975 ±      727.790  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                             thrpt    5    117536.917 ±    57923.948    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.666 ±        5.736  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5        52.481 ±      451.880    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                                             thrpt    5        22.000                 counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                                              thrpt    5        30.000                     ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                                thrpt    5     40522.781 ±     1748.818   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                 thrpt    5       999.463 ±       43.468  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            thrpt    5     38823.849 ±        1.392    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.029 ±        0.164  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         1.129 ±        6.333    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                           thrpt    5      1014.348 ±       24.763  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     39406.072 ±     1980.111    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         1.066 ±        6.688  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5        41.330 ±      259.273    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                                      thrpt    5        15.000                 counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                                       thrpt    5        40.000                     ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                               thrpt    5     59193.016 ±     1661.220   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                thrpt    5       764.719 ±       21.458  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           thrpt    5     20336.007 ±        0.001    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.012 ±        0.102  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.315 ±        2.715    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                          thrpt    5       742.096 ±      578.822  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     19734.409 ±    15376.718    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5        17.645 ±      151.927    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                                     thrpt    5        11.000                 counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                                      thrpt    5        31.000                     ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                                    thrpt    5     30060.436 ±     1358.439   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                                     thrpt    5      2007.965 ±       90.862  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                thrpt    5    105144.015 ±        0.007    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.006 ±        0.019  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.306 ±        0.966    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                               thrpt    5      1973.132 ±      592.002  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                          thrpt    5    103346.476 ±    32183.827    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5        41.692 ±      358.976    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                                          thrpt    5        29.000                 counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                                           thrpt    5        33.000                     ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                               thrpt    5     34655.228 ±     1081.958   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                thrpt    5      1827.371 ±       56.347  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           thrpt    5     83000.013 ±        0.007    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.011 ±        0.078  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.492 ±        3.603    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                          thrpt    5      1836.154 ±      723.790  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     83383.742 ±    32010.307    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.933 ±        8.030  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5        42.973 ±      370.012    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                                     thrpt    5        27.000                 counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                                      thrpt    5        34.000                     ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                                              thrpt    5     46786.009 ±     1714.708   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                               thrpt    5      1797.780 ±       65.352  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          thrpt    5     60480.009 ±        0.001    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.026 ±        0.217  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.888 ±        7.351    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                         thrpt    5      1769.119 ±      587.894  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5     59526.779 ±    20302.071    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                             thrpt    5        27.101 ±      233.346    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                                    thrpt    5        26.000                 counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                                     thrpt    5        22.000                     ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                                      thrpt    5     45009.237 ±     1639.566   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       thrpt    5      1797.244 ±       65.248  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  thrpt    5     62856.009 ±        0.001    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'           thrpt    5         0.046 ±        0.380  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm      thrpt    5         1.603 ±       13.313    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                 thrpt    5      1836.214 ±      709.640  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                            thrpt    5     64214.697 ±    24475.388    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                          thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                     thrpt    5        27.982 ±      240.933    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            thrpt    5        27.000                 counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                             thrpt    5        27.000                     ms
[info] ArrayOfBooleansBenchmark.readCirce                                                                      thrpt    5    334499.999 ±     5682.405   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                       thrpt    5      1691.599 ±       28.064  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                  thrpt    5      7960.001 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.029 ±        0.225  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.135 ±        1.064    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                 thrpt    5      1699.802 ±       17.654  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                            thrpt    5      7998.699 ±      135.374    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5         3.142 ±       27.053    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                                            thrpt    5        25.000                 counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                                             thrpt    5        28.000                     ms
[info] ArrayOfBooleansBenchmark.readDslJsonJava                                                                thrpt    5   1593485.136 ±    78911.014   ops/s
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate                                                 thrpt    5       502.149 ±       25.010  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                            thrpt    5       496.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                           thrpt    5       467.048 ±      704.090  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                      thrpt    5       461.067 ±      691.177    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         0.130 ±        1.122    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count                                                      thrpt    5         7.000                 counts
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time                                                       thrpt    5        34.000                     ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                               thrpt    5    630156.408 ±    19429.960   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                thrpt    5       534.833 ±       16.519  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           thrpt    5      1336.001 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                          thrpt    5       538.023 ±      709.006  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      1343.008 ±     1758.641    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         0.332 ±        2.862    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                                     thrpt    5         8.000                 counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                                      thrpt    5        33.000                     ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                                              thrpt    5   1724514.804 ±    32532.065   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                               thrpt    5       333.059 ±        6.307  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          thrpt    5       304.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                         thrpt    5       337.017 ±        0.153  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5       307.619 ±        5.856    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                                    thrpt    5         5.000                 counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                                     thrpt    5        15.000                     ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                                   thrpt    5     94969.586 ±     4607.445   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                    thrpt    5      3450.089 ±      166.826  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                               thrpt    5     57176.004 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.003 ±        0.006  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.043 ±        0.098    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                              thrpt    5      3472.030 ±      585.211  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     57532.882 ±     8384.874    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                                         thrpt    5        51.000                 counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                                          thrpt    5        47.000                     ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                                     thrpt    5    308493.323 ±    24080.853   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                      thrpt    5       760.658 ±       60.355  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                                 thrpt    5      3880.001 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.004 ±        0.033  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.020 ±        0.174    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                thrpt    5       741.706 ±      575.211  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                           thrpt    5      3779.677 ±     2795.440    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5         3.515 ±       30.267    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                                           thrpt    5        11.000                 counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                                            thrpt    5        34.000                     ms
[info] ArrayOfBooleansBenchmark.writeDslJsonJava                                                               thrpt    5   1195614.846 ±    32741.761   ops/s
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate                                                thrpt    5       552.997 ±       15.311  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                           thrpt    5       728.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                          thrpt    5       533.929 ±      703.827  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                     thrpt    5       703.679 ±      936.054    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count                                                     thrpt    5         8.000                 counts
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time                                                      thrpt    5        39.000                     ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                                              thrpt    5    943353.283 ±    53603.053   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                               thrpt    5       666.397 ±       37.758  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          thrpt    5      1112.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                         thrpt    5       672.140 ±        1.277  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      1121.779 ±       64.122    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                  thrpt    5         1.332 ±        7.254  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         2.250 ±       12.386    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                                    thrpt    5        10.000                 counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                                     thrpt    5        42.000                     ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                                             thrpt    5   2109397.626 ±   135130.468   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                              thrpt    5       975.799 ±       62.548  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         thrpt    5       728.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.015 ±        0.081  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.011 ±        0.061    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                        thrpt    5       946.921 ±      572.980  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5       707.391 ±      447.905    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         0.597 ±        5.142    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                   thrpt    5        14.000                 counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                    thrpt    5        31.000                     ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                     thrpt    5   2201101.445 ±    19678.560   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           thrpt    5           ≈ 0                 counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                                  thrpt    5    419623.782 ±     6238.087   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                   thrpt    5       490.549 ±        7.421  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                              thrpt    5      1840.001 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                             thrpt    5       470.894 ±      709.370  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      1768.328 ±     2689.353    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                                        thrpt    5         7.000                 counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                                         thrpt    5        27.000                     ms
[info] ArrayOfBytesBenchmark.readCirce                                                                         thrpt    5    172768.981 ±     6256.653   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                                          thrpt    5      2074.918 ±       74.691  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                                     thrpt    5     18904.002 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.007 ±        0.031  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.062 ±        0.279    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    thrpt    5      2042.132 ±        0.816  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               thrpt    5     18606.610 ±      676.230    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                               thrpt    5        30.000                 counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                                thrpt    5        24.000                     ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                                  thrpt    5    388255.880 ±    11097.586   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                                   thrpt    5       329.540 ±        9.397  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              thrpt    5      1336.001 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             thrpt    5       336.365 ±        0.131  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      1363.733 ±       39.229    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                                        thrpt    5         5.000                 counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                                         thrpt    5        21.000                     ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                                 thrpt    5   1058921.022 ±     7980.973   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                                  thrpt    5       204.514 ±        1.532  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             thrpt    5       304.000 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            thrpt    5       201.806 ±      709.384  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5       300.399 ±     1055.952    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.400 ±        3.441  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         0.595 ±        5.124    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                                       thrpt    5         3.000                 counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                                        thrpt    5         9.000                     ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                                      thrpt    5     81382.289 ±     1953.717   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                                       thrpt    5      3465.108 ±       83.775  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  thrpt    5     67016.005 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.007 ±        0.013  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.134 ±        0.252    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 thrpt    5      3471.537 ±      584.186  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            thrpt    5     67153.652 ±    12647.340    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                                            thrpt    5        51.000                 counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                                             thrpt    5        43.000                     ms
[info] ArrayOfBytesBenchmark.writeCirce                                                                        thrpt    5    269385.506 ±    10522.098   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                                         thrpt    5      1334.919 ±       52.195  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                                    thrpt    5      7800.002 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.020 ±        0.113  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.115 ±        0.657    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5      1290.021 ±      586.868  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5      7541.146 ±     3539.157    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                            thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5         3.864 ±       33.266    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                                              thrpt    5        19.000                 counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                               thrpt    5        28.000                     ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                                 thrpt    5   1505854.078 ±    36961.973   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                                  thrpt    5       773.024 ±       18.537  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             thrpt    5       808.000 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.008 ±        0.069  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.008 ±        0.071    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5       741.500 ±      576.169  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5       775.181 ±      605.818    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.933 ±        6.691  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         0.983 ±        7.065    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                                       thrpt    5        11.000                 counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                                        thrpt    5        40.000                     ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                                thrpt    5   1928182.170 ±   118185.931   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 thrpt    5       519.414 ±       31.824  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5       424.000 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5       538.205 ±      709.501  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5       439.586 ±      582.018    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                                      thrpt    5         8.000                 counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                                       thrpt    5        26.000                     ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                                        thrpt    5   2095403.108 ±     5548.045   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              thrpt    5           ≈ 0                 counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                                     thrpt    5     40988.126 ±     1459.833   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                                      thrpt    5      1727.411 ±       61.771  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 thrpt    5     66320.408 ±        3.422    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.046 ±        0.366  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         1.776 ±       14.156    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5      1699.786 ±       21.957  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     65263.514 ±     2079.211    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5        30.936 ±      266.368    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                                           thrpt    5        25.000                 counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                                            thrpt    5        30.000                     ms
[info] ArrayOfCharsBenchmark.readCirce                                                                         thrpt    5    239429.370 ±     1607.517   ops/s
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate                                                          thrpt    5      2464.003 ±       16.499  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm                                                     thrpt    5     16200.002 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.011 ±        0.021  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.071 ±        0.139    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    thrpt    5      2450.389 ±      586.118  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               thrpt    5     16111.100 ±     3902.452    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.count                                                               thrpt    5        36.000                 counts
[info] ArrayOfCharsBenchmark.readCirce:·gc.time                                                                thrpt    5        29.000                     ms
[info] ArrayOfCharsBenchmark.readJacksonScala                                                                  thrpt    5    311252.595 ±    17641.055   ops/s
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate                                                   thrpt    5      1505.931 ±       85.398  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              thrpt    5      7616.001 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.034 ±        0.177  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.175 ±        0.903    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             thrpt    5      1562.362 ±      707.060  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      7907.907 ±     3799.127    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         4.109 ±       35.382    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.count                                                        thrpt    5        23.000                 counts
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.time                                                         thrpt    5        33.000                     ms
[info] ArrayOfCharsBenchmark.readJsoniterScala                                                                 thrpt    5   1329542.270 ±    53064.802   ops/s
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                                  thrpt    5       459.473 ±       18.381  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             thrpt    5       544.000 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            thrpt    5       404.406 ±      580.387  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5       479.297 ±      696.141    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.count                                                       thrpt    5         6.000                 counts
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.time                                                        thrpt    5        18.000                     ms
[info] ArrayOfCharsBenchmark.readPlayJson                                                                      thrpt    5     75602.840 ±     2844.589   ops/s
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate                                                       thrpt    5      3177.685 ±      119.722  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  thrpt    5     66160.005 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.013 ±        0.018  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.262 ±        0.362    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 thrpt    5      3131.121 ±      586.067  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            thrpt    5     65196.343 ±    12521.149    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.count                                                            thrpt    5        46.000                 counts
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.time                                                             thrpt    5        43.000                     ms
[info] ArrayOfCharsBenchmark.writeCirce                                                                        thrpt    5    220547.745 ±     7033.379   ops/s
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate                                                         thrpt    5      2015.317 ±       64.376  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                                    thrpt    5     14384.002 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.027 ±        0.197  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.195 ±        1.402    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5      2042.046 ±        0.414  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5     14575.580 ±      465.985    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.count                                                              thrpt    5        30.000                 counts
[info] ArrayOfCharsBenchmark.writeCirce:·gc.time                                                               thrpt    5        27.000                     ms
[info] ArrayOfCharsBenchmark.writeJacksonScala                                                                 thrpt    5   1139287.066 ±    83560.215   ops/s
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                                  thrpt    5       665.924 ±       49.265  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             thrpt    5       920.000 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5       672.608 ±        1.453  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5       929.502 ±       67.167    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.933 ±        6.688  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         1.267 ±        9.041    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.count                                                       thrpt    5        10.000                 counts
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.time                                                        thrpt    5        41.000                     ms
[info] ArrayOfCharsBenchmark.writeJsoniterScala                                                                thrpt    5   2953967.817 ±    39321.429   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 thrpt    5      1005.974 ±       13.222  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5       536.000 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.032 ±        0.192  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.017 ±        0.102    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5      1014.774 ±       23.091  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5       540.687 ±        7.800    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         0.426 ±        3.668    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count                                                      thrpt    5        15.000                 counts
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time                                                       thrpt    5        31.000                     ms
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc                                                        thrpt    5   2495942.975 ±    75474.320   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              thrpt    5           ≈ 0                 counts
[info] ArrayOfCharsBenchmark.writePlayJson                                                                     thrpt    5    298768.295 ±     7364.009   ops/s
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate                                                      thrpt    5      2441.707 ±       60.516  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 thrpt    5     12864.001 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.004 ±        0.007  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.019 ±        0.037    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5      2450.594 ±      587.671  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     12910.408 ±     3041.164    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.count                                                           thrpt    5        36.000                 counts
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.time                                                            thrpt    5        32.000                     ms
[info] ArrayOfDoublesBenchmark.readCirce                                                                       thrpt    5     26389.818 ±      765.764   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                                        thrpt    5      1545.799 ±       45.349  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                                   thrpt    5     92192.017 ±        0.009    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.035 ±        0.121  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         2.076 ±        7.300    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                  thrpt    5      1563.026 ±      708.771  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                             thrpt    5     93226.161 ±    42444.446    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5        40.160 ±      345.789    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                                             thrpt    5        23.000                 counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                                              thrpt    5        30.000                     ms
[info] ArrayOfDoublesBenchmark.readDslJsonJava                                                                 thrpt    5    102264.819 ±     3232.454   ops/s
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate                                                  thrpt    5       920.993 ±       29.248  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                             thrpt    5     14176.004 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.113 ±        0.972  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         1.719 ±       14.802    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                            thrpt    5       939.090 ±      585.692  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                       thrpt    5     14458.470 ±     9093.087    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                     thrpt    5         1.332 ±       11.469  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                thrpt    5        20.505 ±      176.554    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count                                                       thrpt    5        14.000                 counts
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time                                                        thrpt    5        56.000                     ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                                thrpt    5     59423.101 ±     2438.903   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                                 thrpt    5       981.972 ±       39.873  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            thrpt    5     26008.007 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.025 ±        0.139  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.670 ±        3.697    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                           thrpt    5      1014.670 ±       24.486  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     26877.109 ±     1519.113    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.932 ±        6.687  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5        24.614 ±      176.540    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                                      thrpt    5        15.000                 counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                                       thrpt    5        44.000                     ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                               thrpt    5     81300.271 ±     4924.273   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                                thrpt    5       523.905 ±       31.739  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           thrpt    5     10144.005 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                          thrpt    5       539.205 ±      710.747  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     10467.228 ±    14086.706    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                                     thrpt    5         8.000                 counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                                      thrpt    5        24.000                     ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                                    thrpt    5     33593.058 ±     2470.224   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                                     thrpt    5      1755.300 ±      128.391  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                thrpt    5     82248.013 ±        0.008    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.022 ±        0.078  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         1.058 ±        3.779    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                               thrpt    5      1767.260 ±      591.885  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                          thrpt    5     82792.764 ±    25900.125    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.933 ±        8.031  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5        45.001 ±      387.468    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                                          thrpt    5        26.000                 counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                                           thrpt    5        34.000                     ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                                      thrpt    5     38891.729 ±      419.592   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                                       thrpt    5       523.983 ±        5.703  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                                  thrpt    5     21208.011 ±        0.002    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                 thrpt    5       539.201 ±      710.759  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                            thrpt    5     21826.985 ±    28803.593    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                                            thrpt    5         8.000                 counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                                             thrpt    5        27.000                     ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                               thrpt    5     41472.324 ±      611.569   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                                thrpt    5       374.548 ±        5.578  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           thrpt    5     14216.010 ±        0.002    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                          thrpt    5       403.604 ±      579.093  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     15326.678 ±    22128.885    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                                     thrpt    5         6.000                 counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                                      thrpt    5        25.000                     ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                                              thrpt    5     46312.574 ±      344.037   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                               thrpt    5       406.966 ±        3.085  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          thrpt    5     13832.009 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                         thrpt    5       403.620 ±      579.242  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5     13723.399 ±    19785.686    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                                    thrpt    5         6.000                 counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                                     thrpt    5        19.000                     ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                                      thrpt    5     45371.759 ±     2280.369   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       thrpt    5       346.847 ±       17.604  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  thrpt    5     12032.009 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                 thrpt    5       403.665 ±      579.423  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                            thrpt    5     13991.210 ±    19844.429    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            thrpt    5         6.000                 counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                             thrpt    5        19.000                     ms
[info] ArrayOfDurationsBenchmark.readCirce                                                                     thrpt    5     19642.913 ±      409.012   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                                      thrpt    5       736.840 ±       15.433  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                                 thrpt    5     59040.028 ±        0.050    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                thrpt    5       674.212 ±        0.920  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     54023.206 ±     1157.268    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.799 ±        5.559  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5        64.225 ±      447.373    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                                           thrpt    5        10.000                 counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                                            thrpt    5        33.000                     ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                                              thrpt    5     20286.775 ±      308.102   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                               thrpt    5       575.813 ±        8.969  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          thrpt    5     44677.053 ±       22.245    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                         thrpt    5       605.447 ±      579.264  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5     47005.149 ±    45312.377    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                                    thrpt    5         9.000                 counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                                     thrpt    5        38.000                     ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                                             thrpt    5     76734.815 ±      527.046   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                                              thrpt    5       199.699 ±        1.424  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         thrpt    5      4096.005 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                        thrpt    5       202.232 ±      710.880  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      4151.841 ±    14594.477    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.400 ±        3.441  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         8.203 ±       70.629    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                                   thrpt    5         3.000                 counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                                    thrpt    5         9.000                     ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                                  thrpt    5     16395.267 ±      383.412   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                                   thrpt    5      1062.941 ±       24.910  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              thrpt    5    102048.027 ±        0.010    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.012 ±        0.060  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         1.188 ±        5.799    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                             thrpt    5      1015.438 ±       23.092  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     97488.950 ±     2232.857    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5        76.931 ±      662.403    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                                        thrpt    5        15.000                 counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                                         thrpt    5        38.000                     ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                                    thrpt    5     62344.237 ±     2168.445   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                                     thrpt    5      1020.055 ±       35.476  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                                thrpt    5     25752.007 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.014 ±        0.084  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.356 ±        2.117    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                               thrpt    5      1015.771 ±       19.306  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                          thrpt    5     25644.833 ±      614.990    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.666 ±        5.737  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5        16.838 ±      144.981    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                                          thrpt    5        15.000                 counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                                           thrpt    5        38.000                     ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                                             thrpt    5     90512.367 ±     5123.312   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                                              thrpt    5      1073.311 ±       60.990  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         thrpt    5     18664.005 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.018 ±        0.090  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.310 ±        1.550    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                        thrpt    5      1083.605 ±      598.577  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5     18831.153 ±     9850.976    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                            thrpt    5        13.825 ±      119.034    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                                   thrpt    5        16.000                 counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                                    thrpt    5        38.000                     ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                                            thrpt    5    264372.194 ±     6742.615   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             thrpt    5       419.200 ±       10.726  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        thrpt    5      2496.002 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                       thrpt    5       403.604 ±      579.045  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      2403.867 ±     3460.645    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                                  thrpt    5         6.000                 counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                                   thrpt    5        19.000                     ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                                    thrpt    5    328961.654 ±     1746.330   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          thrpt    5           ≈ 0                 counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                                 thrpt    5     80177.415 ±     4956.333   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                                  thrpt    5      1093.798 ±       68.065  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             thrpt    5     21472.005 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.030 ±        0.203  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.584 ±        4.004    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                            thrpt    5      1082.831 ±      565.611  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                       thrpt    5     21280.662 ±    11980.091    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                thrpt    5        15.781 ±      135.880    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                                       thrpt    5        16.000                 counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                                        thrpt    5        40.000                     ms
[info] ArrayOfEnumsBenchmark.readCirce                                                                         thrpt    5     27019.031 ±      996.950   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                                          thrpt    5       561.737 ±       20.420  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                                     thrpt    5     32724.302 ±       26.792    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    thrpt    5       606.630 ±      580.364  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               thrpt    5     35355.208 ±    34011.178    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                               thrpt    5         9.000                 counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                                thrpt    5        31.000                     ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                                  thrpt    5     28105.732 ±      367.924   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                                   thrpt    5       369.428 ±        4.916  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              thrpt    5     20687.781 ±        2.011    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             thrpt    5       403.514 ±      577.990  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     22618.266 ±    32784.071    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         7.502 ±       64.596    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                                        thrpt    5         6.000                 counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                                         thrpt    5        26.000                     ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                                 thrpt    5    121812.697 ±     6004.963   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                                  thrpt    5       475.441 ±       23.471  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             thrpt    5      6144.003 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            thrpt    5       471.804 ±      710.780  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      6117.562 ±     9467.810    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                                       thrpt    5         7.000                 counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                                        thrpt    5        21.000                     ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                                      thrpt    5     21240.686 ±      966.232   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                       thrpt    5      1172.868 ±       53.461  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  thrpt    5     86904.045 ±        0.207    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.007 ±        0.058  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.532 ±        4.259    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 thrpt    5      1150.929 ±      709.437  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            thrpt    5     85269.150 ±    52121.587    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.932 ±        8.028  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5        69.825 ±      601.217    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                                            thrpt    5        17.000                 counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                                             thrpt    5        44.000                     ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                                        thrpt    5    165119.212 ±     6449.141   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                                         thrpt    5       827.474 ±       32.596  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                                    thrpt    5      7888.003 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.021 ±        0.180  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.199 ±        1.716    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5       878.264 ±      717.810  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5      8384.329 ±     7085.587    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                            thrpt    5         0.666 ±        5.737  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5         6.297 ±       54.215    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                                              thrpt    5        13.000                 counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                               thrpt    5        38.000                     ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                                 thrpt    5    284011.342 ±     2721.377   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                                  thrpt    5       287.247 ±        2.690  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             thrpt    5      1592.001 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5       269.083 ±      579.221  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      1492.901 ±     3213.585    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                                       thrpt    5         4.000                 counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                                        thrpt    5        17.000                     ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                                thrpt    5    568555.616 ±     7927.763   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 thrpt    5       436.336 ±        5.888  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5      1208.001 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5       470.902 ±      709.574  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      1305.044 ±     1983.229    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                                      thrpt    5         7.000                 counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                                       thrpt    5        23.000                     ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                                        thrpt    5    550128.738 ±     9271.448   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              thrpt    5           ≈ 0                 counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                                     thrpt    5    282269.180 ±    10175.097   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                      thrpt    5       777.567 ±       28.485  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 thrpt    5      4336.001 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.004 ±        0.038  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.024 ±        0.208    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5       808.203 ±      702.667  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5      4511.596 ±     4023.448    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                         thrpt    5         1.199 ±        6.123  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5         6.703 ±       34.349    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                                           thrpt    5        12.000                 counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                                            thrpt    5        49.000                     ms
[info] ArrayOfFloatsBenchmark.readCirce                                                                        thrpt    5     37042.595 ±     1886.304   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                                         thrpt    5      1652.330 ±       84.463  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                                    thrpt    5     70200.011 ±        0.002    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.027 ±        0.170  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         1.161 ±        7.393    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5      1631.988 ±      582.743  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5     69372.056 ±    26168.030    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                            thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5        28.977 ±      249.497    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                                              thrpt    5        24.000                 counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                               thrpt    5        30.000                     ms
[info] ArrayOfFloatsBenchmark.readDslJsonJava                                                                  thrpt    5    307132.214 ±    21708.656   ops/s
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate                                                   thrpt    5       318.501 ±       22.406  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                              thrpt    5      1632.001 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                             thrpt    5       266.988 ±      574.713  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      1359.154 ±     2926.491    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count                                                        thrpt    5         4.000                 counts
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time                                                         thrpt    5        20.000                     ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                                 thrpt    5     99939.080 ±     2605.526   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                                  thrpt    5      1104.354 ±       28.147  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             thrpt    5     17392.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.036 ±        0.307  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.558 ±        4.777    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5      1083.371 ±      563.819  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5     17066.823 ±     9084.274    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                     thrpt    5         1.066 ±        7.823  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                thrpt    5        16.851 ±      123.782    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                                       thrpt    5        16.000                 counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                                        thrpt    5        38.000                     ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                                thrpt    5    148105.323 ±     2883.836   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                                 thrpt    5        96.360 ±        1.902  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5      1024.003 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5       135.202 ±      712.926  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      1443.508 ±     7612.183    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.400 ±        3.441  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         4.251 ±       36.603    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                                      thrpt    5         2.000                 counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                                       thrpt    5         6.000                     ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                                     thrpt    5     38640.510 ±     2490.870   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                                      thrpt    5      2063.413 ±      131.770  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 thrpt    5     84047.924 ±        0.743    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.014 ±        0.080  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.564 ±        3.347    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5      2109.507 ±      587.111  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     85908.999 ±    21873.810    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.800 ±        6.885  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5        33.397 ±      287.557    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                                           thrpt    5        31.000                 counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                                            thrpt    5        31.000                     ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                                       thrpt    5     86253.557 ±      771.393   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                                        thrpt    5       551.474 ±        4.982  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                                   thrpt    5     10064.005 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                  thrpt    5       539.212 ±      710.689  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                             thrpt    5      9845.147 ±    13029.672    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                                             thrpt    5         8.000                 counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                                              thrpt    5        27.000                     ms
[info] ArrayOfFloatsBenchmark.writeDslJsonJava                                                                 thrpt    5    114503.065 ±     6856.178   ops/s
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                  thrpt    5       350.336 ±       20.931  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                             thrpt    5      4816.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                            thrpt    5       333.419 ±        1.443  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      4584.359 ±      281.084    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         1.812 ±       15.605    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count                                                       thrpt    5         5.000                 counts
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time                                                        thrpt    5        25.000                     ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                                thrpt    5    100170.272 ±      483.161   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                                 thrpt    5       330.907 ±        1.650  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            thrpt    5      5200.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                           thrpt    5       336.203 ±        1.102  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      5283.235 ±       36.855    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                                      thrpt    5         5.000                 counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                                       thrpt    5        20.000                     ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                               thrpt    5    117175.803 ±     3057.931   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                thrpt    5       358.491 ±        9.326  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           thrpt    5      4816.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                          thrpt    5       336.328 ±        0.095  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      4518.433 ±      118.711    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                                     thrpt    5         5.000                 counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                                      thrpt    5        16.000                     ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                                       thrpt    5    117077.685 ±     1827.984   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        thrpt    5       265.970 ±        4.132  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   thrpt    5      3576.003 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                  thrpt    5       269.070 ±      579.193  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                             thrpt    5      3621.347 ±     7795.450    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             thrpt    5         4.000                 counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                              thrpt    5        13.000                     ms
[info] ArrayOfInstantsBenchmark.readCirce                                                                      thrpt    5      8599.293 ±      566.184   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                                       thrpt    5      1423.599 ±       93.550  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                                  thrpt    5    260552.048 ±        0.008    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.007 ±        0.057  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         1.270 ±       10.498    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                 thrpt    5      1426.247 ±      594.220  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                            thrpt    5    260906.208 ±   100134.327    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5       123.015 ±     1059.192    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                                            thrpt    5        21.000                 counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                                             thrpt    5        31.000                     ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                               thrpt    5      8563.309 ±      451.756   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                                thrpt    5      1334.175 ±       70.449  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           thrpt    5    245216.049 ±        0.010    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.026 ±        0.205  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         4.747 ±       38.122    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                          thrpt    5      1356.443 ±       27.976  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5    249332.314 ±     8308.524    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.933 ±        8.031  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5       173.359 ±     1492.676    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                                     thrpt    5        20.000                 counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                                      thrpt    5        40.000                     ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                                              thrpt    5     87708.895 ±     4193.962   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                               thrpt    5       228.234 ±       10.900  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          thrpt    5      4096.005 ±        0.001    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                         thrpt    5       202.607 ±      712.193  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      3657.011 ±    12857.009    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                                    thrpt    5         3.000                 counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                                     thrpt    5         9.000                     ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                                   thrpt    5      5052.865 ±      270.271   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                                    thrpt    5      1340.930 ±       72.298  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                               thrpt    5    417696.140 ±        0.493    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.032 ±        0.257  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5        10.065 ±       81.234    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                              thrpt    5      1356.513 ±       27.946  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                         thrpt    5    422609.275 ±    22044.675    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5       252.314 ±     2172.502    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                                         thrpt    5        20.000                 counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                                          thrpt    5        41.000                     ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                                     thrpt    5     23854.701 ±      575.575   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                                      thrpt    5      1341.071 ±       32.677  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                                 thrpt    5     88465.145 ±       48.226    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.021 ±        0.154  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         1.421 ±       10.275    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                thrpt    5      1357.764 ±       23.282  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     89569.529 ±     2881.712    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5        44.394 ±      382.242    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                                           thrpt    5        20.000                 counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                                            thrpt    5        34.000                     ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                                              thrpt    5     28769.964 ±     2015.235   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                               thrpt    5      1405.845 ±       98.593  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          thrpt    5     76912.015 ±        0.008    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.028 ±        0.231  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         1.537 ±       12.772    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                         thrpt    5      1425.154 ±      595.961  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5     77957.493 ±    31459.300    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.932 ±        8.028  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                             thrpt    5        51.547 ±      443.835    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                                    thrpt    5        21.000                 counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                                     thrpt    5        41.000                     ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                                             thrpt    5    349738.502 ±     3045.045   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                                              thrpt    5       771.463 ±        6.995  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         thrpt    5      3472.001 ±        0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.015 ±        0.129  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.067 ±        0.581    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                        thrpt    5       808.871 ±      718.087  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      3641.087 ±     3247.979    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.799 ±        6.884  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         3.593 ±       30.941    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                                   thrpt    5        12.000                 counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                                    thrpt    5        34.000                     ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                                     thrpt    5    376419.633 ±      129.657   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           thrpt    5           ≈ 0                 counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                                  thrpt    5     27227.788 ±      958.883   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                                   thrpt    5      1432.163 ±       49.944  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                                              thrpt    5     82792.016 ±        0.006    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.032 ±        0.247  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         1.839 ±       14.370    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                             thrpt    5      1425.438 ±      594.926  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     82384.007 ±    33259.640    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5        46.409 ±      399.597    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                                        thrpt    5        21.000                 counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                                         thrpt    5        34.000                     ms
[info] ArrayOfIntsBenchmark.readCirce                                                                          thrpt    5    130465.962 ±     4660.797   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                                           thrpt    5      2125.373 ±       76.496  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                      thrpt    5     25640.003 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                               thrpt    5         0.021 ±        0.123  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          thrpt    5         0.256 ±        1.500    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                     thrpt    5      2110.441 ±      586.600  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                thrpt    5     25467.850 ±     7571.970    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                                thrpt    5        31.000                 counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                                 thrpt    5        25.000                     ms
[info] ArrayOfIntsBenchmark.readDslJsonJava                                                                    thrpt    5    485166.508 ±    22625.455   ops/s
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate                                                     thrpt    5       503.037 ±       23.549  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                thrpt    5      1632.001 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                               thrpt    5       467.047 ±      704.246  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                          thrpt    5      1518.953 ±     2335.180    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5         0.428 ±        3.688    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.count                                                          thrpt    5         7.000                 counts
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.time                                                           thrpt    5        34.000                     ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                                   thrpt    5    277964.613 ±    11223.875   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                    thrpt    5       398.438 ±       16.040  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               thrpt    5      2256.001 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                              thrpt    5       403.679 ±      579.439  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                         thrpt    5      2285.861 ±     3281.717    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                                         thrpt    5         6.000                 counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                                          thrpt    5        26.000                     ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                                  thrpt    5    734475.489 ±    11294.971   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                   thrpt    5       477.839 ±        7.235  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              thrpt    5      1024.001 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                             thrpt    5       471.847 ±      710.790  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      1011.297 ±     1525.017    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                                        thrpt    5         7.000                 counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                                         thrpt    5        21.000                     ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                                       thrpt    5     70269.053 ±     2851.189   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                        thrpt    5      3077.003 ±      123.527  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                   thrpt    5     68920.006 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.009 ±        0.024  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.208 ±        0.523    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                  thrpt    5      3131.537 ±      585.269  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                             thrpt    5     70134.754 ±    12010.141    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                                             thrpt    5        46.000                 counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                                              thrpt    5        39.000                     ms
[info] ArrayOfIntsBenchmark.writeCirce                                                                         thrpt    5    226321.706 ±     5637.311   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                          thrpt    5      1588.722 ±       39.154  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                     thrpt    5     11048.002 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.027 ±        0.125  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.188 ±        0.876    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                    thrpt    5      1631.238 ±      580.683  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                               thrpt    5     11342.699 ±     3986.453    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                             thrpt    5         0.666 ±        5.737  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                        thrpt    5         4.660 ±       40.124    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                               thrpt    5        24.000                 counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                                thrpt    5        33.000                     ms
[info] ArrayOfIntsBenchmark.writeDslJsonJava                                                                   thrpt    5   1162083.860 ±    65313.266   ops/s
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                    thrpt    5       631.964 ±       35.443  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                               thrpt    5       856.000 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                              thrpt    5       667.251 ±        1.212  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                         thrpt    5       903.948 ±       50.193    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5         0.182 ±        1.564    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count                                                         thrpt    5        10.000                 counts
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time                                                          thrpt    5        48.000                     ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                                  thrpt    5    843928.331 ±     8967.748   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                   thrpt    5       664.891 ±        6.804  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                              thrpt    5      1240.000 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                             thrpt    5       672.641 ±        1.309  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      1254.462 ±       13.907    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.933 ±        6.690  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         1.746 ±       12.535    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                                        thrpt    5        10.000                 counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                                         thrpt    5        41.000                     ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                                 thrpt    5   1114223.393 ±    10668.606   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  thrpt    5       605.958 ±        5.555  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             thrpt    5       856.000 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                            thrpt    5       605.732 ±      579.990  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5       855.867 ±      821.694    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.266 ±        1.405  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         0.376 ±        1.981    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                                       thrpt    5         9.000                 counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                                        thrpt    5        29.000                     ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                                         thrpt    5   1082389.505 ±     8106.781   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                          thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                     thrpt    5        ≈ 10⁻³                   B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                               thrpt    5           ≈ 0                 counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                                      thrpt    5     30513.043 ±     1252.675   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                       thrpt    5      1593.543 ±       65.272  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                  thrpt    5     82203.382 ±       27.233    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.041 ±        0.209  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         2.125 ±       10.846    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                 thrpt    5      1562.411 ±      707.483  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                            thrpt    5     80629.627 ±    37605.677    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5        42.030 ±      361.890    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                                            thrpt    5        23.000                 counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                                             thrpt    5        32.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                                     thrpt    5    124178.406 ±     2858.793   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                                      thrpt    5      1531.157 ±       35.485  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                                 thrpt    5     19408.003 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.015 ±        0.116  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.191 ±        1.466    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                thrpt    5      1494.877 ±      727.667  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     18943.956 ±     9045.231    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5         8.534 ±       73.479    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                                           thrpt    5        22.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                                            thrpt    5        30.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                                              thrpt    5    175934.868 ±    10951.807   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                               thrpt    5       938.982 ±       58.232  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          thrpt    5      8400.002 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.016 ±        0.138  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.144 ±        1.218    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                         thrpt    5       946.271 ±      590.920  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      8459.185 ±     5127.067    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                  thrpt    5         1.066 ±        7.820  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         9.494 ±       69.494    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                                    thrpt    5        14.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                                     thrpt    5        41.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                                             thrpt    5    270185.737 ±     8024.481   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                              thrpt    5       703.183 ±       21.153  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         thrpt    5      4096.002 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                        thrpt    5       674.142 ±        0.548  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      3927.027 ±      117.483    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         3.882 ±       33.428    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                                   thrpt    5        10.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                                    thrpt    5        29.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                                  thrpt    5     66221.388 ±     1252.568   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                   thrpt    5      2796.411 ±       51.758  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              thrpt    5     66464.006 ±        0.002    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.008 ±        0.006  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.196 ±        0.142    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                             thrpt    5      2791.011 ±      585.195  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     66342.200 ±    14455.479    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                                        thrpt    5        41.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                                         thrpt    5        40.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                                    thrpt    5    166082.823 ±     3125.500   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                                     thrpt    5       832.376 ±       16.106  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                                thrpt    5      7888.003 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.031 ±        0.269  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.294 ±        2.533    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                               thrpt    5       878.357 ±      718.472  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                          thrpt    5      8323.458 ±     6800.353    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5         6.330 ±       54.507    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                                          thrpt    5        13.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                                           thrpt    5        37.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                                             thrpt    5    518266.029 ±    18246.110   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                              thrpt    5       524.206 ±       18.551  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         thrpt    5      1592.001 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                        thrpt    5       470.634 ±      709.071  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      1430.787 ±     2173.338    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.266 ±        1.405  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         0.807 ±        4.254    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                                   thrpt    5         7.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                                    thrpt    5        30.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                                            thrpt    5    548438.381 ±    11590.007   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             thrpt    5       420.870 ±        8.888  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        thrpt    5      1208.001 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                       thrpt    5       403.717 ±      578.779  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      1158.641 ±     1658.364    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         0.384 ±        3.310    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                                  thrpt    5         6.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                                   thrpt    5        19.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                                    thrpt    5    538692.843 ±    14965.663   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          thrpt    5           ≈ 0                 counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                                 thrpt    5    274882.582 ±    18152.058   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                  thrpt    5       754.449 ±       49.652  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             thrpt    5      4320.002 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                            thrpt    5       739.625 ±      578.704  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      4230.770 ±     3160.773    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                     thrpt    5         1.066 ±        7.820  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         6.222 ±       45.714    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                                       thrpt    5        11.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                                        thrpt    5        48.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                                thrpt    5      8665.920 ±      634.333   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                                 thrpt    5      1108.131 ±       81.463  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                            thrpt    5    201266.012 ±       16.910    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.006 ±        0.044  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         1.147 ±        8.019    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                           thrpt    5      1084.717 ±      595.818  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                      thrpt    5    197057.934 ±   108666.728    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±        4.214  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                               thrpt    5       146.953 ±      776.720    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                                      thrpt    5        16.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                                       thrpt    5        32.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                                         thrpt    5      9111.624 ±      523.627   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                          thrpt    5      1080.031 ±       62.033  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     thrpt    5    186576.045 ±        0.005    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.021 ±        0.173  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         3.664 ±       30.438    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                    thrpt    5      1082.411 ±      562.967  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                               thrpt    5    187018.351 ±    97775.166    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                             thrpt    5         1.066 ±        6.688  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                        thrpt    5       186.805 ±     1177.248    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                               thrpt    5        16.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                                thrpt    5        43.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                                        thrpt    5    154028.602 ±     2410.000   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                         thrpt    5      1002.149 ±       15.697  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    thrpt    5     10240.003 ±        0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.009 ±        0.046  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         0.087 ±        0.474    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                   thrpt    5      1016.943 ±       15.694  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                              thrpt    5     10391.186 ±       62.440    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                            thrpt    5         0.533 ±        4.588  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         5.464 ±       47.043    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                                              thrpt    5        15.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                               thrpt    5        29.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                                             thrpt    5      7000.830 ±      302.915   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                              thrpt    5      1303.724 ±       55.965  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                         thrpt    5    293096.061 ±        0.011    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.016 ±        0.120  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         3.500 ±       26.814    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                        thrpt    5      1288.581 ±      576.751  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                   thrpt    5    289689.452 ±   129151.083    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                            thrpt    5       177.976 ±     1532.428    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                                   thrpt    5        19.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                                    thrpt    5        39.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                               thrpt    5     22454.729 ±      618.917   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                                thrpt    5      1023.592 ±       28.320  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                           thrpt    5     71745.393 ±       44.119    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.012 ±        0.063  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.824 ±        4.451    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                          thrpt    5      1015.837 ±       19.565  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     71203.802 ±     1815.866    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.666 ±        5.737  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                              thrpt    5        46.780 ±      402.791    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                                     thrpt    5        15.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                                      thrpt    5        36.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                                        thrpt    5     25912.838 ±      741.966   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                         thrpt    5       996.981 ±       28.508  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    thrpt    5     60552.017 ±        0.009    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.033 ±        0.185  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         2.006 ±       11.172    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                   thrpt    5      1014.511 ±       24.180  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                              thrpt    5     61618.545 ±     1809.193    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                            thrpt    5         1.066 ±        7.823  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                       thrpt    5        64.389 ±      472.080    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                                              thrpt    5        15.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                               thrpt    5        41.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                                       thrpt    5    710537.448 ±    16601.974   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                        thrpt    5      1281.991 ±       29.947  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5      2840.001 ±        0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'            thrpt    5         0.025 ±        0.191  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       thrpt    5         0.055 ±        0.423    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                  thrpt    5      1288.529 ±      576.331  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                             thrpt    5      2855.302 ±     1303.851    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                           thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                      thrpt    5         1.770 ±       15.243    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                                             thrpt    5        19.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                                              thrpt    5        29.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                               thrpt    5    791300.170 ±    40062.953   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     thrpt    5           ≈ 0                 counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                                            thrpt    5     23709.134 ±      616.713   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                             thrpt    5      1000.731 ±       25.871  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                        thrpt    5     66422.261 ±       32.937    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.013 ±        0.115  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.885 ±        7.608    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                       thrpt    5       946.814 ±      590.102  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                  thrpt    5     62801.703 ±    38143.425    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±        6.884  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                           thrpt    5        53.567 ±      461.229    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                                  thrpt    5        14.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                                   thrpt    5        38.000                     ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                                    thrpt    5     24081.294 ±     1157.858   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                                     thrpt    5      1307.267 ±       62.701  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                                thrpt    5     85440.018 ±        0.009    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.012 ±        0.065  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.799 ±        4.212    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                               thrpt    5      1289.405 ±      592.078  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                          thrpt    5     84304.855 ±    39629.731    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.666 ±        5.736  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5        43.306 ±      372.881    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                                          thrpt    5        19.000                 counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                                           thrpt    5        31.000                     ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                                             thrpt    5     27103.886 ±     1559.952   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                                              thrpt    5      1237.918 ±       71.340  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         thrpt    5     71888.221 ±        1.776    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.022 ±        0.159  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         1.313 ±        9.381    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                        thrpt    5      1220.246 ±      723.544  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5     70834.214 ±    41004.024    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                 thrpt    5         1.066 ±        6.687  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                            thrpt    5        62.673 ±      395.163    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                                   thrpt    5        18.000                 counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                                    thrpt    5        37.000                     ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                                            thrpt    5    268496.330 ±    18778.804   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                                             thrpt    5       698.668 ±       48.692  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        thrpt    5      4096.002 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                       thrpt    5       675.345 ±        0.256  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      3960.305 ±      275.552    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                thrpt    5         0.533 ±        4.588  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         3.150 ±       27.123    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                                  thrpt    5        10.000                 counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                                   thrpt    5        28.000                     ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                                 thrpt    5     16018.373 ±      520.027   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                                  thrpt    5      1648.793 ±       53.330  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                                             thrpt    5    162024.225 ±        1.697    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.019 ±        0.119  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         1.878 ±       11.848    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                            thrpt    5      1698.323 ±       28.598  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                       thrpt    5    166897.358 ±     3837.945    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.932 ±        8.029  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                thrpt    5        92.660 ±      797.827    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                                       thrpt    5        25.000                 counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                                        thrpt    5        36.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                                   thrpt    5     51837.332 ±     1915.604   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                                    thrpt    5      1367.766 ±       50.206  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                               thrpt    5     41528.008 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.023 ±        0.163  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.710 ±        4.938    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                              thrpt    5      1358.186 ±       22.801  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     41239.226 ±     1159.420    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5        20.218 ±      174.081    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                                         thrpt    5        20.000                 counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                                          thrpt    5        31.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                                            thrpt    5     93456.515 ±     5019.210   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                                             thrpt    5       974.116 ±       52.390  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        thrpt    5     16408.004 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.023 ±        0.124  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.380 ±        2.086    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                       thrpt    5      1014.442 ±       23.978  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5     17088.973 ±      633.627    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                thrpt    5         0.933 ±        6.689  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5        15.733 ±      112.398    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                                  thrpt    5        15.000                 counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                                   thrpt    5        40.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                                           thrpt    5   1149809.864 ±    41048.812   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                                            thrpt    5      1233.149 ±       44.166  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5      1688.000 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.020 ±        0.114  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.027 ±        0.155    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                      thrpt    5      1220.588 ±      716.035  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      1670.411 ±      966.506    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         1.089 ±        9.373    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                                 thrpt    5        18.000                 counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                                  thrpt    5        30.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                                   thrpt    5   1165545.262 ±     7466.816   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               thrpt    5        ≈ 10⁻³                   B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         thrpt    5           ≈ 0                 counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                                thrpt    5     59473.754 ±     1245.101   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                                 thrpt    5      1383.277 ±       28.919  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                                            thrpt    5     36608.007 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.016 ±        0.129  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.434 ±        3.404    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                           thrpt    5      1357.478 ±       26.814  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     35925.439 ±      461.659    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                               thrpt    5        21.167 ±      182.254    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                                      thrpt    5        20.000                 counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                                       thrpt    5        34.000                     ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                                    thrpt    5     14091.945 ±      246.649   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                                     thrpt    5      1257.686 ±       22.515  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                thrpt    5    140480.031 ±        0.012    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.020 ±        0.129  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         2.211 ±       14.507    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                               thrpt    5      1221.240 ±      721.449  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                          thrpt    5    136444.663 ±    81596.289    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5        74.920 ±      645.081    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                                          thrpt    5        18.000                 counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                                           thrpt    5        36.000                     ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                                             thrpt    5     14186.027 ±      400.288   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                                              thrpt    5      1146.319 ±       33.176  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         thrpt    5    127184.032 ±        0.012    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.026 ±        0.216  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         2.849 ±       23.868    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                        thrpt    5      1151.604 ±      709.964  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5    127792.216 ±    79373.306    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.799 ±        6.880  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                            thrpt    5        89.203 ±      768.061    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                                   thrpt    5        17.000                 counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                                    thrpt    5        39.000                     ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                                            thrpt    5    279112.553 ±    20601.290   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                             thrpt    5       726.266 ±       53.697  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        thrpt    5      4096.002 ±        0.001    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                       thrpt    5       675.335 ±        0.146  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      3809.892 ±      283.459    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                thrpt    5         0.533 ±        4.588  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         2.962 ±       25.505    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                                  thrpt    5        10.000                 counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                                   thrpt    5        29.000                     ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                                 thrpt    5     10328.505 ±      282.096   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                                  thrpt    5      1426.012 ±       38.953  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                             thrpt    5    217320.152 ±        0.960    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.024 ±        0.194  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         3.643 ±       29.641    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                            thrpt    5      1425.320 ±      595.745  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                       thrpt    5    217169.047 ±    88239.384    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.932 ±        6.687  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                thrpt    5       142.373 ±     1019.292    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                                       thrpt    5        21.000                 counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                                        thrpt    5        36.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                                   thrpt    5     37864.013 ±     1215.647   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                                    thrpt    5      1245.277 ±       39.879  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                               thrpt    5     51768.784 ±        6.652    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.015 ±        0.077  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.602 ±        3.165    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                              thrpt    5      1221.247 ±      721.497  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     50782.217 ±    30327.651    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5        27.418 ±      236.078    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                                         thrpt    5        18.000                 counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                                          thrpt    5        31.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                                            thrpt    5     46861.777 ±     1662.967   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                             thrpt    5      1243.052 ±       45.014  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        thrpt    5     41752.009 ±        0.002    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.039 ±        0.204  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         1.306 ±        6.886    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                       thrpt    5      1220.200 ±      722.335  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5     40990.391 ±    24396.385    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                thrpt    5         1.066 ±        7.820  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5        36.163 ±      265.497    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                                  thrpt    5        18.000                 counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                                   thrpt    5        40.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                                           thrpt    5   1213884.060 ±    13206.163   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                            thrpt    5      1104.632 ±       10.793  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5      1432.000 ±        0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.018 ±        0.157  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.024 ±        0.203    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                      thrpt    5      1083.307 ±      561.428  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      1404.606 ±      738.248    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                               thrpt    5         0.798 ±        6.874  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         1.038 ±        8.938    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                                 thrpt    5        16.000                 counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                                  thrpt    5        30.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                                   thrpt    5   1425682.214 ±     2005.063   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         thrpt    5           ≈ 0                 counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                                thrpt    5     36066.115 ±     1634.863   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                                 thrpt    5      1091.033 ±       49.547  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                            thrpt    5     47617.056 ±        8.990    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.017 ±        0.091  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.761 ±        4.015    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                           thrpt    5      1150.760 ±      712.801  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     50180.423 ±    29595.613    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                               thrpt    5        35.024 ±      301.563    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                                      thrpt    5        17.000                 counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                                       thrpt    5        40.000                     ms
[info] ArrayOfLongsBenchmark.readCirce                                                                         thrpt    5    128414.914 ±      873.394   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                                          thrpt    5      2202.806 ±       15.425  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                                     thrpt    5     27000.003 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.008 ±        0.016  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.096 ±        0.201    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    thrpt    5      2178.448 ±      718.988  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               thrpt    5     26699.519 ±     8698.571    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                               thrpt    5        32.000                 counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                                thrpt    5        29.000                     ms
[info] ArrayOfLongsBenchmark.readDslJsonJava                                                                   thrpt    5    335539.213 ±    14695.076   ops/s
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate                                                    thrpt    5       671.882 ±       29.509  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                               thrpt    5      3152.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                              thrpt    5       667.247 ±        1.096  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                         thrpt    5      3130.587 ±      140.096    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5         0.619 ±        5.329    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.count                                                         thrpt    5        10.000                 counts
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.time                                                          thrpt    5        48.000                     ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                                  thrpt    5    237187.630 ±    11358.507   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                                   thrpt    5       525.593 ±       25.254  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              thrpt    5      3488.002 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             thrpt    5       470.494 ±      709.569  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      3119.627 ±     4667.327    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.266 ±        1.405  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         1.780 ±        9.388    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                                        thrpt    5         7.000                 counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                                         thrpt    5        30.000                     ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                                 thrpt    5    486746.437 ±    21595.539   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                                  thrpt    5       613.671 ±       26.961  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             thrpt    5      1984.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            thrpt    5       606.797 ±      580.406  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      1962.065 ±     1880.198    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                                       thrpt    5         9.000                 counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                                        thrpt    5        27.000                     ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                                      thrpt    5     68693.727 ±     1637.704   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                                       thrpt    5      3065.534 ±       73.929  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  thrpt    5     70232.006 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.014 ±        0.028  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.315 ±        0.633    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 thrpt    5      3063.671 ±        2.036  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            thrpt    5     70191.513 ±     1680.583    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                                            thrpt    5        45.000                 counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                                             thrpt    5        39.000                     ms
[info] ArrayOfLongsBenchmark.writeCirce                                                                        thrpt    5    194548.925 ±     3966.678   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                                         thrpt    5      1676.999 ±       34.184  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                                    thrpt    5     13568.002 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.024 ±        0.182  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.194 ±        1.477    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5      1699.826 ±       17.248  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5     13752.926 ±      244.480    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                            thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5         5.415 ±       46.621    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                                              thrpt    5        25.000                 counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                               thrpt    5        31.000                     ms
[info] ArrayOfLongsBenchmark.writeDslJsonJava                                                                  thrpt    5    720868.987 ±    14514.346   ops/s
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                   thrpt    5       564.215 ±       11.380  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                              thrpt    5      1232.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                             thrpt    5       600.656 ±      574.691  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      1311.768 ±     1257.398    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count                                                        thrpt    5         9.000                 counts
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time                                                         thrpt    5        44.000                     ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                                 thrpt    5    472033.799 ±     1788.024   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                                  thrpt    5       484.652 ±        1.629  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             thrpt    5      1616.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5       538.072 ±      708.983  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      1794.445 ±     2367.994    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         0.445 ±        3.831    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                                       thrpt    5         8.000                 counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                                        thrpt    5        33.000                     ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                                thrpt    5    697105.135 ±    37972.979   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 thrpt    5       545.617 ±       29.507  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5      1232.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5       538.305 ±      709.909  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      1216.814 ±     1618.948    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         0.308 ±        2.650    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                                      thrpt    5         8.000                 counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                                       thrpt    5        26.000                     ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                                        thrpt    5    700477.229 ±     9235.314   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              thrpt    5           ≈ 0                 counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                                     thrpt    5     28388.432 ±     1411.633   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                                      thrpt    5      1455.259 ±       71.951  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 thrpt    5     80692.193 ±       26.729    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.026 ±        0.212  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         1.448 ±       11.762    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5      1425.423 ±      595.367  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     79021.568 ±    31892.014    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5        44.244 ±      380.952    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                                           thrpt    5        21.000                 counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                                            thrpt    5        34.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                               thrpt    5      6711.176 ±      269.961   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                                thrpt    5      1033.114 ±       42.205  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                           thrpt    5    242296.062 ±        0.010    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.010 ±        0.078  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         2.464 ±       18.224    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                          thrpt    5      1015.808 ±       18.896  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                     thrpt    5    238257.961 ±    10402.088    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.799 ±        5.561  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                              thrpt    5       185.323 ±     1282.563    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                                     thrpt    5        15.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                                      thrpt    5        34.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                                        thrpt    5      6915.173 ±      548.384   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                         thrpt    5       996.754 ±       78.639  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    thrpt    5    226864.060 ±        0.011    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.021 ±        0.180  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         4.678 ±       40.282    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                   thrpt    5       946.463 ±      589.337  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                              thrpt    5    215140.067 ±   126674.580    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                            thrpt    5         0.933 ±        6.690  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                       thrpt    5       216.854 ±     1555.743    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                                              thrpt    5        14.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                               thrpt    5        41.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                                       thrpt    5    100178.674 ±     1750.773   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                        thrpt    5       970.551 ±       17.065  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5     15248.004 ±        0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'            thrpt    5         0.015 ±        0.124  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       thrpt    5         0.236 ±        1.939    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                  thrpt    5       948.852 ±      588.910  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                             thrpt    5     14908.184 ±     9274.018    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                           thrpt    5         0.533 ±        4.588  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                      thrpt    5         8.417 ±       72.470    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                                             thrpt    5        14.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                                              thrpt    5        28.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                                            thrpt    5      6267.406 ±      314.785   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                             thrpt    5      1140.056 ±       58.031  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                        thrpt    5    286280.067 ±        0.010    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.025 ±        0.211  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         6.307 ±       52.388    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                       thrpt    5      1151.652 ±      731.106  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                  thrpt    5    289179.891 ±   182679.534    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                thrpt    5         0.800 ±        6.884  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                           thrpt    5       198.187 ±     1706.452    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                                  thrpt    5        17.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                                   thrpt    5        39.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                                              thrpt    5     17549.886 ±      503.900   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                               thrpt    5       875.585 ±       24.688  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                          thrpt    5     78534.456 ±       80.806    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.026 ±        0.189  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         2.274 ±       16.736    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                         thrpt    5       878.873 ±      720.151  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                    thrpt    5     78832.839 ±    64631.004    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                             thrpt    5        60.145 ±      517.871    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                                    thrpt    5        13.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                                     thrpt    5        38.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                                       thrpt    5     20563.360 ±     1462.991   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                        thrpt    5       871.305 ±       62.252  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   thrpt    5     66696.021 ±        0.008    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'            thrpt    5         0.024 ±        0.162  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       thrpt    5         1.835 ±       12.277    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                  thrpt    5       877.424 ±      707.045  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                             thrpt    5     67237.961 ±    55523.153    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                           thrpt    5         1.066 ±        7.822  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                      thrpt    5        80.827 ±      591.541    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                                             thrpt    5        13.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                                              thrpt    5        42.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                                      thrpt    5    498900.053 ±    13581.587   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                       thrpt    5      1130.865 ±       31.122  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  thrpt    5      3568.001 ±        0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'           thrpt    5         0.030 ±        0.261  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm      thrpt    5         0.095 ±        0.822    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                 thrpt    5      1151.567 ±      709.651  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                            thrpt    5      3634.947 ±     2287.912    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                          thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                     thrpt    5         2.552 ±       21.977    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                                            thrpt    5        17.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                                             thrpt    5        33.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                                              thrpt    5    506512.972 ±     5593.130   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    thrpt    5           ≈ 0                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                                           thrpt    5     19604.563 ±      724.393   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                            thrpt    5       903.895 ±       32.992  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                       thrpt    5     72567.898 ±       29.144    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.028 ±        0.199  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         2.214 ±       15.990    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                      thrpt    5       877.740 ±      706.370  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                 thrpt    5     70412.499 ±    55471.781    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                          thrpt    5        64.290 ±      553.560    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                                 thrpt    5        13.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                                  thrpt    5        40.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                                   thrpt    5     11446.676 ±      645.946   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                                    thrpt    5      1149.878 ±       64.787  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                               thrpt    5    158103.168 ±       31.699    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.017 ±        0.149  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         2.395 ±       20.622    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                              thrpt    5      1152.608 ±      728.503  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                         thrpt    5    158531.979 ±   101352.703    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5        92.029 ±      792.396    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                                         thrpt    5        17.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                                          thrpt    5        38.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                                            thrpt    5     11457.775 ±      724.014   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                                             thrpt    5      1048.901 ±       65.601  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        thrpt    5    144088.037 ±        0.009    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.023 ±        0.156  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         3.194 ±       21.398    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                       thrpt    5      1082.492 ±      600.329  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5    148598.619 ±    77518.232    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                thrpt    5         1.066 ±        6.437  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5       146.431 ±      879.287    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                                  thrpt    5        16.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                                   thrpt    5        42.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                                           thrpt    5    165715.185 ±     6243.349   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                            thrpt    5       958.588 ±       36.159  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5      9104.002 ±        0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.011 ±        0.063  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.104 ±        0.594    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                      thrpt    5       947.739 ±      575.076  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      9000.671 ±     5453.547    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                               thrpt    5         0.666 ±        5.736  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         6.318 ±       54.401    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                                 thrpt    5        14.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                                  thrpt    5        30.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                                thrpt    5     10930.540 ±      248.870   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                                 thrpt    5      1367.993 ±       31.077  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                            thrpt    5    197000.069 ±        0.262    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.008 ±        0.059  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         1.160 ±        8.529    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                           thrpt    5      1355.905 ±       30.967  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                      thrpt    5    195262.140 ±     4630.905    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.932 ±        8.028  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                               thrpt    5       134.470 ±     1157.825    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                                      thrpt    5        20.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                                       thrpt    5        48.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                                  thrpt    5     29319.098 ±     1527.740   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                                   thrpt    5      1091.914 ±       56.819  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                              thrpt    5     58620.883 ±       41.195    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.014 ±        0.070  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.731 ±        3.718    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                             thrpt    5      1151.835 ±      713.465  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     61886.149 ±    39656.491    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5        35.321 ±      304.125    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                                        thrpt    5        17.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                                         thrpt    5        39.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                                           thrpt    5     85573.524 ±     2891.394   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                            thrpt    5      1362.140 ±       46.421  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       thrpt    5     25056.005 ±        0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.039 ±        0.331  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.733 ±        6.184    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                      thrpt    5      1357.261 ±       28.148  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5     24967.574 ±      869.724    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                               thrpt    5         0.932 ±        6.687  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                          thrpt    5        17.366 ±      124.826    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                                 thrpt    5        20.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                                  thrpt    5        36.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                                          thrpt    5    698078.324 ±    17863.435   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                           thrpt    5       957.941 ±       24.842  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5      2160.001 ±        0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.026 ±        0.224  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.059 ±        0.508    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                     thrpt    5       946.620 ±      590.234  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                thrpt    5      2133.523 ±     1308.078    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                              thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         1.802 ±       15.518    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                                thrpt    5        14.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                                 thrpt    5        31.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                                  thrpt    5    743791.305 ±      750.570   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        thrpt    5           ≈ 0                 counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                               thrpt    5     71091.934 ±     4523.707   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                                thrpt    5      1532.552 ±       97.755  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                           thrpt    5     33928.006 ±        0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.010 ±        0.076  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.230 ±        1.692    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                          thrpt    5      1493.987 ±      730.716  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     33064.869 ±    15648.996    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.932 ±        6.688  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                              thrpt    5        21.160 ±      152.386    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                                     thrpt    5        22.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                                      thrpt    5        38.000                     ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                                       thrpt    5     26554.996 ±      262.498   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                                        thrpt    5       957.390 ±        9.347  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                                   thrpt    5     56752.017 ±        0.009    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.031 ±        0.269  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         1.856 ±       15.979    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                  thrpt    5       946.245 ±      571.867  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                             thrpt    5     56098.832 ±    34079.460    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5        39.560 ±      340.623    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                                             thrpt    5        14.000                 counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                                              thrpt    5        38.000                     ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                                thrpt    5     27373.968 ±      687.311   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                                 thrpt    5       750.291 ±       18.704  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            thrpt    5     43144.216 ±        1.724    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.013 ±        0.109  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.727 ±        6.259    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                           thrpt    5       740.745 ±      586.046  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     42596.404 ±    33705.064    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5        45.955 ±      395.686    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                                      thrpt    5        11.000                 counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                                       thrpt    5        44.000                     ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                               thrpt    5    179389.045 ±     6979.838   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                                thrpt    5       466.795 ±       18.106  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           thrpt    5      4096.002 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                          thrpt    5       405.202 ±      581.358  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      3553.573 ±     5059.189    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                                     thrpt    5         6.000                 counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                                      thrpt    5        17.000                     ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                                    thrpt    5     21910.160 ±     1147.775   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                                     thrpt    5      1370.382 ±       71.845  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                thrpt    5     98448.020 ±        0.010    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.018 ±        0.136  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         1.320 ±        9.973    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                               thrpt    5      1356.605 ±       27.733  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                          thrpt    5     97468.865 ±     4014.229    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5        58.406 ±      502.890    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                                          thrpt    5        20.000                 counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                                           thrpt    5        42.000                     ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                                      thrpt    5     80317.891 ±     4616.350   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                                       thrpt    5      1240.187 ±       71.426  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                                  thrpt    5     24304.005 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.015 ±        0.071  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.288 ±        1.415    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                 thrpt    5      1221.279 ±      721.426  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                            thrpt    5     23965.153 ±    14991.739    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5        13.388 ±      115.272    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                                            thrpt    5        18.000                 counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                                             thrpt    5        32.000                     ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                               thrpt    5    141473.231 ±     3583.495   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                                thrpt    5      1197.313 ±       30.308  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           thrpt    5     13320.003 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.012 ±        0.070  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.129 ±        0.779    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                          thrpt    5      1220.472 ±      721.858  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     13571.883 ±     7851.163    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.932 ±        8.029  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5        10.438 ±       89.878    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                                     thrpt    5        18.000                 counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                                      thrpt    5        37.000                     ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                                              thrpt    5    461288.519 ±    29892.522   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                               thrpt    5       511.113 ±       33.142  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          thrpt    5      1744.001 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                         thrpt    5       538.327 ±      708.861  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      1833.332 ±     2372.443    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                                    thrpt    5         8.000                 counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                                     thrpt    5        25.000                     ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                                      thrpt    5    537557.597 ±     3249.643   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            thrpt    5           ≈ 0                 counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                                   thrpt    5    105331.937 ±     1820.858   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                                    thrpt    5      1284.966 ±       22.969  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                               thrpt    5     19200.004 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.015 ±        0.092  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.219 ±        1.373    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                              thrpt    5      1288.695 ±      576.799  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     19252.039 ±     8480.796    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5        11.925 ±      102.682    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                                         thrpt    5        19.000                 counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                                          thrpt    5        35.000                     ms
[info] ArrayOfShortsBenchmark.readCirce                                                                        thrpt    5    149368.665 ±     5720.299   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                                         thrpt    5      2514.256 ±       95.883  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                                    thrpt    5     26496.003 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.006 ±        0.012  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.068 ±        0.126    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5      2518.547 ±      717.724  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5     26533.793 ±     6981.550    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                                              thrpt    5        37.000                 counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                               thrpt    5        31.000                     ms
[info] ArrayOfShortsBenchmark.readDslJsonJava                                                                  thrpt    5    619089.755 ±     2442.894   ops/s
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate                                                   thrpt    5       343.015 ±        1.549  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                              thrpt    5       872.001 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                             thrpt    5       333.335 ±        1.548  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                        thrpt    5       847.391 ±        3.859    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.266 ±        1.405  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         0.677 ±        3.572    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.count                                                        thrpt    5         5.000                 counts
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.time                                                         thrpt    5        24.000                     ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                                 thrpt    5    330493.377 ±     4651.735   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                                  thrpt    5       344.328 ±        4.848  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             thrpt    5      1640.001 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5       336.198 ±        1.215  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      1601.299 ±       23.910    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         0.634 ±        5.459    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                                       thrpt    5         5.000                 counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                                        thrpt    5        21.000                     ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                                thrpt    5    888987.411 ±    28991.810   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                                 thrpt    5       307.242 ±        9.945  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5       544.000 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5       337.016 ±        0.150  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5       596.752 ±       19.693    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                                      thrpt    5         5.000                 counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                                       thrpt    5        15.000                     ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                                     thrpt    5     76818.699 ±     1921.615   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                                      thrpt    5      3395.777 ±       83.970  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 thrpt    5     69576.005 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.020 ±        0.026  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.410 ±        0.538    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5      3403.778 ±      927.502  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     69726.520 ±    17956.491    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                                           thrpt    5        50.000                 counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                                            thrpt    5        44.000                     ms
[info] ArrayOfShortsBenchmark.writeCirce                                                                       thrpt    5    231457.107 ±    14974.884   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                                        thrpt    5      1576.389 ±      101.437  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                                   thrpt    5     10720.002 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.018 ±        0.093  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.123 ±        0.641    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                  thrpt    5      1631.092 ±      581.060  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                             thrpt    5     11101.783 ±     4327.153    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.666 ±        5.736  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5         4.640 ±       39.951    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                                             thrpt    5        24.000                 counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                                              thrpt    5        31.000                     ms
[info] ArrayOfShortsBenchmark.writeDslJsonJava                                                                 thrpt    5   1067577.106 ±    16105.585   ops/s
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                  thrpt    5       439.524 ±        6.612  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                             thrpt    5       648.000 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                            thrpt    5       466.924 ±      703.569  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                       thrpt    5       689.181 ±     1048.216    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.266 ±        1.405  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         0.393 ±        2.072    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count                                                       thrpt    5         7.000                 counts
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time                                                        thrpt    5        34.000                     ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                                thrpt    5    972992.799 ±    28183.105   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                                 thrpt    5       638.115 ±       19.088  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            thrpt    5      1032.000 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                           thrpt    5       605.107 ±      578.333  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5       979.737 ±      949.566    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                                      thrpt    5         9.000                 counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                                       thrpt    5        37.000                     ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                               thrpt    5   1292955.859 ±    14298.478   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                thrpt    5       532.261 ±        5.916  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           thrpt    5       648.000 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                          thrpt    5       538.407 ±      710.391  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5       655.797 ±      868.700    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.266 ±        1.405  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         0.324 ±        1.710    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                                     thrpt    5         8.000                 counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                                      thrpt    5        26.000                     ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                                       thrpt    5   1459391.700 ±    14714.353   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             thrpt    5           ≈ 0                 counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                                    thrpt    5     35734.119 ±     1235.607   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                                     thrpt    5      1747.725 ±       59.958  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                thrpt    5     76985.678 ±       14.347    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.031 ±        0.246  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         1.351 ±       10.847    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                               thrpt    5      1767.410 ±      591.694  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                          thrpt    5     77853.881 ±    25956.290    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5        35.275 ±      303.728    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                                          thrpt    5        26.000                 counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                                           thrpt    5        33.000                     ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                                         thrpt    5     41110.633 ±      674.330   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                                          thrpt    5       820.737 ±       13.503  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                                     thrpt    5     31424.010 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.025 ±        0.216  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.956 ±        8.232    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    thrpt    5       810.204 ±      706.168  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               thrpt    5     31041.047 ±    27498.520    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                             thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                        thrpt    5        25.513 ±      219.678    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                               thrpt    5        12.000                 counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                                thrpt    5        34.000                     ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                                  thrpt    5     79767.181 ±     3259.080   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                                   thrpt    5       840.803 ±       34.256  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              thrpt    5     16592.005 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.025 ±        0.143  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.508 ±        2.851    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             thrpt    5       877.691 ±      713.854  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     17324.509 ±    14173.113    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5        15.917 ±      137.054    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                                        thrpt    5        13.000                 counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                                         thrpt    5        42.000                     ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                                 thrpt    5    266594.869 ±     3693.230   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                                  thrpt    5       867.130 ±       11.900  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             thrpt    5      5120.002 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.012 ±        0.066  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.073 ±        0.392    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            thrpt    5       878.888 ±      714.467  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      5191.680 ±     4265.813    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         3.924 ±       33.789    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                                       thrpt    5        13.000                 counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                                        thrpt    5        30.000                     ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                                      thrpt    5     23076.047 ±     1463.448   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                                       thrpt    5      1084.435 ±       68.607  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  thrpt    5     73960.019 ±        0.010    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.018 ±        0.093  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         1.246 ±        6.471    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 thrpt    5      1083.664 ±      598.286  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            thrpt    5     73832.863 ±    37306.903    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.799 ±        6.884  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5        55.635 ±      479.032    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                                            thrpt    5        16.000                 counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                                             thrpt    5        40.000                     ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                                        thrpt    5     52522.513 ±     1155.899   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                                         thrpt    5      1113.190 ±       24.991  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                                    thrpt    5     33360.008 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.010 ±        0.089  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.310 ±        2.666    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5      1084.495 ±      589.069  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5     32501.946 ±    17713.936    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                            thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5        19.976 ±      171.999    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                                              thrpt    5        16.000                 counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                               thrpt    5        33.000                     ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                                 thrpt    5     96780.534 ±     3253.167   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                                  thrpt    5      1325.596 ±       44.698  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             thrpt    5     21560.004 ±        0.080    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.035 ±        0.292  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.581 ±        4.799    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5      1289.163 ±      603.187  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5     20958.906 ±     9501.740    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.932 ±        8.028  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                thrpt    5        15.328 ±      131.983    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                                       thrpt    5        19.000                 counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                                        thrpt    5        36.000                     ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                                thrpt    5    295423.775 ±     6929.570   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 thrpt    5       941.431 ±       22.406  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5      5016.001 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.018 ±        0.156  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.096 ±        0.829    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5       945.777 ±      570.672  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      5041.847 ±     3102.601    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         4.286 ±       36.900    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                                      thrpt    5        14.000                 counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                                       thrpt    5        34.000                     ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                                        thrpt    5    322712.421 ±      375.215   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              thrpt    5           ≈ 0                 counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                                     thrpt    5     78228.263 ±     2425.787   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                                      thrpt    5      1159.341 ±       36.141  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 thrpt    5     23328.005 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.029 ±        0.251  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.585 ±        5.036    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5      1151.546 ±      709.909  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     23183.769 ±    14662.528    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5        16.297 ±      140.326    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                                           thrpt    5        17.000                 counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                                            thrpt    5        37.000                     ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                                       thrpt    5     71139.571 ±     2039.282   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                                        thrpt    5      1429.418 ±       40.937  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                                   thrpt    5     31624.006 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.017 ±        0.139  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.380 ±        3.082    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                  thrpt    5      1492.765 ±      699.240  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                             thrpt    5     33035.088 ±    15830.293    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.932 ±        6.688  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5        20.669 ±      147.986    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                                             thrpt    5        22.000                 counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                                              thrpt    5        37.000                     ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                                thrpt    5     78506.058 ±     4209.693   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                                 thrpt    5       888.309 ±       47.711  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            thrpt    5     17808.005 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.021 ±        0.173  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.418 ±        3.528    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                           thrpt    5       944.589 ±      590.111  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     18961.240 ±    12379.592    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         1.066 ±        7.821  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5        21.611 ±      159.292    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                                      thrpt    5        14.000                 counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                                       thrpt    5        46.000                     ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                               thrpt    5    100754.337 ±     3964.147   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                                thrpt    5      1061.214 ±       41.399  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           thrpt    5     16576.004 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.025 ±        0.160  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.390 ±        2.479    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                          thrpt    5      1082.919 ±      565.367  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     16922.033 ±     9082.950    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5        12.347 ±      106.309    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                                     thrpt    5        16.000                 counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                                      thrpt    5        33.000                     ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                                    thrpt    5     43649.655 ±     1627.225   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                                     thrpt    5      2093.940 ±       78.059  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                thrpt    5     75512.010 ±        0.002    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.025 ±        0.194  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.883 ±        6.982    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                               thrpt    5      2042.022 ±        0.190  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                          thrpt    5     73645.283 ±     2756.004    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                                          thrpt    5        30.000                 counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                                           thrpt    5        29.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                                      thrpt    5    118151.897 ±     3715.533   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                                       thrpt    5       815.446 ±       25.586  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                                  thrpt    5     10864.004 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.031 ±        0.268  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.415 ±        3.574    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                 thrpt    5       808.401 ±      702.839  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                            thrpt    5     10779.135 ±     9563.655    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                          thrpt    5         1.199 ±        7.565  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5        15.941 ±      100.353    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                                            thrpt    5        12.000                 counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                                             thrpt    5        40.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                               thrpt    5    165010.178 ±     1582.388   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                                thrpt    5       244.911 ±        2.433  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           thrpt    5      2336.003 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                          thrpt    5       268.424 ±      577.803  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      2560.904 ±     5512.588    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         1.275 ±       10.977    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                                     thrpt    5         4.000                 counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                                      thrpt    5        18.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                                              thrpt    5    780994.599 ±    47479.128   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                               thrpt    5       968.532 ±       58.606  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          thrpt    5      1952.001 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.024 ±        0.155  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.047 ±        0.308    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                         thrpt    5       946.614 ±      572.668  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      1908.238 ±     1163.150    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         1.591 ±       13.701    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                                    thrpt    5        14.000                 counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                                     thrpt    5        33.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                                      thrpt    5    812200.690 ±    14569.609   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            thrpt    5           ≈ 0                 counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                                   thrpt    5    201847.926 ±     1510.964   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                                    thrpt    5       657.571 ±        5.031  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                               thrpt    5      5128.002 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                              thrpt    5       671.342 ±        0.357  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                         thrpt    5      5235.412 ±       39.410    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                                         thrpt    5        10.000                 counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                                          thrpt    5        44.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                                   thrpt    5    126713.390 ±     7025.824   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                                    thrpt    5      1560.531 ±       87.316  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                               thrpt    5     19384.003 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.026 ±        0.133  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.326 ±        1.654    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                              thrpt    5      1563.014 ±      709.049  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     19418.054 ±     8874.891    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5         8.463 ±       72.869    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                                         thrpt    5        23.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                                          thrpt    5        32.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                                            thrpt    5    167404.732 ±     8867.938   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                                             thrpt    5       893.306 ±       47.234  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        thrpt    5      8400.003 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.035 ±        0.240  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.333 ±        2.303    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                       thrpt    5       878.459 ±      709.783  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      8255.199 ±     6551.931    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         7.452 ±       64.160    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                                  thrpt    5        13.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                                   thrpt    5        39.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                                           thrpt    5    315405.196 ±     5710.900   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                                            thrpt    5       612.445 ±       10.850  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5      3056.001 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                      thrpt    5       606.306 ±      579.734  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      3025.391 ±     2893.053    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                                 thrpt    5         9.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                                  thrpt    5        27.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                                thrpt    5     63850.892 ±      846.231   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                                 thrpt    5      2695.394 ±       35.624  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            thrpt    5     66448.006 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.005 ±        0.019  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.135 ±        0.473    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                           thrpt    5      2722.755 ±        0.558  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     67123.154 ±      883.461    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                                      thrpt    5        40.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                                       thrpt    5        39.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                                  thrpt    5    167477.022 ±     3470.426   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                                   thrpt    5       822.277 ±       17.082  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                                              thrpt    5      7728.003 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.007 ±        0.056  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.061 ±        0.527    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                             thrpt    5       878.148 ±      718.809  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      8250.004 ±     6687.961    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.799 ±        5.561  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         7.556 ±       52.663    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                                        thrpt    5        13.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                                         thrpt    5        42.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                                           thrpt    5    292188.691 ±     2824.513   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                                            thrpt    5       288.117 ±        2.731  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       thrpt    5      1552.001 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                      thrpt    5       269.103 ±      579.264  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      1449.407 ±     3120.007    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                                 thrpt    5         4.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                                  thrpt    5        17.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                                          thrpt    5   1146511.869 ±    47421.080   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           thrpt    5       851.020 ±       34.532  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5      1168.000 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.019 ±        0.108  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.026 ±        0.148    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                     thrpt    5       809.496 ±      699.977  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                thrpt    5      1110.995 ±      958.640    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                              thrpt    5         0.933 ±        6.688  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         1.274 ±        9.135    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                                thrpt    5        12.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                                 thrpt    5        31.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                                  thrpt    5   1206354.508 ±    17591.684   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              thrpt    5        ≈ 10⁻³                   B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        thrpt    5           ≈ 0                 counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                               thrpt    5    302178.818 ±    21262.693   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                                thrpt    5       824.681 ±       58.147  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           thrpt    5      4296.001 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.013 ±        0.111  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.066 ±        0.566    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                          thrpt    5       809.063 ±      707.533  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      4222.763 ±     3855.457    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                   thrpt    5         1.199 ±        7.564  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         6.253 ±       39.458    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                                     thrpt    5        12.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                                      thrpt    5        45.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                                thrpt    5      4340.114 ±      188.838   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                                 thrpt    5       856.577 ±       36.854  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                            thrpt    5    310640.098 ±        0.025    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.023 ±        0.196  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         8.326 ±       71.693    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                           thrpt    5       875.893 ±      718.293  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                      thrpt    5    317692.455 ±   261329.979    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                    thrpt    5         1.066 ±        7.821  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                               thrpt    5       389.342 ±     2856.841    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                                      thrpt    5        13.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                                       thrpt    5        40.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                                         thrpt    5      4598.063 ±      145.544   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                          thrpt    5       819.249 ±       26.041  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     thrpt    5    280456.092 ±        0.016    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.011 ±        0.094  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         3.700 ±       31.857    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                    thrpt    5       874.808 ±      716.915  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                               thrpt    5    299487.581 ±   245474.391    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                             thrpt    5         1.199 ±        6.123  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                        thrpt    5       410.295 ±     2095.063    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                               thrpt    5        13.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                                thrpt    5        51.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                                        thrpt    5     30411.067 ±      957.007   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                         thrpt    5       516.693 ±       16.254  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    thrpt    5     26744.015 ±        0.008    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                   thrpt    5       470.742 ±      709.825  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                              thrpt    5     24367.719 ±    36758.298    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                            thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         6.817 ±       58.697    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                                              thrpt    5         7.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                               thrpt    5        23.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                                             thrpt    5      3768.266 ±      148.924   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                              thrpt    5       961.958 ±       37.890  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                         thrpt    5    401792.112 ±        0.019    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.009 ±        0.075  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         3.571 ±       30.749    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                        thrpt    5      1011.753 ±       31.350  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                   thrpt    5    422606.224 ±    11933.841    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                 thrpt    5         1.199 ±        6.124  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                            thrpt    5       502.301 ±     2573.192    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                                   thrpt    5        15.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                                    thrpt    5        48.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                               thrpt    5     13912.205 ±      631.176   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                                thrpt    5       872.452 ±       40.218  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                           thrpt    5     98713.273 ±      121.550    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.051 ±        0.274  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         5.743 ±       30.704    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                          thrpt    5       875.937 ±      701.741  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     99223.194 ±    81750.365    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                   thrpt    5         1.199 ±        7.565  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                              thrpt    5       135.786 ±      854.353    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                                     thrpt    5        13.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                                      thrpt    5        42.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                                        thrpt    5     16006.512 ±      876.006   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                         thrpt    5       829.127 ±       45.200  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    thrpt    5     81536.024 ±        0.301    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.022 ±        0.117  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         2.187 ±       11.539    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                   thrpt    5       807.759 ±      704.260  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                              thrpt    5     79533.514 ±    71394.555    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                            thrpt    5         1.332 ±        8.698  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                       thrpt    5       133.119 ±      872.786    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                                              thrpt    5        12.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                               thrpt    5        45.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                                       thrpt    5    273233.015 ±    13224.713   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                        thrpt    5       963.824 ±       47.046  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5      5552.002 ±        0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'            thrpt    5         0.022 ±        0.188  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       thrpt    5         0.125 ±        1.076    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                  thrpt    5       946.126 ±      590.330  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                             thrpt    5      5450.559 ±     3405.435    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                           thrpt    5         1.199 ±        7.779  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                      thrpt    5         7.017 ±       45.763    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                                             thrpt    5        14.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                                              thrpt    5        33.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                               thrpt    5    289898.461 ±    16690.116   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     thrpt    5           ≈ 0                 counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                                            thrpt    5     14750.582 ±      653.056   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                             thrpt    5       819.212 ±       36.406  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                        thrpt    5     87415.611 ±        3.324    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.042 ±        0.361  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         4.409 ±       37.966    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                       thrpt    5       807.078 ±      700.343  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                  thrpt    5     86150.504 ±    75309.283    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                thrpt    5         1.199 ±        8.957  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                           thrpt    5       128.493 ±      958.464    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                                  thrpt    5        12.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                                   thrpt    5        46.000                     ms
[info] ArraysBenchmark.readCirce                                                                               thrpt    5    856001.898 ±    13624.342   ops/s
[info] ArraysBenchmark.readCirce:·gc.alloc.rate                                                                thrpt    5      2771.484 ±       43.871  MB/sec
[info] ArraysBenchmark.readCirce:·gc.alloc.rate.norm                                                           thrpt    5      5096.000 ±        0.001    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    thrpt    5         0.002 ±        0.007  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               thrpt    5         0.004 ±        0.013    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                          thrpt    5      2791.079 ±      587.322  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                     thrpt    5      5132.845 ±     1151.369    B/op
[info] ArraysBenchmark.readCirce:·gc.count                                                                     thrpt    5        41.000                 counts
[info] ArraysBenchmark.readCirce:·gc.time                                                                      thrpt    5        38.000                     ms
[info] ArraysBenchmark.readJacksonScala                                                                        thrpt    5   1420012.140 ±    26719.998   ops/s
[info] ArraysBenchmark.readJacksonScala:·gc.alloc.rate                                                         thrpt    5      1335.216 ±       24.634  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                    thrpt    5      1480.000 ±        0.001    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.021 ±        0.123  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.023 ±        0.136    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                   thrpt    5      1356.429 ±       29.852  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                              thrpt    5      1503.538 ±       41.270    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                            thrpt    5         1.066 ±        6.688  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5         1.182 ±        7.414    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.count                                                              thrpt    5        20.000                 counts
[info] ArraysBenchmark.readJacksonScala:·gc.time                                                               thrpt    5        40.000                     ms
[info] ArraysBenchmark.readJsoniterScala                                                                       thrpt    5   7957551.767 ±    34150.805   ops/s
[info] ArraysBenchmark.readJsoniterScala:·gc.alloc.rate                                                        thrpt    5      1981.784 ±        9.389  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                   thrpt    5       392.000 ±        0.001    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.017 ±        0.132  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.003 ±        0.026    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                  thrpt    5      1974.141 ±      586.364  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             thrpt    5       390.474 ±      115.149    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.count                                                             thrpt    5        29.000                 counts
[info] ArraysBenchmark.readJsoniterScala:·gc.time                                                              thrpt    5        23.000                     ms
[info] ArraysBenchmark.readPlayJson                                                                            thrpt    5    306849.873 ±    18794.284   ops/s
[info] ArraysBenchmark.readPlayJson:·gc.alloc.rate                                                             thrpt    5      1823.341 ±      112.195  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.alloc.rate.norm                                                        thrpt    5      9352.001 ±        0.001    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 thrpt    5         0.035 ±        0.292  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            thrpt    5         0.180 ±        1.487    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                       thrpt    5      1834.778 ±      730.569  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                  thrpt    5      9407.399 ±     3534.628    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                thrpt    5         0.932 ±        8.028  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                           thrpt    5         4.921 ±       42.374    B/op
[info] ArraysBenchmark.readPlayJson:·gc.count                                                                  thrpt    5        27.000                 counts
[info] ArraysBenchmark.readPlayJson:·gc.time                                                                   thrpt    5        43.000                     ms
[info] ArraysBenchmark.writeCirce                                                                              thrpt    5    989617.424 ±    47714.102   ops/s
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate                                                               thrpt    5      2177.893 ±      104.781  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate.norm                                                          thrpt    5      3464.000 ±        0.001    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   thrpt    5         0.038 ±        0.310  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              thrpt    5         0.060 ±        0.493    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                         thrpt    5      2178.302 ±      717.610  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                    thrpt    5      3464.493 ±     1121.399    B/op
[info] ArraysBenchmark.writeCirce:·gc.count                                                                    thrpt    5        32.000                 counts
[info] ArraysBenchmark.writeCirce:·gc.time                                                                     thrpt    5        31.000                     ms
[info] ArraysBenchmark.writeJacksonScala                                                                       thrpt    5   2987213.074 ±   191190.824   ops/s
[info] ArraysBenchmark.writeJacksonScala:·gc.alloc.rate                                                        thrpt    5      1700.667 ±      109.756  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                   thrpt    5       896.000 ±        0.001    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.010 ±        0.077  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.005 ±        0.040    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                  thrpt    5      1698.182 ±       33.998  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                             thrpt    5       894.833 ±       41.027    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.932 ±        8.029  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5         0.506 ±        4.358    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.count                                                             thrpt    5        25.000                 counts
[info] ArraysBenchmark.writeJacksonScala:·gc.time                                                              thrpt    5        37.000                     ms
[info] ArraysBenchmark.writeJsoniterScala                                                                      thrpt    5   9850711.868 ±   978940.504   ops/s
[info] ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate                                                       thrpt    5       600.774 ±       59.469  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                  thrpt    5        96.000 ±        0.001    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                 thrpt    5       605.420 ±      579.197  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            thrpt    5        96.522 ±       89.545    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.count                                                            thrpt    5         9.000                 counts
[info] ArraysBenchmark.writeJsoniterScala:·gc.time                                                             thrpt    5        29.000                     ms
[info] ArraysBenchmark.writeJsoniterScalaPrealloc                                                              thrpt    5   8102580.934 ±    91425.485   ops/s
[info] ArraysBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                               thrpt    5       453.000 ±        5.271  MB/sec
[info] ArraysBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                          thrpt    5        88.000 ±        0.001    B/op
[info] ArraysBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                         thrpt    5       470.900 ±      709.386  MB/sec
[info] ArraysBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                    thrpt    5        91.529 ±      138.527    B/op
[info] ArraysBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                    thrpt    5         7.000                 counts
[info] ArraysBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                     thrpt    5        23.000                     ms
[info] ArraysBenchmark.writePlayJson                                                                           thrpt    5    476940.277 ±    40655.975   ops/s
[info] ArraysBenchmark.writePlayJson:·gc.alloc.rate                                                            thrpt    5      1658.047 ±      141.472  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.alloc.rate.norm                                                       thrpt    5      5472.001 ±        0.001    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.045 ±        0.373  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5         0.148 ±        1.227    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                      thrpt    5      1697.090 ±       38.935  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5      5602.525 ±      363.696    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                               thrpt    5         1.066 ±        7.821  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                          thrpt    5         3.637 ±       26.850    B/op
[info] ArraysBenchmark.writePlayJson:·gc.count                                                                 thrpt    5        25.000                 counts
[info] ArraysBenchmark.writePlayJson:·gc.time                                                                  thrpt    5        43.000                     ms
[info] BitSetsBenchmark.readJacksonScala                                                                       thrpt    5   1975169.809 ±    39601.613   ops/s
[info] BitSetsBenchmark.readJacksonScala:·gc.alloc.rate                                                        thrpt    5      1254.847 ±       25.029  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   thrpt    5      1000.000 ±        0.001    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.016 ±        0.135  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.012 ±        0.107    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                  thrpt    5      1219.813 ±      722.274  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                             thrpt    5       972.050 ±      574.343    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                           thrpt    5         1.066 ±        7.820  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5         0.855 ±        6.272    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.count                                                             thrpt    5        18.000                 counts
[info] BitSetsBenchmark.readJacksonScala:·gc.time                                                              thrpt    5        39.000                     ms
[info] BitSetsBenchmark.readJsoniterScala                                                                      thrpt    5   5074615.527 ±   167327.048   ops/s
[info] BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate                                                       thrpt    5       670.647 ±       21.895  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  thrpt    5       208.000 ±        0.001    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 thrpt    5       674.104 ±        0.389  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            thrpt    5       209.084 ±        6.817    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.666 ±        5.735  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5         0.207 ±        1.786    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.count                                                            thrpt    5        10.000                 counts
[info] BitSetsBenchmark.readJsoniterScala:·gc.time                                                             thrpt    5        31.000                     ms
[info] BitSetsBenchmark.readPlayJson                                                                           thrpt    5    383795.787 ±    13658.193   ops/s
[info] BitSetsBenchmark.readPlayJson:·gc.alloc.rate                                                            thrpt    5      1792.763 ±       64.295  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       thrpt    5      7352.001 ±        0.001    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.016 ±        0.133  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5         0.067 ±        0.545    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      thrpt    5      1834.210 ±      733.271  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5      7519.579 ±     2876.620    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                               thrpt    5         0.932 ±        8.029  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                          thrpt    5         3.880 ±       33.408    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.count                                                                 thrpt    5        27.000                 counts
[info] BitSetsBenchmark.readPlayJson:·gc.time                                                                  thrpt    5        41.000                     ms
[info] BitSetsBenchmark.writeJacksonScala                                                                      thrpt    5   2316976.425 ±   146839.072   ops/s
[info] BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate                                                       thrpt    5      1224.815 ±       77.435  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  thrpt    5       832.000 ±        0.001    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.019 ±        0.157  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.013 ±        0.107    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 thrpt    5      1286.808 ±      572.783  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            thrpt    5       874.155 ±      387.780    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.933 ±        8.030  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5         0.649 ±        5.592    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.count                                                            thrpt    5        19.000                 counts
[info] BitSetsBenchmark.writeJacksonScala:·gc.time                                                             thrpt    5        43.000                     ms
[info] BitSetsBenchmark.writeJsoniterScala                                                                     thrpt    5   6815620.142 ±   210204.732   ops/s
[info] BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      thrpt    5      1039.367 ±       31.936  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 thrpt    5       240.000 ±        0.001    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.027 ±        0.221  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.006 ±        0.052    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                thrpt    5      1083.040 ±      566.872  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           thrpt    5       250.010 ±      127.350    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.933 ±        6.690  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5         0.217 ±        1.560    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.count                                                           thrpt    5        16.000                 counts
[info] BitSetsBenchmark.writeJsoniterScala:·gc.time                                                            thrpt    5        38.000                     ms
[info] BitSetsBenchmark.writeJsoniterScalaPrealloc                                                             thrpt    5   6713057.660 ±   237403.451   ops/s
[info] BitSetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              thrpt    5       818.877 ±       28.794  MB/sec
[info] BitSetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         thrpt    5       192.000 ±        0.001    B/op
[info] BitSetsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.016 ±        0.141  MB/sec
[info] BitSetsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.004 ±        0.033    B/op
[info] BitSetsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                        thrpt    5       809.930 ±      721.083  MB/sec
[info] BitSetsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                   thrpt    5       189.973 ±      170.606    B/op
[info] BitSetsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.799 ±        6.882  MB/sec
[info] BitSetsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         0.186 ±        1.603    B/op
[info] BitSetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   thrpt    5        12.000                 counts
[info] BitSetsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                    thrpt    5        32.000                     ms
[info] BitSetsBenchmark.writePlayJson                                                                          thrpt    5    577884.020 ±    14705.017   ops/s
[info] BitSetsBenchmark.writePlayJson:·gc.alloc.rate                                                           thrpt    5      1674.389 ±       41.453  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      thrpt    5      4560.001 ±        0.001    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               thrpt    5         0.021 ±        0.171  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          thrpt    5         0.056 ±        0.460    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                     thrpt    5      1698.315 ±       31.220  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                thrpt    5      4625.259 ±      106.592    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                              thrpt    5         1.066 ±        9.180  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                         thrpt    5         2.920 ±       25.140    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.count                                                                thrpt    5        25.000                 counts
[info] BitSetsBenchmark.writePlayJson:·gc.time                                                                 thrpt    5        40.000                     ms
[info] ExtractFieldsBenchmark.readCirce                                                                        thrpt    5    730967.655 ±    20329.088   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                                         thrpt    5      2389.399 ±       64.542  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                                    thrpt    5      5144.001 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.017 ±        0.124  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.037 ±        0.267    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5      2450.913 ±      583.201  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5      5276.266 ±     1231.612    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                                              thrpt    5        36.000                 counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                               thrpt    5        35.000                     ms
[info] ExtractFieldsBenchmark.readDslJsonJava                                                                  thrpt    5   5324034.134 ±   393001.109   ops/s
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate                                                   thrpt    5       324.714 ±       23.864  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                              thrpt    5        96.000 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                             thrpt    5       266.949 ±      574.628  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                        thrpt    5        78.315 ±      168.605    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.count                                                        thrpt    5         4.000                 counts
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.time                                                         thrpt    5        19.000                     ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                                 thrpt    5    791389.638 ±    52003.240   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                                  thrpt    5       981.509 ±       64.107  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             thrpt    5      1952.001 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.047 ±        0.403  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.093 ±        0.800    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5      1013.430 ±       26.802  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      2015.822 ±      103.087    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                     thrpt    5         1.199 ±        7.779  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         2.399 ±       15.486    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                                       thrpt    5        15.000                 counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                                        thrpt    5        47.000                     ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                                thrpt    5   7745188.561 ±   151835.912   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                                 thrpt    5       354.296 ±        6.960  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5        72.000 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5       404.489 ±      580.792  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5        82.190 ±      117.807    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                                      thrpt    5         6.000                 counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                                       thrpt    5        16.000                     ms
[info] ExtractFieldsBenchmark.readPlayJson                                                                     thrpt    5    267251.462 ±    20730.710   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                                      thrpt    5      1480.561 ±      115.189  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 thrpt    5      8720.002 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.034 ±        0.221  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.204 ±        1.321    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5      1491.188 ±      701.192  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5      8790.710 ±     4398.203    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                         thrpt    5         1.066 ±        7.821  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5         6.375 ±       46.683    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                                           thrpt    5        22.000                 counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                                            thrpt    5        47.000                     ms
[info] GoogleMapsAPIBenchmark.readCirce                                                                        thrpt    5      7243.670 ±      269.195   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                                         thrpt    5      1744.173 ±       64.722  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                    thrpt    5    378984.058 ±        0.010    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.077 ±        0.108  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5        16.722 ±       23.783    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5      1767.861 ±      589.720  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5    384197.263 ±   131206.428    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                            thrpt    5         0.666 ±        5.735  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5       145.353 ±     1251.533    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                                              thrpt    5        26.000                 counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                               thrpt    5        33.000                     ms
[info] GoogleMapsAPIBenchmark.readDslJsonJava                                                                  thrpt    5     11283.322 ±      122.927   ops/s
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate                                                   thrpt    5       260.083 ±        2.835  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                              thrpt    5     36280.037 ±        0.006    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                             thrpt    5       265.984 ±      572.585  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     37146.557 ±    79963.870    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.799 ±        5.560  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5       111.774 ±      777.755    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count                                                        thrpt    5         4.000                 counts
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time                                                         thrpt    5        20.000                     ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                                 thrpt    5     12847.367 ±      249.685   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                                  thrpt    5       326.467 ±        6.319  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             thrpt    5     39992.032 ±        0.004    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5       335.722 ±        0.275  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5     41126.581 ±      798.008    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                                       thrpt    5         5.000                 counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                                        thrpt    5        23.000                     ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                                thrpt    5     22809.509 ±      278.011   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                                 thrpt    5       427.406 ±        5.106  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5     29496.020 ±        0.008    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5       404.398 ±      580.546  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     27932.889 ±    40538.991    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                                      thrpt    5         6.000                 counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                                       thrpt    5        18.000                     ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                                     thrpt    5      2189.061 ±       64.518   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                                      thrpt    5      1366.597 ±       40.219  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 thrpt    5    982665.797 ±       13.814    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.038 ±        0.168  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5        26.985 ±      120.470    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5      1355.439 ±       32.602  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5    974652.545 ±     9676.751    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.932 ±        8.027  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5       670.323 ±     5771.679    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                                           thrpt    5        20.000                 counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                                            thrpt    5        44.000                     ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                                       thrpt    5      7093.933 ±      254.265   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                                        thrpt    5      1562.216 ±       55.673  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                                   thrpt    5    346632.059 ±        0.009    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.029 ±        0.154  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         6.436 ±       34.437    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                  thrpt    5      1562.592 ±      707.481  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                             thrpt    5    346654.018 ±   154061.836    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.799 ±        6.881  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5       179.167 ±     1542.684    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                                             thrpt    5        23.000                 counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                                              thrpt    5        32.000                     ms
[info] GoogleMapsAPIBenchmark.writeDslJsonJava                                                                 thrpt    5     53156.350 ±     2555.333   ops/s
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate                                                  thrpt    5       524.905 ±       25.223  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                             thrpt    5     15544.008 ±        0.001    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                            thrpt    5       533.624 ±      702.841  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                       thrpt    5     15849.508 ±    21380.707    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.133 ±        1.147  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         3.939 ±       33.917    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count                                                       thrpt    5         8.000                 counts
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time                                                        thrpt    5        40.000                     ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                                thrpt    5     37710.513 ±     1763.975   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                                 thrpt    5       561.338 ±       26.303  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            thrpt    5     23431.864 ±        0.253    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                           thrpt    5       536.646 ±      707.667  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     22381.989 ±    29302.063    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.400 ±        1.405  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5        16.617 ±       58.422    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                                      thrpt    5         8.000                 counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                                       thrpt    5        38.000                     ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                               thrpt    5     74319.554 ±     3922.097   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                                thrpt    5       558.639 ±       29.528  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           thrpt    5     11832.006 ±        0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                          thrpt    5       605.407 ±      579.073  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     12833.250 ±    12401.515    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                                     thrpt    5         9.000                 counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                                      thrpt    5        29.000                     ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                                       thrpt    5     96491.401 ±      183.415   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   thrpt    5         0.004 ±        0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             thrpt    5           ≈ 0                 counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                                    thrpt    5      5825.669 ±      134.307   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                                     thrpt    5      1658.773 ±       37.593  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                                thrpt    5    448119.976 ±        2.371    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.057 ±        0.159  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5        15.381 ±       42.960    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                               thrpt    5      1629.869 ±      578.853  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                          thrpt    5    440475.480 ±   163434.171    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.933 ±        8.030  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5       252.712 ±     2175.930    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                                          thrpt    5        24.000                 counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                                           thrpt    5        41.000                     ms
[info] IntAndLongMapsBenchmark.readJsoniterScala                                                               thrpt    5   5077031.217 ±    76444.758   ops/s
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate                                                thrpt    5      1522.502 ±       22.586  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           thrpt    5       472.000 ±        0.001    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.025 ±        0.132  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.008 ±        0.041    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                          thrpt    5      1495.617 ±      725.159  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5       463.786 ±      229.439    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.666 ±        5.734  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         0.205 ±        1.768    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.count                                                     thrpt    5        22.000                 counts
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.time                                                      thrpt    5        25.000                     ms
[info] IntAndLongMapsBenchmark.readPlayJson                                                                    thrpt    5    333253.720 ±    13310.136   ops/s
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate                                                     thrpt    5      1821.044 ±       73.452  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                thrpt    5      8600.001 ±        0.001    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.013 ±        0.072  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.064 ±        0.343    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                               thrpt    5      1835.392 ±      727.760  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                          thrpt    5      8667.662 ±     3412.924    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.932 ±        8.029  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5         4.481 ±       38.580    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.count                                                          thrpt    5        27.000                 counts
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.time                                                           thrpt    5        39.000                     ms
[info] IntAndLongMapsBenchmark.writeJsoniterScala                                                              thrpt    5   3322304.889 ±   141666.019   ops/s
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                               thrpt    5       489.715 ±       20.677  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          thrpt    5       232.000 ±        0.001    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                         thrpt    5       470.927 ±      709.318  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5       222.913 ±      333.215    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.count                                                    thrpt    5         7.000                 counts
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.time                                                     thrpt    5        23.000                     ms
[info] IntAndLongMapsBenchmark.writeJsoniterScalaPrealloc                                                      thrpt    5   3248782.189 ±   131349.554   ops/s
[info] IntAndLongMapsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       thrpt    5       379.764 ±       15.345  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  thrpt    5       184.000 ±        0.001    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                 thrpt    5       336.339 ±        0.118  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                            thrpt    5       162.975 ±        6.681    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            thrpt    5         5.000                 counts
[info] IntAndLongMapsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                             thrpt    5        17.000                     ms
[info] IntAndLongMapsBenchmark.writePlayJson                                                                   thrpt    5    362575.258 ±    15557.817   ops/s
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate                                                    thrpt    5      1422.577 ±       60.869  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                               thrpt    5      6176.001 ±        0.001    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.038 ±        0.244  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.167 ±        1.059    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                              thrpt    5      1423.702 ±      598.982  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                         thrpt    5      6178.297 ±     2450.636    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.932 ±        8.028  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5         4.053 ±       34.896    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.count                                                         thrpt    5        21.000                 counts
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.time                                                          thrpt    5        43.000                     ms
[info] IntBenchmark.readCirce                                                                                  thrpt    5   6806577.192 ±   153152.966   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                                   thrpt    5      4220.611 ±       93.644  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                                              thrpt    5       976.000 ±        0.001    B/op
[info] IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       thrpt    5         0.004 ±        0.005  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  thrpt    5         0.001 ±        0.001    B/op
[info] IntBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                             thrpt    5      4220.559 ±      718.046  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                        thrpt    5       976.063 ±      172.647    B/op
[info] IntBenchmark.readCirce:·gc.count                                                                        thrpt    5        62.000                 counts
[info] IntBenchmark.readCirce:·gc.time                                                                         thrpt    5        52.000                     ms
[info] IntBenchmark.readDslJsonJava                                                                            thrpt    5  37030088.645 ±   986195.479   ops/s
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate                                                             thrpt    5       376.445 ±       10.123  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                        thrpt    5        16.000 ±        0.001    B/op
[info] IntBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                       thrpt    5       400.499 ±      574.794  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                  thrpt    5        17.031 ±       24.597    B/op
[info] IntBenchmark.readDslJsonJava:·gc.count                                                                  thrpt    5         6.000                 counts
[info] IntBenchmark.readDslJsonJava:·gc.time                                                                   thrpt    5        29.000                     ms
[info] IntBenchmark.readJacksonScala                                                                           thrpt    5   7438752.326 ±    89154.143   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                                            thrpt    5      2797.769 ±       33.956  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       thrpt    5       592.000 ±        0.001    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.001 ±        0.006  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5        ≈ 10⁻⁴                   B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      thrpt    5      2790.982 ±      588.787  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5       590.559 ±      123.840    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                                 thrpt    5        41.000                 counts
[info] IntBenchmark.readJacksonScala:·gc.time                                                                  thrpt    5        41.000                     ms
[info] IntBenchmark.readJsoniterScala                                                                          thrpt    5  37113888.245 ±  1351314.105   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                                           thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      thrpt    5        ≈ 10⁻⁵                   B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                                thrpt    5           ≈ 0                 counts
[info] IntBenchmark.readNaiveScala                                                                             thrpt    5  26375849.686 ±   716509.073   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                                              thrpt    5      1340.432 ±       36.792  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                                         thrpt    5        80.000 ±        0.001    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  thrpt    5         0.022 ±        0.176  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             thrpt    5         0.001 ±        0.011    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen                                                        thrpt    5      1357.975 ±       22.379  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen.norm                                                   thrpt    5        81.049 ±        1.828    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Survivor_Space                                                 thrpt    5         0.666 ±        5.734  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Survivor_Space.norm                                            thrpt    5         0.040 ±        0.346    B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                                   thrpt    5        20.000                 counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                                    thrpt    5        27.000                     ms
[info] IntBenchmark.readPlayJson                                                                               thrpt    5   6104819.453 ±    85909.379   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                                thrpt    5      2948.237 ±       40.895  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           thrpt    5       760.000 ±        0.001    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    thrpt    5         0.002 ±        0.006  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               thrpt    5        ≈ 10⁻³                   B/op
[info] IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          thrpt    5      2927.716 ±      718.782  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     thrpt    5       754.675 ±      182.402    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                                     thrpt    5        43.000                 counts
[info] IntBenchmark.readPlayJson:·gc.time                                                                      thrpt    5        36.000                     ms
[info] IntBenchmark.writeCirce                                                                                 thrpt    5  19500019.441 ±   646553.531   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                                  thrpt    5      2279.414 ±       75.224  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                                             thrpt    5       184.000 ±        0.001    B/op
[info] IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      thrpt    5         0.016 ±        0.127  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 thrpt    5         0.001 ±        0.010    B/op
[info] IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                            thrpt    5      2246.291 ±      717.424  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                       thrpt    5       181.340 ±       58.442    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                                       thrpt    5        33.000                 counts
[info] IntBenchmark.writeCirce:·gc.time                                                                        thrpt    5        28.000                     ms
[info] IntBenchmark.writeDslJsonJava                                                                           thrpt    5  55705779.538 ±  4347474.492   ops/s
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate                                                            thrpt    5      1698.992 ±      131.862  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                       thrpt    5        48.000 ±        0.001    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.122 ±        1.048  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5         0.003 ±        0.030    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                      thrpt    5      1693.424 ±       54.846  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5        47.852 ±        2.294    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                               thrpt    5         1.466 ±       12.622  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                          thrpt    5         0.042 ±        0.360    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.count                                                                 thrpt    5        25.000                 counts
[info] IntBenchmark.writeDslJsonJava:·gc.time                                                                  thrpt    5        51.000                     ms
[info] IntBenchmark.writeJacksonScala                                                                          thrpt    5  11359675.486 ±   222058.727   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                                           thrpt    5      2252.032 ±       44.004  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      thrpt    5       312.000 ±        0.001    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                               thrpt    5         0.041 ±        0.336  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          thrpt    5         0.006 ±        0.047    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     thrpt    5      2246.668 ±      716.674  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                thrpt    5       311.313 ±      102.258    B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                                thrpt    5        33.000                 counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                                 thrpt    5        30.000                     ms
[info] IntBenchmark.writeJsoniterScala                                                                         thrpt    5  42335989.532 ± 16799847.257   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          thrpt    5       860.673 ±      341.549  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     thrpt    5        32.000 ±        0.001    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.031 ±        0.194  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.001 ±        0.008    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    thrpt    5       877.737 ±      713.850  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               thrpt    5        32.873 ±       29.300    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                             thrpt    5         0.799 ±        6.882  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        thrpt    5         0.033 ±        0.285    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                               thrpt    5        13.000                 counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                                thrpt    5        33.000                     ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                                 thrpt    5  48633113.638 ±   262051.844   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             thrpt    5        ≈ 10⁻⁵                   B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       thrpt    5           ≈ 0                 counts
[info] IntBenchmark.writeNaiveScala                                                                            thrpt    5  33718760.411 ±   677687.619   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                                             thrpt    5      2570.711 ±       52.742  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                                        thrpt    5       120.000 ±        0.001    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 thrpt    5         0.002 ±        0.005  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            thrpt    5        ≈ 10⁻⁴                   B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen                                                       thrpt    5      2586.896 ±      718.949  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen.norm                                                  thrpt    5       120.721 ±       31.172    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                                  thrpt    5        38.000                 counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                                   thrpt    5        30.000                     ms
[info] IntBenchmark.writePlayJson                                                                              thrpt    5   2176597.059 ±    81228.614   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                               thrpt    5      1748.159 ±       65.575  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          thrpt    5      1264.000 ±        0.001    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   thrpt    5         0.035 ±        0.280  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              thrpt    5         0.026 ±        0.206    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         thrpt    5      1767.743 ±      590.457  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    thrpt    5      1278.028 ±      415.403    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                  thrpt    5         0.800 ±        6.884  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                             thrpt    5         0.586 ±        5.050    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                                    thrpt    5        26.000                 counts
[info] IntBenchmark.writePlayJson:·gc.time                                                                     thrpt    5        30.000                     ms
[info] IterablesBenchmark.readCirce                                                                            thrpt    5    581000.537 ±    24705.058   ops/s
[info] IterablesBenchmark.readCirce:·gc.alloc.rate                                                             thrpt    5      2099.776 ±       89.285  MB/sec
[info] IterablesBenchmark.readCirce:·gc.alloc.rate.norm                                                        thrpt    5      5688.001 ±        0.001    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 thrpt    5         0.033 ±        0.268  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            thrpt    5         0.089 ±        0.730    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                       thrpt    5      2110.453 ±      585.382  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                  thrpt    5      5715.656 ±     1466.343    B/op
[info] IterablesBenchmark.readCirce:·gc.count                                                                  thrpt    5        31.000                 counts
[info] IterablesBenchmark.readCirce:·gc.time                                                                   thrpt    5        29.000                     ms
[info] IterablesBenchmark.readJacksonScala                                                                     thrpt    5    594256.344 ±     4534.253   ops/s
[info] IterablesBenchmark.readJacksonScala:·gc.alloc.rate                                                      thrpt    5       691.802 ±        5.057  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 thrpt    5      1832.001 ±        0.001    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                thrpt    5       738.431 ±      576.365  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                           thrpt    5      1955.218 ±     1518.212    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.799 ±        6.883  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5         2.120 ±       18.255    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.count                                                           thrpt    5        11.000                 counts
[info] IterablesBenchmark.readJacksonScala:·gc.time                                                            thrpt    5        53.000                     ms
[info] IterablesBenchmark.readJsoniterScala                                                                    thrpt    5   3703003.307 ±   107889.872   ops/s
[info] IterablesBenchmark.readJsoniterScala:·gc.alloc.rate                                                     thrpt    5      1468.039 ±       43.023  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                thrpt    5       624.000 ±        0.001    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.028 ±        0.235  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.012 ±        0.100    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                               thrpt    5      1494.955 ±      727.540  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          thrpt    5       635.353 ±      305.292    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.666 ±        5.734  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5         0.285 ±        2.455    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.count                                                          thrpt    5        22.000                 counts
[info] IterablesBenchmark.readJsoniterScala:·gc.time                                                           thrpt    5        27.000                     ms
[info] IterablesBenchmark.readPlayJson                                                                         thrpt    5    222763.774 ±     5590.249   ops/s
[info] IterablesBenchmark.readPlayJson:·gc.alloc.rate                                                          thrpt    5      1561.286 ±       38.843  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     thrpt    5     11032.002 ±        0.001    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.016 ±        0.125  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.112 ±        0.888    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                    thrpt    5      1560.149 ±      699.587  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                               thrpt    5     11029.504 ±     5149.612    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                             thrpt    5         0.932 ±        6.687  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                        thrpt    5         6.605 ±       47.330    B/op
[info] IterablesBenchmark.readPlayJson:·gc.count                                                               thrpt    5        23.000                 counts
[info] IterablesBenchmark.readPlayJson:·gc.time                                                                thrpt    5        45.000                     ms
[info] IterablesBenchmark.writeCirce                                                                           thrpt    5    828543.987 ±    46316.038   ops/s
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate                                                            thrpt    5      1903.373 ±      106.498  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                                       thrpt    5      3616.001 ±        0.001    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.031 ±        0.251  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5         0.060 ±        0.489    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                      thrpt    5      1904.666 ±      713.280  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5      3620.080 ±     1418.091    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                               thrpt    5         0.666 ±        5.735  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                          thrpt    5         1.296 ±       11.160    B/op
[info] IterablesBenchmark.writeCirce:·gc.count                                                                 thrpt    5        28.000                 counts
[info] IterablesBenchmark.writeCirce:·gc.time                                                                  thrpt    5        30.000                     ms
[info] IterablesBenchmark.writeJacksonScala                                                                    thrpt    5   1289139.492 ±    64089.666   ops/s
[info] IterablesBenchmark.writeJacksonScala:·gc.alloc.rate                                                     thrpt    5       871.523 ±       43.674  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                thrpt    5      1064.000 ±        0.001    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.020 ±        0.171  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.024 ±        0.205    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                               thrpt    5       876.366 ±      713.558  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                          thrpt    5      1069.284 ±      856.437    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                        thrpt    5         1.066 ±        7.822  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5         1.297 ±        9.523    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.count                                                          thrpt    5        13.000                 counts
[info] IterablesBenchmark.writeJacksonScala:·gc.time                                                           thrpt    5        50.000                     ms
[info] IterablesBenchmark.writeJsoniterScala                                                                   thrpt    5   9455815.167 ±    74198.311   ops/s
[info] IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    thrpt    5       384.456 ±        3.043  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               thrpt    5        64.000 ±        0.001    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                              thrpt    5       336.337 ±        0.048  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         thrpt    5        55.990 ±        0.439    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.count                                                         thrpt    5         5.000                 counts
[info] IterablesBenchmark.writeJsoniterScala:·gc.time                                                          thrpt    5        17.000                     ms
[info] IterablesBenchmark.writeJsoniterScalaPrealloc                                                           thrpt    5   9891635.993 ±  1137451.540   ops/s
[info] IterablesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] IterablesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       thrpt    5        ≈ 10⁻⁴                   B/op
[info] IterablesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 thrpt    5           ≈ 0                 counts
[info] IterablesBenchmark.writePlayJson                                                                        thrpt    5    486764.828 ±    15960.937   ops/s
[info] IterablesBenchmark.writePlayJson:·gc.alloc.rate                                                         thrpt    5      1665.033 ±       54.950  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    thrpt    5      5384.001 ±        0.001    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.013 ±        0.097  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.043 ±        0.312    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                   thrpt    5      1630.152 ±      616.050  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                              thrpt    5      5268.741 ±     1877.198    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                            thrpt    5         1.066 ±        7.821  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5         3.480 ±       25.601    B/op
[info] IterablesBenchmark.writePlayJson:·gc.count                                                              thrpt    5        24.000                 counts
[info] IterablesBenchmark.writePlayJson:·gc.time                                                               thrpt    5        38.000                     ms
[info] ListOfBooleansBenchmark.readCirce                                                                       thrpt    5    339059.010 ±     9039.662   ops/s
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                        thrpt    5      2300.540 ±       61.290  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                   thrpt    5     10680.001 ±        0.001    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.004 ±        0.013  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.019 ±        0.062    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                  thrpt    5      2314.406 ±      585.996  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                             thrpt    5     10746.656 ±     2857.083    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.count                                                             thrpt    5        34.000                 counts
[info] ListOfBooleansBenchmark.readCirce:·gc.time                                                              thrpt    5        28.000                     ms
[info] ListOfBooleansBenchmark.readJacksonScala                                                                thrpt    5    413962.278 ±     9758.394   ops/s
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                 thrpt    5      1091.895 ±       25.903  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            thrpt    5      4152.001 ±        0.001    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.029 ±        0.184  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.111 ±        0.701    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                           thrpt    5      1150.377 ±      713.156  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      4374.933 ±     2726.824    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         1.066 ±        6.437  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         4.068 ±       24.568    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.count                                                      thrpt    5        17.000                 counts
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.time                                                       thrpt    5        44.000                     ms
[info] ListOfBooleansBenchmark.readJsoniterScala                                                               thrpt    5    434073.096 ±    26305.501   ops/s
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                thrpt    5       856.007 ±       51.151  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           thrpt    5      3104.001 ±        0.001    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.010 ±        0.063  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.039 ±        0.231    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                          thrpt    5       878.953 ±      714.585  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      3187.816 ±     2599.419    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.666 ±        5.736  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         2.454 ±       21.126    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.count                                                     thrpt    5        13.000                 counts
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.time                                                      thrpt    5        30.000                     ms
[info] ListOfBooleansBenchmark.readPlayJson                                                                    thrpt    5     97374.113 ±     2305.144   ops/s
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                     thrpt    5      3527.075 ±       81.482  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                thrpt    5     57000.004 ±        0.001    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.003 ±        0.007  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.049 ±        0.108    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                               thrpt    5      3540.605 ±      719.549  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                          thrpt    5     57216.745 ±    11365.290    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.count                                                          thrpt    5        52.000                 counts
[info] ListOfBooleansBenchmark.readPlayJson:·gc.time                                                           thrpt    5        47.000                     ms
[info] ListOfBooleansBenchmark.writeCirce                                                                      thrpt    5    311407.961 ±    11832.960   ops/s
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                       thrpt    5       759.743 ±       29.101  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                                  thrpt    5      3840.001 ±        0.001    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.005 ±        0.046  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.027 ±        0.232    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                 thrpt    5       742.169 ±      579.308  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                            thrpt    5      3749.629 ±     2875.545    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.666 ±        5.735  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5         3.352 ±       28.862    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.count                                                            thrpt    5        11.000                 counts
[info] ListOfBooleansBenchmark.writeCirce:·gc.time                                                             thrpt    5        34.000                     ms
[info] ListOfBooleansBenchmark.writeJacksonScala                                                               thrpt    5    638120.836 ±    41633.814   ops/s
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                thrpt    5       467.176 ±       29.417  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           thrpt    5      1152.001 ±        0.001    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                          thrpt    5       469.804 ±      707.115  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      1162.700 ±     1801.520    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.count                                                     thrpt    5         7.000                 counts
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.time                                                      thrpt    5        31.000                     ms
[info] ListOfBooleansBenchmark.writeJsoniterScala                                                              thrpt    5   2531746.603 ±    67460.244   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                               thrpt    5      1170.946 ±       31.604  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          thrpt    5       728.000 ±        0.001    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.023 ±        0.131  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.015 ±        0.082    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                         thrpt    5      1152.396 ±      714.250  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5       716.547 ±      446.029    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.932 ±        8.028  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         0.585 ±        5.033    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                    thrpt    5        17.000                 counts
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                     thrpt    5        29.000                     ms
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                      thrpt    5   2497644.174 ±     6264.773   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            thrpt    5           ≈ 0                 counts
[info] ListOfBooleansBenchmark.writePlayJson                                                                   thrpt    5    429439.361 ±     9772.124   ops/s
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                    thrpt    5       617.709 ±       13.961  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                               thrpt    5      2264.001 ±        0.001    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                              thrpt    5       605.460 ±      579.184  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                         thrpt    5      2216.974 ±     2094.761    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.count                                                         thrpt    5         9.000                 counts
[info] ListOfBooleansBenchmark.writePlayJson:·gc.time                                                          thrpt    5        35.000                     ms
[info] MapsBenchmark.readCirce                                                                                 thrpt    5    595198.437 ±    20325.458   ops/s
[info] MapsBenchmark.readCirce:·gc.alloc.rate                                                                  thrpt    5      2069.151 ±       71.291  MB/sec
[info] MapsBenchmark.readCirce:·gc.alloc.rate.norm                                                             thrpt    5      5472.001 ±        0.001    B/op
[info] MapsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      thrpt    5         0.030 ±        0.232  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 thrpt    5         0.080 ±        0.620    B/op
[info] MapsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                            thrpt    5      2109.549 ±      587.403  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                       thrpt    5      5579.529 ±     1589.200    B/op
[info] MapsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                     thrpt    5         0.666 ±        5.735  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                thrpt    5         1.780 ±       15.329    B/op
[info] MapsBenchmark.readCirce:·gc.count                                                                       thrpt    5        31.000                 counts
[info] MapsBenchmark.readCirce:·gc.time                                                                        thrpt    5        30.000                     ms
[info] MapsBenchmark.readJacksonScala                                                                          thrpt    5    603701.354 ±    17075.558   ops/s
[info] MapsBenchmark.readJacksonScala:·gc.alloc.rate                                                           thrpt    5       932.895 ±       27.135  MB/sec
[info] MapsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                      thrpt    5      2432.001 ±        0.001    B/op
[info] MapsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                               thrpt    5         0.042 ±        0.358  MB/sec
[info] MapsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          thrpt    5         0.107 ±        0.924    B/op
[info] MapsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                     thrpt    5       943.676 ±      577.679  MB/sec
[info] MapsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                thrpt    5      2460.867 ±     1522.260    B/op
[info] MapsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                              thrpt    5         0.933 ±        8.031  MB/sec
[info] MapsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         thrpt    5         2.421 ±       20.848    B/op
[info] MapsBenchmark.readJacksonScala:·gc.count                                                                thrpt    5        14.000                 counts
[info] MapsBenchmark.readJacksonScala:·gc.time                                                                 thrpt    5        53.000                     ms
[info] MapsBenchmark.readJsoniterScala                                                                         thrpt    5   5319864.867 ±   109314.780   ops/s
[info] MapsBenchmark.readJsoniterScala:·gc.alloc.rate                                                          thrpt    5      1325.010 ±       26.816  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                     thrpt    5       392.000 ±        0.001    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.032 ±        0.257  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.009 ±        0.076    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                    thrpt    5      1290.195 ±      579.596  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               thrpt    5       381.688 ±      171.007    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                             thrpt    5         0.666 ±        5.735  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        thrpt    5         0.198 ±        1.702    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.count                                                               thrpt    5        19.000                 counts
[info] MapsBenchmark.readJsoniterScala:·gc.time                                                                thrpt    5        27.000                     ms
[info] MapsBenchmark.readPlayJson                                                                              thrpt    5    322460.064 ±     8282.446   ops/s
[info] MapsBenchmark.readPlayJson:·gc.alloc.rate                                                               thrpt    5      1702.771 ±       43.881  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                          thrpt    5      8312.001 ±        0.001    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   thrpt    5         0.017 ±        0.141  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              thrpt    5         0.081 ±        0.686    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                         thrpt    5      1698.238 ±       29.992  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                    thrpt    5      8289.971 ±       69.837    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                  thrpt    5         0.932 ±        8.028  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                             thrpt    5         4.606 ±       39.662    B/op
[info] MapsBenchmark.readPlayJson:·gc.count                                                                    thrpt    5        25.000                 counts
[info] MapsBenchmark.readPlayJson:·gc.time                                                                     thrpt    5        40.000                     ms
[info] MapsBenchmark.writeCirce                                                                                thrpt    5    441816.987 ±    14247.790   ops/s
[info] MapsBenchmark.writeCirce:·gc.alloc.rate                                                                 thrpt    5      1120.435 ±       36.230  MB/sec
[info] MapsBenchmark.writeCirce:·gc.alloc.rate.norm                                                            thrpt    5      3992.001 ±        0.001    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     thrpt    5         0.034 ±        0.255  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                thrpt    5         0.121 ±        0.909    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                           thrpt    5      1083.720 ±      583.783  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                      thrpt    5      3861.481 ±     2087.396    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                    thrpt    5         0.666 ±        5.735  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                               thrpt    5         2.375 ±       20.449    B/op
[info] MapsBenchmark.writeCirce:·gc.count                                                                      thrpt    5        16.000                 counts
[info] MapsBenchmark.writeCirce:·gc.time                                                                       thrpt    5        36.000                     ms
[info] MapsBenchmark.writeJsoniterScala                                                                        thrpt    5   3116016.798 ±    50469.876   ops/s
[info] MapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                         thrpt    5       522.607 ±        8.445  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                    thrpt    5       264.000 ±        0.001    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                   thrpt    5       538.177 ±      709.510  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              thrpt    5       272.079 ±      361.031    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.count                                                              thrpt    5         8.000                 counts
[info] MapsBenchmark.writeJsoniterScala:·gc.time                                                               thrpt    5        26.000                     ms
[info] MapsBenchmark.writeJsoniterScalaPrealloc                                                                thrpt    5   3270003.696 ±   137238.591   ops/s
[info] MapsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                 thrpt    5       481.951 ±       20.193  MB/sec
[info] MapsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                            thrpt    5       232.000 ±        0.001    B/op
[info] MapsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                           thrpt    5       470.873 ±      709.285  MB/sec
[info] MapsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                      thrpt    5       226.303 ±      336.238    B/op
[info] MapsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                      thrpt    5         7.000                 counts
[info] MapsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                       thrpt    5        23.000                     ms
[info] MapsBenchmark.writePlayJson                                                                             thrpt    5    345601.114 ±    11102.100   ops/s
[info] MapsBenchmark.writePlayJson:·gc.alloc.rate                                                              thrpt    5      1248.886 ±       40.424  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                         thrpt    5      5688.001 ±        0.001    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  thrpt    5         0.033 ±        0.281  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             thrpt    5         0.153 ±        1.295    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                        thrpt    5      1218.645 ±      720.157  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                   thrpt    5      5553.315 ±     3365.472    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                 thrpt    5         0.932 ±        6.687  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                            thrpt    5         4.271 ±       30.596    B/op
[info] MapsBenchmark.writePlayJson:·gc.count                                                                   thrpt    5        18.000                 counts
[info] MapsBenchmark.writePlayJson:·gc.time                                                                    thrpt    5        45.000                     ms
[info] MissingReqFieldBenchmark.readCirce                                                                      thrpt    5   2184997.678 ±    77547.944   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                                       thrpt    5      3109.607 ±      109.851  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                                  thrpt    5      2240.000 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.002 ±        0.005  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.002 ±        0.004    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                 thrpt    5      3063.381 ±        1.353  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                            thrpt    5      2206.852 ±       78.668    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                                            thrpt    5        45.000                 counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                                             thrpt    5        37.000                     ms
[info] MissingReqFieldBenchmark.readDslJsonJava                                                                thrpt    5    770148.861 ±    28032.618   ops/s
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate                                                 thrpt    5       364.020 ±       13.270  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                            thrpt    5       744.001 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                           thrpt    5       333.429 ±        1.499  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                      thrpt    5       681.523 ±       23.040    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.266 ±        1.405  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         0.549 ±        2.893    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.count                                                      thrpt    5         5.000                 counts
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.time                                                       thrpt    5        25.000                     ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                               thrpt    5    276971.166 ±     6413.036   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                                thrpt    5       489.907 ±       11.466  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           thrpt    5      2784.002 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                          thrpt    5       470.289 ±      709.698  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      2675.490 ±     4074.443    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.400 ±        1.405  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         2.265 ±        7.961    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                                     thrpt    5         7.000                 counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                                      thrpt    5        32.000                     ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                                              thrpt    5    663398.367 ±    39193.490   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                               thrpt    5       418.104 ±       24.583  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          thrpt    5       992.001 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                         thrpt    5       404.437 ±      580.256  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5       958.802 ±     1359.296    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                                    thrpt    5         6.000                 counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                                     thrpt    5        16.000                     ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                                          thrpt    5   3814430.251 ±    91157.954   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                                           thrpt    5      1221.544 ±       28.792  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                                      thrpt    5       504.000 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.026 ±        0.133  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.011 ±        0.055    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen                                     thrpt    5      1221.410 ±      721.453  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen.norm                                thrpt    5       504.230 ±      305.772    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space                              thrpt    5         0.666 ±        5.737  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         0.277 ±        2.388    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                                thrpt    5        18.000                 counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                                 thrpt    5        27.000                     ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                                    thrpt    5   6993353.141 ±   452514.576   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                                     thrpt    5       568.709 ±       36.648  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                                thrpt    5       128.000 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen                               thrpt    5       606.650 ±      580.403  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen.norm                          thrpt    5       136.868 ±      134.713    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                                          thrpt    5         9.000                 counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                                           thrpt    5        24.000                     ms
[info] MissingReqFieldBenchmark.readPlayJson                                                                   thrpt    5    186226.512 ±     6111.834   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                                    thrpt    5      1244.675 ±       40.745  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                               thrpt    5     10520.002 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.017 ±        0.147  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.145 ±        1.243    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                              thrpt    5      1285.776 ±      599.971  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     10864.794 ±     4971.817    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.932 ±        8.029  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5         7.863 ±       67.706    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                                         thrpt    5        19.000                 counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                                          thrpt    5        52.000                     ms
[info] MutableIterablesBenchmark.readCirce                                                                     thrpt    5    666250.035 ±    20808.425   ops/s
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate                                                      thrpt    5      2546.415 ±       79.841  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm                                                 thrpt    5      6016.001 ±        0.001    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.003 ±        0.004  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.007 ±        0.010    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                thrpt    5      2586.750 ±      718.391  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                           thrpt    5      6110.518 ±     1634.398    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.count                                                           thrpt    5        38.000                 counts
[info] MutableIterablesBenchmark.readCirce:·gc.time                                                            thrpt    5        32.000                     ms
[info] MutableIterablesBenchmark.readJsoniterScala                                                             thrpt    5   3349557.056 ±   117223.176   ops/s
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate                                              thrpt    5      2162.363 ±       74.953  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         thrpt    5      1016.000 ±        0.001    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.006 ±        0.037  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.003 ±        0.017    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                        thrpt    5      2178.635 ±      717.710  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      1024.030 ±      357.211    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.count                                                   thrpt    5        32.000                 counts
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.time                                                    thrpt    5        31.000                     ms
[info] MutableIterablesBenchmark.readPlayJson                                                                  thrpt    5    253263.968 ±    10568.239   ops/s
[info] MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate                                                   thrpt    5      1804.868 ±       74.420  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate.norm                                              thrpt    5     11216.002 ±        0.001    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.013 ±        0.104  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.080 ±        0.640    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                             thrpt    5      1834.400 ±      730.825  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     11396.837 ±     4384.009    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.933 ±        8.032  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         5.908 ±       50.869    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.count                                                        thrpt    5        27.000                 counts
[info] MutableIterablesBenchmark.readPlayJson:·gc.time                                                         thrpt    5        41.000                     ms
[info] MutableIterablesBenchmark.writeCirce                                                                    thrpt    5    727430.885 ±    30104.788   ops/s
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate                                                     thrpt    5      1578.717 ±       65.719  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                                thrpt    5      3416.001 ±        0.001    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.019 ±        0.108  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.041 ±        0.231    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                               thrpt    5      1563.026 ±      708.398  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                          thrpt    5      3383.723 ±     1591.980    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.666 ±        5.734  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5         1.452 ±       12.505    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.count                                                          thrpt    5        23.000                 counts
[info] MutableIterablesBenchmark.writeCirce:·gc.time                                                           thrpt    5        31.000                     ms
[info] MutableIterablesBenchmark.writeJacksonScala                                                             thrpt    5   1262688.284 ±    20368.656   ops/s
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate                                              thrpt    5       725.261 ±       11.822  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         thrpt    5       904.000 ±        0.001    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                        thrpt    5       671.171 ±        1.694  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5       836.590 ±       12.151    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                 thrpt    5         1.066 ±        6.437  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         1.326 ±        7.988    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.count                                                   thrpt    5        10.000                 counts
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.time                                                    thrpt    5        49.000                     ms
[info] MutableIterablesBenchmark.writeJsoniterScala                                                            thrpt    5   7496485.424 ±   224616.243   ops/s
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate                                             thrpt    5       381.005 ±       11.496  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        thrpt    5        80.000 ±        0.001    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                       thrpt    5       336.511 ±        1.058  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5        70.661 ±        2.264    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                thrpt    5         0.133 ±        1.147  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         0.028 ±        0.240    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.count                                                  thrpt    5         5.000                 counts
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.time                                                   thrpt    5        17.000                     ms
[info] MutableIterablesBenchmark.writeJsoniterScalaPrealloc                                                    thrpt    5   7740630.140 ±   586317.607   ops/s
[info] MutableIterablesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     thrpt    5        78.693 ±        5.976  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                thrpt    5        16.000 ±        0.001    B/op
[info] MutableIterablesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                               thrpt    5        68.213 ±      587.338  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                          thrpt    5        14.118 ±      121.561    B/op
[info] MutableIterablesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          thrpt    5         1.000                 counts
[info] MutableIterablesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                           thrpt    5         4.000                     ms
[info] MutableIterablesBenchmark.writePlayJson                                                                 thrpt    5    482495.931 ±    23501.482   ops/s
[info] MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate                                                  thrpt    5      1630.741 ±       79.847  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate.norm                                             thrpt    5      5320.001 ±        0.001    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.017 ±        0.136  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.056 ±        0.440    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                            thrpt    5      1628.989 ±      577.143  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      5313.200 ±     1816.361    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                     thrpt    5         1.066 ±        7.820  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         3.529 ±       26.008    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.count                                                       thrpt    5        24.000                 counts
[info] MutableIterablesBenchmark.writePlayJson:·gc.time                                                        thrpt    5        41.000                     ms
[info] MutableMapsBenchmark.readJacksonScala                                                                   thrpt    5    613528.347 ±    16271.652   ops/s
[info] MutableMapsBenchmark.readJacksonScala:·gc.alloc.rate                                                    thrpt    5      1001.302 ±       25.296  MB/sec
[info] MutableMapsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               thrpt    5      2568.001 ±        0.001    B/op
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.043 ±        0.283  MB/sec
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.109 ±        0.726    B/op
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                              thrpt    5       944.067 ±      568.485  MB/sec
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                         thrpt    5      2421.116 ±     1454.273    B/op
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.931 ±        6.672  MB/sec
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5         2.398 ±       17.203    B/op
[info] MutableMapsBenchmark.readJacksonScala:·gc.count                                                         thrpt    5        14.000                 counts
[info] MutableMapsBenchmark.readJacksonScala:·gc.time                                                          thrpt    5        50.000                     ms
[info] MutableMapsBenchmark.readJsoniterScala                                                                  thrpt    5   3154964.317 ±   135496.725   ops/s
[info] MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate                                                   thrpt    5      1491.225 ±       63.562  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              thrpt    5       744.000 ±        0.001    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.022 ±        0.109  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.011 ±        0.054    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                             thrpt    5      1494.879 ±      703.704  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5       745.538 ±      337.356    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.666 ±        5.734  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         0.332 ±        2.857    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.count                                                        thrpt    5        22.000                 counts
[info] MutableMapsBenchmark.readJsoniterScala:·gc.time                                                         thrpt    5        28.000                     ms
[info] MutableMapsBenchmark.readPlayJson                                                                       thrpt    5    270115.395 ±     7561.288   ops/s
[info] MutableMapsBenchmark.readPlayJson:·gc.alloc.rate                                                        thrpt    5      1422.584 ±       39.701  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                   thrpt    5      8288.002 ±        0.001    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.006 ±        0.050  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.036 ±        0.294    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                  thrpt    5      1424.518 ±      580.050  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                             thrpt    5      8301.453 ±     3482.767    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                           thrpt    5         1.066 ±        7.824  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5         6.244 ±       45.815    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.count                                                             thrpt    5        21.000                 counts
[info] MutableMapsBenchmark.readPlayJson:·gc.time                                                              thrpt    5        43.000                     ms
[info] MutableMapsBenchmark.writeCirce                                                                         thrpt    5    451781.713 ±     7507.383   ops/s
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate                                                          thrpt    5      1136.797 ±       18.885  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm                                                     thrpt    5      3960.001 ±        0.001    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.037 ±        0.280  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.128 ±        0.972    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                    thrpt    5      1152.038 ±      713.489  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                               thrpt    5      4014.428 ±     2526.345    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                             thrpt    5         0.666 ±        5.737  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                        thrpt    5         2.317 ±       19.946    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.count                                                               thrpt    5        17.000                 counts
[info] MutableMapsBenchmark.writeCirce:·gc.time                                                                thrpt    5        36.000                     ms
[info] MutableMapsBenchmark.writeJsoniterScala                                                                 thrpt    5   2842124.355 ±    27905.756   ops/s
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  thrpt    5       577.800 ±        5.433  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             thrpt    5       320.000 ±        0.001    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                            thrpt    5       605.463 ±      579.365  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5       335.429 ±      322.265    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.count                                                       thrpt    5         9.000                 counts
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.time                                                        thrpt    5        30.000                     ms
[info] MutableMapsBenchmark.writeJsoniterScalaPrealloc                                                         thrpt    5   2846764.154 ±    34572.976   ops/s
[info] MutableMapsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                          thrpt    5       448.520 ±        5.435  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                     thrpt    5       248.000 ±        0.001    B/op
[info] MutableMapsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                    thrpt    5       470.904 ±      709.415  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                               thrpt    5       260.509 ±      394.094    B/op
[info] MutableMapsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                               thrpt    5         7.000                 counts
[info] MutableMapsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                thrpt    5        23.000                     ms
[info] MutableMapsBenchmark.writePlayJson                                                                      thrpt    5    360625.632 ±    18511.512   ops/s
[info] MutableMapsBenchmark.writePlayJson:·gc.alloc.rate                                                       thrpt    5      1385.608 ±       71.154  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                  thrpt    5      6048.001 ±        0.001    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.041 ±        0.257  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.179 ±        1.128    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                 thrpt    5      1422.823 ±      568.458  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                            thrpt    5      6212.129 ±     2545.753    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                          thrpt    5         1.065 ±        7.819  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5         4.680 ±       34.260    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.count                                                            thrpt    5        21.000                 counts
[info] MutableMapsBenchmark.writePlayJson:·gc.time                                                             thrpt    5        46.000                     ms
[info] PrimitivesBenchmark.readCirce                                                                           thrpt    5    630391.416 ±    36537.206   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                                            thrpt    5      1951.423 ±      112.245  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                                       thrpt    5      4872.001 ±        0.001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.012 ±        0.081  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5         0.032 ±        0.207    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                      thrpt    5      1904.871 ±      724.599  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5      4755.576 ±     1779.554    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                               thrpt    5         0.666 ±        5.736  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                          thrpt    5         1.696 ±       14.602    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                                 thrpt    5        28.000                 counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                                  thrpt    5        28.000                     ms
[info] PrimitivesBenchmark.readJacksonScala                                                                    thrpt    5   1363801.236 ±    84592.202   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                                     thrpt    5      1032.877 ±       64.738  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                thrpt    5      1192.000 ±        0.001    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.045 ±        0.300  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.051 ±        0.343    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                               thrpt    5      1081.504 ±      565.396  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                          thrpt    5      1248.555 ±      664.689    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                        thrpt    5         1.199 ±        6.386  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5         1.389 ±        7.348    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                                          thrpt    5        16.000                 counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                                           thrpt    5        48.000                     ms
[info] PrimitivesBenchmark.readJsoniterScala                                                                   thrpt    5   6788889.522 ±    68182.754   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                                    thrpt    5       207.024 ±        2.063  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                               thrpt    5        48.000 ±        0.001    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                              thrpt    5       202.083 ±      710.351  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         thrpt    5        46.936 ±      164.988    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.133 ±        1.147  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5         0.031 ±        0.266    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                                         thrpt    5         3.000                 counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                                          thrpt    5         8.000                     ms
[info] PrimitivesBenchmark.readPlayJson                                                                        thrpt    5    208224.911 ±     3727.140   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                                         thrpt    5      1432.978 ±       25.398  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                    thrpt    5     10832.002 ±        0.001    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.021 ±        0.124  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.156 ±        0.937    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                   thrpt    5      1491.719 ±      701.337  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                              thrpt    5     11276.886 ±     5332.282    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                            thrpt    5         1.066 ±        6.688  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5         8.058 ±       50.569    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                                              thrpt    5        22.000                 counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                               thrpt    5        48.000                     ms
[info] PrimitivesBenchmark.writeCirce                                                                          thrpt    5    848943.582 ±    23447.743   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                                           thrpt    5      1380.803 ±       38.735  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                                      thrpt    5      2560.000 ±        0.001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                               thrpt    5         0.019 ±        0.132  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          thrpt    5         0.035 ±        0.246    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                     thrpt    5      1357.504 ±       23.196  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                thrpt    5      2516.905 ±       78.827    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                              thrpt    5         0.666 ±        5.736  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                         thrpt    5         1.240 ±       10.674    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                                thrpt    5        20.000                 counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                                 thrpt    5        32.000                     ms
[info] PrimitivesBenchmark.writeJacksonScala                                                                   thrpt    5   2229145.786 ±    56155.717   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                                    thrpt    5       917.707 ±       23.069  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                               thrpt    5       648.000 ±        0.001    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.034 ±        0.243  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.024 ±        0.172    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                              thrpt    5       876.435 ±      704.868  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                         thrpt    5       619.364 ±      508.179    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.933 ±        8.030  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5         0.659 ±        5.670    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                                         thrpt    5        13.000                 counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                                          thrpt    5        45.000                     ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                                  thrpt    5   6031906.799 ±   115932.296   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                   thrpt    5       674.509 ±       13.400  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                              thrpt    5       176.000 ±        0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                             thrpt    5       672.775 ±        0.563  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5       175.551 ±        3.406    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                                        thrpt    5        10.000                 counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                                         thrpt    5        32.000                     ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                                          thrpt    5   5886326.407 ±   279598.271   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                           thrpt    5       359.046 ±       16.825  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                      thrpt    5        96.000 ±        0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                     thrpt    5       403.668 ±      579.050  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                thrpt    5       107.698 ±      150.111    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                thrpt    5         6.000                 counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                 thrpt    5        19.000                     ms
[info] PrimitivesBenchmark.writePlayJson                                                                       thrpt    5    311979.476 ±    10061.456   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                                        thrpt    5      1608.232 ±       52.151  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                   thrpt    5      8112.001 ±        0.001    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.043 ±        0.362  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.216 ±        1.830    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                  thrpt    5      1560.962 ±      732.441  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                             thrpt    5      7870.507 ±     3569.615    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                           thrpt    5         1.066 ±        7.821  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5         5.389 ±       39.496    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                                             thrpt    5        23.000                 counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                                              thrpt    5        40.000                     ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                                   thrpt    5   4258322.782 ±    75806.201   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                                    thrpt    5      3051.933 ±       52.973  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                               thrpt    5      1128.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.002 ±        0.004  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.001 ±        0.002    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                              thrpt    5      3063.485 ±        2.351  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                         thrpt    5      1132.289 ±       20.136    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                                         thrpt    5        45.000                 counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                                          thrpt    5        36.000                     ms
[info] StringOfAsciiCharsBenchmark.readDslJsonJava                                                             thrpt    5   7558387.313 ±   138064.562   ops/s
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                              thrpt    5       806.715 ±       14.902  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                         thrpt    5       168.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                        thrpt    5       801.545 ±      700.266  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                   thrpt    5       167.014 ±      147.858    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                 thrpt    5         1.465 ±       11.238  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         0.306 ±        2.347    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count                                                   thrpt    5        12.000                 counts
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time                                                    thrpt    5        57.000                     ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                                            thrpt    5   3832169.951 ±    96707.350   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                             thrpt    5      1986.847 ±       50.309  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        thrpt    5       816.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.014 ±        0.113  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.006 ±        0.047    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                       thrpt    5      2040.736 ±       14.380  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5       838.158 ±       19.692    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±        6.882  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         0.330 ±        2.839    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                                  thrpt    5        30.000                 counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                                   thrpt    5        33.000                     ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                                           thrpt    5   6720141.131 ±   275755.003   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                            thrpt    5       717.289 ±       29.523  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5       168.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                      thrpt    5       674.080 ±        0.189  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5       157.894 ±        6.492    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                               thrpt    5         0.666 ±        5.735  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         0.158 ±        1.359    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                                 thrpt    5        10.000                 counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                                  thrpt    5        27.000                     ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                                thrpt    5   4737307.925 ±   157500.363   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                                 thrpt    5      2552.501 ±       84.265  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            thrpt    5       848.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.003 ±        0.005  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.001 ±        0.002    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                           thrpt    5      2518.960 ±      717.547  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                      thrpt    5       836.792 ±      232.112    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                                      thrpt    5        37.000                 counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                                       thrpt    5        31.000                     ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                                  thrpt    5   2812867.877 ±    53415.407   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                                   thrpt    5      1172.266 ±       22.523  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                              thrpt    5       656.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.029 ±        0.250  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.016 ±        0.140    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                             thrpt    5      1152.507 ±      710.898  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                        thrpt    5       645.134 ±      403.641    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.666 ±        5.734  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         0.376 ±        3.236    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                                        thrpt    5        17.000                 counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                                         thrpt    5        32.000                     ms
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava                                                            thrpt    5   8418093.959 ±   242819.274   ops/s
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                             thrpt    5       812.917 ±       23.548  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                        thrpt    5       152.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                       thrpt    5       801.565 ±      701.530  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                  thrpt    5       149.942 ±      132.563    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                thrpt    5         1.465 ±       12.618  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         0.272 ±        2.345    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                                  thrpt    5        12.000                 counts
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                                   thrpt    5        57.000                     ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                                           thrpt    5   1839218.252 ±     6692.741   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                            thrpt    5       570.189 ±        2.034  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       thrpt    5       488.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                      thrpt    5       538.183 ±      709.458  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5       460.718 ±      608.546    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                                 thrpt    5         8.000                 counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                                  thrpt    5        33.000                     ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                                          thrpt    5   8661170.148 ±   741242.765   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           thrpt    5       836.342 ±       71.524  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5       152.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.039 ±        0.340  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.007 ±        0.064    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                     thrpt    5       877.014 ±      717.412  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                thrpt    5       159.436 ±      131.029    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                              thrpt    5         0.932 ±        6.688  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         0.171 ±        1.232    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                                thrpt    5        13.000                 counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                                 thrpt    5        34.000                     ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                                  thrpt    5   8181755.525 ±     5546.968   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              thrpt    5        ≈ 10⁻⁴                   B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        thrpt    5           ≈ 0                 counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                               thrpt    5   3200914.418 ±   139768.514   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                                thrpt    5      1024.901 ±       44.932  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           thrpt    5       504.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.025 ±        0.130  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.012 ±        0.063    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                          thrpt    5      1014.627 ±       23.609  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                     thrpt    5       498.977 ±       14.138    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.799 ±        6.881  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         0.393 ±        3.386    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                                     thrpt    5        15.000                 counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                                      thrpt    5        36.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                                thrpt    5    767065.527 ±    38346.524   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                                 thrpt    5      1286.630 ±       64.600  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                            thrpt    5      2640.001 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.016 ±        0.086  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.033 ±        0.177    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                           thrpt    5      1289.291 ±      592.588  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      2644.740 ±     1186.140    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.666 ±        5.734  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         1.376 ±       11.851    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                                      thrpt    5        19.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                                       thrpt    5        30.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava                                                          thrpt    5   2978899.104 ±    74062.376   ops/s
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                           thrpt    5       832.790 ±       20.824  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                      thrpt    5       440.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.096 ±        0.825  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.051 ±        0.435    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                     thrpt    5       802.801 ±      696.311  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                thrpt    5       424.438 ±      374.174    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                              thrpt    5         1.599 ±        7.821  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         0.844 ±        4.135    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count                                                thrpt    5        12.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time                                                 thrpt    5        54.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                                         thrpt    5   1062737.962 ±    21247.414   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                          thrpt    5       783.302 ±       15.641  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     thrpt    5      1160.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.029 ±        0.252  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         0.043 ±        0.371    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                    thrpt    5       808.978 ±      704.144  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                               thrpt    5      1199.076 ±     1066.511    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                             thrpt    5         0.799 ±        6.884  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                        thrpt    5         1.187 ±       10.225    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                               thrpt    5        12.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                                thrpt    5        49.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                                        thrpt    5   1838440.913 ±    34072.140   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                         thrpt    5       513.957 ±        9.740  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    thrpt    5       440.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                   thrpt    5       539.227 ±      710.339  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                              thrpt    5       462.052 ±      613.220    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                                              thrpt    5         8.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                               thrpt    5        21.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                                             thrpt    5   1092905.669 ±    58671.871   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                              thrpt    5       777.646 ±       41.921  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                         thrpt    5      1120.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.009 ±        0.077  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.013 ±        0.110    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                        thrpt    5       740.786 ±      577.290  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      1068.385 ±      872.293    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.799 ±        6.882  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         1.134 ±        9.761    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                                   thrpt    5        11.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                                    thrpt    5        42.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                               thrpt    5   1695685.957 ±    46389.654   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                                thrpt    5      1378.882 ±       37.835  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                           thrpt    5      1280.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.019 ±        0.120  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.018 ±        0.112    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                          thrpt    5      1357.372 ±       23.183  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      1260.057 ±       20.291    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.666 ±        5.734  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         0.623 ±        5.361    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                                     thrpt    5        20.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                                      thrpt    5        35.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava                                                         thrpt    5   2963282.613 ±    45822.359   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                          thrpt    5       692.869 ±       10.645  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                     thrpt    5       368.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                    thrpt    5       667.091 ±        1.693  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                               thrpt    5       354.313 ±        5.608    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                             thrpt    5         0.400 ±        1.405  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                        thrpt    5         0.212 ±        0.746    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                               thrpt    5        10.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                                thrpt    5        49.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                                        thrpt    5   2425566.634 ±    49207.756   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                         thrpt    5       973.886 ±       19.834  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    thrpt    5       632.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.030 ±        0.259  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         0.019 ±        0.167    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                   thrpt    5       946.615 ±      590.182  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                              thrpt    5       614.224 ±      380.925    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                            thrpt    5         0.799 ±        6.882  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         0.522 ±        4.492    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                                              thrpt    5        14.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                               thrpt    5        38.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                                       thrpt    5   2892299.776 ±   113574.615   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                        thrpt    5       676.171 ±       26.512  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5       368.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                  thrpt    5       672.814 ±        1.181  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                             thrpt    5       366.203 ±       14.356    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                             thrpt    5        10.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                              thrpt    5        32.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                               thrpt    5   2980032.477 ±   157492.160   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           thrpt    5        ≈ 10⁻⁴                   B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     thrpt    5           ≈ 0                 counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                                            thrpt    5   2255284.918 ±    69726.296   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                             thrpt    5      1031.624 ±       32.095  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                        thrpt    5       720.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.019 ±        0.103  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.013 ±        0.072    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                       thrpt    5      1014.663 ±       23.741  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                  thrpt    5       708.193 ±       24.595    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±        6.881  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         0.555 ±        4.775    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                                  thrpt    5        15.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                                   thrpt    5        36.000                     ms
[info] TwitterAPIBenchmark.readCirce                                                                           thrpt    5     11084.674 ±     2414.149   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                                            thrpt    5      1624.174 ±      346.752  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                       thrpt    5    230633.069 ±      942.119    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.009 ±        0.044  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5         1.231 ±        6.224    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                      thrpt    5      1629.589 ±      585.408  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5    231859.845 ±    93470.079    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                               thrpt    5         0.799 ±        5.560  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                          thrpt    5       116.743 ±      799.738    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                                 thrpt    5        24.000                 counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                                  thrpt    5        46.000                     ms
[info] TwitterAPIBenchmark.readJacksonScala                                                                    thrpt    5     14327.699 ±      417.953   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                                     thrpt    5       202.382 ±        5.788  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                thrpt    5     22233.649 ±       33.662    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                               thrpt    5       201.131 ±      707.007  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                          thrpt    5     22181.853 ±    77977.591    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.266 ±        2.294  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5        29.168 ±      251.142    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                                          thrpt    5         3.000                 counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                                           thrpt    5        16.000                     ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                                   thrpt    5     38010.313 ±      192.197   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                                    thrpt    5       351.970 ±        1.662  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                               thrpt    5     14576.012 ±        0.006    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                              thrpt    5       337.008 ±        0.090  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     13956.392 ±       69.173    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                                         thrpt    5         5.000                 counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                                          thrpt    5        15.000                     ms
[info] TwitterAPIBenchmark.readPlayJson                                                                        thrpt    5      2851.515 ±     1095.106   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                                         thrpt    5       904.756 ±      346.643  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                                    thrpt    5    499214.099 ±      525.526    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.013 ±        0.115  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         6.939 ±       59.748    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                   thrpt    5       875.730 ±      701.252  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                              thrpt    5    482334.727 ±   309629.027    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                            thrpt    5         0.933 ±        8.032  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5       492.785 ±     4243.027    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                                              thrpt    5        13.000                 counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                               thrpt    5       107.000                     ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                                   thrpt    5     56404.843 ±     2318.666   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                                    thrpt    5       720.244 ±       29.511  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                               thrpt    5     20100.009 ±        0.162    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                              thrpt    5       670.016 ±        0.171  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     18699.992 ±      771.286    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.799 ±        6.882  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5        22.073 ±      190.052    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                                         thrpt    5        10.000                 counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                                          thrpt    5        50.000                     ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                                  thrpt    5     88170.099 ±     3201.602   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                                   thrpt    5       578.097 ±       21.109  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                              thrpt    5     10320.005 ±        0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                             thrpt    5       605.474 ±      579.221  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     10810.070 ±    10357.423    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                                        thrpt    5         9.000                 counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                                         thrpt    5        29.000                     ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                                          thrpt    5    102398.989 ±      711.078   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                           thrpt    5         6.766 ±        0.050  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                      thrpt    5       104.004 ±        0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                thrpt    5           ≈ 0                 counts
[info] VectorOfBooleansBenchmark.readCirce                                                                     thrpt    5    317338.541 ±     8993.534   ops/s
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                      thrpt    5      1700.011 ±       47.372  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                 thrpt    5      8432.001 ±        0.001    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.026 ±        0.195  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.128 ±        0.965    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                thrpt    5      1700.499 ±       12.182  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                           thrpt    5      8434.788 ±      249.663    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.666 ±        5.734  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5         3.300 ±       28.413    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.count                                                           thrpt    5        25.000                 counts
[info] VectorOfBooleansBenchmark.readCirce:·gc.time                                                            thrpt    5        26.000                     ms
[info] VectorOfBooleansBenchmark.readJacksonScala                                                              thrpt    5    410822.101 ±    23570.739   ops/s
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                               thrpt    5       501.188 ±       28.440  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          thrpt    5      1920.001 ±        0.001    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                         thrpt    5       537.312 ±      708.668  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      2061.164 ±     2747.605    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.133 ±        1.147  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         0.502 ±        4.320    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.count                                                    thrpt    5         8.000                 counts
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.time                                                     thrpt    5        36.000                     ms
[info] VectorOfBooleansBenchmark.readJsoniterScala                                                             thrpt    5   1148324.104 ±    19475.754   ops/s
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                              thrpt    5       601.203 ±       10.444  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         thrpt    5       824.000 ±        0.001    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                        thrpt    5       606.713 ±      580.466  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5       831.905 ±      800.085    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.count                                                   thrpt    5         9.000                 counts
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.time                                                    thrpt    5        27.000                     ms
[info] VectorOfBooleansBenchmark.readPlayJson                                                                  thrpt    5     98004.204 ±     3632.216   ops/s
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                   thrpt    5      3406.510 ±      127.132  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                              thrpt    5     54704.004 ±        0.001    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.003 ±        0.009  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.050 ±        0.153    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                             thrpt    5      3404.089 ±        1.921  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     54669.156 ±     2002.241    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.count                                                        thrpt    5        50.000                 counts
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.time                                                         thrpt    5        42.000                     ms
[info] VectorOfBooleansBenchmark.writeCirce                                                                    thrpt    5    312608.178 ±    23152.394   ops/s
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                     thrpt    5       775.345 ±       57.179  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                                thrpt    5      3904.001 ±        0.001    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.034 ±        0.293  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.169 ±        1.455    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                               thrpt    5       810.180 ±      717.621  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                          thrpt    5      4078.803 ±     3584.069    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.666 ±        5.735  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5         3.301 ±       28.425    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.count                                                          thrpt    5        12.000                 counts
[info] VectorOfBooleansBenchmark.writeCirce:·gc.time                                                           thrpt    5        35.000                     ms
[info] VectorOfBooleansBenchmark.writeJacksonScala                                                             thrpt    5    734880.483 ±     8832.223   ops/s
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                              thrpt    5       560.259 ±        6.682  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         thrpt    5      1200.001 ±        0.001    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                        thrpt    5       537.515 ±      708.354  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      1151.721 ±     1522.472    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.133 ±        1.147  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         0.285 ±        2.454    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.count                                                   thrpt    5         8.000                 counts
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.time                                                    thrpt    5        36.000                     ms
[info] VectorOfBooleansBenchmark.writeJsoniterScala                                                            thrpt    5   1931924.128 ±    45887.081   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                             thrpt    5       893.563 ±       20.566  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        thrpt    5       728.000 ±        0.001    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.022 ±        0.152  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.018 ±        0.125    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                       thrpt    5       946.003 ±      587.244  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5       771.176 ±      488.826    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                thrpt    5         0.933 ±        6.691  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         0.765 ±        5.496    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                  thrpt    5        14.000                 counts
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                   thrpt    5        36.000                     ms
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                    thrpt    5   1982237.746 ±    38957.753   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                thrpt    5        ≈ 10⁻⁴                   B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          thrpt    5           ≈ 0                 counts
[info] VectorOfBooleansBenchmark.writePlayJson                                                                 thrpt    5    415626.219 ±    24493.778   ops/s
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                  thrpt    5       621.105 ±       36.440  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                             thrpt    5      2352.001 ±        0.001    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                            thrpt    5       605.488 ±      579.308  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      2289.870 ±     2154.012    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.count                                                       thrpt    5         9.000                 counts
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.time                                                        thrpt    5        35.000                     ms
[info] Benchmark result is saved to jdk9.json
[success] Total time: 5283 s, completed Apr 10, 2018 2:04:45 AM
