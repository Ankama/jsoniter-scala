[info] Loading settings from idea.sbt,build.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed Feb 5, 2018, 12:00:10 PM
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}core...
[info] Done updating.
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}macros...
[info] Done updating.
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}benchmark...
[info] Done updating.
[info] Compiling 4 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:983:63: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private def toDouble: Double = java.lang.Double.parseDouble(new String(buf, 0, mark, head - mark))
[warn]                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:480:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:488:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:986:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] four warnings found
[info] Done compiling.
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.6.6-SNAPSHOT.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.6.6-SNAPSHOT.jar ...
[info] Compiling 38 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:13:55: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "bd");
[info]       private def d1(in: JsonReader, default: Option[String]): Option[String] = {
[info]         val x = in.readString(null);
[info]         if (x.eq(null))
[info]           None
[info]         else
[info]           Some(x)
[info]       };
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         _bd = in.readBigDecimal(_bd);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       _os = d1(in, _os)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: Option[String], out: JsonWriter): Unit = if (x.eq(null).||(x.isEmpty))
[info]         out.writeNull()
[info]       else
[info]         out.writeVal(x.get);
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("bd");
[info]             out.writeVal(x.bd)
[info]           };
[info]           {
[info]             val v = x.os;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("os");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val anyRefsCodec: JsonCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:14:52: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Arrays':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Arrays] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Array[Int]] = new Array[Array[Int]](0);
[info]       private val v1: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private val v2: Array[Int] = new Array[Int](0);
[info]       private def d2(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Int](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Int](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d1(in: JsonReader, default: Array[Array[Int]]): Array[Array[Int]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Array[Int]](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Array[Int]](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, d2(in, v2));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Array[Int]](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[scala.math.BigInt](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[scala.math.BigInt](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = if (in.isNextToken('{'))
[info]         {
[info]           var _aa: Array[Array[Int]] = v0;
[info]           var _a: Array[BigInt] = v1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3104 => if (in.isCharBufEqualsTo(l, "aa"))
[info]                       _aa = d1(in, _aa)
[info]                     else
[info]                       in.skip()
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       _a = d3(in, _a)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Arrays(aa = _aa, a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e2(x: Array[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e1(x: Array[Array[Int]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               e2(x(i), out);
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: Array[BigInt], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.aa;
[info]             if (v.ne(null).&&(v.length.>(0)))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("aa");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.a;
[info]             if (v.ne(null).&&(v.length.>(0)))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("a");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val arraysCodec: JsonCodec[Arrays] = make[Arrays](CodecMakerConfig())
[info]                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:15:71: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decode(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encode(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[scala.math.BigInt](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[scala.math.BigInt](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[BigInt], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val bigIntArrayCodec: JsonCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:16:55: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.BitSets':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.BitSets] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = BitSet.newBuilder;
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               BitSet.empty;
[info]             do 
[info]               x.add(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = if (in.isNextToken('{'))
[info]         {
[info]           var _bs: scala.collection.immutable.BitSet = BitSet.empty;
[info]           var _mbs: scala.collection.mutable.BitSet = BitSet.empty;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3153 => if (in.isCharBufEqualsTo(l, "bs"))
[info]                       _bs = d1(in, _bs)
[info]                     else
[info]                       in.skip()
[info]                     case 107902 => if (in.isCharBufEqualsTo(l, "mbs"))
[info]                       _mbs = d2(in, _mbs)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.BitSets(bs = _bs, mbs = _mbs)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.bs;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("bs");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mbs;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mbs");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val bitSetsCodec: JsonCodec[BitSets] = make[BitSets](CodecMakerConfig())
[info]                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:74: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decode(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encode(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Boolean] = new Array[Boolean](0);
[info]       private def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Boolean](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Boolean](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Boolean], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val booleanArrayCodec: JsonCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:65: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decode(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encode(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Byte] = new Array[Byte](0);
[info]       private def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Byte](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Byte](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Byte], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val byteArrayCodec: JsonCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:71: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decode(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encode(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Double] = new Array[Double](0);
[info]       private def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Double](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Double](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val doubleArrayCodec: JsonCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:68: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decode(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encode(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Float] = new Array[Float](0);
[info]       private def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Float](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Float](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Float], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val floatArrayCodec: JsonCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:74: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encode(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.Instant] = new Array[java.time.Instant](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.Instant](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.Instant](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val instantArrayCodec: JsonCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:80: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encode(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.LocalDate](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.LocalDate](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val localDateArrayCodec: JsonCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:80: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encode(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.LocalTime](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.LocalTime](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val localTimeArrayCodec: JsonCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:71: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encode(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.Period] = new Array[java.time.Period](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.Period](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.Period](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.Period], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val periodArrayCodec: JsonCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:83: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encode(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.ZoneOffset](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.ZoneOffset](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val zoneOffsetArrayCodec: JsonCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:71: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decode(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encode(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.ZoneId](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.ZoneId](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val zoneIdArrayCodec: JsonCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:62: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decode(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encode(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Int] = new Array[Int](0);
[info]       private def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Int](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Int](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intArrayCodec: JsonCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:68: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decode(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encode(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Short] = new Array[Short](0);
[info]       private def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Short](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Short](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Short], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val shortArrayCodec: JsonCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:65: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decode(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encode(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Long] = new Array[Long](0);
[info]       private def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Long](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Long](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Long], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val longArrayCodec: JsonCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:65: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decode(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encode(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.util.UUID] = new Array[java.util.UUID](0);
[info]       private def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.util.UUID](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.util.UUID](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val uuidArrayCodec: JsonCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:61: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Iterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Iterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.Vector[String]): scala.collection.immutable.Vector[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d4(in: JsonReader, default: scala.collection.immutable.HashSet[Long]): scala.collection.immutable.HashSet[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = HashSet.newBuilder[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: List[scala.collection.immutable.HashSet[Long]]): List[scala.collection.immutable.HashSet[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[scala.collection.immutable.HashSet[Long]];
[info]             do 
[info]               x.+=(d4(in, HashSet.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.immutable.Vector[String] = Vector.empty[String];
[info]           var _s: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]           var _ls: List[scala.collection.immutable.HashSet[Long]] = List.empty[scala.collection.immutable.HashSet[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Iterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.Vector[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: scala.collection.immutable.HashSet[Long], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: List[scala.collection.immutable.HashSet[Long]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e4(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.l;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("l");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.s;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("s");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.ls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("ls");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val iterablesCodec: JsonCodec[Iterables] = make[Iterables](CodecMakerConfig())
[info]                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:46: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Maps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Maps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Maps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.HashMap[String,Double]): scala.collection.immutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[String, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.HashMap[Long,Double]): scala.collection.immutable.HashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[Long, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]]): scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), d3(in, HashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Maps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.HashMap[String,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.immutable.HashMap[Long,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mapsCodec: JsonCodec[Maps] = make[Maps](CodecMakerConfig())
[info]                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:81: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "i");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("i");
[info]             out.writeVal(x.i)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val missingReqFieldCodec: JsonCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:82: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[String]): scala.collection.mutable.ArrayBuffer[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               ArrayBuffer.empty[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.TreeSet[Int]): scala.collection.mutable.TreeSet[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               TreeSet.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d4(in: JsonReader, default: scala.collection.mutable.Set[Long]): scala.collection.mutable.Set[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               Set.empty[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]]): scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = ResizableArray.newBuilder[scala.collection.mutable.Set[Long]];
[info]             do 
[info]               x.+=(d4(in, Set.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.mutable.ArrayBuffer[String] = ArrayBuffer.empty[String];
[info]           var _s: scala.collection.mutable.TreeSet[Int] = TreeSet.empty[Int];
[info]           var _ls: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = ResizableArray.empty[scala.collection.mutable.Set[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.mutable.ArrayBuffer[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.TreeSet[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: scala.collection.mutable.Set[Long], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e4(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.l;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("l");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.s;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("s");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.ls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("ls");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mutableIterablesCodec: JsonCodec[MutableIterables] = make[MutableIterables](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:67: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.HashMap[String,Double]): scala.collection.mutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               HashMap.empty[String, Double];
[info]             do 
[info]               x.update(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.OpenHashMap[Long,Double]): scala.collection.mutable.OpenHashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               OpenHashMap.empty[Long, Double];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]]): scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]             do 
[info]               x.update(in.readKeyAsInt(), d3(in, OpenHashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.mutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.mutable.HashMap[String,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.mutable.OpenHashMap[Long,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mutableMapsCodec: JsonCodec[MutableMaps] = make[MutableMaps](CodecMakerConfig())
[info]                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:76: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.IntMap[Double]): scala.collection.immutable.IntMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.LongMap[Double]): scala.collection.immutable.LongMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = LongMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]]): scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]             do 
[info]               x.update(in.readKeyAsLong(), d3(in, LongMap.empty[Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.IntMap[Double] = IntMap.empty[Double];
[info]           var _mm: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.IntMap[Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.immutable.LongMap[Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intAndLongMapsCodec: JsonCodec[IntAndLongMaps] = make[IntAndLongMaps](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:64: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var req0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readByte();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readShort();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         _bl = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         _ch = in.readChar();
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         _dbl = in.readDouble();
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         _f = in.readFloat();
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("b");
[info]             out.writeVal(x.b)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("i");
[info]             out.writeVal(x.i)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             out.writeVal(x.l)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("bl");
[info]             out.writeVal(x.bl)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("ch");
[info]             out.writeVal(x.ch)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("dbl");
[info]             out.writeVal(x.dbl)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("f");
[info]             out.writeVal(x.f)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val primitivesCodec: JsonCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:73: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "l");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             out.writeVal(x.l)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val extractFieldsCodec: JsonCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:51: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("a");
[info]       private val r1: Array[String] = Array("b");
[info]       private val r2: Array[String] = Array("l", "r");
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         _a = in.readInt();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readString(_b);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = d0(in, _l);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         _r = d0(in, _r);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           {
[info]             in.scanToKey("type");
[info]             val l = in.readStringAsCharBuf();
[info]             (in.charBufToHashCode(l): @switch) match {
[info]               case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d1(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d2(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d3(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case _ => in.discriminatorValueError("type")
[info]             }
[info]           }
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("A")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("a");
[info]             out.writeVal(x.a)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("B")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("b");
[info]             out.writeVal(x.b)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("C")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             e0(x.l, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("r");
[info]             e0(x.r, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]         case null => out.writeNull()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:52: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[String] {
[info]       def nullValue: String = null;
[info]       def decode(in: JsonReader, default: String): String = in.readString(default);
[info]       def encode(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonCodec[String] = make[String](CodecMakerConfig())
[info]                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:75: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("status");
[info]       private val r1: Array[String] = Array("distance", "duration", "status");
[info]       private val r2: Array[String] = Array("text", "value");
[info]       private def d1(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         _value = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         _distance = d6(in, _distance);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         _duration = d6(in, _duration);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       _elements = d4(in, _elements)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: Seq[String] = Seq.empty[String];
[info]           var _origin_addresses: Seq[String] = Seq.empty[String];
[info]           var _rows: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       _destination_addresses = d1(in, _destination_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       _origin_addresses = d1(in, _origin_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       _rows = d2(in, _rows)
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: Seq[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("value");
[info]             out.writeVal(x.value)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("distance");
[info]             e6(x.distance, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("duration");
[info]             e6(x.duration, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("status");
[info]             out.writeVal(x.status)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e5(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.elements;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("elements");
[info]                 e4(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e3(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.destination_addresses;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("destination_addresses");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.origin_addresses;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("origin_addresses");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.rows;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("rows");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("status");
[info]             out.writeVal(x.status)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val googleMapsAPICodec: JsonCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:64: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decode(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encode(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private val r1: Array[String] = Array("screen_name", "name", "id", "id_str");
[info]       private val r2: Array[String] = Array("url", "expanded_url", "display_url");
[info]       private val r3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private val r4: Array[String] = Array("url", "description");
[info]       private val r5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         _expanded_url = in.readString(_expanded_url);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         _display_url = in.readString(_display_url);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       _hashtags = d3(in, _hashtags)
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       _symbols = d3(in, _symbols)
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       _user_mentions = d4(in, _user_mentions)
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d9(in: JsonReader, default: Option[String]): Option[String] = {
[info]         val x = in.readString(null);
[info]         if (x.eq(null))
[info]           None
[info]         else
[info]           Some(x)
[info]       };
[info]       private def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = d12(in, _url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = d12(in, _description);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]           else
[info]             in.requiredKeyError(r4, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var req0 = -1;
[info]           var req1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         _location = in.readString(_location);
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = in.readString(_description);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d11(in, _entities);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         _protected = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         _followers_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         _friends_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         _listed_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         _favourites_count = in.readInt();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         _utc_offset = in.readInt();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         _time_zone = in.readString(_time_zone);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         _geo_enabled = in.readBoolean();
[info]                         req0.&=(-65537)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         _verified = in.readBoolean();
[info]                         req0.&=(-131073)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         _statuses_count = in.readInt();
[info]                         req0.&=(-262145)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-524289)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         _contributors_enabled = in.readBoolean();
[info]                         req0.&=(-1048577)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         _is_translator = in.readBoolean();
[info]                         req0.&=(-2097153)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         _is_translation_enabled = in.readBoolean();
[info]                         req0.&=(-4194305)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         _profile_background_color = in.readString(_profile_background_color);
[info]                         req0.&=(-8388609)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url);
[info]                         req0.&=(-16777217)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https);
[info]                         req0.&=(-33554433)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         _profile_background_tile = in.readBoolean();
[info]                         req0.&=(-67108865)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         _profile_image_url = in.readString(_profile_image_url);
[info]                         req0.&=(-134217729)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https);
[info]                         req0.&=(-268435457)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         _profile_banner_url = in.readString(_profile_banner_url);
[info]                         req0.&=(-536870913)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         _profile_link_color = in.readString(_profile_link_color);
[info]                         req0.&=(-1073741825)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color);
[info]                         req0.&=(2147483647)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color);
[info]                         req1.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         _profile_text_color = in.readString(_profile_text_color);
[info]                         req1.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         _profile_use_background_image = in.readBoolean();
[info]                         req1.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         _has_extended_profile = in.readBoolean();
[info]                         req1.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         _default_profile = in.readBoolean();
[info]                         req1.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         _default_profile_image = in.readBoolean();
[info]                         req1.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         _following = in.readBoolean();
[info]                         req1.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         _follow_request_sent = in.readBoolean();
[info]                         req1.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         _notifications = in.readBoolean();
[info]                         req1.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         _translator_type = in.readString(_translator_type);
[info]                         req1.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0).&&(req1.==(0)))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]           else
[info]             in.requiredKeyError(r3, Array(req0, req1))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 32767;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredKeyError(r5, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 65535;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         _retweeted_status = d13(in, _retweeted_status);
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e3(x: Seq[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e6(x: Seq[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("screen_name");
[info]             out.writeVal(x.screen_name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("name");
[info]             out.writeVal(x.name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             val v = x.indices;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("indices");
[info]                 e6(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e5(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             out.writeVal(x.url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("expanded_url");
[info]             out.writeVal(x.expanded_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("display_url");
[info]             out.writeVal(x.display_url)
[info]           };
[info]           {
[info]             val v = x.indices;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("indices");
[info]                 e6(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e8(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.hashtags;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("hashtags");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.symbols;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("symbols");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.user_mentions;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("user_mentions");
[info]                 e4(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.urls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("urls");
[info]                 e7(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e9(x: Option[String], out: JsonWriter): Unit = if (x.eq(null).||(x.isEmpty))
[info]         out.writeNull()
[info]       else
[info]         out.writeVal(x.get);
[info]       private def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.urls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("urls");
[info]                 e7(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             e12(x.url, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("description");
[info]             e12(x.description, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("name");
[info]             out.writeVal(x.name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("screen_name");
[info]             out.writeVal(x.screen_name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("location");
[info]             out.writeVal(x.location)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("description");
[info]             out.writeVal(x.description)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             out.writeVal(x.url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e11(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("protected");
[info]             out.writeVal(x.`protected`)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("followers_count");
[info]             out.writeVal(x.followers_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("friends_count");
[info]             out.writeVal(x.friends_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("listed_count");
[info]             out.writeVal(x.listed_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favourites_count");
[info]             out.writeVal(x.favourites_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("utc_offset");
[info]             out.writeVal(x.utc_offset)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("time_zone");
[info]             out.writeVal(x.time_zone)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("geo_enabled");
[info]             out.writeVal(x.geo_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("verified");
[info]             out.writeVal(x.verified)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("statuses_count");
[info]             out.writeVal(x.statuses_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("contributors_enabled");
[info]             out.writeVal(x.contributors_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_translator");
[info]             out.writeVal(x.is_translator)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]             out.writeVal(x.is_translation_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_color");
[info]             out.writeVal(x.profile_background_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]             out.writeVal(x.profile_background_image_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]             out.writeVal(x.profile_background_image_url_https)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_tile");
[info]             out.writeVal(x.profile_background_tile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_image_url");
[info]             out.writeVal(x.profile_image_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]             out.writeVal(x.profile_image_url_https)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_banner_url");
[info]             out.writeVal(x.profile_banner_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_link_color");
[info]             out.writeVal(x.profile_link_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]             out.writeVal(x.profile_sidebar_border_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]             out.writeVal(x.profile_sidebar_fill_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_text_color");
[info]             out.writeVal(x.profile_text_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]             out.writeVal(x.profile_use_background_image)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("has_extended_profile");
[info]             out.writeVal(x.has_extended_profile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("default_profile");
[info]             out.writeVal(x.default_profile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("default_profile_image");
[info]             out.writeVal(x.default_profile_image)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("following");
[info]             out.writeVal(x.following)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("follow_request_sent");
[info]             out.writeVal(x.follow_request_sent)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("notifications");
[info]             out.writeVal(x.notifications)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("translator_type");
[info]             out.writeVal(x.translator_type)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e13(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("truncated");
[info]             out.writeVal(x.truncated)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e2(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("source");
[info]             out.writeVal(x.source)
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_screen_name;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("user");
[info]             e10(x.user, out)
[info]           };
[info]           {
[info]             val v = x.geo;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("geo");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.coordinates;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("coordinates");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.place;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("place");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.contributors;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("contributors");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_quote_status");
[info]             out.writeVal(x.is_quote_status)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweet_count");
[info]             out.writeVal(x.retweet_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorite_count");
[info]             out.writeVal(x.favorite_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorited");
[info]             out.writeVal(x.favorited)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted");
[info]             out.writeVal(x.retweeted)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]             out.writeVal(x.possibly_sensitive)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("truncated");
[info]             out.writeVal(x.truncated)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e2(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("source");
[info]             out.writeVal(x.source)
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_screen_name;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("user");
[info]             e10(x.user, out)
[info]           };
[info]           {
[info]             val v = x.geo;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("geo");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.coordinates;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("coordinates");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.place;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("place");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.contributors;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("contributors");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted_status");
[info]             e13(x.retweeted_status, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_quote_status");
[info]             out.writeVal(x.is_quote_status)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweet_count");
[info]             out.writeVal(x.retweet_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorite_count");
[info]             out.writeVal(x.favorite_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorited");
[info]             out.writeVal(x.favorited)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted");
[info]             out.writeVal(x.retweeted)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]             out.writeVal(x.possibly_sensitive)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e1(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val twitterAPICodec: JsonCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:14:18: local val v1 in value arraysFormat is never used
[warn]     implicit val v1: Format[Array[BigInt]] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:20:18: local val v1 in value bitSetsFormat is never used
[warn]     implicit val v1: Reads[BitSet] = Reads[BitSet](js => JsSuccess(BitSet(js.as[Array[Int]]: _*)))
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:21:18: local val v2 in value bitSetsFormat is never used
[warn]     implicit val v2: Reads[mutable.BitSet] =
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:28:18: local val v1 in value mapsFormat is never used
[warn]     implicit val v1: OFormat[HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:31:18: local val v2 in value mapsFormat is never used
[warn]     implicit val v2: OFormat[Map[Int, HashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:18: local val v1 in value mutableMapsFormat is never used
[warn]     implicit val v1: OFormat[mutable.HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:46:18: local val v2 in value mutableMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.Map[Int, mutable.OpenHashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:63:18: local val v1 in value intAndLongMapsFormat is never used
[warn]     implicit val v1: OFormat[IntMap[Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:68:18: local val v2 in value intAndLongMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.LongMap[LongMap[Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:80:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:87:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:88:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:89:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:94:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:95:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:96:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:100:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:101:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:102:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:103:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:104:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:105:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:106:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 23 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.6.6-SNAPSHOT.jar ...
[info] Compiling 32 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
Processing 311 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 355 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.6.6-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.6.6-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -prof gc -rf json -rff jdk9.json .*Benchmark.*
[error] WARNING: An illegal reflective access operation has occurred
[error] WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/tmp/sbt_250ba263/target/5f9f9839/jmh-core-1.20.jar) to field java.io.PrintStream.charOut
[error] WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[error] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[error] WARNING: All illegal access operations will be denied in a future release
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 00:30:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 404662.164 ops/s
[info] # Warmup Iteration   2: 747191.901 ops/s
[info] # Warmup Iteration   3: 759459.348 ops/s
[info] Iteration   1: 750049.883 ops/s
[info]                  ·gc.alloc.rate:                   1983.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2303.151 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4831.468 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 762723.582 ops/s
[info]                  ·gc.alloc.rate:                   2015.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1994.815 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4116.844 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 761923.543 ops/s
[info]                  ·gc.alloc.rate:                   2013.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4154.862 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 769905.193 ops/s
[info]                  ·gc.alloc.rate:                   2035.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.085 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4135.608 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 769911.857 ops/s
[info]                  ·gc.alloc.rate:                   2035.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.755 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4150.441 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   762902.812 ±(99.9%) 31303.446 ops/s [Average]
[info]   (min, avg, max) = (750049.883, 762902.812, 769911.857), stdev = 8129.405
[info]   CI (99.9%): [731599.366, 794206.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   2016.549 ±(99.9%) 82.337 MB/sec [Average]
[info]   (min, avg, max) = (1983.064, 2016.549, 2035.432), stdev = 21.383
[info]   CI (99.9%): [1934.212, 2098.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4160.001, 4160.001, 4160.001), stdev = 0.001
[info]   CI (99.9%): [4160.000, 4160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.129 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.129, 0.167), stdev = 0.027
[info]   CI (99.9%): [0.025, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.266 ±(99.9%) 0.215 B/op [Average]
[info]   (min, avg, max) = (0.213, 0.266, 0.344), stdev = 0.056
[info]   CI (99.9%): [0.051, 0.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2072.565 ±(99.9%) 499.098 MB/sec [Average]
[info]   (min, avg, max) = (1994.815, 2072.565, 2303.151), stdev = 129.614
[info]   CI (99.9%): [1573.467, 2571.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4277.845 ±(99.9%) 1193.090 B/op [Average]
[info]   (min, avg, max) = (4116.844, 4277.845, 4831.468), stdev = 309.842
[info]   CI (99.9%): [3084.754, 5470.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 9.000), stdev = 1.643
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.43% complete, ETA 00:48:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 463554.188 ops/s
[info] # Warmup Iteration   2: 1657135.259 ops/s
[info] # Warmup Iteration   3: 1690909.600 ops/s
[info] Iteration   1: 1709514.938 ops/s
[info]                  ·gc.alloc.rate:                   1216.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.377 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1205.750 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1700357.282 ops/s
[info]                  ·gc.alloc.rate:                   1209.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.464 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 915.962 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1708219.174 ops/s
[info]                  ·gc.alloc.rate:                   1215.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.043 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1223.836 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1696876.749 ops/s
[info]                  ·gc.alloc.rate:                   1207.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336.419 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1239.725 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1704761.941 ops/s
[info]                  ·gc.alloc.rate:                   1213.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1006.509 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 929.241 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1703946.017 ±(99.9%) 20447.614 ops/s [Average]
[info]   (min, avg, max) = (1696876.749, 1703946.017, 1709514.938), stdev = 5310.180
[info]   CI (99.9%): [1683498.403, 1724393.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1212.397 ±(99.9%) 14.410 MB/sec [Average]
[info]   (min, avg, max) = (1207.357, 1212.397, 1216.257), stdev = 3.742
[info]   CI (99.9%): [1197.987, 1226.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.073 ±(99.9%) 0.062 B/op [Average]
[info]   (min, avg, max) = (0.057, 0.073, 0.096), stdev = 0.016
[info]   CI (99.9%): [0.011, 0.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1193.962 ±(99.9%) 690.303 MB/sec [Average]
[info]   (min, avg, max) = (989.464, 1193.962, 1336.419), stdev = 179.270
[info]   CI (99.9%): [503.659, 1884.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1102.903 ±(99.9%) 635.729 B/op [Average]
[info]   (min, avg, max) = (915.962, 1102.903, 1239.725), stdev = 165.097
[info]   CI (99.9%): [467.174, 1738.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.87% complete, ETA 00:48:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3288925.757 ops/s
[info] # Warmup Iteration   2: 3922480.383 ops/s
[info] # Warmup Iteration   3: 3840422.493 ops/s
[info] Iteration   1: 4047571.043 ops/s
[info]                  ·gc.alloc.rate:                   267.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.756 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99.467 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3970135.043 ops/s
[info]                  ·gc.alloc.rate:                   262.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.739 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 101.405 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 4046913.911 ops/s
[info]                  ·gc.alloc.rate:                   267.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.773 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99.480 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 4072119.007 ops/s
[info]                  ·gc.alloc.rate:      269.159 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 4025907.837 ops/s
[info]                  ·gc.alloc.rate:                   265.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 129.951 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   4032529.368 ±(99.9%) 148354.811 ops/s [Average]
[info]   (min, avg, max) = (3970135.043, 4032529.368, 4072119.007), stdev = 38527.273
[info]   CI (99.9%): [3884174.557, 4180884.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   266.449 ±(99.9%) 9.949 MB/sec [Average]
[info]   (min, avg, max) = (262.285, 266.449, 269.159), stdev = 2.584
[info]   CI (99.9%): [256.501, 276.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.631 ±(99.9%) 5.433 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.631, 3.155), stdev = 1.411
[info]   CI (99.9%): [≈ 0, 6.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.247 ±(99.9%) 2.124 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.247, 1.234), stdev = 0.552
[info]   CI (99.9%): [≈ 0, 2.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   219.928 ±(99.9%) 490.345 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 219.928, 332.372), stdev = 127.341
[info]   CI (99.9%): [≈ 0, 710.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   86.061 ±(99.9%) 191.838 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 86.061, 129.951), stdev = 49.820
[info]   CI (99.9%): [≈ 0, 277.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 1.30% complete, ETA 00:48:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27209.008 ops/s
[info] # Warmup Iteration   2: 171443.277 ops/s
[info] # Warmup Iteration   3: 171522.823 ops/s
[info] Iteration   1: 171132.340 ops/s
[info]                  ·gc.alloc.rate:                   1423.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              13088.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1641.814 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15098.245 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 174674.728 ops/s
[info]                  ·gc.alloc.rate:                   1452.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              13088.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.420 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11944.762 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 173024.986 ops/s
[info]                  ·gc.alloc.rate:                   1438.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              13088.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1333.965 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12136.380 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 174570.189 ops/s
[info]                  ·gc.alloc.rate:                   1451.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              13088.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.757 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15128.688 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 173241.716 ops/s
[info]                  ·gc.alloc.rate:                   1440.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              13088.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.567 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.072 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12248.617 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   173328.792 ±(99.9%) 5539.071 ops/s [Average]
[info]   (min, avg, max) = (171132.340, 173328.792, 174674.728), stdev = 1438.479
[info]   CI (99.9%): [167789.720, 178867.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1441.191 ±(99.9%) 45.505 MB/sec [Average]
[info]   (min, avg, max) = (1423.216, 1441.191, 1452.277), stdev = 11.818
[info]   CI (99.9%): [1395.686, 1486.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13088.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13088.002, 13088.002, 13088.003), stdev = 0.001
[info]   CI (99.9%): [13088.002, 13088.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.869 ±(99.9%) 1.087 B/op [Average]
[info]   (min, avg, max) = (0.567, 0.869, 1.313), stdev = 0.282
[info]   CI (99.9%): [≈ 0, 1.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1465.406 ±(99.9%) 685.730 MB/sec [Average]
[info]   (min, avg, max) = (1325.420, 1465.406, 1677.757), stdev = 178.082
[info]   CI (99.9%): [779.675, 2151.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   13311.338 ±(99.9%) 6348.668 B/op [Average]
[info]   (min, avg, max) = (11944.762, 13311.338, 15128.688), stdev = 1648.729
[info]   CI (99.9%): [6962.670, 19660.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.73% complete, ETA 00:47:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_250ba263/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 502888.183 ops/s
[info] # Warmup Iteration   2: 2019753.702 ops/s
[info] # Warmup Iteration   3: 2105103.274 ops/s
[info] Iteration   1: 2119527.111 ops/s
[info]                  ·gc.alloc.rate:                   689.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      646.159 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 479.800 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2105157.237 ops/s
[info]                  ·gc.alloc.rate:                   684.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      976.771 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 730.337 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2102531.249 ops/s
[info]                  ·gc.alloc.rate:                   683.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.722 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 490.178 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2113547.364 ops/s
[info]                  ·gc.alloc.rate:                   687.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.418 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 489.618 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2109123.007 ops/s
[info]                  ·gc.alloc.rate:                   686.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.282 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 492.625 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   2109977.194 ±(99.9%) 26070.221 ops/s [Average]
[info]   (min, avg, max) = (2102531.249, 2109977.194, 2119527.111), stdev = 6770.354
[info]   CI (99.9%): [2083906.973, 2136047.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   686.376 ±(99.9%) 8.612 MB/sec [Average]
[info]   (min, avg, max) = (683.870, 686.376, 689.524), stdev = 2.237
[info]   CI (99.9%): [677.763, 694.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   512.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (512.000, 512.000, 512.000), stdev = 0.001
[info]   CI (99.9%): [512.000, 512.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.167 ±(99.9%) 0.674 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.167, 0.479), stdev = 0.175
[info]   CI (99.9%): [≈ 0, 0.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.124 ±(99.9%) 0.500 B/op [Average]
[info]   (min, avg, max) = (0.062, 0.124, 0.356), stdev = 0.130
[info]   CI (99.9%): [≈ 0, 0.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   719.071 ±(99.9%) 555.093 MB/sec [Average]
[info]   (min, avg, max) = (646.159, 719.071, 976.771), stdev = 144.156
[info]   CI (99.9%): [163.978, 1274.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   536.512 ±(99.9%) 417.650 B/op [Average]
[info]   (min, avg, max) = (479.800, 536.512, 730.337), stdev = 108.462
[info]   CI (99.9%): [118.862, 954.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 2.16% complete, ETA 00:47:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10272087.008 ops/s
[info] # Warmup Iteration   2: 14708875.164 ops/s
[info] # Warmup Iteration   3: 15246221.828 ops/s
[info] Iteration   1: 14964170.595 ops/s
[info]                  ·gc.alloc.rate:                   760.555 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.844 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103.382 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 14632059.036 ops/s
[info]                  ·gc.alloc.rate:                   743.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.705 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70.221 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 14628998.165 ops/s
[info]                  ·gc.alloc.rate:                   743.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.741 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70.235 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 14613869.377 ops/s
[info]                  ·gc.alloc.rate:                   742.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.082 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70.450 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 14610498.806 ops/s
[info]                  ·gc.alloc.rate:                   742.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.098 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 106.130 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   14689919.196 ±(99.9%) 591434.881 ops/s [Average]
[info]   (min, avg, max) = (14610498.806, 14689919.196, 14964170.595), stdev = 153593.760
[info]   CI (99.9%): [14098484.315, 15281354.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   746.591 ±(99.9%) 30.109 MB/sec [Average]
[info]   (min, avg, max) = (742.563, 746.591, 760.555), stdev = 7.819
[info]   CI (99.9%): [716.482, 776.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.167), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.011 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (0.007, 0.011, 0.018), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   785.494 ±(99.9%) 697.686 MB/sec [Average]
[info]   (min, avg, max) = (652.705, 785.494, 985.098), stdev = 181.187
[info]   CI (99.9%): [87.808, 1483.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   84.084 ±(99.9%) 72.763 B/op [Average]
[info]   (min, avg, max) = (70.221, 84.084, 106.130), stdev = 18.896
[info]   CI (99.9%): [11.321, 156.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 2.60% complete, ETA 00:47:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66257.062 ops/s
[info] # Warmup Iteration   2: 313541.000 ops/s
[info] # Warmup Iteration   3: 305158.757 ops/s
[info] Iteration   1: 316561.845 ops/s
[info]                  ·gc.alloc.rate:                   1032.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.659 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4876.874 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 313410.687 ops/s
[info]                  ·gc.alloc.rate:                   1022.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.505 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4949.380 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 316034.604 ops/s
[info]                  ·gc.alloc.rate:                   1031.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.076 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4934.784 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 313759.105 ops/s
[info]                  ·gc.alloc.rate:                   1023.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.261 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5002.177 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 318036.721 ops/s
[info]                  ·gc.alloc.rate:                   1037.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.160 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4954.775 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   315560.593 ±(99.9%) 7512.669 ops/s [Average]
[info]   (min, avg, max) = (313410.687, 315560.593, 318036.721), stdev = 1951.016
[info]   CI (99.9%): [308047.924, 323073.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1029.727 ±(99.9%) 24.392 MB/sec [Average]
[info]   (min, avg, max) = (1022.665, 1029.727, 1037.778), stdev = 6.335
[info]   CI (99.9%): [1005.335, 1054.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5136.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5136.001, 5136.001, 5136.001), stdev = 0.001
[info]   CI (99.9%): [5136.001, 5136.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.104), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.415 ±(99.9%) 0.564 B/op [Average]
[info]   (min, avg, max) = (0.209, 0.415, 0.523), stdev = 0.146
[info]   CI (99.9%): [≈ 0, 0.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   991.132 ±(99.9%) 32.185 MB/sec [Average]
[info]   (min, avg, max) = (980.659, 991.132, 1001.160), stdev = 8.358
[info]   CI (99.9%): [958.947, 1023.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4943.598 ±(99.9%) 173.489 B/op [Average]
[info]   (min, avg, max) = (4876.874, 4943.598, 5002.177), stdev = 45.054
[info]   CI (99.9%): [4770.109, 5117.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 3.03% complete, ETA 00:47:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 958942.336 ops/s
[info] # Warmup Iteration   2: 1540930.727 ops/s
[info] # Warmup Iteration   3: 1575242.564 ops/s
[info] Iteration   1: 1586092.013 ops/s
[info]                  ·gc.alloc.rate:                   2458.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              2440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2654.225 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2634.181 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1586306.178 ops/s
[info]                  ·gc.alloc.rate:                   2458.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              2440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2346.845 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2329.158 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1592415.609 ops/s
[info]                  ·gc.alloc.rate:                   2468.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              2440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2361.647 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2334.622 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1563802.739 ops/s
[info]                  ·gc.alloc.rate:                   2423.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              2440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2710.109 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2728.044 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1581758.020 ops/s
[info]                  ·gc.alloc.rate:                   2451.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              2440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2377.608 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2366.182 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1582074.912 ±(99.9%) 41958.922 ops/s [Average]
[info]   (min, avg, max) = (1563802.739, 1582074.912, 1592415.609), stdev = 10896.599
[info]   CI (99.9%): [1540115.990, 1624033.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2452.216 ±(99.9%) 64.886 MB/sec [Average]
[info]   (min, avg, max) = (2423.958, 2452.216, 2468.244), stdev = 16.851
[info]   CI (99.9%): [2387.331, 2517.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2440.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2440.000, 2440.000, 2440.000), stdev = 0.001
[info]   CI (99.9%): [2440.000, 2440.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.125 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.125, 0.187), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.124 ±(99.9%) 0.190 B/op [Average]
[info]   (min, avg, max) = (0.082, 0.124, 0.189), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2490.087 ±(99.9%) 680.752 MB/sec [Average]
[info]   (min, avg, max) = (2346.845, 2490.087, 2710.109), stdev = 176.789
[info]   CI (99.9%): [1809.335, 3170.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2478.438 ±(99.9%) 725.844 B/op [Average]
[info]   (min, avg, max) = (2329.158, 2478.438, 2728.044), stdev = 188.499
[info]   CI (99.9%): [1752.594, 3204.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   37.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 3.46% complete, ETA 00:47:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 854173.156 ops/s
[info] # Warmup Iteration   2: 2579494.206 ops/s
[info] # Warmup Iteration   3: 2623433.455 ops/s
[info] Iteration   1: 2596110.196 ops/s
[info]                  ·gc.alloc.rate:                   1820.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1654.971 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1003.345 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2622183.007 ops/s
[info]                  ·gc.alloc.rate:                   1839.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2005.087 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1203.508 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2612557.458 ops/s
[info]                  ·gc.alloc.rate:                   1832.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1681.561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1013.295 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2611690.236 ops/s
[info]                  ·gc.alloc.rate:                   1831.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1221.586 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 2621339.581 ops/s
[info]                  ·gc.alloc.rate:                   1838.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694.518 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1017.482 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   2612776.096 ±(99.9%) 40422.701 ops/s [Average]
[info]   (min, avg, max) = (2596110.196, 2612776.096, 2622183.007), stdev = 10497.647
[info]   CI (99.9%): [2572353.394, 2653198.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1832.520 ±(99.9%) 28.349 MB/sec [Average]
[info]   (min, avg, max) = (1820.998, 1832.520, 1839.303), stdev = 7.362
[info]   CI (99.9%): [1804.172, 1860.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.117, 0.146), stdev = 0.024
[info]   CI (99.9%): [0.025, 0.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.070 ±(99.9%) 0.056 B/op [Average]
[info]   (min, avg, max) = (0.050, 0.070, 0.088), stdev = 0.015
[info]   CI (99.9%): [0.014, 0.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1812.566 ±(99.9%) 717.424 MB/sec [Average]
[info]   (min, avg, max) = (1654.971, 1812.566, 2026.696), stdev = 186.313
[info]   CI (99.9%): [1095.143, 2529.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1091.843 ±(99.9%) 425.464 B/op [Average]
[info]   (min, avg, max) = (1003.345, 1091.843, 1221.586), stdev = 110.492
[info]   CI (99.9%): [666.379, 1517.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 3.90% complete, ETA 00:46:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9818937.396 ops/s
[info] # Warmup Iteration   2: 10872491.770 ops/s
[info] # Warmup Iteration   3: 11313422.927 ops/s
[info] Iteration   1: 11284833.214 ops/s
[info]                  ·gc.alloc.rate:                   1434.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1651.620 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 230.311 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 11396964.705 ops/s
[info]                  ·gc.alloc.rate:                   1447.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1326.727 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 183.250 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 11374564.432 ops/s
[info]                  ·gc.alloc.rate:                   1445.265 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334.153 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 184.624 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 11357496.076 ops/s
[info]                  ·gc.alloc.rate:                   1443.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1676.201 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 232.299 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 11351885.893 ops/s
[info]                  ·gc.alloc.rate:                   1442.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.467 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 186.697 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   11353148.864 ±(99.9%) 161841.331 ops/s [Average]
[info]   (min, avg, max) = (11284833.214, 11353148.864, 11396964.705), stdev = 42029.680
[info]   CI (99.9%): [11191307.533, 11514990.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1442.613 ±(99.9%) 19.848 MB/sec [Average]
[info]   (min, avg, max) = (1434.251, 1442.613, 1447.998), stdev = 5.154
[info]   CI (99.9%): [1422.765, 1462.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   200.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (200.000, 200.000, 200.000), stdev = 0.001
[info]   CI (99.9%): [200.000, 200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.024
[info]   CI (99.9%): [≈ 10⁻⁴, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.013 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (0.009, 0.013, 0.017), stdev = 0.003
[info]   CI (99.9%): [≈ 10⁻⁴, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1467.033 ±(99.9%) 693.391 MB/sec [Average]
[info]   (min, avg, max) = (1326.727, 1467.033, 1676.201), stdev = 180.071
[info]   CI (99.9%): [773.643, 2160.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   203.436 ±(99.9%) 98.115 B/op [Average]
[info]   (min, avg, max) = (183.250, 203.436, 232.299), stdev = 25.480
[info]   CI (99.9%): [105.321, 301.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 4.33% complete, ETA 00:46:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 149755.772 ops/s
[info] # Warmup Iteration   2: 620075.398 ops/s
[info] # Warmup Iteration   3: 622212.922 ops/s
[info] Iteration   1: 622695.456 ops/s
[info]                  ·gc.alloc.rate:                   1645.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1648.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4166.435 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 621305.214 ops/s
[info]                  ·gc.alloc.rate:                   1642.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1665.431 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4217.827 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 624560.882 ops/s
[info]                  ·gc.alloc.rate:                   1651.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1676.115 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4222.572 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 617917.262 ops/s
[info]                  ·gc.alloc.rate:                   1633.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.404 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4290.948 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 623149.313 ops/s
[info]                  ·gc.alloc.rate:                   1646.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.493 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4270.144 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   621925.625 ±(99.9%) 9719.828 ops/s [Average]
[info]   (min, avg, max) = (617917.262, 621925.625, 624560.882), stdev = 2524.209
[info]   CI (99.9%): [612205.797, 631645.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1643.886 ±(99.9%) 26.325 MB/sec [Average]
[info]   (min, avg, max) = (1633.001, 1643.886, 1651.278), stdev = 6.837
[info]   CI (99.9%): [1617.560, 1670.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   4160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4160.001, 4160.001, 4160.001), stdev = 0.001
[info]   CI (99.9%): [4160.001, 4160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.146), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.211 ±(99.9%) 0.405 B/op [Average]
[info]   (min, avg, max) = (0.105, 0.211, 0.369), stdev = 0.105
[info]   CI (99.9%): [≈ 0, 0.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1672.930 ±(99.9%) 64.367 MB/sec [Average]
[info]   (min, avg, max) = (1648.208, 1672.930, 1690.493), stdev = 16.716
[info]   CI (99.9%): [1608.564, 1737.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4233.585 ±(99.9%) 187.714 B/op [Average]
[info]   (min, avg, max) = (4166.435, 4233.585, 4290.948), stdev = 48.749
[info]   CI (99.9%): [4045.871, 4421.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 4.76% complete, ETA 00:46:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 991763.196 ops/s
[info] # Warmup Iteration   2: 1739138.908 ops/s
[info] # Warmup Iteration   3: 1752749.788 ops/s
[info] Iteration   1: 1770469.567 ops/s
[info]                  ·gc.alloc.rate:                   1638.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1639.586 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1457.332 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1764954.467 ops/s
[info]                  ·gc.alloc.rate:                   1632.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1651.627 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1473.213 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1774881.548 ops/s
[info]                  ·gc.alloc.rate:                   1642.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1666.185 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1477.033 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1771417.967 ops/s
[info]                  ·gc.alloc.rate:                   1639.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1674.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1486.936 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1777858.605 ops/s
[info]                  ·gc.alloc.rate:                   1644.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.930 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1192.442 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   1771916.431 ±(99.9%) 18757.041 ops/s [Average]
[info]   (min, avg, max) = (1764954.467, 1771916.431, 1777858.605), stdev = 4871.144
[info]   CI (99.9%): [1753159.390, 1790673.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1639.353 ±(99.9%) 18.110 MB/sec [Average]
[info]   (min, avg, max) = (1632.330, 1639.353, 1644.634), stdev = 4.703
[info]   CI (99.9%): [1621.243, 1657.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1456.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1456.000, 1456.000, 1456.000), stdev = 0.001
[info]   CI (99.9%): [1456.000, 1456.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.196 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.104, 0.167), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.092 ±(99.9%) 0.175 B/op [Average]
[info]   (min, avg, max) = (0.037, 0.092, 0.148), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1595.682 ±(99.9%) 537.894 MB/sec [Average]
[info]   (min, avg, max) = (1346.930, 1595.682, 1674.083), stdev = 139.689
[info]   CI (99.9%): [1057.788, 2133.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1417.391 ±(99.9%) 485.957 B/op [Average]
[info]   (min, avg, max) = (1192.442, 1417.391, 1486.936), stdev = 126.202
[info]   CI (99.9%): [931.434, 1903.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.140
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 5.19% complete, ETA 00:46:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_250ba263/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1785312.276 ops/s
[info] # Warmup Iteration   2: 6339396.092 ops/s
[info] # Warmup Iteration   3: 6371144.717 ops/s
[info] Iteration   1: 6452405.693 ops/s
[info]                  ·gc.alloc.rate:                   1770.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1648.569 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 402.218 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 6402899.014 ops/s
[info]                  ·gc.alloc.rate:                   1757.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1998.899 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 491.388 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 6466495.260 ops/s
[info]                  ·gc.alloc.rate:                   1774.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.796 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 408.344 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 6355713.801 ops/s
[info]                  ·gc.alloc.rate:                   1744.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.297 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 417.516 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 6366347.910 ops/s
[info]                  ·gc.alloc.rate:                   1747.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.095 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 418.108 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   6408772.336 ±(99.9%) 191425.245 ops/s [Average]
[info]   (min, avg, max) = (6355713.801, 6408772.336, 6466495.260), stdev = 49712.528
[info]   CI (99.9%): [6217347.091, 6600197.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1759.004 ±(99.9%) 52.127 MB/sec [Average]
[info]   (min, avg, max) = (1744.797, 1759.004, 1774.992), stdev = 13.537
[info]   CI (99.9%): [1706.877, 1811.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.000, 432.000), stdev = 0.001
[info]   CI (99.9%): [432.000, 432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.187), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.024 ±(99.9%) 0.049 B/op [Average]
[info]   (min, avg, max) = (0.015, 0.024, 0.046), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1740.531 ±(99.9%) 559.775 MB/sec [Average]
[info]   (min, avg, max) = (1648.569, 1740.531, 1998.899), stdev = 145.372
[info]   CI (99.9%): [1180.756, 2300.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   427.515 ±(99.9%) 139.844 B/op [Average]
[info]   (min, avg, max) = (402.218, 427.515, 491.388), stdev = 36.317
[info]   CI (99.9%): [287.671, 567.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 5.63% complete, ETA 00:46:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14654536.935 ops/s
[info] # Warmup Iteration   2: 22593559.415 ops/s
[info] # Warmup Iteration   3: 22789116.681 ops/s
[info] Iteration   1: 23185768.646 ops/s
[info]                  ·gc.alloc.rate:                   706.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.540 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 23206316.928 ops/s
[info]                  ·gc.alloc.rate:                   707.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.310 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.320 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 23296344.498 ops/s
[info]                  ·gc.alloc.rate:                   710.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.260 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.125 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 23238286.632 ops/s
[info]                  ·gc.alloc.rate:                   708.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.843 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.279 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 23110935.766 ops/s
[info]                  ·gc.alloc.rate:                   704.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.071 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.616 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   23207530.494 ±(99.9%) 262857.288 ops/s [Average]
[info]   (min, avg, max) = (23110935.766, 23207530.494, 23296344.498), stdev = 68263.203
[info]   CI (99.9%): [22944673.206, 23470387.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   707.743 ±(99.9%) 8.388 MB/sec [Average]
[info]   (min, avg, max) = (704.751, 707.743, 710.631), stdev = 2.178
[info]   CI (99.9%): [699.355, 716.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.083), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.003 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.006), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   654.302 ±(99.9%) 4.651 MB/sec [Average]
[info]   (min, avg, max) = (653.260, 654.302, 656.023), stdev = 1.208
[info]   CI (99.9%): [649.651, 658.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   44.376 ±(99.9%) 0.771 B/op [Average]
[info]   (min, avg, max) = (44.125, 44.376, 44.616), stdev = 0.200
[info]   CI (99.9%): [43.605, 45.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 6.06% complete, ETA 00:45:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13995335.629 ops/s
[info] # Warmup Iteration   2: 22770411.547 ops/s
[info] # Warmup Iteration   3: 21720223.334 ops/s
[info] Iteration   1: 22974007.282 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 22938212.640 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 22574451.507 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 22731823.097 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 22690871.080 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   22781873.121 ±(99.9%) 653384.279 ops/s [Average]
[info]   (min, avg, max) = (22574451.507, 22781873.121, 22974007.282), stdev = 169681.822
[info]   CI (99.9%): [22128488.842, 23435257.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 6.49% complete, ETA 00:45:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 307929.521 ops/s
[info] # Warmup Iteration   2: 1448468.346 ops/s
[info] # Warmup Iteration   3: 1453112.799 ops/s
[info] Iteration   1: 1455523.792 ops/s
[info]                  ·gc.alloc.rate:                   2130.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              2304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2325.548 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2515.029 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 1461964.303 ops/s
[info]                  ·gc.alloc.rate:                   2139.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              2304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011.201 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2165.392 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1456342.682 ops/s
[info]                  ·gc.alloc.rate:                   2131.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              2304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.792 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2186.291 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1460627.532 ops/s
[info]                  ·gc.alloc.rate:                   2138.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              2304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2370.404 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2553.880 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 1453075.572 ops/s
[info]                  ·gc.alloc.rate:                   2126.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              2304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.269 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2205.737 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1457506.776 ±(99.9%) 14217.635 ops/s [Average]
[info]   (min, avg, max) = (1453075.572, 1457506.776, 1461964.303), stdev = 3692.275
[info]   CI (99.9%): [1443289.141, 1471724.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2133.503 ±(99.9%) 21.218 MB/sec [Average]
[info]   (min, avg, max) = (2126.982, 2133.503, 2139.940), stdev = 5.510
[info]   CI (99.9%): [2112.284, 2154.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2304.000, 2304.000, 2304.000), stdev = 0.001
[info]   CI (99.9%): [2304.000, 2304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.092, 0.125), stdev = 0.019
[info]   CI (99.9%): [0.020, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.099 ±(99.9%) 0.077 B/op [Average]
[info]   (min, avg, max) = (0.090, 0.099, 0.134), stdev = 0.020
[info]   CI (99.9%): [0.022, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2153.243 ±(99.9%) 688.081 MB/sec [Average]
[info]   (min, avg, max) = (2011.201, 2153.243, 2370.404), stdev = 178.692
[info]   CI (99.9%): [1465.162, 2841.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2325.266 ±(99.9%) 739.272 B/op [Average]
[info]   (min, avg, max) = (2165.392, 2325.266, 2553.880), stdev = 191.987
[info]   CI (99.9%): [1585.994, 3064.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 9.000), stdev = 0.894
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Run progress: 6.93% complete, ETA 00:45:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6554.627 ops/s
[info] # Warmup Iteration   2: 8302.133 ops/s
[info] # Warmup Iteration   3: 8408.792 ops/s
[info] Iteration   1: 8481.064 ops/s
[info]                  ·gc.alloc.rate:                   1252.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              232520.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1311.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 243386.319 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 8355.441 ops/s
[info]                  ·gc.alloc.rate:                   1234.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              232520.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.193 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 248122.417 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 8475.631 ops/s
[info]                  ·gc.alloc.rate:                   1251.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              232520.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1324.570 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 246003.499 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 8476.012 ops/s
[info]                  ·gc.alloc.rate:                   1252.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              232520.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1332.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 247364.001 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 8499.373 ops/s
[info]                  ·gc.alloc.rate:                   1255.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              232527.816 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1003.377 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 185822.814 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   8457.504 ±(99.9%) 222.838 ops/s [Average]
[info]   (min, avg, max) = (8355.441, 8457.504, 8499.373), stdev = 57.870
[info]   CI (99.9%): [8234.666, 8680.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1249.371 ±(99.9%) 32.779 MB/sec [Average]
[info]   (min, avg, max) = (1234.366, 1249.371, 1255.567), stdev = 8.513
[info]   CI (99.9%): [1216.591, 1282.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   232521.602 ±(99.9%) 13.374 B/op [Average]
[info]   (min, avg, max) = (232520.048, 232521.602, 232527.816), stdev = 3.473
[info]   CI (99.9%): [232508.228, 232534.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.083), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10.848 ±(99.9%) 16.329 B/op [Average]
[info]   (min, avg, max) = (3.865, 10.848, 15.460), stdev = 4.241
[info]   CI (99.9%): [≈ 0, 27.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1257.715 ±(99.9%) 548.297 MB/sec [Average]
[info]   (min, avg, max) = (1003.377, 1257.715, 1332.039), stdev = 142.391
[info]   CI (99.9%): [709.418, 1806.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   234139.810 ±(99.9%) 104237.465 B/op [Average]
[info]   (min, avg, max) = (185822.814, 234139.810, 248122.417), stdev = 27070.139
[info]   CI (99.9%): [129902.345, 338377.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Run progress: 7.36% complete, ETA 00:45:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15878.766 ops/s
[info] # Warmup Iteration   2: 24338.969 ops/s
[info] # Warmup Iteration   3: 24213.202 ops/s
[info] Iteration   1: 24872.612 ops/s
[info]                  ·gc.alloc.rate:                   920.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              58248.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.632 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62066.494 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 24806.478 ops/s
[info]                  ·gc.alloc.rate:                   917.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              58242.148 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      987.815 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62677.880 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 24692.753 ops/s
[info]                  ·gc.alloc.rate:                   913.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              58216.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42183.360 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 24675.601 ops/s
[info]                  ·gc.alloc.rate:                   912.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              58216.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63584.180 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 24651.798 ops/s
[info]                  ·gc.alloc.rate:                   911.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              58216.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1002.178 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63986.315 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   24739.849 ±(99.9%) 366.136 ops/s [Average]
[info]   (min, avg, max) = (24651.798, 24739.849, 24872.612), stdev = 95.084
[info]   CI (99.9%): [24373.713, 25105.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   915.214 ±(99.9%) 14.198 MB/sec [Average]
[info]   (min, avg, max) = (911.802, 915.214, 920.301), stdev = 3.687
[info]   CI (99.9%): [901.016, 929.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   58227.643 ±(99.9%) 61.821 B/op [Average]
[info]   (min, avg, max) = (58216.017, 58227.643, 58248.018), stdev = 16.055
[info]   CI (99.9%): [58165.822, 58289.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4.239 ±(99.9%) 9.133 B/op [Average]
[info]   (min, avg, max) = (1.327, 4.239, 6.645), stdev = 2.372
[info]   CI (99.9%): [≈ 0, 13.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   925.873 ±(99.9%) 569.532 MB/sec [Average]
[info]   (min, avg, max) = (661.708, 925.873, 1002.178), stdev = 147.906
[info]   CI (99.9%): [356.341, 1495.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   58899.646 ±(99.9%) 36099.518 B/op [Average]
[info]   (min, avg, max) = (42183.360, 58899.646, 63986.315), stdev = 9374.930
[info]   CI (99.9%): [22800.128, 94999.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Run progress: 7.79% complete, ETA 00:45:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25821.359 ops/s
[info] # Warmup Iteration   2: 28599.070 ops/s
[info] # Warmup Iteration   3: 28068.493 ops/s
[info] Iteration   1: 28057.737 ops/s
[info]                  ·gc.alloc.rate:                   509.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     147.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      331.449 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18589.123 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 27933.657 ops/s
[info]                  ·gc.alloc.rate:                   507.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.863 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37288.290 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 28033.511 ops/s
[info]                  ·gc.alloc.rate:                   508.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.370 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18550.262 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 27970.875 ops/s
[info]                  ·gc.alloc.rate:                   507.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.436 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37107.783 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 27650.453 ops/s
[info]                  ·gc.alloc.rate:                   502.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.470 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18805.818 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   27929.247 ±(99.9%) 629.374 ops/s [Average]
[info]   (min, avg, max) = (27650.453, 27929.247, 28057.737), stdev = 163.446
[info]   CI (99.9%): [27299.872, 28558.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   506.986 ±(99.9%) 11.242 MB/sec [Average]
[info]   (min, avg, max) = (502.019, 506.986, 509.375), stdev = 2.919
[info]   CI (99.9%): [495.745, 518.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   28568.016 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (28568.015, 28568.016, 28568.019), stdev = 0.002
[info]   CI (99.9%): [28568.008, 28568.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.538 ±(99.9%) 4.499 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.538, 2.628), stdev = 1.168
[info]   CI (99.9%): [≈ 0, 5.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   30.180 ±(99.9%) 252.319 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30.180, 147.384), stdev = 65.526
[info]   CI (99.9%): [≈ 0, 282.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   462.718 ±(99.9%) 695.769 MB/sec [Average]
[info]   (min, avg, max) = (330.370, 462.718, 661.863), stdev = 180.689
[info]   CI (99.9%): [≈ 0, 1158.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   26068.255 ±(99.9%) 39125.319 B/op [Average]
[info]   (min, avg, max) = (18550.262, 26068.255, 37288.290), stdev = 10160.721
[info]   CI (99.9%): [≈ 0, 65193.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Run progress: 8.23% complete, ETA 00:44:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8604.372 ops/s
[info] # Warmup Iteration   2: 16058.615 ops/s
[info] # Warmup Iteration   3: 16058.998 ops/s
[info] Iteration   1: 16106.974 ops/s
[info]                  ·gc.alloc.rate:                   1544.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              150943.904 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.568 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 129257.770 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 16063.783 ops/s
[info]                  ·gc.alloc.rate:                   1540.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              150944.149 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1665.089 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 163156.781 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 16119.322 ops/s
[info]                  ·gc.alloc.rate:                   1546.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              150944.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1676.960 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 163705.855 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 15961.956 ops/s
[info]                  ·gc.alloc.rate:                   1531.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              150944.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.646 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 132861.659 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 16071.864 ops/s
[info]                  ·gc.alloc.rate:                   1541.200 MB/sec
[info]                  ·gc.alloc.rate.norm:              150943.906 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1689.712 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 165489.102 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   16064.780 ±(99.9%) 238.764 ops/s [Average]
[info]   (min, avg, max) = (15961.956, 16064.780, 16119.322), stdev = 62.006
[info]   CI (99.9%): [15826.016, 16303.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1540.681 ±(99.9%) 22.616 MB/sec [Average]
[info]   (min, avg, max) = (1531.060, 1540.681, 1546.231), stdev = 5.873
[info]   CI (99.9%): [1518.065, 1563.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   150944.004 ±(99.9%) 0.394 B/op [Average]
[info]   (min, avg, max) = (150943.904, 150944.004, 150944.149), stdev = 0.102
[info]   CI (99.9%): [150943.609, 150944.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.167), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9.791 ±(99.9%) 17.034 B/op [Average]
[info]   (min, avg, max) = (6.098, 9.791, 16.316), stdev = 4.424
[info]   CI (99.9%): [≈ 0, 26.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1540.395 ±(99.9%) 723.201 MB/sec [Average]
[info]   (min, avg, max) = (1322.568, 1540.395, 1689.712), stdev = 187.813
[info]   CI (99.9%): [817.194, 2263.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   150894.233 ±(99.9%) 69972.361 B/op [Average]
[info]   (min, avg, max) = (129257.770, 150894.233, 165489.102), stdev = 18171.600
[info]   CI (99.9%): [80921.872, 220866.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Run progress: 8.66% complete, ETA 00:44:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14905.094 ops/s
[info] # Warmup Iteration   2: 17598.730 ops/s
[info] # Warmup Iteration   3: 17504.595 ops/s
[info] Iteration   1: 17593.814 ops/s
[info]                  ·gc.alloc.rate:                   1537.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              137528.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1639.293 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 146646.902 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 17724.679 ops/s
[info]                  ·gc.alloc.rate:                   1548.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              137528.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1651.653 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 146687.076 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 17629.901 ops/s
[info]                  ·gc.alloc.rate:                   1540.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              137528.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.851 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 118814.430 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 17646.639 ops/s
[info]                  ·gc.alloc.rate:                   1541.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              137528.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.849 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 149295.835 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 17608.178 ops/s
[info]                  ·gc.alloc.rate:                   1538.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              137528.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.676 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 150400.487 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   17640.642 ±(99.9%) 196.914 ops/s [Average]
[info]   (min, avg, max) = (17593.814, 17640.642, 17724.679), stdev = 51.138
[info]   CI (99.9%): [17443.728, 17837.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1541.384 ±(99.9%) 16.758 MB/sec [Average]
[info]   (min, avg, max) = (1537.358, 1541.384, 1548.525), stdev = 4.352
[info]   CI (99.9%): [1524.626, 1558.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   137528.025 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (137528.023, 137528.025, 137528.029), stdev = 0.002
[info]   CI (99.9%): [137528.016, 137528.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   7.054 ±(99.9%) 10.535 B/op [Average]
[info]   (min, avg, max) = (3.717, 7.054, 11.090), stdev = 2.736
[info]   CI (99.9%): [≈ 0, 17.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1595.665 ±(99.9%) 573.889 MB/sec [Average]
[info]   (min, avg, max) = (1330.851, 1595.665, 1682.676), stdev = 149.037
[info]   CI (99.9%): [1021.775, 2169.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   142368.946 ±(99.9%) 51093.627 B/op [Average]
[info]   (min, avg, max) = (118814.430, 142368.946, 150400.487), stdev = 13268.853
[info]   CI (99.9%): [91275.319, 193462.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 9.09% complete, ETA 00:44:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14964.860 ops/s
[info] # Warmup Iteration   2: 17758.570 ops/s
[info] # Warmup Iteration   3: 17821.636 ops/s
[info] Iteration   1: 17625.423 ops/s
[info]                  ·gc.alloc.rate:                   1539.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              137440.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1639.134 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 146350.970 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 17669.190 ops/s
[info]                  ·gc.alloc.rate:                   1543.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              137440.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1651.844 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147122.238 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 17567.025 ops/s
[info]                  ·gc.alloc.rate:                   1533.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              137440.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.747 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119240.458 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 17618.374 ops/s
[info]                  ·gc.alloc.rate:                   1538.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              137440.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.712 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 149541.541 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 17614.235 ops/s
[info]                  ·gc.alloc.rate:                   1537.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              137440.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.424 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 150349.264 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   17618.849 ±(99.9%) 139.963 ops/s [Average]
[info]   (min, avg, max) = (17567.025, 17618.849, 17669.190), stdev = 36.348
[info]   CI (99.9%): [17478.886, 17758.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1538.512 ±(99.9%) 12.780 MB/sec [Average]
[info]   (min, avg, max) = (1533.858, 1538.512, 1543.135), stdev = 3.319
[info]   CI (99.9%): [1525.732, 1551.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   137440.025 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (137440.023, 137440.025, 137440.031), stdev = 0.003
[info]   CI (99.9%): [137440.011, 137440.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.220 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.104, 0.167), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   9.291 ±(99.9%) 19.569 B/op [Average]
[info]   (min, avg, max) = (1.865, 9.291, 14.870), stdev = 5.082
[info]   CI (99.9%): [≈ 0, 28.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   1595.572 ±(99.9%) 573.880 MB/sec [Average]
[info]   (min, avg, max) = (1330.747, 1595.572, 1682.424), stdev = 149.035
[info]   CI (99.9%): [1021.692, 2169.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   142520.894 ±(99.9%) 50515.158 B/op [Average]
[info]   (min, avg, max) = (119240.458, 142520.894, 150349.264), stdev = 13118.626
[info]   CI (99.9%): [92005.736, 193036.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Run progress: 9.52% complete, ETA 00:44:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38736.595 ops/s
[info] # Warmup Iteration   2: 46677.854 ops/s
[info] # Warmup Iteration   3: 46120.038 ops/s
[info] Iteration   1: 47539.257 ops/s
[info]                  ·gc.alloc.rate:                   1648.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              54600.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1642.116 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54373.956 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 47356.309 ops/s
[info]                  ·gc.alloc.rate:                   1643.429 MB/sec
[info]                  ·gc.alloc.rate.norm:              54600.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1656.942 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55048.967 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 47527.778 ops/s
[info]                  ·gc.alloc.rate:                   1648.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              54600.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1668.000 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55248.003 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 46643.253 ops/s
[info]                  ·gc.alloc.rate:                   1617.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              54600.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.512 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.439 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56643.334 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 47711.846 ops/s
[info]                  ·gc.alloc.rate:                   1655.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              54600.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.303 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55614.959 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   47355.688 ±(99.9%) 1608.220 ops/s [Average]
[info]   (min, avg, max) = (46643.253, 47355.688, 47711.846), stdev = 417.650
[info]   CI (99.9%): [45747.469, 48963.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1642.846 ±(99.9%) 56.209 MB/sec [Average]
[info]   (min, avg, max) = (1617.892, 1642.846, 1655.529), stdev = 14.597
[info]   CI (99.9%): [1586.637, 1699.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   54600.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (54600.009, 54600.009, 54600.009), stdev = 0.001
[info]   CI (99.9%): [54600.008, 54600.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.024
[info]   CI (99.9%): [0.004, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.183 ±(99.9%) 3.037 B/op [Average]
[info]   (min, avg, max) = (2.068, 3.183, 4.120), stdev = 0.789
[info]   CI (99.9%): [0.146, 6.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1666.360 ±(99.9%) 67.327 MB/sec [Average]
[info]   (min, avg, max) = (1642.116, 1666.360, 1686.303), stdev = 17.485
[info]   CI (99.9%): [1599.033, 1733.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   55385.844 ±(99.9%) 3216.024 B/op [Average]
[info]   (min, avg, max) = (54373.956, 55385.844, 56643.334), stdev = 835.191
[info]   CI (99.9%): [52169.820, 58601.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Run progress: 9.96% complete, ETA 00:44:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70197.322 ops/s
[info] # Warmup Iteration   2: 104003.082 ops/s
[info] # Warmup Iteration   3: 106006.320 ops/s
[info] Iteration   1: 104817.338 ops/s
[info]                  ·gc.alloc.rate:                   243.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              3664.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.771 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3840.791 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 106480.412 ops/s
[info]                  ·gc.alloc.rate:                   247.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              3664.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.837 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3780.888 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 106757.596 ops/s
[info]                  ·gc.alloc.rate:                   248.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              3664.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.734 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3770.796 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 106804.179 ops/s
[info]                  ·gc.alloc.rate:                   248.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              3664.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.697 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4770.672 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 106610.350 ops/s
[info]                  ·gc.alloc.rate:      248.159 MB/sec
[info]                  ·gc.alloc.rate.norm: 3664.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   106293.975 ±(99.9%) 3216.245 ops/s [Average]
[info]   (min, avg, max) = (104817.338, 106293.975, 106804.179), stdev = 835.249
[info]   CI (99.9%): [103077.730, 109510.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   247.437 ±(99.9%) 7.475 MB/sec [Average]
[info]   (min, avg, max) = (243.998, 247.437, 248.608), stdev = 1.941
[info]   CI (99.9%): [239.962, 254.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3664.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3664.004, 3664.004, 3664.004), stdev = 0.001
[info]   CI (99.9%): [3664.003, 3664.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.430 ±(99.9%) 2.449 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.430, 1.534), stdev = 0.636
[info]   CI (99.9%): [≈ 0, 2.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   218.208 ±(99.9%) 483.167 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 218.208, 323.697), stdev = 125.477
[info]   CI (99.9%): [≈ 0, 701.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3232.629 ±(99.9%) 7145.912 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3232.629, 4770.672), stdev = 1855.771
[info]   CI (99.9%): [≈ 0, 10378.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Run progress: 10.39% complete, ETA 00:43:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 220208.994 ops/s
[info] # Warmup Iteration   2: 235640.824 ops/s
[info] # Warmup Iteration   3: 235839.461 ops/s
[info] Iteration   1: 235503.183 ops/s
[info]                  ·gc.alloc.rate:                   320.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3418.965 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 235843.564 ops/s
[info]                  ·gc.alloc.rate:                   321.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.738 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1707.062 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 234632.202 ops/s
[info]                  ·gc.alloc.rate:                   319.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2214.109 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 234407.386 ops/s
[info]                  ·gc.alloc.rate:                   319.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2216.224 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 235170.659 ops/s
[info]                  ·gc.alloc.rate:                   320.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.352 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2197.889 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   235111.399 ±(99.9%) 2292.942 ops/s [Average]
[info]   (min, avg, max) = (234407.386, 235111.399, 235843.564), stdev = 595.470
[info]   CI (99.9%): [232818.457, 237404.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   320.238 ±(99.9%) 2.964 MB/sec [Average]
[info]   (min, avg, max) = (319.367, 320.238, 321.197), stdev = 0.770
[info]   CI (99.9%): [317.274, 323.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   2144.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2144.002, 2144.002, 2144.002), stdev = 0.001
[info]   CI (99.9%): [2144.001, 2144.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.669 ±(99.9%) 5.624 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.669, 3.281), stdev = 1.461
[info]   CI (99.9%): [≈ 0, 6.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4.486 ±(99.9%) 37.730 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.486, 22.011), stdev = 9.798
[info]   CI (99.9%): [≈ 0, 42.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   351.145 ±(99.9%) 366.402 MB/sec [Average]
[info]   (min, avg, max) = (255.738, 351.145, 511.479), stdev = 95.153
[info]   CI (99.9%): [≈ 0, 717.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2350.850 ±(99.9%) 2447.168 B/op [Average]
[info]   (min, avg, max) = (1707.062, 2350.850, 3418.965), stdev = 635.522
[info]   CI (99.9%): [≈ 0, 4798.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 5.000), stdev = 1.673
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Run progress: 10.82% complete, ETA 00:43:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7695.914 ops/s
[info] # Warmup Iteration   2: 12749.191 ops/s
[info] # Warmup Iteration   3: 12935.524 ops/s
[info] Iteration   1: 12997.995 ops/s
[info]                  ·gc.alloc.rate:                   3964.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              479960.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3722.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 450611.039 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 12977.274 ops/s
[info]                  ·gc.alloc.rate:                   3956.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              479960.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22.722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4074.875 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 494274.441 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 12889.415 ops/s
[info]                  ·gc.alloc.rate:                   3930.043 MB/sec
[info]                  ·gc.alloc.rate.norm:              479961.816 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4083.874 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 498748.684 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 12927.210 ops/s
[info]                  ·gc.alloc.rate:                   3948.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              480788.308 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3743.592 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 455842.668 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   5: 12909.721 ops/s
[info]                  ·gc.alloc.rate:                   3936.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              479960.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4083.824 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 497937.585 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   12940.323 ±(99.9%) 176.370 ops/s [Average]
[info]   (min, avg, max) = (12889.415, 12940.323, 12997.995), stdev = 45.803
[info]   CI (99.9%): [12763.953, 13116.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3947.268 ±(99.9%) 54.762 MB/sec [Average]
[info]   (min, avg, max) = (3930.043, 3947.268, 3964.596), stdev = 14.222
[info]   CI (99.9%): [3892.506, 4002.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   480126.044 ±(99.9%) 1425.576 B/op [Average]
[info]   (min, avg, max) = (479960.031, 480126.044, 480788.308), stdev = 370.218
[info]   CI (99.9%): [478700.468, 481551.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.133 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.133, 0.187), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   16.206 ±(99.9%) 20.228 B/op [Average]
[info]   (min, avg, max) = (10.082, 16.206, 22.722), stdev = 5.253
[info]   CI (99.9%): [≈ 0, 36.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3941.666 ±(99.9%) 734.631 MB/sec [Average]
[info]   (min, avg, max) = (3722.166, 3941.666, 4083.874), stdev = 190.781
[info]   CI (99.9%): [3207.035, 4676.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   479482.883 ±(99.9%) 92795.335 B/op [Average]
[info]   (min, avg, max) = (450611.039, 479482.883, 498748.684), stdev = 24098.654
[info]   CI (99.9%): [386687.548, 572278.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   58.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (11.000, 11.600, 12.000), stdev = 0.548
[info]   CI (99.9%): [58.000, 58.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   68.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (12.000, 13.600, 16.000), stdev = 1.517
[info]   CI (99.9%): [68.000, 68.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Run progress: 11.26% complete, ETA 00:43:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36524.467 ops/s
[info] # Warmup Iteration   2: 45361.923 ops/s
[info] # Warmup Iteration   3: 45598.770 ops/s
[info] Iteration   1: 45927.631 ops/s
[info]                  ·gc.alloc.rate:                   806.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              27632.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.901 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22369.865 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 45541.749 ops/s
[info]                  ·gc.alloc.rate:                   799.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              27632.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      977.745 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33793.843 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 44930.106 ops/s
[info]                  ·gc.alloc.rate:                   788.680 MB/sec
[info]                  ·gc.alloc.rate.norm:              27632.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22879.337 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 45855.506 ops/s
[info]                  ·gc.alloc.rate:                   805.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              27632.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.802 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33733.950 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 45547.073 ops/s
[info]                  ·gc.alloc.rate:                   799.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              27632.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.552 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22718.571 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   45560.413 ±(99.9%) 1515.685 ops/s [Average]
[info]   (min, avg, max) = (44930.106, 45560.413, 45927.631), stdev = 393.619
[info]   CI (99.9%): [44044.727, 47076.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   799.885 ±(99.9%) 26.938 MB/sec [Average]
[info]   (min, avg, max) = (788.680, 799.885, 806.485), stdev = 6.996
[info]   CI (99.9%): [772.946, 826.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   27632.009 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (27632.009, 27632.009, 27632.010), stdev = 0.001
[info]   CI (99.9%): [27632.008, 27632.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.731 ±(99.9%) 2.282 B/op [Average]
[info]   (min, avg, max) = (2.158, 2.731, 3.597), stdev = 0.593
[info]   CI (99.9%): [0.449, 5.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   784.806 ±(99.9%) 687.170 MB/sec [Average]
[info]   (min, avg, max) = (652.901, 784.806, 982.802), stdev = 178.456
[info]   CI (99.9%): [97.636, 1471.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   27099.113 ±(99.9%) 23438.525 B/op [Average]
[info]   (min, avg, max) = (22369.865, 27099.113, 33793.843), stdev = 6086.911
[info]   CI (99.9%): [3660.588, 50537.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Run progress: 11.69% complete, ETA 00:43:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 90754.176 ops/s
[info] # Warmup Iteration   2: 132755.872 ops/s
[info] # Warmup Iteration   3: 133220.358 ops/s
[info] Iteration   1: 131258.430 ops/s
[info]                  ·gc.alloc.rate:                   937.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              11248.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      975.284 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11697.259 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 134732.691 ops/s
[info]                  ·gc.alloc.rate:                   963.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              11248.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.216 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11443.942 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 135208.855 ops/s
[info]                  ·gc.alloc.rate:                   966.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              11248.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.823 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7668.611 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 132905.274 ops/s
[info]                  ·gc.alloc.rate:                   949.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              11248.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.246 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11764.958 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 133880.927 ops/s
[info]                  ·gc.alloc.rate:                   957.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              11248.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.799 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11726.367 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   133597.235 ±(99.9%) 6062.740 ops/s [Average]
[info]   (min, avg, max) = (131258.430, 133597.235, 135208.855), stdev = 1574.474
[info]   CI (99.9%): [127534.495, 139659.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   954.858 ±(99.9%) 44.237 MB/sec [Average]
[info]   (min, avg, max) = (937.827, 954.858, 966.335), stdev = 11.488
[info]   CI (99.9%): [910.621, 999.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   11248.006 ±(99.9%) 0.027 B/op [Average]
[info]   (min, avg, max) = (11248.001, 11248.006, 11248.018), stdev = 0.007
[info]   CI (99.9%): [11247.979, 11248.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.121 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.832 ±(99.9%) 1.406 B/op [Average]
[info]   (min, avg, max) = (0.493, 0.832, 1.457), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 2.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   921.074 ±(99.9%) 565.623 MB/sec [Average]
[info]   (min, avg, max) = (658.823, 921.074, 997.799), stdev = 146.891
[info]   CI (99.9%): [355.450, 1486.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10860.227 ±(99.9%) 6887.297 B/op [Average]
[info]   (min, avg, max) = (7668.611, 10860.227, 11764.958), stdev = 1788.609
[info]   CI (99.9%): [3972.930, 17747.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Run progress: 12.12% complete, ETA 00:43:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 262704.749 ops/s
[info] # Warmup Iteration   2: 287443.025 ops/s
[info] # Warmup Iteration   3: 283778.405 ops/s
[info] Iteration   1: 278925.872 ops/s
[info]                  ·gc.alloc.rate:                   1002.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              5656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.232 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5525.488 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 284172.845 ops/s
[info]                  ·gc.alloc.rate:                   1021.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              5656.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.495 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5430.991 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 287182.027 ops/s
[info]                  ·gc.alloc.rate:                   1032.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              5656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      984.949 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5397.579 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 285944.166 ops/s
[info]                  ·gc.alloc.rate:                   1027.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              5656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1319.754 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7265.405 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 286018.060 ops/s
[info]                  ·gc.alloc.rate:                   1028.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              5656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995.410 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5476.492 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   284448.594 ±(99.9%) 12588.148 ops/s [Average]
[info]   (min, avg, max) = (278925.872, 284448.594, 287182.027), stdev = 3269.102
[info]   CI (99.9%): [271860.446, 297036.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1022.206 ±(99.9%) 45.319 MB/sec [Average]
[info]   (min, avg, max) = (1002.361, 1022.206, 1032.106), stdev = 11.769
[info]   CI (99.9%): [976.887, 1067.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5656.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5656.001, 5656.001, 5656.002), stdev = 0.001
[info]   CI (99.9%): [5656.001, 5656.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.020, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.484 ±(99.9%) 0.368 B/op [Average]
[info]   (min, avg, max) = (0.344, 0.484, 0.576), stdev = 0.096
[info]   CI (99.9%): [0.116, 0.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1051.968 ±(99.9%) 576.950 MB/sec [Average]
[info]   (min, avg, max) = (979.232, 1051.968, 1319.754), stdev = 149.832
[info]   CI (99.9%): [475.018, 1628.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5819.191 ±(99.9%) 3118.603 B/op [Average]
[info]   (min, avg, max) = (5397.579, 5819.191, 7265.405), stdev = 809.891
[info]   CI (99.9%): [2700.588, 8937.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 12.55% complete, ETA 00:42:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 307750.868 ops/s
[info] # Warmup Iteration   2: 312135.372 ops/s
[info] # Warmup Iteration   3: 302071.970 ops/s
[info] Iteration   1: 318737.827 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 304906.685 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 317680.436 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 317648.649 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 317605.230 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   315315.765 ±(99.9%) 22480.566 ops/s [Average]
[info]   (min, avg, max) = (304906.685, 315315.765, 318737.827), stdev = 5838.132
[info]   CI (99.9%): [292835.199, 337796.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Run progress: 12.99% complete, ETA 00:42:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41302.403 ops/s
[info] # Warmup Iteration   2: 52925.886 ops/s
[info] # Warmup Iteration   3: 54538.267 ops/s
[info] Iteration   1: 55036.941 ops/s
[info]                  ·gc.alloc.rate:                   544.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              15576.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111.826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      324.682 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9286.261 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 55274.232 ops/s
[info]                  ·gc.alloc.rate:                   546.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              15576.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      648.378 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18464.785 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 55476.908 ops/s
[info]                  ·gc.alloc.rate:                   548.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              15576.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      646.710 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18349.986 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 55113.634 ops/s
[info]                  ·gc.alloc.rate:                   545.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              15575.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.036 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9225.901 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 55251.747 ops/s
[info]                  ·gc.alloc.rate:                   546.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              15576.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      646.771 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18424.699 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   55230.692 ±(99.9%) 650.643 ops/s [Average]
[info]   (min, avg, max) = (55036.941, 55230.692, 55476.908), stdev = 168.970
[info]   CI (99.9%): [54580.049, 55881.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   546.526 ±(99.9%) 6.426 MB/sec [Average]
[info]   (min, avg, max) = (544.595, 546.526, 548.946), stdev = 1.669
[info]   CI (99.9%): [540.101, 552.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   15576.007 ±(99.9%) 0.090 B/op [Average]
[info]   (min, avg, max) = (15575.973, 15576.007, 15576.038), stdev = 0.023
[info]   CI (99.9%): [15575.917, 15576.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.819 ±(99.9%) 6.654 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.819, 3.910), stdev = 1.728
[info]   CI (99.9%): [≈ 0, 7.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   23.430 ±(99.9%) 190.322 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.430, 111.826), stdev = 49.426
[info]   CI (99.9%): [≈ 0, 213.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   517.915 ±(99.9%) 682.144 MB/sec [Average]
[info]   (min, avg, max) = (323.036, 517.915, 648.378), stdev = 177.151
[info]   CI (99.9%): [≈ 0, 1200.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   14750.326 ±(99.9%) 19313.873 B/op [Average]
[info]   (min, avg, max) = (9225.901, 14750.326, 18464.785), stdev = 5015.751
[info]   CI (99.9%): [≈ 0, 34064.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 4.000), stdev = 1.140
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Run progress: 13.42% complete, ETA 00:42:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16958.547 ops/s
[info] # Warmup Iteration   2: 21454.548 ops/s
[info] # Warmup Iteration   3: 21316.243 ops/s
[info] Iteration   1: 21449.573 ops/s
[info]                  ·gc.alloc.rate:                   1946.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              142814.752 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1650.664 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 121089.169 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 21291.354 ops/s
[info]                  ·gc.alloc.rate:                   1931.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              142816.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1997.781 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147696.817 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 21375.220 ops/s
[info]                  ·gc.alloc.rate:                   1939.304 MB/sec
[info]                  ·gc.alloc.rate.norm:              142815.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2012.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 148171.013 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 21606.858 ops/s
[info]                  ·gc.alloc.rate:                   1960.791 MB/sec
[info]                  ·gc.alloc.rate.norm:              142816.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.799 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147405.205 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 21345.414 ops/s
[info]                  ·gc.alloc.rate:                   1936.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              142816.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 149754.472 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   21413.684 ±(99.9%) 470.462 ops/s [Average]
[info]   (min, avg, max) = (21291.354, 21413.684, 21606.858), stdev = 122.177
[info]   CI (99.9%): [20943.222, 21884.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   1943.058 ±(99.9%) 43.562 MB/sec [Average]
[info]   (min, avg, max) = (1931.762, 1943.058, 1960.791), stdev = 11.313
[info]   CI (99.9%): [1899.496, 1986.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   142815.618 ±(99.9%) 2.248 B/op [Average]
[info]   (min, avg, max) = (142814.752, 142815.618, 142816.026), stdev = 0.584
[info]   CI (99.9%): [142813.369, 142817.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.146), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6.430 ±(99.9%) 10.598 B/op [Average]
[info]   (min, avg, max) = (3.055, 6.430, 10.744), stdev = 2.752
[info]   CI (99.9%): [≈ 0, 17.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1942.994 ±(99.9%) 631.098 MB/sec [Average]
[info]   (min, avg, max) = (1650.664, 1942.994, 2030.696), stdev = 163.894
[info]   CI (99.9%): [1311.896, 2574.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   142823.335 ±(99.9%) 46914.555 B/op [Average]
[info]   (min, avg, max) = (121089.169, 142823.335, 149754.472), stdev = 12183.561
[info]   CI (99.9%): [95908.780, 189737.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 8.000), stdev = 1.095
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Run progress: 13.85% complete, ETA 00:42:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33603.458 ops/s
[info] # Warmup Iteration   2: 53997.170 ops/s
[info] # Warmup Iteration   3: 54558.519 ops/s
[info] Iteration   1: 55267.888 ops/s
[info]                  ·gc.alloc.rate:      128.618 MB/sec
[info]                  ·gc.alloc.rate.norm: 3664.007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 55004.705 ops/s
[info]                  ·gc.alloc.rate:                   128.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              3664.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.780 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7319.370 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 54838.036 ops/s
[info]                  ·gc.alloc.rate:      127.653 MB/sec
[info]                  ·gc.alloc.rate.norm: 3664.007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 53192.273 ops/s
[info]                  ·gc.alloc.rate:                   123.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              3664.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.823 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7568.669 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 54969.069 ops/s
[info]                  ·gc.alloc.rate:      127.955 MB/sec
[info]                  ·gc.alloc.rate.norm: 3664.007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   54654.394 ±(99.9%) 3204.163 ops/s [Average]
[info]   (min, avg, max) = (53192.273, 54654.394, 55267.888), stdev = 832.111
[info]   CI (99.9%): [51450.231, 57858.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   127.222 ±(99.9%) 7.394 MB/sec [Average]
[info]   (min, avg, max) = (123.845, 127.222, 128.618), stdev = 1.920
[info]   CI (99.9%): [119.828, 134.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3664.008 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (3664.007, 3664.008, 3664.008), stdev = 0.001
[info]   CI (99.9%): [3664.006, 3664.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.246 ±(99.9%) 2.121 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.246, 1.232), stdev = 0.551
[info]   CI (99.9%): [≈ 0, 2.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   102.321 ±(99.9%) 539.508 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.321, 255.823), stdev = 140.108
[info]   CI (99.9%): [≈ 0, 641.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2977.608 ±(99.9%) 15703.734 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2977.608, 7568.669), stdev = 4078.210
[info]   CI (99.9%): [≈ 0, 18681.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   2.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Run progress: 14.29% complete, ETA 00:42:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 129012.881 ops/s
[info] # Warmup Iteration   2: 128637.467 ops/s
[info] # Warmup Iteration   3: 134311.555 ops/s
[info] Iteration   1: 134650.133 ops/s
[info]                  ·gc.alloc.rate:      183.409 MB/sec
[info]                  ·gc.alloc.rate.norm: 2144.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 134001.986 ops/s
[info]                  ·gc.alloc.rate:                   182.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3004.359 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 134233.817 ops/s
[info]                  ·gc.alloc.rate:                   182.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.771 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2999.234 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 134176.634 ops/s
[info]                  ·gc.alloc.rate:                   182.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.754 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3000.530 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 135206.308 ops/s
[info]                  ·gc.alloc.rate:      184.166 MB/sec
[info]                  ·gc.alloc.rate.norm: 2144.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   134453.776 ±(99.9%) 1860.865 ops/s [Average]
[info]   (min, avg, max) = (134001.986, 134453.776, 135206.308), stdev = 483.261
[info]   CI (99.9%): [132592.911, 136314.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   183.137 ±(99.9%) 2.547 MB/sec [Average]
[info]   (min, avg, max) = (182.524, 183.137, 184.166), stdev = 0.661
[info]   CI (99.9%): [180.590, 185.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   2144.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2144.003, 2144.003, 2144.003), stdev = 0.001
[info]   CI (99.9%): [2144.003, 2144.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.004 ±(99.9%) 0.038 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.022), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.052 ±(99.9%) 0.450 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.052, 0.262), stdev = 0.117
[info]   CI (99.9%): [≈ 0, 0.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   153.459 ±(99.9%) 539.429 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 153.459, 255.771), stdev = 140.088
[info]   CI (99.9%): [≈ 0, 692.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1800.825 ±(99.9%) 6330.157 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1800.825, 3004.359), stdev = 1643.922
[info]   CI (99.9%): [≈ 0, 8130.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Run progress: 14.72% complete, ETA 00:41:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5610.401 ops/s
[info] # Warmup Iteration   2: 9615.869 ops/s
[info] # Warmup Iteration   3: 9903.119 ops/s
[info] Iteration   1: 9873.670 ops/s
[info]                  ·gc.alloc.rate:                   3308.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              527320.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3366.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 536657.290 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 9815.203 ops/s
[info]                  ·gc.alloc.rate:                   3288.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              527320.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3387.248 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 543191.845 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 9838.602 ops/s
[info]                  ·gc.alloc.rate:                   3295.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              527320.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3396.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 543360.767 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 9810.379 ops/s
[info]                  ·gc.alloc.rate:                   3287.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              527323.151 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3063.329 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 491373.058 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 9855.215 ops/s
[info]                  ·gc.alloc.rate:                   3301.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              527320.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.319 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 543540.613 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   9838.614 ±(99.9%) 102.781 ops/s [Average]
[info]   (min, avg, max) = (9810.379, 9838.614, 9873.670), stdev = 26.692
[info]   CI (99.9%): [9735.833, 9941.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3296.291 ±(99.9%) 34.126 MB/sec [Average]
[info]   (min, avg, max) = (3287.450, 3296.291, 3308.192), stdev = 8.863
[info]   CI (99.9%): [3262.165, 3330.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   527320.664 ±(99.9%) 5.354 B/op [Average]
[info]   (min, avg, max) = (527320.041, 527320.664, 527323.151), stdev = 1.390
[info]   CI (99.9%): [527315.310, 527326.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.062), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5.995 ±(99.9%) 14.068 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.995, 10.013), stdev = 3.653
[info]   CI (99.9%): [≈ 0, 20.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3323.341 ±(99.9%) 562.174 MB/sec [Average]
[info]   (min, avg, max) = (3063.329, 3323.341, 3403.319), stdev = 145.995
[info]   CI (99.9%): [2761.167, 3885.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   531624.715 ±(99.9%) 87364.753 B/op [Average]
[info]   (min, avg, max) = (491373.058, 531624.715, 543540.613), stdev = 22688.349
[info]   CI (99.9%): [444259.961, 618989.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   49.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.200, 12.000), stdev = 1.095
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Run progress: 15.15% complete, ETA 00:41:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26635.444 ops/s
[info] # Warmup Iteration   2: 31281.973 ops/s
[info] # Warmup Iteration   3: 38314.259 ops/s
[info] Iteration   1: 35312.509 ops/s
[info]                  ·gc.alloc.rate:                   1368.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              61015.919 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1634.655 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72870.970 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 33862.102 ops/s
[info]                  ·gc.alloc.rate:                   1312.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              61008.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1315.385 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61147.325 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 33887.342 ops/s
[info]                  ·gc.alloc.rate:                   1313.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              61008.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1324.712 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61533.536 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 33722.489 ops/s
[info]                  ·gc.alloc.rate:                   1307.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              61008.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      999.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46616.840 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 33664.532 ops/s
[info]                  ·gc.alloc.rate:                   1304.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              61008.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.090 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62562.045 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   34089.795 ±(99.9%) 2656.402 ops/s [Average]
[info]   (min, avg, max) = (33664.532, 34089.795, 35312.509), stdev = 689.859
[info]   CI (99.9%): [31433.392, 36746.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1321.366 ±(99.9%) 102.825 MB/sec [Average]
[info]   (min, avg, max) = (1304.852, 1321.366, 1368.720), stdev = 26.703
[info]   CI (99.9%): [1218.541, 1424.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   61009.594 ±(99.9%) 13.615 B/op [Average]
[info]   (min, avg, max) = (61008.012, 61009.594, 61015.919), stdev = 3.536
[info]   CI (99.9%): [60995.978, 61023.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.121 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.121, 0.187), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5.548 ±(99.9%) 7.567 B/op [Average]
[info]   (min, avg, max) = (2.915, 5.548, 8.350), stdev = 1.965
[info]   CI (99.9%): [≈ 0, 13.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1322.379 ±(99.9%) 866.090 MB/sec [Average]
[info]   (min, avg, max) = (999.052, 1322.379, 1634.655), stdev = 224.921
[info]   CI (99.9%): [456.289, 2188.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   60946.143 ±(99.9%) 36046.586 B/op [Average]
[info]   (min, avg, max) = (46616.840, 60946.143, 72870.970), stdev = 9361.184
[info]   CI (99.9%): [24899.557, 96992.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 8.000), stdev = 1.924
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Run progress: 15.58% complete, ETA 00:41:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 214971.354 ops/s
[info] # Warmup Iteration   2: 234892.339 ops/s
[info] # Warmup Iteration   3: 237353.812 ops/s
[info] Iteration   1: 237513.154 ops/s
[info]                  ·gc.alloc.rate:                   567.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              3760.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4356.652 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 239004.633 ops/s
[info]                  ·gc.alloc.rate:                   570.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              3760.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.979 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2153.800 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 238452.876 ops/s
[info]                  ·gc.alloc.rate:                   569.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              3760.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.388 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4313.192 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 233960.662 ops/s
[info]                  ·gc.alloc.rate:                   559.032 MB/sec
[info]                  ·gc.alloc.rate.norm:              3760.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.929 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4391.547 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 239599.400 ops/s
[info]                  ·gc.alloc.rate:                   572.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              3760.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.483 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4292.654 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   237706.145 ±(99.9%) 8587.450 ops/s [Average]
[info]   (min, avg, max) = (233960.662, 237706.145, 239599.400), stdev = 2230.133
[info]   CI (99.9%): [229118.695, 246293.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   567.837 ±(99.9%) 20.242 MB/sec [Average]
[info]   (min, avg, max) = (559.032, 567.837, 572.396), stdev = 5.257
[info]   CI (99.9%): [547.594, 588.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3760.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3760.002, 3760.002, 3760.002), stdev = 0.001
[info]   CI (99.9%): [3760.001, 3760.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.785 ±(99.9%) 6.182 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.785, 3.657), stdev = 1.606
[info]   CI (99.9%): [≈ 0, 6.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5.204 ±(99.9%) 40.976 B/op [Average]
[info]   (min, avg, max) = (0.140, 5.204, 24.234), stdev = 10.641
[info]   CI (99.9%): [≈ 0, 46.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   588.830 ±(99.9%) 563.698 MB/sec [Average]
[info]   (min, avg, max) = (326.979, 588.830, 657.374), stdev = 146.391
[info]   CI (99.9%): [25.133, 1152.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3901.569 ±(99.9%) 3765.103 B/op [Average]
[info]   (min, avg, max) = (2153.800, 3901.569, 4391.547), stdev = 977.785
[info]   CI (99.9%): [136.466, 7666.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 16.02% complete, ETA 00:41:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 227877.984 ops/s
[info] # Warmup Iteration   2: 250793.813 ops/s
[info] # Warmup Iteration   3: 251080.405 ops/s
[info] Iteration   1: 251951.315 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 251943.927 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 252039.740 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 252117.211 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 251871.287 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   251984.696 ±(99.9%) 366.460 ops/s [Average]
[info]   (min, avg, max) = (251871.287, 251984.696, 252117.211), stdev = 95.168
[info]   CI (99.9%): [251618.236, 252351.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.002, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Run progress: 16.45% complete, ETA 00:41:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3179.095 ops/s
[info] # Warmup Iteration   2: 4481.670 ops/s
[info] # Warmup Iteration   3: 4648.582 ops/s
[info] Iteration   1: 4634.433 ops/s
[info]                  ·gc.alloc.rate:                   2145.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              728752.095 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35.341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1971.830 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 669722.506 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 4637.408 ops/s
[info]                  ·gc.alloc.rate:                   2147.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              728752.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2328.534 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 790331.102 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 4635.250 ops/s
[info]                  ·gc.alloc.rate:                   2146.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              728752.095 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.702 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 683598.285 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 4618.903 ops/s
[info]                  ·gc.alloc.rate:                   2138.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              728752.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.826 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 689745.122 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 4598.453 ops/s
[info]                  ·gc.alloc.rate:                   2129.100 MB/sec
[info]                  ·gc.alloc.rate.norm:              728752.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2370.207 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 811278.692 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   4624.889 ±(99.9%) 63.562 ops/s [Average]
[info]   (min, avg, max) = (4598.453, 4624.889, 4637.408), stdev = 16.507
[info]   CI (99.9%): [4561.328, 4688.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2141.365 ±(99.9%) 29.808 MB/sec [Average]
[info]   (min, avg, max) = (2129.100, 2141.365, 2147.105), stdev = 7.741
[info]   CI (99.9%): [2111.557, 2171.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   728752.091 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (728752.088, 728752.091, 728752.095), stdev = 0.004
[info]   CI (99.9%): [728752.077, 728752.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   22.668 ±(99.9%) 35.532 B/op [Average]
[info]   (min, avg, max) = (14.127, 22.668, 35.341), stdev = 9.228
[info]   CI (99.9%): [≈ 0, 58.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2141.620 ±(99.9%) 736.309 MB/sec [Average]
[info]   (min, avg, max) = (1971.830, 2141.620, 2370.207), stdev = 191.217
[info]   CI (99.9%): [1405.311, 2877.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   728935.141 ±(99.9%) 255766.170 B/op [Average]
[info]   (min, avg, max) = (669722.506, 728935.141, 811278.692), stdev = 66421.662
[info]   CI (99.9%): [473168.972, 984701.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 8.000), stdev = 1.342
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Run progress: 16.88% complete, ETA 00:40:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2322.344 ops/s
[info] # Warmup Iteration   2: 2925.663 ops/s
[info] # Warmup Iteration   3: 2943.746 ops/s
[info] Iteration   1: 2940.343 ops/s
[info]                  ·gc.alloc.rate:                   1384.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              740720.949 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1308.454 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 700179.317 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2956.633 ops/s
[info]                  ·gc.alloc.rate:                   1391.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              740720.138 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99.700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1315.781 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 700468.619 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2980.257 ops/s
[info]                  ·gc.alloc.rate:                   1402.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              740720.137 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1324.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 699636.922 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2940.632 ops/s
[info]                  ·gc.alloc.rate:                   1384.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              740720.150 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1666.047 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 891574.733 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2943.462 ops/s
[info]                  ·gc.alloc.rate:                   1385.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              740720.139 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.813 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 716978.087 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   2952.266 ±(99.9%) 65.506 ops/s [Average]
[info]   (min, avg, max) = (2940.343, 2952.266, 2980.257), stdev = 17.012
[info]   CI (99.9%): [2886.759, 3017.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1389.489 ±(99.9%) 30.245 MB/sec [Average]
[info]   (min, avg, max) = (1384.151, 1389.489, 1402.473), stdev = 7.855
[info]   CI (99.9%): [1359.243, 1419.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   740720.302 ±(99.9%) 1.392 B/op [Average]
[info]   (min, avg, max) = (740720.137, 740720.302, 740720.949), stdev = 0.362
[info]   CI (99.9%): [740718.910, 740721.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.171 ±(99.9%) 0.328 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.171, 0.229), stdev = 0.085
[info]   CI (99.9%): [≈ 0, 0.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   90.917 ±(99.9%) 174.529 B/op [Average]
[info]   (min, avg, max) = (11.138, 90.917, 122.518), stdev = 45.325
[info]   CI (99.9%): [≈ 0, 265.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1391.156 ±(99.9%) 593.545 MB/sec [Average]
[info]   (min, avg, max) = (1308.454, 1391.156, 1666.047), stdev = 154.142
[info]   CI (99.9%): [797.611, 1984.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   741767.536 ±(99.9%) 323699.716 B/op [Average]
[info]   (min, avg, max) = (699636.922, 741767.536, 891574.733), stdev = 84063.788
[info]   CI (99.9%): [418067.819, 1065467.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.140
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Run progress: 17.32% complete, ETA 00:40:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3898.116 ops/s
[info] # Warmup Iteration   2: 6247.651 ops/s
[info] # Warmup Iteration   3: 6362.539 ops/s
[info] Iteration   1: 6142.853 ops/s
[info]                  ·gc.alloc.rate:                   872.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              223512.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.204 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 251180.451 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6296.952 ops/s
[info]                  ·gc.alloc.rate:                   894.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              223512.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.300 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 164302.987 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6366.786 ops/s
[info]                  ·gc.alloc.rate:                   904.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              223512.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 245101.347 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6364.973 ops/s
[info]                  ·gc.alloc.rate:                   903.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              223512.069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.570 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 246457.356 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 6382.470 ops/s
[info]                  ·gc.alloc.rate:                   906.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              223512.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      667.297 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 164579.128 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   6310.807 ±(99.9%) 383.151 ops/s [Average]
[info]   (min, avg, max) = (6142.853, 6310.807, 6382.470), stdev = 99.503
[info]   CI (99.9%): [5927.656, 6693.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   896.177 ±(99.9%) 54.632 MB/sec [Average]
[info]   (min, avg, max) = (872.231, 896.177, 906.244), stdev = 14.188
[info]   CI (99.9%): [841.544, 950.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   223512.067 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (223512.064, 223512.067, 223512.072), stdev = 0.003
[info]   CI (99.9%): [223512.053, 223512.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.067, 0.083), stdev = 0.009
[info]   CI (99.9%): [0.031, 0.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   16.602 ±(99.9%) 8.503 B/op [Average]
[info]   (min, avg, max) = (15.437, 16.602, 20.531), stdev = 2.208
[info]   CI (99.9%): [8.099, 25.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   858.637 ±(99.9%) 690.671 MB/sec [Average]
[info]   (min, avg, max) = (657.300, 858.637, 996.570), stdev = 179.365
[info]   CI (99.9%): [167.965, 1549.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   214324.254 ±(99.9%) 175562.019 B/op [Average]
[info]   (min, avg, max) = (164302.987, 214324.254, 251180.451), stdev = 45592.899
[info]   CI (99.9%): [38762.234, 389886.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Run progress: 17.75% complete, ETA 00:40:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7474.574 ops/s
[info] # Warmup Iteration   2: 8268.351 ops/s
[info] # Warmup Iteration   3: 8257.492 ops/s
[info] Iteration   1: 8097.327 ops/s
[info]                  ·gc.alloc.rate:                   575.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              111808.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     634.600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 128288.743 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 8096.771 ops/s
[info]                  ·gc.alloc.rate:                   575.225 MB/sec
[info]                  ·gc.alloc.rate.norm:              111808.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.846 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 127672.998 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 8270.295 ops/s
[info]                  ·gc.alloc.rate:                   587.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              111808.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.720 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62366.948 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 8279.563 ops/s
[info]                  ·gc.alloc.rate:                   588.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              111808.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.092 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 124724.956 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 8295.534 ops/s
[info]                  ·gc.alloc.rate:                   589.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              111808.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.082 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 124674.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   8207.898 ±(99.9%) 391.197 ops/s [Average]
[info]   (min, avg, max) = (8096.771, 8207.898, 8295.534), stdev = 101.593
[info]   CI (99.9%): [7816.700, 8599.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   583.079 ±(99.9%) 27.696 MB/sec [Average]
[info]   (min, avg, max) = (575.225, 583.079, 589.273), stdev = 7.193
[info]   CI (99.9%): [555.383, 610.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   111808.050 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (111808.049, 111808.050, 111808.054), stdev = 0.002
[info]   CI (99.9%): [111808.042, 111808.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.699 ±(99.9%) 5.525 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.699, 3.265), stdev = 1.435
[info]   CI (99.9%): [≈ 0, 6.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   135.673 ±(99.9%) 1074.268 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 135.673, 634.600), stdev = 278.984
[info]   CI (99.9%): [≈ 0, 1209.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   591.553 ±(99.9%) 567.951 MB/sec [Average]
[info]   (min, avg, max) = (327.720, 591.553, 660.027), stdev = 147.495
[info]   CI (99.9%): [23.602, 1159.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   113545.530 ±(99.9%) 110349.967 B/op [Average]
[info]   (min, avg, max) = (62366.948, 113545.530, 128288.743), stdev = 28657.536
[info]   CI (99.9%): [3195.563, 223895.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Run progress: 18.18% complete, ETA 00:40:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2001.989 ops/s
[info] # Warmup Iteration   2: 3659.337 ops/s
[info] # Warmup Iteration   3: 3714.865 ops/s
[info] Iteration   1: 3742.477 ops/s
[info]                  ·gc.alloc.rate:                   1623.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              682880.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1644.966 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 691908.923 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 3759.432 ops/s
[info]                  ·gc.alloc.rate:                   1631.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              682880.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26.145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1661.346 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 695378.791 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3763.946 ops/s
[info]                  ·gc.alloc.rate:                   1639.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              685679.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.616 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 699886.185 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3745.326 ops/s
[info]                  ·gc.alloc.rate:                   1625.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              682880.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.172 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 706886.303 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3732.974 ops/s
[info]                  ·gc.alloc.rate:                   1619.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              682880.109 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1689.614 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 712436.345 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   3748.831 ±(99.9%) 48.895 ops/s [Average]
[info]   (min, avg, max) = (3732.974, 3748.831, 3763.946), stdev = 12.698
[info]   CI (99.9%): [3699.936, 3797.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1627.839 ±(99.9%) 30.350 MB/sec [Average]
[info]   (min, avg, max) = (1619.519, 1627.839, 1639.643), stdev = 7.882
[info]   CI (99.9%): [1597.489, 1658.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   683439.979 ±(99.9%) 4819.870 B/op [Average]
[info]   (min, avg, max) = (682880.109, 683439.979, 685679.097), stdev = 1251.705
[info]   CI (99.9%): [678620.109, 688259.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.062), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   13.990 ±(99.9%) 51.024 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.990, 26.256), stdev = 13.251
[info]   CI (99.9%): [≈ 0, 65.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1670.343 ±(99.9%) 67.988 MB/sec [Average]
[info]   (min, avg, max) = (1644.966, 1670.343, 1689.614), stdev = 17.656
[info]   CI (99.9%): [1602.355, 1738.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   701299.310 ±(99.9%) 32244.221 B/op [Average]
[info]   (min, avg, max) = (691908.923, 701299.310, 712436.345), stdev = 8373.722
[info]   CI (99.9%): [669055.089, 733543.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Run progress: 18.61% complete, ETA 00:40:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4711.453 ops/s
[info] # Warmup Iteration   2: 5938.040 ops/s
[info] # Warmup Iteration   3: 5918.154 ops/s
[info] Iteration   1: 5909.274 ops/s
[info]                  ·gc.alloc.rate:                   513.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              136824.069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     914.505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      583.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 155308.457 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 5933.521 ops/s
[info]                  ·gc.alloc.rate:                   515.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              136824.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.339 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86836.580 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 5910.889 ops/s
[info]                  ·gc.alloc.rate:                   513.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              136824.069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.283 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 173432.662 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 5958.127 ops/s
[info]                  ·gc.alloc.rate:                   518.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              136824.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.823 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86046.931 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 5942.212 ops/s
[info]                  ·gc.alloc.rate:                   516.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              136824.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 172616.355 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   5930.805 ±(99.9%) 80.408 ops/s [Average]
[info]   (min, avg, max) = (5909.274, 5930.805, 5958.127), stdev = 20.882
[info]   CI (99.9%): [5850.396, 6011.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   515.585 ±(99.9%) 7.310 MB/sec [Average]
[info]   (min, avg, max) = (513.624, 515.585, 518.095), stdev = 1.898
[info]   CI (99.9%): [508.275, 522.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   136824.071 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (136824.068, 136824.071, 136824.074), stdev = 0.003
[info]   CI (99.9%): [136824.060, 136824.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.724 ±(99.9%) 5.835 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.724, 3.433), stdev = 1.515
[info]   CI (99.9%): [≈ 0, 6.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   192.859 ±(99.9%) 1554.304 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 192.859, 914.505), stdev = 403.648
[info]   CI (99.9%): [≈ 0, 1747.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   507.846 ±(99.9%) 646.212 MB/sec [Average]
[info]   (min, avg, max) = (325.823, 507.846, 651.770), stdev = 167.819
[info]   CI (99.9%): [≈ 0, 1154.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   134848.197 ±(99.9%) 172426.484 B/op [Average]
[info]   (min, avg, max) = (86046.931, 134848.197, 173432.662), stdev = 44778.610
[info]   CI (99.9%): [≈ 0, 307274.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 5.000), stdev = 1.673
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Run progress: 19.05% complete, ETA 00:39:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4364.924 ops/s
[info] # Warmup Iteration   2: 6421.423 ops/s
[info] # Warmup Iteration   3: 6989.851 ops/s
[info] Iteration   1: 6985.626 ops/s
[info]                  ·gc.alloc.rate:                   303.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              68443.697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.737 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57628.909 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 6976.979 ops/s
[info]                  ·gc.alloc.rate:                   303.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              68443.664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.722 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57694.968 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 6984.855 ops/s
[info]                  ·gc.alloc.rate:                   303.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              68443.917 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      317.304 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71510.872 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 6999.266 ops/s
[info]                  ·gc.alloc.rate:                   304.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              68443.618 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      317.337 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71367.871 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 6979.136 ops/s
[info]                  ·gc.alloc.rate:                   303.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              68443.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      319.341 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72022.947 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   6985.172 ±(99.9%) 33.486 ops/s [Average]
[info]   (min, avg, max) = (6976.979, 6985.172, 6999.266), stdev = 8.696
[info]   CI (99.9%): [6951.686, 7018.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   303.719 ±(99.9%) 1.449 MB/sec [Average]
[info]   (min, avg, max) = (303.364, 303.719, 304.334), stdev = 0.376
[info]   CI (99.9%): [302.269, 305.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   68443.732 ±(99.9%) 0.449 B/op [Average]
[info]   (min, avg, max) = (68443.618, 68443.732, 68443.917), stdev = 0.117
[info]   CI (99.9%): [68443.283, 68444.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.812 ±(99.9%) 16.148 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.812, 9.380), stdev = 4.194
[info]   CI (99.9%): [≈ 0, 18.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   293.088 ±(99.9%) 131.360 MB/sec [Average]
[info]   (min, avg, max) = (255.722, 293.088, 319.341), stdev = 34.114
[info]   CI (99.9%): [161.728, 424.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   66045.113 ±(99.9%) 29483.098 B/op [Average]
[info]   (min, avg, max) = (57628.909, 66045.113, 72022.947), stdev = 7656.667
[info]   CI (99.9%): [36562.016, 95528.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Run progress: 19.48% complete, ETA 00:39:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6397.492 ops/s
[info] # Warmup Iteration   2: 7721.591 ops/s
[info] # Warmup Iteration   3: 7700.011 ops/s
[info] Iteration   1: 7679.565 ops/s
[info]                  ·gc.alloc.rate:                   273.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              55936.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.818 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52415.150 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 7711.812 ops/s
[info]                  ·gc.alloc.rate:                   274.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              55936.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.737 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52197.716 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 7714.269 ops/s
[info]                  ·gc.alloc.rate:                   274.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              55936.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.750 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52184.187 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7715.431 ops/s
[info]                  ·gc.alloc.rate:                   274.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              55936.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     763.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66988.204 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7759.720 ops/s
[info]                  ·gc.alloc.rate:                   275.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              55936.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.460 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66608.423 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   7716.159 ±(99.9%) 109.923 ops/s [Average]
[info]   (min, avg, max) = (7679.565, 7716.159, 7759.720), stdev = 28.547
[info]   CI (99.9%): [7606.236, 7826.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   274.244 ±(99.9%) 3.905 MB/sec [Average]
[info]   (min, avg, max) = (273.003, 274.244, 275.833), stdev = 1.014
[info]   CI (99.9%): [270.339, 278.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   55936.055 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (55936.053, 55936.055, 55936.057), stdev = 0.002
[info]   CI (99.9%): [55936.047, 55936.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.763 ±(99.9%) 6.416 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.763, 3.743), stdev = 1.666
[info]   CI (99.9%): [≈ 0, 7.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   155.637 ±(99.9%) 1308.825 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 155.637, 763.639), stdev = 339.898
[info]   CI (99.9%): [≈ 0, 1464.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   284.828 ±(99.9%) 153.221 MB/sec [Average]
[info]   (min, avg, max) = (255.737, 284.828, 328.460), stdev = 39.791
[info]   CI (99.9%): [131.607, 438.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   58078.736 ±(99.9%) 30656.935 B/op [Average]
[info]   (min, avg, max) = (52184.187, 58078.736, 66988.204), stdev = 7961.509
[info]   CI (99.9%): [27421.801, 88735.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 19.91% complete, ETA 00:39:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6548.443 ops/s
[info] # Warmup Iteration   2: 7620.074 ops/s
[info] # Warmup Iteration   3: 7656.996 ops/s
[info] Iteration   1: 7738.501 ops/s
[info]                  ·gc.alloc.rate:                   203.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              41328.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.796 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52022.375 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 7712.798 ops/s
[info]                  ·gc.alloc.rate:                   202.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              41328.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.714 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52190.951 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 7565.131 ops/s
[info]                  ·gc.alloc.rate:      198.698 MB/sec
[info]                  ·gc.alloc.rate.norm: 41328.054 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7750.029 ops/s
[info]                  ·gc.alloc.rate:                   203.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              41328.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.736 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51941.845 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 7748.290 ops/s
[info]                  ·gc.alloc.rate:                   203.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              41328.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.845 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51955.250 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   7702.950 ±(99.9%) 302.142 ops/s [Average]
[info]   (min, avg, max) = (7565.131, 7702.950, 7750.029), stdev = 78.465
[info]   CI (99.9%): [7400.808, 8005.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   202.278 ±(99.9%) 7.869 MB/sec [Average]
[info]   (min, avg, max) = (198.698, 202.278, 203.513), stdev = 2.043
[info]   CI (99.9%): [194.410, 210.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   41328.054 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (41328.053, 41328.054, 41328.057), stdev = 0.002
[info]   CI (99.9%): [41328.047, 41328.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.008 ±(99.9%) 0.068 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.040), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   1.613 ±(99.9%) 13.890 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.613, 8.066), stdev = 3.607
[info]   CI (99.9%): [≈ 0, 15.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   204.618 ±(99.9%) 440.456 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.618, 255.845), stdev = 114.385
[info]   CI (99.9%): [≈ 0, 645.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   41622.084 ±(99.9%) 89595.487 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41622.084, 52190.951), stdev = 23267.663
[info]   CI (99.9%): [≈ 0, 131217.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Run progress: 20.35% complete, ETA 00:39:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3412.282 ops/s
[info] # Warmup Iteration   2: 4288.294 ops/s
[info] # Warmup Iteration   3: 4291.436 ops/s
[info] Iteration   1: 4223.437 ops/s
[info]                  ·gc.alloc.rate:                   1482.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              552600.104 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46.534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.908 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 488177.276 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 4301.316 ops/s
[info]                  ·gc.alloc.rate:                   1509.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              552600.095 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22.845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1648.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 603485.583 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 4302.722 ops/s
[info]                  ·gc.alloc.rate:                   1510.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              552600.102 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1661.889 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 607974.305 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 4299.531 ops/s
[info]                  ·gc.alloc.rate:                   1509.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              552600.095 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.781 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 489790.557 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 4292.890 ops/s
[info]                  ·gc.alloc.rate:                   1507.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              552600.095 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1681.036 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 616349.749 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   4283.979 ±(99.9%) 131.126 ops/s [Average]
[info]   (min, avg, max) = (4223.437, 4283.979, 4302.722), stdev = 34.053
[info]   CI (99.9%): [4152.853, 4415.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1503.931 ±(99.9%) 45.806 MB/sec [Average]
[info]   (min, avg, max) = (1482.771, 1503.931, 1510.524), stdev = 11.896
[info]   CI (99.9%): [1458.125, 1549.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   552600.098 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (552600.095, 552600.098, 552600.104), stdev = 0.005
[info]   CI (99.9%): [552600.081, 552600.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.137 ±(99.9%) 0.361 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.137, 0.271), stdev = 0.094
[info]   CI (99.9%): [≈ 0, 0.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   50.468 ±(99.9%) 132.285 B/op [Average]
[info]   (min, avg, max) = (15.237, 50.468, 99.204), stdev = 34.354
[info]   CI (99.9%): [≈ 0, 182.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1527.902 ±(99.9%) 719.641 MB/sec [Average]
[info]   (min, avg, max) = (1309.908, 1527.902, 1681.036), stdev = 186.888
[info]   CI (99.9%): [808.261, 2247.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   561155.494 ±(99.9%) 254324.886 B/op [Average]
[info]   (min, avg, max) = (488177.276, 561155.494, 616349.749), stdev = 66047.365
[info]   CI (99.9%): [306830.608, 815480.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Run progress: 20.78% complete, ETA 00:39:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6881.794 ops/s
[info] # Warmup Iteration   2: 11545.304 ops/s
[info] # Warmup Iteration   3: 11644.059 ops/s
[info] Iteration   1: 11634.324 ops/s
[info]                  ·gc.alloc.rate:                   978.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              132456.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.282 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 132637.610 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 11535.155 ops/s
[info]                  ·gc.alloc.rate:                   970.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              132456.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      987.698 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 134741.607 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 11406.712 ops/s
[info]                  ·gc.alloc.rate:                   959.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              132466.827 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992.688 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 136988.564 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 11474.958 ops/s
[info]                  ·gc.alloc.rate:                   965.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              132488.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.710 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      999.067 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 137044.872 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 11388.369 ops/s
[info]                  ·gc.alloc.rate:                   958.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              132488.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1003.232 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 138631.855 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   11487.904 ±(99.9%) 386.691 ops/s [Average]
[info]   (min, avg, max) = (11388.369, 11487.904, 11634.324), stdev = 100.422
[info]   CI (99.9%): [11101.213, 11874.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   966.885 ±(99.9%) 32.055 MB/sec [Average]
[info]   (min, avg, max) = (958.771, 966.885, 978.940), stdev = 8.325
[info]   CI (99.9%): [934.830, 998.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   132470.994 ±(99.9%) 62.263 B/op [Average]
[info]   (min, avg, max) = (132456.035, 132470.994, 132488.039), stdev = 16.170
[info]   CI (99.9%): [132408.731, 132533.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9.702 ±(99.9%) 12.642 B/op [Average]
[info]   (min, avg, max) = (5.710, 9.702, 14.361), stdev = 3.283
[info]   CI (99.9%): [≈ 0, 22.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   992.593 ±(99.9%) 35.009 MB/sec [Average]
[info]   (min, avg, max) = (980.282, 992.593, 1003.232), stdev = 9.092
[info]   CI (99.9%): [957.584, 1027.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   136008.902 ±(99.9%) 9006.823 B/op [Average]
[info]   (min, avg, max) = (132637.610, 136008.902, 138631.855), stdev = 2339.043
[info]   CI (99.9%): [127002.078, 145015.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Run progress: 21.21% complete, ETA 00:38:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17241.910 ops/s
[info] # Warmup Iteration   2: 17924.045 ops/s
[info] # Warmup Iteration   3: 17314.947 ops/s
[info] Iteration   1: 18036.521 ops/s
[info]                  ·gc.alloc.rate:      94.416 MB/sec
[info]                  ·gc.alloc.rate.norm: 8240.023 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 18038.484 ops/s
[info]                  ·gc.alloc.rate:      94.422 MB/sec
[info]                  ·gc.alloc.rate.norm: 8240.023 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 17967.503 ops/s
[info]                  ·gc.alloc.rate:                   94.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     184.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.779 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22405.719 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 17726.591 ops/s
[info]                  ·gc.alloc.rate:      92.833 MB/sec
[info]                  ·gc.alloc.rate.norm: 8240.023 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 17844.637 ops/s
[info]                  ·gc.alloc.rate:                   93.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.757 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22560.129 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   17922.747 ±(99.9%) 519.912 ops/s [Average]
[info]   (min, avg, max) = (17726.591, 17922.747, 18038.484), stdev = 135.020
[info]   CI (99.9%): [17402.835, 18442.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   93.830 ±(99.9%) 2.666 MB/sec [Average]
[info]   (min, avg, max) = (92.833, 93.830, 94.422), stdev = 0.692
[info]   CI (99.9%): [91.165, 96.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   8240.024 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (8240.023, 8240.024, 8240.030), stdev = 0.003
[info]   CI (99.9%): [8240.011, 8240.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.421 ±(99.9%) 3.628 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.421, 2.107), stdev = 0.942
[info]   CI (99.9%): [≈ 0, 4.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   36.906 ±(99.9%) 317.768 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36.906, 184.528), stdev = 82.523
[info]   CI (99.9%): [≈ 0, 354.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   102.307 ±(99.9%) 539.436 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.307, 255.779), stdev = 140.090
[info]   CI (99.9%): [≈ 0, 641.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8993.170 ±(99.9%) 47418.854 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8993.170, 22560.129), stdev = 12314.526
[info]   CI (99.9%): [≈ 0, 56412.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 3.000), stdev = 1.414
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Run progress: 21.65% complete, ETA 00:38:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2427.848 ops/s
[info] # Warmup Iteration   2: 4343.735 ops/s
[info] # Warmup Iteration   3: 4418.968 ops/s
[info] Iteration   1: 4464.873 ops/s
[info]                  ·gc.alloc.rate:                   1911.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              673872.099 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1654.203 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 583207.314 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 4470.288 ops/s
[info]                  ·gc.alloc.rate:                   1920.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              676222.585 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65.961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2004.827 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 705930.163 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 4510.946 ops/s
[info]                  ·gc.alloc.rate:                   1931.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              673872.090 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36.312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.825 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 704163.404 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 4498.608 ops/s
[info]                  ·gc.alloc.rate:                   1926.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              673872.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.105 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 708591.638 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 4509.993 ops/s
[info]                  ·gc.alloc.rate:                   1930.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              673872.090 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694.126 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 591218.383 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   4490.942 ±(99.9%) 84.540 ops/s [Average]
[info]   (min, avg, max) = (4464.873, 4490.942, 4510.946), stdev = 21.955
[info]   CI (99.9%): [4406.402, 4575.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1924.320 ±(99.9%) 32.899 MB/sec [Average]
[info]   (min, avg, max) = (1911.363, 1924.320, 1931.981), stdev = 8.544
[info]   CI (99.9%): [1891.421, 1957.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   674342.192 ±(99.9%) 4047.686 B/op [Average]
[info]   (min, avg, max) = (673872.090, 674342.192, 676222.585), stdev = 1051.171
[info]   CI (99.9%): [670294.506, 678389.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.274 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.087, 0.187), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   30.695 ±(99.9%) 96.549 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30.695, 65.961), stdev = 25.073
[info]   CI (99.9%): [≈ 0, 127.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1879.617 ±(99.9%) 724.837 MB/sec [Average]
[info]   (min, avg, max) = (1654.203, 1879.617, 2026.105), stdev = 188.238
[info]   CI (99.9%): [1154.781, 2604.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   658622.180 ±(99.9%) 251323.988 B/op [Average]
[info]   (min, avg, max) = (583207.314, 658622.180, 708591.638), stdev = 65268.041
[info]   CI (99.9%): [407298.193, 909946.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Run progress: 22.08% complete, ETA 00:38:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7843.551 ops/s
[info] # Warmup Iteration   2: 9053.354 ops/s
[info] # Warmup Iteration   3: 9017.144 ops/s
[info] Iteration   1: 9128.306 ops/s
[info]                  ·gc.alloc.rate:                   539.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              93072.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     589.206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.344 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56448.533 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 9109.604 ops/s
[info]                  ·gc.alloc.rate:                   538.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              93072.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.955 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112832.393 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 9042.726 ops/s
[info]                  ·gc.alloc.rate:                   534.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              93072.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.722 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56689.183 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 9168.988 ops/s
[info]                  ·gc.alloc.rate:                   532.520 MB/sec
[info]                  ·gc.alloc.rate.norm:              91411.750 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.412 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 111820.666 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 9810.235 ops/s
[info]                  ·gc.alloc.rate:                   478.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              76752.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.071 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 104622.493 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   9251.972 ±(99.9%) 1214.464 ops/s [Average]
[info]   (min, avg, max) = (9042.726, 9251.972, 9810.235), stdev = 315.392
[info]   CI (99.9%): [8037.508, 10466.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   524.796 ±(99.9%) 100.566 MB/sec [Average]
[info]   (min, avg, max) = (478.366, 524.796, 539.723), stdev = 26.117
[info]   CI (99.9%): [424.230, 625.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   89475.986 ±(99.9%) 27528.798 B/op [Average]
[info]   (min, avg, max) = (76752.042, 89475.986, 93072.048), stdev = 7149.141
[info]   CI (99.9%): [61947.188, 117004.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.718 ±(99.9%) 5.810 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.718, 3.417), stdev = 1.509
[info]   CI (99.9%): [≈ 0, 6.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   123.717 ±(99.9%) 1002.155 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 123.717, 589.206), stdev = 260.256
[info]   CI (99.9%): [≈ 0, 1125.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   521.901 ±(99.9%) 686.753 MB/sec [Average]
[info]   (min, avg, max) = (325.722, 521.901, 652.955), stdev = 178.348
[info]   CI (99.9%): [≈ 0, 1208.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   88482.654 ±(99.9%) 112842.211 B/op [Average]
[info]   (min, avg, max) = (56448.533, 88482.654, 112832.393), stdev = 29304.764
[info]   CI (99.9%): [≈ 0, 201324.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Run progress: 22.51% complete, ETA 00:38:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7574.484 ops/s
[info] # Warmup Iteration   2: 11631.220 ops/s
[info] # Warmup Iteration   3: 11563.061 ops/s
[info] Iteration   1: 11573.417 ops/s
[info]                  ·gc.alloc.rate:                   345.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              46941.824 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.457 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69566.894 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 11544.092 ops/s
[info]                  ·gc.alloc.rate:                   344.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              46941.622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      320.450 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43679.315 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 11360.784 ops/s
[info]                  ·gc.alloc.rate:                   338.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              46941.718 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      320.374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44386.611 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 11341.738 ops/s
[info]                  ·gc.alloc.rate:                   338.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              46941.901 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.667 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44780.526 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 11611.387 ops/s
[info]                  ·gc.alloc.rate:                   346.286 MB/sec
[info]                  ·gc.alloc.rate.norm:              46941.967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.690 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43743.333 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   11486.284 ±(99.9%) 484.128 ops/s [Average]
[info]   (min, avg, max) = (11341.738, 11486.284, 11611.387), stdev = 125.727
[info]   CI (99.9%): [11002.155, 11970.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   342.569 ±(99.9%) 14.461 MB/sec [Average]
[info]   (min, avg, max) = (338.241, 342.569, 346.286), stdev = 3.755
[info]   CI (99.9%): [328.108, 357.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   46941.806 ±(99.9%) 0.533 B/op [Average]
[info]   (min, avg, max) = (46941.622, 46941.806, 46941.967), stdev = 0.138
[info]   CI (99.9%): [46941.273, 46942.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3.441 ±(99.9%) 12.097 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.441, 5.777), stdev = 3.142
[info]   CI (99.9%): [≈ 0, 15.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   359.528 ±(99.9%) 327.069 MB/sec [Average]
[info]   (min, avg, max) = (320.374, 359.528, 511.457), stdev = 84.939
[info]   CI (99.9%): [32.459, 686.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   49231.336 ±(99.9%) 43809.393 B/op [Average]
[info]   (min, avg, max) = (43679.315, 49231.336, 69566.894), stdev = 11377.160
[info]   CI (99.9%): [5421.943, 93040.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Run progress: 22.94% complete, ETA 00:37:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11896.508 ops/s
[info] # Warmup Iteration   2: 12770.756 ops/s
[info] # Warmup Iteration   3: 13071.853 ops/s
[info] Iteration   1: 13038.550 ops/s
[info]                  ·gc.alloc.rate:                   318.496 MB/sec
[info]                  ·gc.alloc.rate.norm:              38448.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.501 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61747.153 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 13121.717 ops/s
[info]                  ·gc.alloc.rate:                   320.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              38448.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.802 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30680.675 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 13095.660 ops/s
[info]                  ·gc.alloc.rate:                   319.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              38448.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     453.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.448 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39467.703 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 13174.061 ops/s
[info]                  ·gc.alloc.rate:                   321.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              38448.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.380 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39234.060 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 13175.123 ops/s
[info]                  ·gc.alloc.rate:                   321.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              38448.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.345 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38989.394 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   13121.022 ±(99.9%) 221.081 ops/s [Average]
[info]   (min, avg, max) = (13038.550, 13121.022, 13175.123), stdev = 57.414
[info]   CI (99.9%): [12899.942, 13342.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   320.527 ±(99.9%) 5.351 MB/sec [Average]
[info]   (min, avg, max) = (318.496, 320.527, 321.814), stdev = 1.390
[info]   CI (99.9%): [315.176, 325.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   38448.034 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (38448.031, 38448.034, 38448.041), stdev = 0.004
[info]   CI (99.9%): [38448.017, 38448.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.758 ±(99.9%) 6.483 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.758, 3.770), stdev = 1.684
[info]   CI (99.9%): [≈ 0, 7.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   91.131 ±(99.9%) 778.985 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 91.131, 453.010), stdev = 202.300
[info]   CI (99.9%): [≈ 0, 870.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   350.095 ±(99.9%) 367.566 MB/sec [Average]
[info]   (min, avg, max) = (255.802, 350.095, 511.501), stdev = 95.456
[info]   CI (99.9%): [≈ 0, 717.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   42023.797 ±(99.9%) 44790.166 B/op [Average]
[info]   (min, avg, max) = (30680.675, 42023.797, 61747.153), stdev = 11631.864
[info]   CI (99.9%): [≈ 0, 86813.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.600, 5.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 23.38% complete, ETA 00:37:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12003.987 ops/s
[info] # Warmup Iteration   2: 12950.057 ops/s
[info] # Warmup Iteration   3: 13088.696 ops/s
[info] Iteration   1: 13124.863 ops/s
[info]                  ·gc.alloc.rate:                   239.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              28712.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.752 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30673.664 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 13011.728 ops/s
[info]                  ·gc.alloc.rate:                   237.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              28712.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.742 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30940.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 13043.906 ops/s
[info]                  ·gc.alloc.rate:                   237.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              28712.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.774 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30864.110 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 13090.548 ops/s
[info]                  ·gc.alloc.rate:                   238.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              28712.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.783 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30753.317 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 12875.932 ops/s
[info]                  ·gc.alloc.rate:                   234.873 MB/sec
[info]                  ·gc.alloc.rate.norm:              28712.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     457.631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40182.657 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   13029.395 ±(99.9%) 369.979 ops/s [Average]
[info]   (min, avg, max) = (12875.932, 13029.395, 13124.863), stdev = 96.082
[info]   CI (99.9%): [12659.416, 13399.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   237.668 ±(99.9%) 6.747 MB/sec [Average]
[info]   (min, avg, max) = (234.873, 237.668, 239.396), stdev = 1.752
[info]   CI (99.9%): [230.921, 244.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   28712.033 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (28712.031, 28712.033, 28712.040), stdev = 0.004
[info]   CI (99.9%): [28712.018, 28712.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.761 ±(99.9%) 6.420 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.761, 3.744), stdev = 1.667
[info]   CI (99.9%): [≈ 0, 7.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   93.031 ±(99.9%) 784.892 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 93.031, 457.631), stdev = 203.834
[info]   CI (99.9%): [≈ 0, 877.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   270.352 ±(99.9%) 125.613 MB/sec [Average]
[info]   (min, avg, max) = (255.742, 270.352, 328.706), stdev = 32.621
[info]   CI (99.9%): [144.739, 395.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   32682.750 ±(99.9%) 16148.891 B/op [Average]
[info]   (min, avg, max) = (30673.664, 32682.750, 40182.657), stdev = 4193.816
[info]   CI (99.9%): [16533.859, 48831.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Run progress: 23.81% complete, ETA 00:37:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6500.144 ops/s
[info] # Warmup Iteration   2: 9800.064 ops/s
[info] # Warmup Iteration   3: 9843.804 ops/s
[info] Iteration   1: 9957.946 ops/s
[info]                  ·gc.alloc.rate:                   1635.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              258488.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1643.358 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 259775.229 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 10030.753 ops/s
[info]                  ·gc.alloc.rate:                   1647.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              258488.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19.596 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1655.536 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 259766.336 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 9991.736 ops/s
[info]                  ·gc.alloc.rate:                   1640.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              258488.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1667.484 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 262668.603 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 9919.453 ops/s
[info]                  ·gc.alloc.rate:                   1629.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              258495.481 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.481 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 266186.741 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 9892.433 ops/s
[info]                  ·gc.alloc.rate:                   1624.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              258504.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.155 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 268131.926 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   9958.464 ±(99.9%) 212.789 ops/s [Average]
[info]   (min, avg, max) = (9892.433, 9958.464, 10030.753), stdev = 55.261
[info]   CI (99.9%): [9745.675, 10171.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1635.441 ±(99.9%) 35.027 MB/sec [Average]
[info]   (min, avg, max) = (1624.645, 1635.441, 1647.389), stdev = 9.096
[info]   CI (99.9%): [1600.414, 1670.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   258492.730 ±(99.9%) 27.326 B/op [Average]
[info]   (min, avg, max) = (258488.041, 258492.730, 258504.041), stdev = 7.097
[info]   CI (99.9%): [258465.403, 258520.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.146), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12.505 ±(99.9%) 31.612 B/op [Average]
[info]   (min, avg, max) = (6.558, 12.505, 23.183), stdev = 8.210
[info]   CI (99.9%): [≈ 0, 44.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1665.803 ±(99.9%) 64.517 MB/sec [Average]
[info]   (min, avg, max) = (1643.358, 1665.803, 1685.155), stdev = 16.755
[info]   CI (99.9%): [1601.286, 1730.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   263305.767 ±(99.9%) 14534.597 B/op [Average]
[info]   (min, avg, max) = (259766.336, 263305.767, 268131.926), stdev = 3774.589
[info]   CI (99.9%): [248771.170, 277840.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Run progress: 24.24% complete, ETA 00:37:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4839.256 ops/s
[info] # Warmup Iteration   2: 10425.858 ops/s
[info] # Warmup Iteration   3: 10633.861 ops/s
[info] Iteration   1: 10646.467 ops/s
[info]                  ·gc.alloc.rate:                   1644.496 MB/sec
[info]                  ·gc.alloc.rate.norm:              243136.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1657.342 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 245035.344 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 10710.907 ops/s
[info]                  ·gc.alloc.rate:                   1654.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              243136.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1670.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 245431.188 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 10692.572 ops/s
[info]                  ·gc.alloc.rate:                   1651.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              243136.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1680.288 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 247363.932 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 10551.913 ops/s
[info]                  ·gc.alloc.rate:                   1629.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              243157.626 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.942 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 251662.214 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 10721.968 ops/s
[info]                  ·gc.alloc.rate:                   1656.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              243168.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1692.504 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 248455.018 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   10664.765 ±(99.9%) 267.091 ops/s [Average]
[info]   (min, avg, max) = (10551.913, 10664.765, 10721.968), stdev = 69.363
[info]   CI (99.9%): [10397.674, 10931.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1647.383 ±(99.9%) 41.419 MB/sec [Average]
[info]   (min, avg, max) = (1629.934, 1647.383, 1656.488), stdev = 10.756
[info]   CI (99.9%): [1605.964, 1688.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   243146.757 ±(99.9%) 58.263 B/op [Average]
[info]   (min, avg, max) = (243136.038, 243146.757, 243168.041), stdev = 15.131
[info]   CI (99.9%): [243088.494, 243205.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   11.665 ±(99.9%) 9.710 B/op [Average]
[info]   (min, avg, max) = (9.192, 11.665, 15.278), stdev = 2.522
[info]   CI (99.9%): [1.955, 21.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1677.424 ±(99.9%) 53.908 MB/sec [Average]
[info]   (min, avg, max) = (1657.342, 1677.424, 1692.504), stdev = 14.000
[info]   CI (99.9%): [1623.516, 1731.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   247589.539 ±(99.9%) 10290.846 B/op [Average]
[info]   (min, avg, max) = (245035.344, 247589.539, 251662.214), stdev = 2672.500
[info]   CI (99.9%): [237298.693, 257880.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Run progress: 24.68% complete, ETA 00:37:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102489.974 ops/s
[info] # Warmup Iteration   2: 107463.453 ops/s
[info] # Warmup Iteration   3: 105539.948 ops/s
[info] Iteration   1: 106792.347 ops/s
[info]                  ·gc.alloc.rate:                   277.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3769.631 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 106618.736 ops/s
[info]                  ·gc.alloc.rate:                   277.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.735 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3775.959 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 104625.464 ops/s
[info]                  ·gc.alloc.rate:                   272.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.775 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3848.022 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 106773.766 ops/s
[info]                  ·gc.alloc.rate:                   277.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39.549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      331.340 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4884.930 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 106549.336 ops/s
[info]                  ·gc.alloc.rate:                   277.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      331.374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4895.244 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   106271.930 ±(99.9%) 3566.138 ops/s [Average]
[info]   (min, avg, max) = (104625.464, 106271.930, 106792.347), stdev = 926.115
[info]   CI (99.9%): [102705.792, 109838.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   276.537 ±(99.9%) 9.270 MB/sec [Average]
[info]   (min, avg, max) = (272.258, 276.537, 277.917), stdev = 2.407
[info]   CI (99.9%): [267.267, 285.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.004, 4096.004, 4096.004), stdev = 0.001
[info]   CI (99.9%): [4096.003, 4096.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.546 ±(99.9%) 4.599 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.546, 2.683), stdev = 1.194
[info]   CI (99.9%): [≈ 0, 5.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8.053 ±(99.9%) 67.800 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.053, 39.549), stdev = 17.607
[info]   CI (99.9%): [≈ 0, 75.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   285.999 ±(99.9%) 159.438 MB/sec [Average]
[info]   (min, avg, max) = (255.735, 285.999, 331.374), stdev = 41.406
[info]   CI (99.9%): [126.561, 445.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4234.757 ±(99.9%) 2306.668 B/op [Average]
[info]   (min, avg, max) = (3769.631, 4234.757, 4895.244), stdev = 599.034
[info]   CI (99.9%): [1928.089, 6541.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Run progress: 25.11% complete, ETA 00:36:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2658.786 ops/s
[info] # Warmup Iteration   2: 5689.914 ops/s
[info] # Warmup Iteration   3: 5732.892 ops/s
[info] Iteration   1: 5762.567 ops/s
[info]                  ·gc.alloc.rate:                   1521.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              415600.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.868 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 361226.702 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 5691.743 ops/s
[info]                  ·gc.alloc.rate:                   1502.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              415600.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1666.680 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 460927.708 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 5809.650 ops/s
[info]                  ·gc.alloc.rate:                   1534.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              415600.076 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.925 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 454545.335 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 5821.488 ops/s
[info]                  ·gc.alloc.rate:                   1537.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              415600.070 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.582 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 364471.548 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 5787.021 ops/s
[info]                  ·gc.alloc.rate:                   1528.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              415600.070 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.834 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 459793.692 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   5774.494 ±(99.9%) 198.143 ops/s [Average]
[info]   (min, avg, max) = (5691.743, 5774.494, 5821.488), stdev = 51.457
[info]   CI (99.9%): [5576.351, 5972.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1525.002 ±(99.9%) 53.100 MB/sec [Average]
[info]   (min, avg, max) = (1502.779, 1525.002, 1537.762), stdev = 13.790
[info]   CI (99.9%): [1471.902, 1578.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   415600.072 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (415600.070, 415600.072, 415600.076), stdev = 0.002
[info]   CI (99.9%): [415600.063, 415600.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.062), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10.225 ±(99.9%) 24.164 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.225, 17.268), stdev = 6.275
[info]   CI (99.9%): [≈ 0, 34.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1541.378 ±(99.9%) 724.494 MB/sec [Average]
[info]   (min, avg, max) = (1322.868, 1541.378, 1690.834), stdev = 188.149
[info]   CI (99.9%): [816.884, 2265.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   420192.997 ±(99.9%) 201833.244 B/op [Average]
[info]   (min, avg, max) = (361226.702, 420192.997, 460927.708), stdev = 52415.453
[info]   CI (99.9%): [218359.753, 622026.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Run progress: 25.54% complete, ETA 00:36:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17173.540 ops/s
[info] # Warmup Iteration   2: 24825.653 ops/s
[info] # Warmup Iteration   3: 25133.949 ops/s
[info] Iteration   1: 25080.551 ops/s
[info]                  ·gc.alloc.rate:                   1409.682 MB/sec
[info]                  ·gc.alloc.rate.norm:              88480.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.371 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82183.879 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 24910.234 ops/s
[info]                  ·gc.alloc.rate:                   1400.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              88471.081 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.353 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83246.371 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 25269.032 ops/s
[info]                  ·gc.alloc.rate:                   1420.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              88456.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1326.121 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82603.261 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 25332.775 ops/s
[info]                  ·gc.alloc.rate:                   1424.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              88456.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1668.919 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103645.062 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 25035.959 ops/s
[info]                  ·gc.alloc.rate:                   1406.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              88456.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.779 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84422.093 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   25125.710 ±(99.9%) 666.789 ops/s [Average]
[info]   (min, avg, max) = (24910.234, 25125.710, 25332.775), stdev = 173.163
[info]   CI (99.9%): [24458.921, 25792.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1412.216 ±(99.9%) 38.098 MB/sec [Average]
[info]   (min, avg, max) = (1400.033, 1412.216, 1424.341), stdev = 9.894
[info]   CI (99.9%): [1374.118, 1450.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   88463.829 ±(99.9%) 42.954 B/op [Average]
[info]   (min, avg, max) = (88456.016, 88463.829, 88480.016), stdev = 11.155
[info]   CI (99.9%): [88420.875, 88506.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.125), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.921 ±(99.9%) 9.501 B/op [Average]
[info]   (min, avg, max) = (1.297, 3.921, 7.891), stdev = 2.467
[info]   CI (99.9%): [≈ 0, 13.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1392.909 ±(99.9%) 596.049 MB/sec [Average]
[info]   (min, avg, max) = (1309.371, 1392.909, 1668.919), stdev = 154.792
[info]   CI (99.9%): [796.860, 1988.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   87220.133 ±(99.9%) 35505.228 B/op [Average]
[info]   (min, avg, max) = (82183.879, 87220.133, 103645.062), stdev = 9220.595
[info]   CI (99.9%): [51714.905, 122725.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Run progress: 25.97% complete, ETA 00:36:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 233711.630 ops/s
[info] # Warmup Iteration   2: 257831.339 ops/s
[info] # Warmup Iteration   3: 264721.209 ops/s
[info] Iteration   1: 265019.736 ops/s
[info]                  ·gc.alloc.rate:                   584.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21.963 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3904.552 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 265644.509 ops/s
[info]                  ·gc.alloc.rate:                   585.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.101 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3875.648 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 265845.791 ops/s
[info]                  ·gc.alloc.rate:                   586.439 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.392 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1932.401 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 265338.829 ops/s
[info]                  ·gc.alloc.rate:                   585.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.788 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3872.200 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 265934.592 ops/s
[info]                  ·gc.alloc.rate:                   586.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.457 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3867.567 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   265556.692 ±(99.9%) 1453.439 ops/s [Average]
[info]   (min, avg, max) = (265019.736, 265556.692, 265934.592), stdev = 377.453
[info]   CI (99.9%): [264103.253, 267010.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   585.841 ±(99.9%) 2.889 MB/sec [Average]
[info]   (min, avg, max) = (584.844, 585.841, 586.623), stdev = 0.750
[info]   CI (99.9%): [582.952, 588.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3472.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3472.002, 3472.002, 3472.002), stdev = 0.001
[info]   CI (99.9%): [3472.001, 3472.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.782 ±(99.9%) 6.283 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.782, 3.700), stdev = 1.632
[info]   CI (99.9%): [≈ 0, 7.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4.639 ±(99.9%) 37.299 B/op [Average]
[info]   (min, avg, max) = (0.123, 4.639, 21.963), stdev = 9.686
[info]   CI (99.9%): [≈ 0, 41.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   588.889 ±(99.9%) 565.091 MB/sec [Average]
[info]   (min, avg, max) = (326.392, 588.889, 657.706), stdev = 146.752
[info]   CI (99.9%): [23.798, 1153.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3490.474 ±(99.9%) 3354.332 B/op [Average]
[info]   (min, avg, max) = (1932.401, 3490.474, 3904.552), stdev = 871.109
[info]   CI (99.9%): [136.142, 6844.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 26.41% complete, ETA 00:36:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 251219.692 ops/s
[info] # Warmup Iteration   2: 267240.518 ops/s
[info] # Warmup Iteration   3: 281530.587 ops/s
[info] Iteration   1: 282988.697 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 283009.925 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 282551.948 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 282700.233 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 283006.320 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   282851.425 ±(99.9%) 817.987 ops/s [Average]
[info]   (min, avg, max) = (282551.948, 282851.425, 283009.925), stdev = 212.429
[info]   CI (99.9%): [282033.438, 283669.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Run progress: 26.84% complete, ETA 00:36:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18095.992 ops/s
[info] # Warmup Iteration   2: 27805.197 ops/s
[info] # Warmup Iteration   3: 28228.027 ops/s
[info] Iteration   1: 28353.557 ops/s
[info]                  ·gc.alloc.rate:                   1491.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              82792.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1623.991 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90148.399 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 28053.598 ops/s
[info]                  ·gc.alloc.rate:                   1475.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              82792.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.321 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73470.203 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 28240.654 ops/s
[info]                  ·gc.alloc.rate:                   1485.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              82792.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1652.151 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92083.579 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 28465.987 ops/s
[info]                  ·gc.alloc.rate:                   1497.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              82792.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.906 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1332.063 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73659.232 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 27784.222 ops/s
[info]                  ·gc.alloc.rate:                   1461.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              82792.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1675.565 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94922.014 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   28179.604 ±(99.9%) 1033.606 ops/s [Average]
[info]   (min, avg, max) = (27784.222, 28179.604, 28465.987), stdev = 268.424
[info]   CI (99.9%): [27145.998, 29213.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1482.205 ±(99.9%) 54.402 MB/sec [Average]
[info]   (min, avg, max) = (1461.446, 1482.205, 1497.221), stdev = 14.128
[info]   CI (99.9%): [1427.803, 1536.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82792.016 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (82792.014, 82792.016, 82792.019), stdev = 0.002
[info]   CI (99.9%): [82792.008, 82792.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.204 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.104, 0.146), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5.815 ±(99.9%) 11.389 B/op [Average]
[info]   (min, avg, max) = (1.156, 5.815, 8.175), stdev = 2.958
[info]   CI (99.9%): [≈ 0, 17.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1518.618 ±(99.9%) 699.968 MB/sec [Average]
[info]   (min, avg, max) = (1309.321, 1518.618, 1675.565), stdev = 181.779
[info]   CI (99.9%): [818.651, 2218.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   84856.685 ±(99.9%) 40228.450 B/op [Average]
[info]   (min, avg, max) = (73470.203, 84856.685, 94922.014), stdev = 10447.201
[info]   CI (99.9%): [44628.235, 125085.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Run progress: 27.27% complete, ETA 00:35:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13689.317 ops/s
[info] # Warmup Iteration   2: 16798.933 ops/s
[info] # Warmup Iteration   3: 16943.142 ops/s
[info] Iteration   1: 17079.203 ops/s
[info]                  ·gc.alloc.rate:                   2123.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              195738.950 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1984.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 182885.453 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 17075.348 ops/s
[info]                  ·gc.alloc.rate:                   2123.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              195752.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.512 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2337.781 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 215511.287 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 17086.351 ops/s
[info]                  ·gc.alloc.rate:                   2124.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              195752.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.220 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 185919.906 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 17099.111 ops/s
[info]                  ·gc.alloc.rate:                   2126.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              195751.091 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.230 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 186687.360 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 16936.133 ops/s
[info]                  ·gc.alloc.rate:                   2106.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              195752.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2372.836 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 220529.665 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   17055.229 ±(99.9%) 258.723 ops/s [Average]
[info]   (min, avg, max) = (16936.133, 17055.229, 17099.111), stdev = 67.189
[info]   CI (99.9%): [16796.507, 17313.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2121.020 ±(99.9%) 32.202 MB/sec [Average]
[info]   (min, avg, max) = (2106.236, 2121.020, 2126.702), stdev = 8.363
[info]   CI (99.9%): [2088.818, 2153.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   195749.223 ±(99.9%) 22.168 B/op [Average]
[info]   (min, avg, max) = (195738.950, 195749.223, 195752.026), stdev = 5.757
[info]   CI (99.9%): [195727.055, 195771.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.137 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.137, 0.187), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12.687 ±(99.9%) 14.580 B/op [Average]
[info]   (min, avg, max) = (7.670, 12.687, 17.410), stdev = 3.786
[info]   CI (99.9%): [≈ 0, 27.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2148.276 ±(99.9%) 732.000 MB/sec [Average]
[info]   (min, avg, max) = (1984.312, 2148.276, 2372.836), stdev = 190.098
[info]   CI (99.9%): [1416.276, 2880.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   198306.734 ±(99.9%) 69847.395 B/op [Average]
[info]   (min, avg, max) = (182885.453, 198306.734, 220529.665), stdev = 18139.147
[info]   CI (99.9%): [128459.339, 268154.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 1.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Run progress: 27.71% complete, ETA 00:35:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24351.856 ops/s
[info] # Warmup Iteration   2: 37344.695 ops/s
[info] # Warmup Iteration   3: 37621.041 ops/s
[info] Iteration   1: 36945.459 ops/s
[info]                  ·gc.alloc.rate:                   265.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              11313.613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.722 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10896.655 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 38363.604 ops/s
[info]                  ·gc.alloc.rate:                   275.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              11304.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.546 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20988.464 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 38453.255 ops/s
[info]                  ·gc.alloc.rate:      276.187 MB/sec
[info]                  ·gc.alloc.rate.norm: 11304.011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 38385.281 ops/s
[info]                  ·gc.alloc.rate:                   275.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              11304.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.759 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13273.460 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 38314.972 ops/s
[info]                  ·gc.alloc.rate:                   275.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              11304.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.672 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13298.399 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   38092.514 ±(99.9%) 2476.536 ops/s [Average]
[info]   (min, avg, max) = (36945.459, 38092.514, 38453.255), stdev = 643.149
[info]   CI (99.9%): [35615.978, 40569.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   273.611 ±(99.9%) 17.506 MB/sec [Average]
[info]   (min, avg, max) = (265.507, 273.611, 276.187), stdev = 4.546
[info]   CI (99.9%): [256.105, 291.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   11305.931 ±(99.9%) 16.536 B/op [Average]
[info]   (min, avg, max) = (11304.011, 11305.931, 11313.613), stdev = 4.294
[info]   CI (99.9%): [11289.396, 11322.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.125), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.024 ±(99.9%) 8.819 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.024, 5.121), stdev = 2.290
[info]   CI (99.9%): [≈ 0, 9.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   282.940 ±(99.9%) 711.020 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 282.940, 511.546), stdev = 184.650
[info]   CI (99.9%): [≈ 0, 993.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11691.395 ±(99.9%) 29125.305 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11691.395, 20988.464), stdev = 7563.749
[info]   CI (99.9%): [≈ 0, 40816.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Run progress: 28.14% complete, ETA 00:35:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83795.143 ops/s
[info] # Warmup Iteration   2: 90766.856 ops/s
[info] # Warmup Iteration   3: 91361.757 ops/s
[info] Iteration   1: 91452.080 ops/s
[info]                  ·gc.alloc.rate:                   478.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.236 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      585.744 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10082.241 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 91825.551 ops/s
[info]                  ·gc.alloc.rate:                   480.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5657.332 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 91318.612 ops/s
[info]                  ·gc.alloc.rate:                   478.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.710 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11320.070 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 91706.908 ops/s
[info]                  ·gc.alloc.rate:                   480.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.714 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5624.598 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 90297.931 ops/s
[info]                  ·gc.alloc.rate:                   472.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.074 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11436.689 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   91320.216 ±(99.9%) 2332.225 ops/s [Average]
[info]   (min, avg, max) = (90297.931, 91320.216, 91825.551), stdev = 605.671
[info]   CI (99.9%): [88987.992, 93652.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   478.042 ±(99.9%) 12.212 MB/sec [Average]
[info]   (min, avg, max) = (472.694, 478.042, 480.677), stdev = 3.171
[info]   CI (99.9%): [465.831, 490.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   8240.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8240.004, 8240.005, 8240.005), stdev = 0.001
[info]   CI (99.9%): [8240.004, 8240.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.676 ±(99.9%) 5.511 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.676, 3.236), stdev = 1.431
[info]   CI (99.9%): [≈ 0, 6.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   11.644 ±(99.9%) 94.849 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.644, 55.699), stdev = 24.632
[info]   CI (99.9%): [≈ 0, 106.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   511.252 ±(99.9%) 650.669 MB/sec [Average]
[info]   (min, avg, max) = (327.714, 511.252, 656.710), stdev = 168.977
[info]   CI (99.9%): [≈ 0, 1161.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8824.186 ±(99.9%) 11374.667 B/op [Average]
[info]   (min, avg, max) = (5624.598, 8824.186, 11436.689), stdev = 2953.965
[info]   CI (99.9%): [≈ 0, 20198.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 5.000), stdev = 1.643
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Run progress: 28.57% complete, ETA 00:35:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4853.796 ops/s
[info] # Warmup Iteration   2: 8310.871 ops/s
[info] # Warmup Iteration   3: 8612.775 ops/s
[info] Iteration   1: 8599.160 ops/s
[info]                  ·gc.alloc.rate:                   3039.894 MB/sec
[info]                  ·gc.alloc.rate.norm:              556456.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3021.653 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 553117.136 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 8438.965 ops/s
[info]                  ·gc.alloc.rate:                   2989.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              557577.979 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3044.216 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 567828.562 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 8469.757 ops/s
[info]                  ·gc.alloc.rate:                   2994.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              556456.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3054.091 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 567607.358 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 8585.808 ops/s
[info]                  ·gc.alloc.rate:                   3035.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              556490.807 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22.893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3059.340 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 560795.245 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 8514.657 ops/s
[info]                  ·gc.alloc.rate:                   3010.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              556457.824 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3062.919 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 566208.879 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   8521.670 ±(99.9%) 270.250 ops/s [Average]
[info]   (min, avg, max) = (8438.965, 8521.670, 8599.160), stdev = 70.183
[info]   CI (99.9%): [8251.420, 8791.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3013.855 ±(99.9%) 89.713 MB/sec [Average]
[info]   (min, avg, max) = (2989.261, 3013.855, 3039.894), stdev = 23.298
[info]   CI (99.9%): [2924.142, 3103.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   556687.741 ±(99.9%) 1917.153 B/op [Average]
[info]   (min, avg, max) = (556456.047, 556687.741, 557577.979), stdev = 497.878
[info]   CI (99.9%): [554770.588, 558604.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   15.332 ±(99.9%) 27.182 B/op [Average]
[info]   (min, avg, max) = (7.764, 15.332, 22.893), stdev = 7.059
[info]   CI (99.9%): [≈ 0, 42.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3048.444 ±(99.9%) 63.732 MB/sec [Average]
[info]   (min, avg, max) = (3021.653, 3048.444, 3062.919), stdev = 16.551
[info]   CI (99.9%): [2984.712, 3112.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   563111.436 ±(99.9%) 24147.984 B/op [Average]
[info]   (min, avg, max) = (553117.136, 563111.436, 567828.562), stdev = 6271.155
[info]   CI (99.9%): [538963.452, 587259.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   45.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.000, 9.000), stdev = 0.001
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.400, 11.000), stdev = 0.894
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Run progress: 29.00% complete, ETA 00:35:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18683.220 ops/s
[info] # Warmup Iteration   2: 22161.798 ops/s
[info] # Warmup Iteration   3: 23010.099 ops/s
[info] Iteration   1: 28188.670 ops/s
[info]                  ·gc.alloc.rate:                   1520.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              84880.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1306.455 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72935.038 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 26107.307 ops/s
[info]                  ·gc.alloc.rate:                   1407.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              84870.562 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1313.452 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79192.366 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 24111.957 ops/s
[info]                  ·gc.alloc.rate:                   1299.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              84856.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.754 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86352.295 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 24404.982 ops/s
[info]                  ·gc.alloc.rate:                   1316.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              84856.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331.288 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85831.245 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 24343.204 ops/s
[info]                  ·gc.alloc.rate:                   1312.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              84856.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86523.563 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   25431.224 ±(99.9%) 6680.068 ops/s [Average]
[info]   (min, avg, max) = (24111.957, 25431.224, 28188.670), stdev = 1734.792
[info]   CI (99.9%): [18751.156, 32111.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1371.284 ±(99.9%) 361.102 MB/sec [Average]
[info]   (min, avg, max) = (1299.834, 1371.284, 1520.421), stdev = 93.777
[info]   CI (99.9%): [1010.182, 1732.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   84863.726 ±(99.9%) 42.633 B/op [Average]
[info]   (min, avg, max) = (84856.017, 84863.726, 84880.014), stdev = 11.072
[info]   CI (99.9%): [84821.093, 84906.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.020, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5.652 ±(99.9%) 3.895 B/op [Average]
[info]   (min, avg, max) = (4.076, 5.652, 6.712), stdev = 1.011
[info]   CI (99.9%): [1.757, 9.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1322.423 ±(99.9%) 49.535 MB/sec [Average]
[info]   (min, avg, max) = (1306.455, 1322.423, 1338.164), stdev = 12.864
[info]   CI (99.9%): [1272.888, 1371.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   82166.901 ±(99.9%) 23103.910 B/op [Average]
[info]   (min, avg, max) = (72935.038, 82166.901, 86523.563), stdev = 6000.012
[info]   CI (99.9%): [59062.991, 105270.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Run progress: 29.44% complete, ETA 00:34:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64480.546 ops/s
[info] # Warmup Iteration   2: 98187.425 ops/s
[info] # Warmup Iteration   3: 100939.845 ops/s
[info] Iteration   1: 99709.957 ops/s
[info]                  ·gc.alloc.rate:                   804.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692.314 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      970.173 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15313.857 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 99421.133 ops/s
[info]                  ·gc.alloc.rate:                   801.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692.336 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      650.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10302.902 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 100682.531 ops/s
[info]                  ·gc.alloc.rate:                   811.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692.340 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.332 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15343.516 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 100533.209 ops/s
[info]                  ·gc.alloc.rate:                   810.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692.295 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.782 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10313.691 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 100843.995 ops/s
[info]                  ·gc.alloc.rate:                   813.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692.342 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.368 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15506.158 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   100238.165 ±(99.9%) 2433.905 ops/s [Average]
[info]   (min, avg, max) = (99421.133, 100238.165, 100843.995), stdev = 632.077
[info]   CI (99.9%): [97804.260, 102672.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   808.265 ±(99.9%) 19.539 MB/sec [Average]
[info]   (min, avg, max) = (801.643, 808.265, 813.107), stdev = 5.074
[info]   CI (99.9%): [788.726, 827.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   12692.326 ±(99.9%) 0.078 B/op [Average]
[info]   (min, avg, max) = (12692.295, 12692.326, 12692.342), stdev = 0.020
[info]   CI (99.9%): [12692.248, 12692.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.125), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.111 ±(99.9%) 2.604 B/op [Average]
[info]   (min, avg, max) = (0.326, 1.111, 1.949), stdev = 0.676
[info]   CI (99.9%): [≈ 0, 3.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   850.877 ±(99.9%) 690.206 MB/sec [Average]
[info]   (min, avg, max) = (650.728, 850.877, 993.368), stdev = 179.244
[info]   CI (99.9%): [160.670, 1541.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   13356.025 ±(99.9%) 10716.912 B/op [Average]
[info]   (min, avg, max) = (10302.902, 13356.025, 15506.158), stdev = 2783.148
[info]   CI (99.9%): [2639.113, 24072.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Run progress: 29.87% complete, ETA 00:34:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 104396.878 ops/s
[info] # Warmup Iteration   2: 116473.945 ops/s
[info] # Warmup Iteration   3: 116643.768 ops/s
[info] Iteration   1: 118990.187 ops/s
[info]                  ·gc.alloc.rate:                   506.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              6704.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      584.144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7727.221 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 119146.727 ops/s
[info]                  ·gc.alloc.rate:                   507.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              6704.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.339 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4338.049 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 118135.352 ops/s
[info]                  ·gc.alloc.rate:                   503.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              6704.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.739 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8697.162 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 118055.715 ops/s
[info]                  ·gc.alloc.rate:                   502.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              6704.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.742 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8703.055 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 118624.337 ops/s
[info]                  ·gc.alloc.rate:                   505.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              6704.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.344 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4330.548 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   118590.464 ±(99.9%) 1889.797 ops/s [Average]
[info]   (min, avg, max) = (118055.715, 118590.464, 119146.727), stdev = 490.774
[info]   CI (99.9%): [116700.667, 120480.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   505.074 ±(99.9%) 8.003 MB/sec [Average]
[info]   (min, avg, max) = (502.810, 505.074, 507.413), stdev = 2.078
[info]   CI (99.9%): [497.071, 513.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   6704.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6704.003, 6704.004, 6704.004), stdev = 0.001
[info]   CI (99.9%): [6704.003, 6704.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.772 ±(99.9%) 6.378 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.772, 3.734), stdev = 1.656
[info]   CI (99.9%): [≈ 0, 7.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10.211 ±(99.9%) 84.367 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.211, 49.391), stdev = 21.910
[info]   CI (99.9%): [≈ 0, 94.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   508.861 ±(99.9%) 647.122 MB/sec [Average]
[info]   (min, avg, max) = (326.344, 508.861, 652.742), stdev = 168.056
[info]   CI (99.9%): [≈ 0, 1155.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6759.207 ±(99.9%) 8660.023 B/op [Average]
[info]   (min, avg, max) = (4330.548, 6759.207, 8703.055), stdev = 2248.981
[info]   CI (99.9%): [≈ 0, 15419.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 6.000), stdev = 2.074
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 30.30% complete, ETA 00:34:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 140315.250 ops/s
[info] # Warmup Iteration   2: 154496.309 ops/s
[info] # Warmup Iteration   3: 154930.303 ops/s
[info] Iteration   1: 154671.512 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 155079.479 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 154447.497 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 155020.815 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 154697.389 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   154783.339 ±(99.9%) 1012.904 ops/s [Average]
[info]   (min, avg, max) = (154447.497, 154783.339, 155079.479), stdev = 263.048
[info]   CI (99.9%): [153770.435, 155796.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
[info]   CI (99.9%): [0.003, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Run progress: 30.74% complete, ETA 00:34:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2727.645 ops/s
[info] # Warmup Iteration   2: 3959.709 ops/s
[info] # Warmup Iteration   3: 4174.732 ops/s
[info] Iteration   1: 4181.367 ops/s
[info]                  ·gc.alloc.rate:                   1804.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              679084.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1957.443 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 736535.629 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 4171.397 ops/s
[info]                  ·gc.alloc.rate:                   1799.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              679084.399 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23.563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1648.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 621932.242 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 4186.278 ops/s
[info]                  ·gc.alloc.rate:                   1806.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              679084.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1997.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 751057.899 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 4127.204 ops/s
[info]                  ·gc.alloc.rate:                   1780.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              679084.721 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.876 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.063 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 639611.039 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 4144.990 ops/s
[info]                  ·gc.alloc.rate:                   1788.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              679084.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.997 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 639869.098 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   4162.247 ±(99.9%) 97.274 ops/s [Average]
[info]   (min, avg, max) = (4127.204, 4162.247, 4186.278), stdev = 25.262
[info]   CI (99.9%): [4064.974, 4259.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1795.878 ±(99.9%) 42.770 MB/sec [Average]
[info]   (min, avg, max) = (1780.563, 1795.878, 1806.325), stdev = 11.107
[info]   CI (99.9%): [1753.108, 1838.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   679084.338 ±(99.9%) 1.143 B/op [Average]
[info]   (min, avg, max) = (679084.035, 679084.338, 679084.721), stdev = 0.297
[info]   CI (99.9%): [679083.195, 679085.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.033, 0.062), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   12.601 ±(99.9%) 27.123 B/op [Average]
[info]   (min, avg, max) = (7.826, 12.601, 23.563), stdev = 7.044
[info]   CI (99.9%): [≈ 0, 39.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1793.061 ±(99.9%) 653.174 MB/sec [Average]
[info]   (min, avg, max) = (1648.034, 1793.061, 1997.770), stdev = 169.627
[info]   CI (99.9%): [1139.888, 2446.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   677801.181 ±(99.9%) 234501.926 B/op [Average]
[info]   (min, avg, max) = (621932.242, 677801.181, 751057.899), stdev = 60899.406
[info]   CI (99.9%): [443299.255, 912303.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Run progress: 31.17% complete, ETA 00:33:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19369.919 ops/s
[info] # Warmup Iteration   2: 27408.104 ops/s
[info] # Warmup Iteration   3: 27948.963 ops/s
[info] Iteration   1: 27556.173 ops/s
[info]                  ·gc.alloc.rate:                   1496.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              85440.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.567 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1641.420 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93728.845 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 27667.670 ops/s
[info]                  ·gc.alloc.rate:                   1501.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              85416.367 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1321.876 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75179.777 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 28091.850 ops/s
[info]                  ·gc.alloc.rate:                   1524.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              85408.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1663.494 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93206.341 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 28123.249 ops/s
[info]                  ·gc.alloc.rate:                   1526.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              85408.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1674.718 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93703.409 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 28006.855 ops/s
[info]                  ·gc.alloc.rate:                   1519.680 MB/sec
[info]                  ·gc.alloc.rate.norm:              85408.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.477 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75617.562 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   27889.160 ±(99.9%) 999.818 ops/s [Average]
[info]   (min, avg, max) = (27556.173, 27889.160, 28123.249), stdev = 259.649
[info]   CI (99.9%): [26889.342, 28888.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1513.716 ±(99.9%) 52.915 MB/sec [Average]
[info]   (min, avg, max) = (1496.262, 1513.716, 1526.458), stdev = 13.742
[info]   CI (99.9%): [1460.801, 1566.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   85416.086 ±(99.9%) 53.366 B/op [Average]
[info]   (min, avg, max) = (85408.015, 85416.086, 85440.019), stdev = 13.859
[info]   CI (99.9%): [85362.721, 85469.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.146), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6.338 ±(99.9%) 8.167 B/op [Average]
[info]   (min, avg, max) = (3.567, 6.338, 8.289), stdev = 2.121
[info]   CI (99.9%): [≈ 0, 14.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1529.397 ±(99.9%) 690.278 MB/sec [Average]
[info]   (min, avg, max) = (1321.876, 1529.397, 1674.718), stdev = 179.263
[info]   CI (99.9%): [839.119, 2219.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   86287.187 ±(99.9%) 38287.717 B/op [Average]
[info]   (min, avg, max) = (75179.777, 86287.187, 93728.845), stdev = 9943.198
[info]   CI (99.9%): [47999.470, 124574.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Run progress: 31.60% complete, ETA 00:33:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17385.521 ops/s
[info] # Warmup Iteration   2: 31205.752 ops/s
[info] # Warmup Iteration   3: 31787.886 ops/s
[info] Iteration   1: 31312.229 ops/s
[info]                  ·gc.alloc.rate:                   1430.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              71887.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66460.929 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 31798.948 ops/s
[info]                  ·gc.alloc.rate:                   1451.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              71856.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.745 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82405.776 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 31531.723 ops/s
[info]                  ·gc.alloc.rate:                   1439.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              71856.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.038 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66897.134 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 31533.790 ops/s
[info]                  ·gc.alloc.rate:                   1439.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              71856.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.338 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67194.245 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 31736.961 ops/s
[info]                  ·gc.alloc.rate:                   1449.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              71856.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1688.792 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83744.689 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   31582.730 ±(99.9%) 742.449 ops/s [Average]
[info]   (min, avg, max) = (31312.229, 31582.730, 31798.948), stdev = 192.812
[info]   CI (99.9%): [30840.281, 32325.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1442.008 ±(99.9%) 32.901 MB/sec [Average]
[info]   (min, avg, max) = (1430.261, 1442.008, 1451.621), stdev = 8.544
[info]   CI (99.9%): [1409.108, 1474.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   71862.348 ±(99.9%) 54.543 B/op [Average]
[info]   (min, avg, max) = (71856.013, 71862.348, 71887.686), stdev = 14.165
[info]   CI (99.9%): [71807.805, 71916.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.125), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.896 ±(99.9%) 8.604 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.896, 6.182), stdev = 2.234
[info]   CI (99.9%): [≈ 0, 11.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1472.441 ±(99.9%) 719.787 MB/sec [Average]
[info]   (min, avg, max) = (1322.291, 1472.441, 1688.792), stdev = 186.927
[info]   CI (99.9%): [752.654, 2192.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   73340.554 ±(99.9%) 34281.994 B/op [Average]
[info]   (min, avg, max) = (66460.929, 73340.554, 83744.689), stdev = 8902.925
[info]   CI (99.9%): [39058.560, 107622.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Run progress: 32.03% complete, ETA 00:33:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 258871.664 ops/s
[info] # Warmup Iteration   2: 264272.843 ops/s
[info] # Warmup Iteration   3: 269847.635 ops/s
[info] Iteration   1: 266663.224 ops/s
[info]                  ·gc.alloc.rate:                   694.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.834 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3906.157 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 270619.031 ops/s
[info]                  ·gc.alloc.rate:                   704.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      988.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5750.647 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 270285.178 ops/s
[info]                  ·gc.alloc.rate:                   703.429 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.838 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3848.000 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 269921.178 ops/s
[info]                  ·gc.alloc.rate:                   702.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.822 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3853.188 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 270635.587 ops/s
[info]                  ·gc.alloc.rate:                   704.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.939 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3854.532 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   269624.839 ±(99.9%) 6473.509 ops/s [Average]
[info]   (min, avg, max) = (266663.224, 269624.839, 270635.587), stdev = 1681.150
[info]   CI (99.9%): [263151.330, 276098.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   701.756 ±(99.9%) 16.993 MB/sec [Average]
[info]   (min, avg, max) = (694.000, 701.756, 704.469), stdev = 4.413
[info]   CI (99.9%): [684.763, 718.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.020, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.510 ±(99.9%) 0.386 B/op [Average]
[info]   (min, avg, max) = (0.364, 0.510, 0.605), stdev = 0.100
[info]   CI (99.9%): [0.124, 0.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   727.082 ±(99.9%) 563.759 MB/sec [Average]
[info]   (min, avg, max) = (660.822, 727.082, 988.977), stdev = 146.406
[info]   CI (99.9%): [163.323, 1290.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4242.505 ±(99.9%) 3247.664 B/op [Average]
[info]   (min, avg, max) = (3848.000, 4242.505, 5750.647), stdev = 843.408
[info]   CI (99.9%): [994.840, 7490.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Run progress: 32.47% complete, ETA 00:33:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9508.833 ops/s
[info] # Warmup Iteration   2: 18139.492 ops/s
[info] # Warmup Iteration   3: 18124.111 ops/s
[info] Iteration   1: 17969.228 ops/s
[info]                  ·gc.alloc.rate:                   1826.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              159960.690 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 145817.053 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 18181.464 ops/s
[info]                  ·gc.alloc.rate:                   1848.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              159960.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2012.368 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 174166.830 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 18319.004 ops/s
[info]                  ·gc.alloc.rate:                   1861.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              159960.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 144850.227 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 18007.839 ops/s
[info]                  ·gc.alloc.rate:                   1829.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              159960.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 177450.427 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 18108.853 ops/s
[info]                  ·gc.alloc.rate:                   1840.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              159960.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1695.429 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147361.023 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   18117.278 ±(99.9%) 540.395 ops/s [Average]
[info]   (min, avg, max) = (17969.228, 18117.278, 18319.004), stdev = 140.339
[info]   CI (99.9%): [17576.882, 18657.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1841.329 ±(99.9%) 55.233 MB/sec [Average]
[info]   (min, avg, max) = (1826.315, 1841.329, 1861.803), stdev = 14.344
[info]   CI (99.9%): [1786.096, 1896.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   159960.158 ±(99.9%) 1.145 B/op [Average]
[info]   (min, avg, max) = (159960.022, 159960.158, 159960.690), stdev = 0.297
[info]   CI (99.9%): [159959.012, 159961.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8.677 ±(99.9%) 11.413 B/op [Average]
[info]   (min, avg, max) = (5.406, 8.677, 10.938), stdev = 2.964
[info]   CI (99.9%): [≈ 0, 20.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1817.716 ±(99.9%) 716.916 MB/sec [Average]
[info]   (min, avg, max) = (1664.833, 1817.716, 2030.014), stdev = 186.181
[info]   CI (99.9%): [1100.800, 2534.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   157929.112 ±(99.9%) 63102.085 B/op [Average]
[info]   (min, avg, max) = (144850.227, 157929.112, 177450.427), stdev = 16387.411
[info]   CI (99.9%): [94827.027, 221031.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Run progress: 32.90% complete, ETA 00:33:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39127.921 ops/s
[info] # Warmup Iteration   2: 51480.320 ops/s
[info] # Warmup Iteration   3: 52656.251 ops/s
[info] Iteration   1: 53227.101 ops/s
[info]                  ·gc.alloc.rate:                   1404.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              41528.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.965 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38735.107 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 53207.668 ops/s
[info]                  ·gc.alloc.rate:                   1403.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              41528.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.713 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38983.926 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 53167.167 ops/s
[info]                  ·gc.alloc.rate:                   1402.980 MB/sec
[info]                  ·gc.alloc.rate.norm:              41528.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1326.399 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39261.210 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 53171.614 ops/s
[info]                  ·gc.alloc.rate:                   1402.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              41528.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1668.170 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49382.448 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 52901.317 ops/s
[info]                  ·gc.alloc.rate:                   1395.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              41528.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.837 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39953.302 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   53134.974 ±(99.9%) 512.101 ops/s [Average]
[info]   (min, avg, max) = (52901.317, 53134.974, 53227.101), stdev = 132.991
[info]   CI (99.9%): [52622.872, 53647.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1401.942 ±(99.9%) 13.520 MB/sec [Average]
[info]   (min, avg, max) = (1395.763, 1401.942, 1404.416), stdev = 3.511
[info]   CI (99.9%): [1388.422, 1415.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   41528.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (41528.008, 41528.008, 41528.008), stdev = 0.001
[info]   CI (99.9%): [41528.007, 41528.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.104), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.850 ±(99.9%) 3.362 B/op [Average]
[info]   (min, avg, max) = (1.231, 1.850, 3.079), stdev = 0.873
[info]   CI (99.9%): [≈ 0, 5.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1393.017 ±(99.9%) 594.154 MB/sec [Average]
[info]   (min, avg, max) = (1309.965, 1393.017, 1668.170), stdev = 154.300
[info]   CI (99.9%): [798.863, 1987.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   41263.199 ±(99.9%) 17565.050 B/op [Average]
[info]   (min, avg, max) = (38735.107, 41263.199, 49382.448), stdev = 4561.588
[info]   CI (99.9%): [23698.149, 58828.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Run progress: 33.33% complete, ETA 00:32:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1024391.451 ops/s
[info] # Warmup Iteration   2: 1211827.377 ops/s
[info] # Warmup Iteration   3: 1229250.970 ops/s
[info] Iteration   1: 1220065.782 ops/s
[info]                  ·gc.alloc.rate:                   1308.352 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1306.765 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1685.952 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1224188.904 ops/s
[info]                  ·gc.alloc.rate:                   1312.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1313.990 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1689.680 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1224645.443 ops/s
[info]                  ·gc.alloc.rate:                   1313.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.742 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1700.206 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1218888.727 ops/s
[info]                  ·gc.alloc.rate:                   1307.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.762 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1718.571 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1219933.074 ops/s
[info]                  ·gc.alloc.rate:                   1308.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.165 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1726.526 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1221544.386 ±(99.9%) 10268.511 ops/s [Average]
[info]   (min, avg, max) = (1218888.727, 1221544.386, 1224645.443), stdev = 2666.700
[info]   CI (99.9%): [1211275.875, 1231812.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1309.935 ±(99.9%) 10.853 MB/sec [Average]
[info]   (min, avg, max) = (1307.089, 1309.935, 1313.246), stdev = 2.818
[info]   CI (99.9%): [1299.083, 1320.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1688.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1688.000, 1688.000, 1688.000), stdev = 0.001
[info]   CI (99.9%): [1688.000, 1688.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.118 ±(99.9%) 0.157 B/op [Average]
[info]   (min, avg, max) = (0.054, 0.118, 0.161), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1322.485 ±(99.9%) 48.469 MB/sec [Average]
[info]   (min, avg, max) = (1306.765, 1322.485, 1338.165), stdev = 12.587
[info]   CI (99.9%): [1274.016, 1370.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1704.187 ±(99.9%) 68.471 B/op [Average]
[info]   (min, avg, max) = (1685.952, 1704.187, 1726.526), stdev = 17.782
[info]   CI (99.9%): [1635.716, 1772.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 33.77% complete, ETA 00:32:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1217722.737 ops/s
[info] # Warmup Iteration   2: 1353219.333 ops/s
[info] # Warmup Iteration   3: 1364107.344 ops/s
[info] Iteration   1: 1362132.657 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1362678.118 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1361564.373 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1362957.668 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1363910.705 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   1362648.704 ±(99.9%) 3406.812 ops/s [Average]
[info]   (min, avg, max) = (1361564.373, 1362648.704, 1363910.705), stdev = 884.738
[info]   CI (99.9%): [1359241.892, 1366055.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Run progress: 34.20% complete, ETA 00:32:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43227.585 ops/s
[info] # Warmup Iteration   2: 59576.729 ops/s
[info] # Warmup Iteration   3: 59237.022 ops/s
[info] Iteration   1: 58975.058 ops/s
[info]                  ·gc.alloc.rate:                   1370.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              36584.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1298.371 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34656.250 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 59746.574 ops/s
[info]                  ·gc.alloc.rate:                   1388.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              36584.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1306.697 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34428.444 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 60208.974 ops/s
[info]                  ·gc.alloc.rate:                   1399.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              36584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1318.072 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34443.485 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 60492.668 ops/s
[info]                  ·gc.alloc.rate:                   1405.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              36584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1660.760 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43216.216 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 60966.017 ops/s
[info]                  ·gc.alloc.rate:                   1417.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              36584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.715 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34530.645 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   60077.858 ±(99.9%) 2922.435 ops/s [Average]
[info]   (min, avg, max) = (58975.058, 60077.858, 60966.017), stdev = 758.947
[info]   CI (99.9%): [57155.423, 63000.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1396.448 ±(99.9%) 68.516 MB/sec [Average]
[info]   (min, avg, max) = (1370.593, 1396.448, 1417.262), stdev = 17.793
[info]   CI (99.9%): [1327.932, 1464.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   36584.009 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (36584.007, 36584.009, 36584.015), stdev = 0.004
[info]   CI (99.9%): [36583.995, 36584.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.230 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.146), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.067 ±(99.9%) 6.034 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.067, 3.839), stdev = 1.567
[info]   CI (99.9%): [≈ 0, 8.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1384.323 ±(99.9%) 597.757 MB/sec [Average]
[info]   (min, avg, max) = (1298.371, 1384.323, 1660.760), stdev = 155.236
[info]   CI (99.9%): [786.566, 1982.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   36255.008 ±(99.9%) 14988.581 B/op [Average]
[info]   (min, avg, max) = (34428.444, 36255.008, 43216.216), stdev = 3892.487
[info]   CI (99.9%): [21266.427, 51243.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Run progress: 34.63% complete, ETA 00:32:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13125.071 ops/s
[info] # Warmup Iteration   2: 18981.755 ops/s
[info] # Warmup Iteration   3: 19111.563 ops/s
[info] Iteration   1: 19261.364 ops/s
[info]                  ·gc.alloc.rate:                   1472.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              120327.134 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1311.940 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 107219.699 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 19090.514 ops/s
[info]                  ·gc.alloc.rate:                   1459.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              120344.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1649.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 136055.674 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 19045.457 ops/s
[info]                  ·gc.alloc.rate:                   1456.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              120344.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.725 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 109872.313 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 19085.097 ops/s
[info]                  ·gc.alloc.rate:                   1459.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              120342.323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1672.455 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 137911.256 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 19331.246 ops/s
[info]                  ·gc.alloc.rate:                   1478.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              120344.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.221 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 109440.205 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   19162.736 ±(99.9%) 483.717 ops/s [Average]
[info]   (min, avg, max) = (19045.457, 19162.736, 19331.246), stdev = 125.620
[info]   CI (99.9%): [18679.018, 19646.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1465.157 ±(99.9%) 36.606 MB/sec [Average]
[info]   (min, avg, max) = (1456.458, 1465.157, 1478.150), stdev = 9.506
[info]   CI (99.9%): [1428.551, 1501.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   120340.306 ±(99.9%) 28.495 B/op [Average]
[info]   (min, avg, max) = (120327.134, 120340.306, 120344.027), stdev = 7.400
[info]   CI (99.9%): [120311.811, 120368.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.125), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5.478 ±(99.9%) 15.816 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.478, 10.297), stdev = 4.107
[info]   CI (99.9%): [≈ 0, 21.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1461.668 ±(99.9%) 703.523 MB/sec [Average]
[info]   (min, avg, max) = (1311.940, 1461.668, 1672.455), stdev = 182.703
[info]   CI (99.9%): [758.145, 2165.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   120099.829 ±(99.9%) 59528.368 B/op [Average]
[info]   (min, avg, max) = (107219.699, 120099.829, 137911.256), stdev = 15459.328
[info]   CI (99.9%): [60571.461, 179628.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Run progress: 35.06% complete, ETA 00:32:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10360.640 ops/s
[info] # Warmup Iteration   2: 18592.508 ops/s
[info] # Warmup Iteration   3: 18447.104 ops/s
[info] Iteration   1: 18958.181 ops/s
[info]                  ·gc.alloc.rate:                   1377.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              114320.420 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320.571 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 109602.238 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 18720.413 ops/s
[info]                  ·gc.alloc.rate:                   1359.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              114344.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1662.163 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 139752.265 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 18694.830 ops/s
[info]                  ·gc.alloc.rate:                   1358.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              114344.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112713.929 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 18755.802 ops/s
[info]                  ·gc.alloc.rate:                   1362.248 MB/sec
[info]                  ·gc.alloc.rate.norm:              114322.617 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.111 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112884.441 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 18852.534 ops/s
[info]                  ·gc.alloc.rate:                   1369.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              114312.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.394 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112665.198 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   18796.352 ±(99.9%) 417.678 ops/s [Average]
[info]   (min, avg, max) = (18694.830, 18796.352, 18958.181), stdev = 108.470
[info]   CI (99.9%): [18378.674, 19214.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1365.414 ±(99.9%) 30.312 MB/sec [Average]
[info]   (min, avg, max) = (1358.320, 1365.414, 1377.419), stdev = 7.872
[info]   CI (99.9%): [1335.102, 1395.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   114328.623 ±(99.9%) 56.242 B/op [Average]
[info]   (min, avg, max) = (114312.025, 114328.623, 114344.027), stdev = 14.606
[info]   CI (99.9%): [114272.381, 114384.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   5.575 ±(99.9%) 8.743 B/op [Average]
[info]   (min, avg, max) = (3.494, 5.575, 8.750), stdev = 2.270
[info]   CI (99.9%): [≈ 0, 14.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1403.239 ±(99.9%) 558.961 MB/sec [Average]
[info]   (min, avg, max) = (1320.571, 1403.239, 1662.163), stdev = 145.160
[info]   CI (99.9%): [844.278, 1962.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   117523.614 ±(99.9%) 48137.682 B/op [Average]
[info]   (min, avg, max) = (109602.238, 117523.614, 139752.265), stdev = 12501.203
[info]   CI (99.9%): [69385.932, 165661.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Run progress: 35.50% complete, ETA 00:31:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 303605.043 ops/s
[info] # Warmup Iteration   2: 314396.550 ops/s
[info] # Warmup Iteration   3: 325621.064 ops/s
[info] Iteration   1: 326092.909 ops/s
[info]                  ·gc.alloc.rate:                   833.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              4024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.955 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4784.040 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 324986.666 ops/s
[info]                  ·gc.alloc.rate:                   830.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              4024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.695 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3200.301 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 326018.009 ops/s
[info]                  ·gc.alloc.rate:                   833.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              4024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.711 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4788.341 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 323875.085 ops/s
[info]                  ·gc.alloc.rate:                   827.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              4024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.715 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3220.910 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 322248.649 ops/s
[info]                  ·gc.alloc.rate:                   823.800 MB/sec
[info]                  ·gc.alloc.rate.norm:              4024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.738 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4868.752 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   324644.264 ±(99.9%) 6218.997 ops/s [Average]
[info]   (min, avg, max) = (322248.649, 324644.264, 326092.909), stdev = 1615.054
[info]   CI (99.9%): [318425.267, 330863.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   829.886 ±(99.9%) 15.777 MB/sec [Average]
[info]   (min, avg, max) = (823.800, 829.886, 833.522), stdev = 4.097
[info]   CI (99.9%): [814.110, 845.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4024.001, 4024.001, 4024.001), stdev = 0.001
[info]   CI (99.9%): [4024.001, 4024.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.464 ±(99.9%) 0.588 B/op [Average]
[info]   (min, avg, max) = (0.305, 0.464, 0.706), stdev = 0.153
[info]   CI (99.9%): [≈ 0, 1.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   860.563 ±(99.9%) 699.071 MB/sec [Average]
[info]   (min, avg, max) = (660.695, 860.563, 996.738), stdev = 181.547
[info]   CI (99.9%): [161.492, 1559.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4172.469 ±(99.9%) 3383.697 B/op [Average]
[info]   (min, avg, max) = (3200.301, 4172.469, 4868.752), stdev = 878.735
[info]   CI (99.9%): [788.771, 7556.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Run progress: 35.93% complete, ETA 00:31:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6915.107 ops/s
[info] # Warmup Iteration   2: 13691.729 ops/s
[info] # Warmup Iteration   3: 13768.622 ops/s
[info] Iteration   1: 13806.629 ops/s
[info]                  ·gc.alloc.rate:                   1757.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              200400.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1661.152 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 189390.546 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 13701.633 ops/s
[info]                  ·gc.alloc.rate:                   1744.386 MB/sec
[info]                  ·gc.alloc.rate.norm:              200400.650 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.742 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 192284.843 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 13708.673 ops/s
[info]                  ·gc.alloc.rate:                   1745.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              200401.774 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.045 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 231954.708 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 13760.698 ops/s
[info]                  ·gc.alloc.rate:                   1752.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              200400.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.551 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 193351.198 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 13629.674 ops/s
[info]                  ·gc.alloc.rate:                   1735.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              200400.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694.393 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 195684.958 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   13721.462 ±(99.9%) 256.687 ops/s [Average]
[info]   (min, avg, max) = (13629.674, 13721.462, 13806.629), stdev = 66.661
[info]   CI (99.9%): [13464.775, 13978.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1746.952 ±(99.9%) 32.805 MB/sec [Average]
[info]   (min, avg, max) = (1735.220, 1746.952, 1757.716), stdev = 8.519
[info]   CI (99.9%): [1714.148, 1779.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   200400.505 ±(99.9%) 2.920 B/op [Average]
[info]   (min, avg, max) = (200400.030, 200400.505, 200401.774), stdev = 0.758
[info]   CI (99.9%): [200397.584, 200403.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   7.643 ±(99.9%) 17.689 B/op [Average]
[info]   (min, avg, max) = (2.373, 7.643, 14.339), stdev = 4.594
[info]   CI (99.9%): [≈ 0, 25.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1747.977 ±(99.9%) 587.899 MB/sec [Average]
[info]   (min, avg, max) = (1661.152, 1747.977, 2020.045), stdev = 152.676
[info]   CI (99.9%): [1160.077, 2335.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   200533.251 ±(99.9%) 68195.326 B/op [Average]
[info]   (min, avg, max) = (189390.546, 200533.251, 231954.708), stdev = 17710.110
[info]   CI (99.9%): [132337.925, 268728.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 8.000), stdev = 1.225
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Run progress: 36.36% complete, ETA 00:31:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1101141.290 ops/s
[info] # Warmup Iteration   2: 1247859.805 ops/s
[info] # Warmup Iteration   3: 1274629.588 ops/s
[info] Iteration   1: 1254815.710 ops/s
[info]                  ·gc.alloc.rate:                   1039.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1228.195 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1269837.298 ops/s
[info]                  ·gc.alloc.rate:                   1052.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1308.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1622.003 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1268375.677 ops/s
[info]                  ·gc.alloc.rate:                   1051.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.942 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1222.995 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1268038.549 ops/s
[info]                  ·gc.alloc.rate:                   1050.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.410 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1230.702 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1246829.793 ops/s
[info]                  ·gc.alloc.rate:                   1032.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995.420 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1256.693 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1261579.405 ±(99.9%) 39429.226 ops/s [Average]
[info]   (min, avg, max) = (1246829.793, 1261579.405, 1269837.298), stdev = 10239.645
[info]   CI (99.9%): [1222150.180, 1301008.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1045.276 ±(99.9%) 33.339 MB/sec [Average]
[info]   (min, avg, max) = (1032.893, 1045.276, 1052.345), stdev = 8.658
[info]   CI (99.9%): [1011.937, 1078.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1304.000, 1304.000, 1304.000), stdev = 0.001
[info]   CI (99.9%): [1304.000, 1304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.125), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.093 ±(99.9%) 0.132 B/op [Average]
[info]   (min, avg, max) = (0.077, 0.093, 0.155), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1052.153 ±(99.9%) 553.341 MB/sec [Average]
[info]   (min, avg, max) = (979.015, 1052.153, 1308.977), stdev = 143.701
[info]   CI (99.9%): [498.811, 1605.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1312.117 ±(99.9%) 668.936 B/op [Average]
[info]   (min, avg, max) = (1222.995, 1312.117, 1622.003), stdev = 173.721
[info]   CI (99.9%): [643.182, 1981.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 5.000), stdev = 1.225
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 36.80% complete, ETA 00:31:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1458644.467 ops/s
[info] # Warmup Iteration   2: 1587681.616 ops/s
[info] # Warmup Iteration   3: 1543541.042 ops/s
[info] Iteration   1: 1594979.565 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1597719.018 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1596240.155 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1595139.905 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1597307.534 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1596277.235 ±(99.9%) 4762.632 ops/s [Average]
[info]   (min, avg, max) = (1594979.565, 1596277.235, 1597719.018), stdev = 1236.840
[info]   CI (99.9%): [1591514.603, 1601039.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Run progress: 37.23% complete, ETA 00:30:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12814.764 ops/s
[info] # Warmup Iteration   2: 15613.859 ops/s
[info] # Warmup Iteration   3: 15771.903 ops/s
[info] Iteration   1: 15844.233 ops/s
[info]                  ·gc.alloc.rate:                   2130.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              211672.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2316.845 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 230138.912 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 15801.076 ops/s
[info]                  ·gc.alloc.rate:                   2124.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              211686.626 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2005.252 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 199776.154 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 15832.608 ops/s
[info]                  ·gc.alloc.rate:                   2129.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              211688.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.538 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 200617.875 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 15811.371 ops/s
[info]                  ·gc.alloc.rate:                   2126.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              211688.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2365.834 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 235506.921 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 15568.325 ops/s
[info]                  ·gc.alloc.rate:                   2093.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              211686.997 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.662 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 205614.360 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   15771.522 ±(99.9%) 442.275 ops/s [Average]
[info]   (min, avg, max) = (15568.325, 15771.522, 15844.233), stdev = 114.857
[info]   CI (99.9%): [15329.248, 16213.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   2121.188 ±(99.9%) 59.885 MB/sec [Average]
[info]   (min, avg, max) = (2093.724, 2121.188, 2130.936), stdev = 15.552
[info]   CI (99.9%): [2061.303, 2181.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   211684.342 ±(99.9%) 26.612 B/op [Average]
[info]   (min, avg, max) = (211672.030, 211684.342, 211688.032), stdev = 6.911
[info]   CI (99.9%): [211657.731, 211710.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.146), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   7.462 ±(99.9%) 17.450 B/op [Average]
[info]   (min, avg, max) = (2.104, 7.462, 14.504), stdev = 4.532
[info]   CI (99.9%): [≈ 0, 24.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2148.026 ±(99.9%) 683.884 MB/sec [Average]
[info]   (min, avg, max) = (2005.252, 2148.026, 2365.834), stdev = 177.603
[info]   CI (99.9%): [1464.142, 2831.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   214330.844 ±(99.9%) 65973.760 B/op [Average]
[info]   (min, avg, max) = (199776.154, 214330.844, 235506.921), stdev = 17133.176
[info]   CI (99.9%): [148357.085, 280304.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Run progress: 37.66% complete, ETA 00:30:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20187.268 ops/s
[info] # Warmup Iteration   2: 30911.223 ops/s
[info] # Warmup Iteration   3: 30494.319 ops/s
[info] Iteration   1: 30563.929 ops/s
[info]                  ·gc.alloc.rate:                   417.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              21526.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13171.945 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 30210.892 ops/s
[info]                  ·gc.alloc.rate:                   412.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              21496.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.652 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33730.999 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 30372.233 ops/s
[info]                  ·gc.alloc.rate:                   414.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              21496.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.694 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16879.112 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 30324.763 ops/s
[info]                  ·gc.alloc.rate:                   414.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              21496.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.790 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16905.267 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 30964.933 ops/s
[info]                  ·gc.alloc.rate:                   422.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              21496.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.360 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16640.570 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   30487.350 ±(99.9%) 1139.142 ops/s [Average]
[info]   (min, avg, max) = (30210.892, 30487.350, 30964.933), stdev = 295.832
[info]   CI (99.9%): [29348.208, 31626.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   416.522 ±(99.9%) 15.517 MB/sec [Average]
[info]   (min, avg, max) = (412.734, 416.522, 422.878), stdev = 4.030
[info]   CI (99.9%): [401.005, 432.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   21502.047 ±(99.9%) 51.945 B/op [Average]
[info]   (min, avg, max) = (21496.013, 21502.047, 21526.178), stdev = 13.490
[info]   CI (99.9%): [21450.102, 21553.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.300 ±(99.9%) 7.466 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.300, 4.338), stdev = 1.939
[info]   CI (99.9%): [≈ 0, 8.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   376.449 ±(99.9%) 595.517 MB/sec [Average]
[info]   (min, avg, max) = (255.751, 376.449, 647.652), stdev = 154.654
[info]   CI (99.9%): [≈ 0, 971.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   19465.579 ±(99.9%) 31302.782 B/op [Average]
[info]   (min, avg, max) = (13171.945, 19465.579, 33730.999), stdev = 8129.233
[info]   CI (99.9%): [≈ 0, 50768.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Run progress: 38.10% complete, ETA 00:30:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55730.785 ops/s
[info] # Warmup Iteration   2: 58447.676 ops/s
[info] # Warmup Iteration   3: 58743.616 ops/s
[info] Iteration   1: 59025.290 ops/s
[info]                  ·gc.alloc.rate:                   613.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              16368.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.290 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17602.379 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 59014.488 ops/s
[info]                  ·gc.alloc.rate:                   613.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              16368.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17516.831 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 58958.894 ops/s
[info]                  ·gc.alloc.rate:                   613.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              16368.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.710 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17533.467 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 58976.567 ops/s
[info]                  ·gc.alloc.rate:                   613.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              16368.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.837 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17527.819 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 58516.593 ops/s
[info]                  ·gc.alloc.rate:                   608.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              16368.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.718 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17683.802 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   58898.366 ±(99.9%) 828.389 ops/s [Average]
[info]   (min, avg, max) = (58516.593, 58898.366, 59025.290), stdev = 215.130
[info]   CI (99.9%): [58069.977, 59726.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   612.519 ±(99.9%) 8.114 MB/sec [Average]
[info]   (min, avg, max) = (608.779, 612.519, 613.716), stdev = 2.107
[info]   CI (99.9%): [604.405, 620.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   16368.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16368.007, 16368.007, 16368.007), stdev = 0.001
[info]   CI (99.9%): [16368.006, 16368.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.716 ±(99.9%) 5.542 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.716, 3.290), stdev = 1.439
[info]   CI (99.9%): [≈ 0, 6.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   19.110 ±(99.9%) 147.786 B/op [Average]
[info]   (min, avg, max) = (1.110, 19.110, 87.757), stdev = 38.380
[info]   CI (99.9%): [≈ 0, 166.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   657.601 ±(99.9%) 5.405 MB/sec [Average]
[info]   (min, avg, max) = (656.710, 657.601, 659.999), stdev = 1.404
[info]   CI (99.9%): [652.196, 663.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   17572.860 ±(99.9%) 271.595 B/op [Average]
[info]   (min, avg, max) = (17516.831, 17572.860, 17683.802), stdev = 70.532
[info]   CI (99.9%): [17301.265, 17844.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Run progress: 38.53% complete, ETA 00:30:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4609.803 ops/s
[info] # Warmup Iteration   2: 7938.865 ops/s
[info] # Warmup Iteration   3: 8170.546 ops/s
[info] Iteration   1: 8182.242 ops/s
[info]                  ·gc.alloc.rate:                   2968.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              571147.777 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3021.764 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 581367.742 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 8195.297 ops/s
[info]                  ·gc.alloc.rate:                   2973.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              571088.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2705.554 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 519618.850 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 8139.485 ops/s
[info]                  ·gc.alloc.rate:                   2952.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              571088.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3053.573 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 590556.561 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 8164.843 ops/s
[info]                  ·gc.alloc.rate:                   2962.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              571088.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3058.371 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 589575.241 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 8106.890 ops/s
[info]                  ·gc.alloc.rate:                   2942.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              571088.145 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2723.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 528619.890 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   8157.751 ±(99.9%) 135.873 ops/s [Average]
[info]   (min, avg, max) = (8106.890, 8157.751, 8195.297), stdev = 35.286
[info]   CI (99.9%): [8021.878, 8293.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2960.023 ±(99.9%) 47.907 MB/sec [Average]
[info]   (min, avg, max) = (2942.548, 2960.023, 2973.545), stdev = 12.441
[info]   CI (99.9%): [2912.116, 3007.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   571100.014 ±(99.9%) 102.813 B/op [Average]
[info]   (min, avg, max) = (571088.050, 571100.014, 571147.777), stdev = 26.700
[info]   CI (99.9%): [570997.201, 571202.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.146), stdev = 0.027
[info]   CI (99.9%): [0.004, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   20.873 ±(99.9%) 19.950 B/op [Average]
[info]   (min, avg, max) = (16.049, 20.873, 28.027), stdev = 5.181
[info]   CI (99.9%): [0.923, 40.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2912.598 ±(99.9%) 698.390 MB/sec [Average]
[info]   (min, avg, max) = (2705.554, 2912.598, 3058.371), stdev = 181.370
[info]   CI (99.9%): [2214.209, 3610.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   561947.657 ±(99.9%) 134240.103 B/op [Average]
[info]   (min, avg, max) = (519618.850, 561947.657, 590556.561), stdev = 34861.728
[info]   CI (99.9%): [427707.554, 696187.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   43.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Run progress: 38.96% complete, ETA 00:30:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16704.446 ops/s
[info] # Warmup Iteration   2: 20490.526 ops/s
[info] # Warmup Iteration   3: 20378.266 ops/s
[info] Iteration   1: 23503.040 ops/s
[info]                  ·gc.alloc.rate:                   1632.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              109325.525 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1635.442 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 109532.410 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 24167.478 ops/s
[info]                  ·gc.alloc.rate:                   1678.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              109336.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1648.886 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 107386.641 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 22000.225 ops/s
[info]                  ·gc.alloc.rate:                   1527.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              109314.874 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1662.058 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 118914.856 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 21534.687 ops/s
[info]                  ·gc.alloc.rate:                   1495.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              109312.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97803.481 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 21580.399 ops/s
[info]                  ·gc.alloc.rate:                   1498.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              109312.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1680.906 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 122618.876 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   22557.166 ±(99.9%) 4635.790 ops/s [Average]
[info]   (min, avg, max) = (21534.687, 22557.166, 24167.478), stdev = 1203.900
[info]   CI (99.9%): [17921.376, 27192.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1566.629 ±(99.9%) 322.712 MB/sec [Average]
[info]   (min, avg, max) = (1495.606, 1566.629, 1678.818), stdev = 83.807
[info]   CI (99.9%): [1243.917, 1889.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   109320.092 ±(99.9%) 40.424 B/op [Average]
[info]   (min, avg, max) = (109312.020, 109320.092, 109336.023), stdev = 10.498
[info]   CI (99.9%): [109279.668, 109360.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.090 ±(99.9%) 0.249 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.090, 0.182), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6.278 ±(99.9%) 16.509 B/op [Average]
[info]   (min, avg, max) = (1.394, 6.278, 11.821), stdev = 4.287
[info]   CI (99.9%): [≈ 0, 22.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1593.087 ±(99.9%) 552.576 MB/sec [Average]
[info]   (min, avg, max) = (1338.146, 1593.087, 1680.906), stdev = 143.502
[info]   CI (99.9%): [1040.512, 2145.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   111251.253 ±(99.9%) 37860.167 B/op [Average]
[info]   (min, avg, max) = (97803.481, 111251.253, 122618.876), stdev = 9832.165
[info]   CI (99.9%): [73391.086, 149111.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Run progress: 39.39% complete, ETA 00:29:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36305.480 ops/s
[info] # Warmup Iteration   2: 57517.980 ops/s
[info] # Warmup Iteration   3: 56830.861 ops/s
[info] Iteration   1: 57686.920 ops/s
[info]                  ·gc.alloc.rate:                   718.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              19616.203 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      645.273 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17610.450 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 57669.055 ops/s
[info]                  ·gc.alloc.rate:                   718.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              19616.194 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      649.510 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17725.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 57892.796 ops/s
[info]                  ·gc.alloc.rate:                   721.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              19616.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.071 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17728.584 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 57632.307 ops/s
[info]                  ·gc.alloc.rate:                   718.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              19616.240 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.702 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17881.310 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 57597.660 ops/s
[info]                  ·gc.alloc.rate:                   717.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              19616.258 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.534 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27039.416 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   57695.747 ±(99.9%) 444.347 ops/s [Average]
[info]   (min, avg, max) = (57597.660, 57695.747, 57892.796), stdev = 115.396
[info]   CI (99.9%): [57251.400, 58140.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   719.036 ±(99.9%) 5.517 MB/sec [Average]
[info]   (min, avg, max) = (717.876, 719.036, 721.502), stdev = 1.433
[info]   CI (99.9%): [713.519, 724.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   19616.239 ±(99.9%) 0.164 B/op [Average]
[info]   (min, avg, max) = (19616.194, 19616.239, 19616.298), stdev = 0.042
[info]   CI (99.9%): [19616.075, 19616.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.590 ±(99.9%) 3.595 B/op [Average]
[info]   (min, avg, max) = (0.568, 1.590, 2.841), stdev = 0.934
[info]   CI (99.9%): [≈ 0, 5.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   718.218 ±(99.9%) 584.181 MB/sec [Average]
[info]   (min, avg, max) = (645.273, 718.218, 989.534), stdev = 151.710
[info]   CI (99.9%): [134.037, 1302.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   19596.956 ±(99.9%) 16024.742 B/op [Average]
[info]   (min, avg, max) = (17610.450, 19596.956, 27039.416), stdev = 4161.575
[info]   CI (99.9%): [3572.215, 35621.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Run progress: 39.83% complete, ETA 00:29:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63221.539 ops/s
[info] # Warmup Iteration   2: 69341.289 ops/s
[info] # Warmup Iteration   3: 62851.234 ops/s
[info] Iteration   1: 62709.262 ops/s
[info]                  ·gc.alloc.rate:                   418.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              10496.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.841 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6419.751 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 61811.020 ops/s
[info]                  ·gc.alloc.rate:                   412.295 MB/sec
[info]                  ·gc.alloc.rate.norm:              10496.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.798 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16720.431 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 63503.340 ops/s
[info]                  ·gc.alloc.rate:                   423.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              10496.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8106.227 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 63722.437 ops/s
[info]                  ·gc.alloc.rate:                   425.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              10496.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8078.245 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 63560.208 ops/s
[info]                  ·gc.alloc.rate:                   423.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              10496.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.327 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8082.337 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   63061.253 ±(99.9%) 3085.651 ops/s [Average]
[info]   (min, avg, max) = (61811.020, 63061.253, 63722.437), stdev = 801.334
[info]   CI (99.9%): [59975.603, 66146.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   420.562 ±(99.9%) 20.364 MB/sec [Average]
[info]   (min, avg, max) = (412.295, 420.562, 425.002), stdev = 5.289
[info]   CI (99.9%): [400.197, 440.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10496.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10496.006, 10496.007, 10496.007), stdev = 0.001
[info]   CI (99.9%): [10496.005, 10496.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.760 ±(99.9%) 6.325 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.760, 3.699), stdev = 1.643
[info]   CI (99.9%): [≈ 0, 7.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   19.343 ±(99.9%) 161.052 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.343, 94.158), stdev = 41.825
[info]   CI (99.9%): [≈ 0, 180.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   378.620 ±(99.9%) 610.384 MB/sec [Average]
[info]   (min, avg, max) = (255.841, 378.620, 656.798), stdev = 158.515
[info]   CI (99.9%): [≈ 0, 989.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9481.398 ±(99.9%) 15829.213 B/op [Average]
[info]   (min, avg, max) = (6419.751, 9481.398, 16720.431), stdev = 4110.796
[info]   CI (99.9%): [≈ 0, 25310.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 40.26% complete, ETA 00:29:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 73768.266 ops/s
[info] # Warmup Iteration   2: 78497.051 ops/s
[info] # Warmup Iteration   3: 77309.871 ops/s
[info] Iteration   1: 77319.744 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 77359.365 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 75390.541 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 77312.018 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 77316.058 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   76939.545 ±(99.9%) 3335.151 ops/s [Average]
[info]   (min, avg, max) = (75390.541, 76939.545, 77359.365), stdev = 866.128
[info]   CI (99.9%): [73604.394, 80274.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.005, 0.005), stdev = 0.001
[info]   CI (99.9%): [0.005, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Run progress: 40.69% complete, ETA 00:29:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2492.494 ops/s
[info] # Warmup Iteration   2: 3566.289 ops/s
[info] # Warmup Iteration   3: 3631.250 ops/s
[info] Iteration   1: 3650.826 ops/s
[info]                  ·gc.alloc.rate:                   1579.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              680767.551 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1626.019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 701012.679 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 3682.416 ops/s
[info]                  ·gc.alloc.rate:                   1592.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              680768.845 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1640.976 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 701470.020 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3682.748 ops/s
[info]                  ·gc.alloc.rate:                   1592.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              680768.389 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 566413.203 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3675.012 ops/s
[info]                  ·gc.alloc.rate:                   1589.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              680768.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1667.972 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 714406.581 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3697.585 ops/s
[info]                  ·gc.alloc.rate:                   1599.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              680768.463 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35.434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 714500.083 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   3677.717 ±(99.9%) 65.929 ops/s [Average]
[info]   (min, avg, max) = (3650.826, 3677.717, 3697.585), stdev = 17.121
[info]   CI (99.9%): [3611.788, 3743.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1590.594 ±(99.9%) 28.365 MB/sec [Average]
[info]   (min, avg, max) = (1579.060, 1590.594, 1599.218), stdev = 7.366
[info]   CI (99.9%): [1562.229, 1618.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   680768.317 ±(99.9%) 1.819 B/op [Average]
[info]   (min, avg, max) = (680767.551, 680768.317, 680768.845), stdev = 0.472
[info]   CI (99.9%): [680766.499, 680770.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   17.792 ±(99.9%) 53.980 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.792, 35.434), stdev = 14.018
[info]   CI (99.9%): [≈ 0, 71.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1587.718 ±(99.9%) 570.856 MB/sec [Average]
[info]   (min, avg, max) = (1325.166, 1587.718, 1678.458), stdev = 148.249
[info]   CI (99.9%): [1016.862, 2158.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   679560.513 ±(99.9%) 244883.681 B/op [Average]
[info]   (min, avg, max) = (566413.203, 679560.513, 714500.083), stdev = 63595.514
[info]   CI (99.9%): [434676.833, 924444.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Run progress: 41.13% complete, ETA 00:29:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11543.839 ops/s
[info] # Warmup Iteration   2: 28169.774 ops/s
[info] # Warmup Iteration   3: 28064.914 ops/s
[info] Iteration   1: 28075.481 ops/s
[info]                  ·gc.alloc.rate:                   1012.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              56752.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1308.073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73337.960 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 28318.002 ops/s
[info]                  ·gc.alloc.rate:                   1021.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              56751.453 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.129 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54627.988 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 28298.633 ops/s
[info]                  ·gc.alloc.rate:                   1020.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              56752.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.588 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54810.917 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 28457.548 ops/s
[info]                  ·gc.alloc.rate:                   1026.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              56752.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.901 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54801.377 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 28360.237 ops/s
[info]                  ·gc.alloc.rate:                   1022.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              56752.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.776 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      994.778 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55210.585 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   28301.980 ±(99.9%) 541.713 ops/s [Average]
[info]   (min, avg, max) = (28075.481, 28301.980, 28457.548), stdev = 140.681
[info]   CI (99.9%): [27760.267, 28843.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   1020.560 ±(99.9%) 19.753 MB/sec [Average]
[info]   (min, avg, max) = (1012.242, 1020.560, 1026.171), stdev = 5.130
[info]   CI (99.9%): [1000.807, 1040.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   56751.902 ±(99.9%) 0.968 B/op [Average]
[info]   (min, avg, max) = (56751.453, 56751.902, 56752.016), stdev = 0.251
[info]   CI (99.9%): [56750.935, 56752.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.125), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4.629 ±(99.9%) 6.285 B/op [Average]
[info]   (min, avg, max) = (3.454, 4.629, 6.942), stdev = 1.632
[info]   CI (99.9%): [≈ 0, 10.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1052.494 ±(99.9%) 550.431 MB/sec [Average]
[info]   (min, avg, max) = (983.129, 1052.494, 1308.073), stdev = 142.945
[info]   CI (99.9%): [502.063, 1602.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   58557.766 ±(99.9%) 31826.116 B/op [Average]
[info]   (min, avg, max) = (54627.988, 58557.766, 73337.960), stdev = 8265.141
[info]   CI (99.9%): [26731.649, 90383.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 1.000
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Run progress: 41.56% complete, ETA 00:28:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7742.229 ops/s
[info] # Warmup Iteration   2: 27229.216 ops/s
[info] # Warmup Iteration   3: 28159.898 ops/s
[info] Iteration   1: 28237.986 ops/s
[info]                  ·gc.alloc.rate:                   774.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              43144.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      649.827 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36218.607 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 28111.279 ops/s
[info]                  ·gc.alloc.rate:                   770.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              43144.512 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.993 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.592 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54955.601 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 28369.364 ops/s
[info]                  ·gc.alloc.rate:                   777.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              43144.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36549.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 28506.371 ops/s
[info]                  ·gc.alloc.rate:                   781.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              43144.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.640 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36521.781 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 28037.498 ops/s
[info]                  ·gc.alloc.rate:                   768.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              43144.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.094 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55923.305 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   28252.500 ±(99.9%) 731.844 ops/s [Average]
[info]   (min, avg, max) = (28037.498, 28252.500, 28506.371), stdev = 190.058
[info]   CI (99.9%): [27520.656, 28984.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   774.479 ±(99.9%) 20.349 MB/sec [Average]
[info]   (min, avg, max) = (768.472, 774.479, 781.610), stdev = 5.285
[info]   CI (99.9%): [754.130, 794.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   43144.114 ±(99.9%) 0.857 B/op [Average]
[info]   (min, avg, max) = (43144.014, 43144.114, 43144.512), stdev = 0.222
[info]   CI (99.9%): [43143.258, 43144.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.125), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3.255 ±(99.9%) 9.738 B/op [Average]
[info]   (min, avg, max) = (1.149, 3.255, 6.993), stdev = 2.529
[info]   CI (99.9%): [≈ 0, 12.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   789.579 ±(99.9%) 700.921 MB/sec [Average]
[info]   (min, avg, max) = (649.827, 789.579, 996.094), stdev = 182.027
[info]   CI (99.9%): [88.658, 1490.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   44033.661 ±(99.9%) 40117.714 B/op [Average]
[info]   (min, avg, max) = (36218.607, 44033.661, 55923.305), stdev = 10418.443
[info]   CI (99.9%): [3915.947, 84151.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Run progress: 41.99% complete, ETA 00:28:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17190.785 ops/s
[info] # Warmup Iteration   2: 31256.293 ops/s
[info] # Warmup Iteration   3: 32090.896 ops/s
[info] Iteration   1: 31767.485 ops/s
[info]                  ·gc.alloc.rate:                   702.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              34816.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.284 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49207.693 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 31601.911 ops/s
[info]                  ·gc.alloc.rate:                   698.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              34816.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32877.897 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 31572.241 ops/s
[info]                  ·gc.alloc.rate:                   698.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              34816.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.189 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32909.134 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 31910.650 ops/s
[info]                  ·gc.alloc.rate:                   705.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              34816.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.799 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32592.430 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 31954.227 ops/s
[info]                  ·gc.alloc.rate:                   706.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              34816.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.641 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32596.773 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   31761.303 ±(99.9%) 668.929 ops/s [Average]
[info]   (min, avg, max) = (31572.241, 31761.303, 31954.227), stdev = 173.719
[info]   CI (99.9%): [31092.374, 32430.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   702.557 ±(99.9%) 14.635 MB/sec [Average]
[info]   (min, avg, max) = (698.442, 702.557, 706.687), stdev = 3.801
[info]   CI (99.9%): [687.922, 717.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   34816.014 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (34816.013, 34816.014, 34816.016), stdev = 0.001
[info]   CI (99.9%): [34816.008, 34816.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.580 ±(99.9%) 4.500 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.580, 2.669), stdev = 1.169
[info]   CI (99.9%): [≈ 0, 5.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   28.719 ±(99.9%) 222.905 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.719, 132.219), stdev = 57.888
[info]   CI (99.9%): [≈ 0, 251.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   727.199 ±(99.9%) 572.773 MB/sec [Average]
[info]   (min, avg, max) = (660.083, 727.199, 993.284), stdev = 148.747
[info]   CI (99.9%): [154.427, 1299.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   36036.785 ±(99.9%) 28357.245 B/op [Average]
[info]   (min, avg, max) = (32592.430, 36036.785, 49207.693), stdev = 7364.286
[info]   CI (99.9%): [7679.541, 64394.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Run progress: 42.42% complete, ETA 00:28:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5555.566 ops/s
[info] # Warmup Iteration   2: 21692.613 ops/s
[info] # Warmup Iteration   3: 22233.075 ops/s
[info] Iteration   1: 22227.026 ops/s
[info]                  ·gc.alloc.rate:                   1390.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              98448.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1634.720 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 115777.319 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 22659.533 ops/s
[info]                  ·gc.alloc.rate:                   1417.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              98448.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1321.590 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91796.090 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 22485.946 ops/s
[info]                  ·gc.alloc.rate:                   1406.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              98448.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331.175 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93154.951 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 22744.439 ops/s
[info]                  ·gc.alloc.rate:                   1423.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              98448.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.321 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92651.563 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 22474.875 ops/s
[info]                  ·gc.alloc.rate:                   1405.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              98448.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.831 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.682 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 117835.349 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   22518.364 ±(99.9%) 767.377 ops/s [Average]
[info]   (min, avg, max) = (22227.026, 22518.364, 22744.439), stdev = 199.285
[info]   CI (99.9%): [21750.987, 23285.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1408.630 ±(99.9%) 48.808 MB/sec [Average]
[info]   (min, avg, max) = (1390.039, 1408.630, 1423.111), stdev = 12.675
[info]   CI (99.9%): [1359.822, 1457.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   98448.019 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (98448.018, 98448.019, 98448.023), stdev = 0.002
[info]   CI (99.9%): [98448.012, 98448.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4.656 ±(99.9%) 7.266 B/op [Average]
[info]   (min, avg, max) = (2.881, 4.656, 7.229), stdev = 1.887
[info]   CI (99.9%): [≈ 0, 11.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1461.897 ±(99.9%) 695.287 MB/sec [Average]
[info]   (min, avg, max) = (1321.590, 1461.897, 1682.682), stdev = 180.564
[info]   CI (99.9%): [766.611, 2157.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   102243.054 ±(99.9%) 51302.708 B/op [Average]
[info]   (min, avg, max) = (91796.090, 102243.054, 117835.349), stdev = 13323.150
[info]   CI (99.9%): [50940.346, 153545.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Run progress: 42.86% complete, ETA 00:28:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64467.369 ops/s
[info] # Warmup Iteration   2: 82511.121 ops/s
[info] # Warmup Iteration   3: 84317.630 ops/s
[info] Iteration   1: 83703.531 ops/s
[info]                  ·gc.alloc.rate:                   1291.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              24280.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1308.285 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24600.170 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 83329.594 ops/s
[info]                  ·gc.alloc.rate:                   1285.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              24280.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1315.348 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24848.369 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 83541.900 ops/s
[info]                  ·gc.alloc.rate:                   1288.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              24280.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1324.113 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24948.168 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 83095.205 ops/s
[info]                  ·gc.alloc.rate:                   1281.800 MB/sec
[info]                  ·gc.alloc.rate.norm:              24280.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1332.183 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25234.361 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 84452.069 ops/s
[info]                  ·gc.alloc.rate:                   1303.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              24280.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.552 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1004.417 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18714.374 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   83624.460 ±(99.9%) 1986.968 ops/s [Average]
[info]   (min, avg, max) = (83095.205, 83624.460, 84452.069), stdev = 516.009
[info]   CI (99.9%): [81637.492, 85611.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1290.020 ±(99.9%) 31.371 MB/sec [Average]
[info]   (min, avg, max) = (1281.800, 1290.020, 1303.130), stdev = 8.147
[info]   CI (99.9%): [1258.649, 1321.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   24280.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24280.005, 24280.005, 24280.006), stdev = 0.001
[info]   CI (99.9%): [24280.004, 24280.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.332 ±(99.9%) 2.528 B/op [Average]
[info]   (min, avg, max) = (0.783, 1.332, 2.359), stdev = 0.657
[info]   CI (99.9%): [≈ 0, 3.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1256.869 ±(99.9%) 544.526 MB/sec [Average]
[info]   (min, avg, max) = (1004.417, 1256.869, 1332.183), stdev = 141.412
[info]   CI (99.9%): [712.343, 1801.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   23669.088 ±(99.9%) 10701.211 B/op [Average]
[info]   (min, avg, max) = (18714.374, 23669.088, 25234.361), stdev = 2779.070
[info]   CI (99.9%): [12967.877, 34370.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Run progress: 43.29% complete, ETA 00:27:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 121968.662 ops/s
[info] # Warmup Iteration   2: 188818.212 ops/s
[info] # Warmup Iteration   3: 185079.121 ops/s
[info] Iteration   1: 189374.363 ops/s
[info]                  ·gc.alloc.rate:                   1232.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              10248.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1307.933 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10873.072 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 190235.913 ops/s
[info]                  ·gc.alloc.rate:                   1238.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              10248.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.569 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8186.962 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 189442.570 ops/s
[info]                  ·gc.alloc.rate:                   1233.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              10248.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1327.727 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11032.254 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 189526.244 ops/s
[info]                  ·gc.alloc.rate:                   1233.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              10248.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336.153 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11096.979 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 190682.417 ops/s
[info]                  ·gc.alloc.rate:                   1241.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              10248.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1006.559 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8307.980 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   189852.301 ±(99.9%) 2227.780 ops/s [Average]
[info]   (min, avg, max) = (189374.363, 189852.301, 190682.417), stdev = 578.548
[info]   CI (99.9%): [187624.521, 192080.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1236.062 ±(99.9%) 14.984 MB/sec [Average]
[info]   (min, avg, max) = (1232.743, 1236.062, 1241.603), stdev = 3.891
[info]   CI (99.9%): [1221.078, 1251.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   10248.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10248.002, 10248.002, 10248.002), stdev = 0.001
[info]   CI (99.9%): [10248.002, 10248.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.167), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.828 ±(99.9%) 1.281 B/op [Average]
[info]   (min, avg, max) = (0.519, 0.828, 1.383), stdev = 0.333
[info]   CI (99.9%): [≈ 0, 2.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1193.588 ±(99.9%) 688.814 MB/sec [Average]
[info]   (min, avg, max) = (989.569, 1193.588, 1336.153), stdev = 178.883
[info]   CI (99.9%): [504.774, 1882.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9899.449 ±(99.9%) 5817.738 B/op [Average]
[info]   (min, avg, max) = (8186.962, 9899.449, 11096.979), stdev = 1510.848
[info]   CI (99.9%): [4081.711, 15717.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Run progress: 43.72% complete, ETA 00:27:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 417007.558 ops/s
[info] # Warmup Iteration   2: 452519.999 ops/s
[info] # Warmup Iteration   3: 423030.672 ops/s
[info] Iteration   1: 430942.616 ops/s
[info]                  ·gc.alloc.rate:                   477.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      584.529 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2134.768 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 430670.348 ops/s
[info]                  ·gc.alloc.rate:                   477.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.709 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1201.365 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 426882.867 ops/s
[info]                  ·gc.alloc.rate:                   473.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.264 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2411.773 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 432296.416 ops/s
[info]                  ·gc.alloc.rate:                   479.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.384 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1188.309 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 427090.998 ops/s
[info]                  ·gc.alloc.rate:                   473.347 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.938 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2405.689 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   429576.649 ±(99.9%) 9411.280 ops/s [Average]
[info]   (min, avg, max) = (426882.867, 429576.649, 432296.416), stdev = 2444.079
[info]   CI (99.9%): [420165.369, 438987.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   476.037 ±(99.9%) 10.222 MB/sec [Average]
[info]   (min, avg, max) = (473.111, 476.037, 479.012), stdev = 2.655
[info]   CI (99.9%): [465.814, 486.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1744.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1744.001, 1744.001, 1744.001), stdev = 0.001
[info]   CI (99.9%): [1744.001, 1744.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.783 ±(99.9%) 6.249 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.783, 3.685), stdev = 1.623
[info]   CI (99.9%): [≈ 0, 7.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.860 ±(99.9%) 22.819 B/op [Average]
[info]   (min, avg, max) = (0.076, 2.860, 13.459), stdev = 5.926
[info]   CI (99.9%): [≈ 0, 25.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   509.365 ±(99.9%) 648.285 MB/sec [Average]
[info]   (min, avg, max) = (326.384, 509.365, 654.264), stdev = 168.358
[info]   CI (99.9%): [≈ 0, 1157.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1868.381 ±(99.9%) 2406.533 B/op [Average]
[info]   (min, avg, max) = (1188.309, 1868.381, 2411.773), stdev = 624.969
[info]   CI (99.9%): [≈ 0, 4274.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 5.000), stdev = 1.643
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 44.16% complete, ETA 00:27:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 461258.250 ops/s
[info] # Warmup Iteration   2: 517179.794 ops/s
[info] # Warmup Iteration   3: 529066.706 ops/s
[info] Iteration   1: 533475.087 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 533047.231 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 533157.394 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 531441.223 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 531640.610 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   532552.309 ±(99.9%) 3616.481 ops/s [Average]
[info]   (min, avg, max) = (531441.223, 532552.309, 533475.087), stdev = 939.189
[info]   CI (99.9%): [528935.828, 536168.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Run progress: 44.59% complete, ETA 00:27:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78119.927 ops/s
[info] # Warmup Iteration   2: 105714.661 ops/s
[info] # Warmup Iteration   3: 107016.210 ops/s
[info] Iteration   1: 105142.764 ops/s
[info]                  ·gc.alloc.rate:                   1282.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              19200.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1296.886 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19414.012 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 106588.455 ops/s
[info]                  ·gc.alloc.rate:                   1300.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              19200.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1304.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19258.877 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 106627.063 ops/s
[info]                  ·gc.alloc.rate:                   1301.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              19200.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1315.332 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19408.424 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 105057.687 ops/s
[info]                  ·gc.alloc.rate:                   1281.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              19200.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.362 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19859.016 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 105143.573 ops/s
[info]                  ·gc.alloc.rate:                   1282.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              19200.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19972.971 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   105711.908 ±(99.9%) 3152.346 ops/s [Average]
[info]   (min, avg, max) = (105057.687, 105711.908, 106627.063), stdev = 818.654
[info]   CI (99.9%): [102559.563, 108864.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1289.523 ±(99.9%) 39.057 MB/sec [Average]
[info]   (min, avg, max) = (1281.381, 1289.523, 1301.208), stdev = 10.143
[info]   CI (99.9%): [1250.466, 1328.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   19200.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19200.004, 19200.004, 19200.004), stdev = 0.001
[info]   CI (99.9%): [19200.003, 19200.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.125), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.239 ±(99.9%) 1.440 B/op [Average]
[info]   (min, avg, max) = (0.922, 1.239, 1.844), stdev = 0.374
[info]   CI (99.9%): [≈ 0, 2.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1315.126 ±(99.9%) 58.372 MB/sec [Average]
[info]   (min, avg, max) = (1296.886, 1315.126, 1334.046), stdev = 15.159
[info]   CI (99.9%): [1256.754, 1373.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   19582.660 ±(99.9%) 1205.982 B/op [Average]
[info]   (min, avg, max) = (19258.877, 19582.660, 19972.971), stdev = 313.190
[info]   CI (99.9%): [18376.677, 20788.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Run progress: 45.02% complete, ETA 00:27:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14877.251 ops/s
[info] # Warmup Iteration   2: 18188.309 ops/s
[info] # Warmup Iteration   3: 18186.388 ops/s
[info] Iteration   1: 18245.388 ops/s
[info]                  ·gc.alloc.rate:                   2370.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              204527.134 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2325.230 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 200590.652 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 18032.184 ops/s
[info]                  ·gc.alloc.rate:                   2342.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              204536.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2346.262 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 204831.342 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 17755.387 ops/s
[info]                  ·gc.alloc.rate:                   2308.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              204536.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2362.774 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 209360.951 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 17878.468 ops/s
[info]                  ·gc.alloc.rate:                   2323.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              204535.125 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2370.918 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 208753.526 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 18221.274 ops/s
[info]                  ·gc.alloc.rate:                   2367.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              204536.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2376.182 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 205285.002 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   18026.540 ±(99.9%) 819.782 ops/s [Average]
[info]   (min, avg, max) = (17755.387, 18026.540, 18245.388), stdev = 212.895
[info]   CI (99.9%): [17206.758, 18846.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   2342.516 ±(99.9%) 105.071 MB/sec [Average]
[info]   (min, avg, max) = (2308.322, 2342.516, 2370.861), stdev = 27.287
[info]   CI (99.9%): [2237.445, 2447.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   204534.067 ±(99.9%) 14.999 B/op [Average]
[info]   (min, avg, max) = (204527.134, 204534.067, 204536.031), stdev = 3.895
[info]   CI (99.9%): [204519.068, 204549.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.142 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.142, 0.208), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12.399 ±(99.9%) 18.029 B/op [Average]
[info]   (min, avg, max) = (8.978, 12.399, 18.450), stdev = 4.682
[info]   CI (99.9%): [≈ 0, 30.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2356.273 ±(99.9%) 79.780 MB/sec [Average]
[info]   (min, avg, max) = (2325.230, 2356.273, 2376.182), stdev = 20.719
[info]   CI (99.9%): [2276.493, 2436.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   205764.295 ±(99.9%) 13578.386 B/op [Average]
[info]   (min, avg, max) = (200590.652, 205764.295, 209360.951), stdev = 3526.264
[info]   CI (99.9%): [192185.909, 219342.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 9.000), stdev = 1.225
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Run progress: 45.45% complete, ETA 00:26:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28043.269 ops/s
[info] # Warmup Iteration   2: 44260.039 ops/s
[info] # Warmup Iteration   3: 44604.094 ops/s
[info] Iteration   1: 44608.583 ops/s
[info]                  ·gc.alloc.rate:                   175.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              6208.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.863 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9025.063 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 44574.736 ops/s
[info]                  ·gc.alloc.rate:                   175.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              6208.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.808 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9032.149 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 44867.398 ops/s
[info]                  ·gc.alloc.rate:      176.944 MB/sec
[info]                  ·gc.alloc.rate.norm: 6208.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 44683.307 ops/s
[info]                  ·gc.alloc.rate:                   176.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              6208.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.200 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9009.715 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 45038.277 ops/s
[info]                  ·gc.alloc.rate:                   177.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              6208.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.754 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8938.513 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   44754.460 ±(99.9%) 750.507 ops/s [Average]
[info]   (min, avg, max) = (44574.736, 44754.460, 45038.277), stdev = 194.904
[info]   CI (99.9%): [44003.953, 45504.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   176.528 ±(99.9%) 2.880 MB/sec [Average]
[info]   (min, avg, max) = (175.823, 176.528, 177.628), stdev = 0.748
[info]   CI (99.9%): [173.648, 179.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   6208.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6208.009, 6208.009, 6208.010), stdev = 0.001
[info]   CI (99.9%): [6208.008, 6208.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.440 ±(99.9%) 3.788 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.440, 2.200), stdev = 0.984
[info]   CI (99.9%): [≈ 0, 4.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   204.643 ±(99.9%) 440.510 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.643, 255.863), stdev = 114.399
[info]   CI (99.9%): [≈ 0, 645.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7201.088 ±(99.9%) 15501.546 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7201.088, 9032.149), stdev = 4025.702
[info]   CI (99.9%): [≈ 0, 22702.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Run progress: 45.89% complete, ETA 00:26:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 93298.006 ops/s
[info] # Warmup Iteration   2: 96508.220 ops/s
[info] # Warmup Iteration   3: 95783.888 ops/s
[info] Iteration   1: 95875.680 ops/s
[info]                  ·gc.alloc.rate:                   254.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              4176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.742 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4199.072 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 95313.824 ops/s
[info]                  ·gc.alloc.rate:                   252.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              4176.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.750 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4223.827 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 97369.886 ops/s
[info]                  ·gc.alloc.rate:                   258.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              4176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.805 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4134.611 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 96198.414 ops/s
[info]                  ·gc.alloc.rate:      255.219 MB/sec
[info]                  ·gc.alloc.rate.norm: 4176.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 97757.757 ops/s
[info]                  ·gc.alloc.rate:                   259.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              4176.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52.463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.204 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5314.146 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   96503.112 ±(99.9%) 3958.093 ops/s [Average]
[info]   (min, avg, max) = (95313.824, 96503.112, 97757.757), stdev = 1027.904
[info]   CI (99.9%): [92545.019, 100461.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   256.052 ±(99.9%) 10.717 MB/sec [Average]
[info]   (min, avg, max) = (252.855, 256.052, 259.484), stdev = 2.783
[info]   CI (99.9%): [245.335, 266.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4176.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4176.004, 4176.004, 4176.005), stdev = 0.001
[info]   CI (99.9%): [4176.004, 4176.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.661 ±(99.9%) 5.594 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.661, 3.260), stdev = 1.453
[info]   CI (99.9%): [≈ 0, 6.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10.639 ±(99.9%) 90.031 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.639, 52.463), stdev = 23.381
[info]   CI (99.9%): [≈ 0, 100.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   219.500 ±(99.9%) 488.521 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 219.500, 330.204), stdev = 126.867
[info]   CI (99.9%): [≈ 0, 708.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3574.331 ±(99.9%) 7921.678 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3574.331, 5314.146), stdev = 2057.235
[info]   CI (99.9%): [≈ 0, 11496.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Run progress: 46.32% complete, ETA 00:26:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5031.787 ops/s
[info] # Warmup Iteration   2: 9189.448 ops/s
[info] # Warmup Iteration   3: 9392.367 ops/s
[info] Iteration   1: 9435.915 ops/s
[info]                  ·gc.alloc.rate:                   3275.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              546384.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3028.821 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 505178.541 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 9307.663 ops/s
[info]                  ·gc.alloc.rate:                   3230.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              546384.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3385.713 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 572605.841 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 9354.076 ops/s
[info]                  ·gc.alloc.rate:                   3246.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              546384.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24.516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3395.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 571471.678 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 9455.825 ops/s
[info]                  ·gc.alloc.rate:                   3282.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              546384.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3061.581 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 509542.746 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 9395.834 ops/s
[info]                  ·gc.alloc.rate:                   3262.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              546385.732 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3404.223 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 570145.069 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   9389.863 ±(99.9%) 232.199 ops/s [Average]
[info]   (min, avg, max) = (9307.663, 9389.863, 9455.825), stdev = 60.301
[info]   CI (99.9%): [9157.663, 9622.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3259.751 ±(99.9%) 82.026 MB/sec [Average]
[info]   (min, avg, max) = (3230.668, 3259.751, 3282.942), stdev = 21.302
[info]   CI (99.9%): [3177.725, 3341.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   546384.383 ±(99.9%) 2.905 B/op [Average]
[info]   (min, avg, max) = (546384.043, 546384.383, 546385.732), stdev = 0.755
[info]   CI (99.9%): [546381.477, 546387.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.146), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   16.069 ±(99.9%) 31.065 B/op [Average]
[info]   (min, avg, max) = (6.929, 16.069, 24.516), stdev = 8.067
[info]   CI (99.9%): [≈ 0, 47.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3255.267 ±(99.9%) 740.188 MB/sec [Average]
[info]   (min, avg, max) = (3028.821, 3255.267, 3404.223), stdev = 192.225
[info]   CI (99.9%): [2515.079, 3995.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   545788.775 ±(99.9%) 135252.482 B/op [Average]
[info]   (min, avg, max) = (505178.541, 545788.775, 572605.841), stdev = 35124.640
[info]   CI (99.9%): [410536.294, 681041.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   48.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.600, 10.000), stdev = 0.548
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.200, 11.000), stdev = 0.837
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Run progress: 46.75% complete, ETA 00:26:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20751.205 ops/s
[info] # Warmup Iteration   2: 23937.900 ops/s
[info] # Warmup Iteration   3: 25348.259 ops/s
[info] Iteration   1: 29531.969 ops/s
[info]                  ·gc.alloc.rate:                   1644.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              87632.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1636.466 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87224.540 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 26896.901 ops/s
[info]                  ·gc.alloc.rate:                   1497.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              87615.402 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1648.872 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96496.278 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 25740.440 ops/s
[info]                  ·gc.alloc.rate:                   1432.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              87608.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.087 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81258.123 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 25483.546 ops/s
[info]                  ·gc.alloc.rate:                   1418.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              87608.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336.516 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82547.385 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 25762.063 ops/s
[info]                  ·gc.alloc.rate:                   1433.933 MB/sec
[info]                  ·gc.alloc.rate.norm:              87608.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82043.360 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   26682.984 ±(99.9%) 6482.823 ops/s [Average]
[info]   (min, avg, max) = (25483.546, 26682.984, 29531.969), stdev = 1683.568
[info]   CI (99.9%): [20200.161, 33165.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1485.313 ±(99.9%) 361.266 MB/sec [Average]
[info]   (min, avg, max) = (1418.452, 1485.313, 1644.110), stdev = 93.820
[info]   CI (99.9%): [1124.047, 1846.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   87614.293 ±(99.9%) 40.086 B/op [Average]
[info]   (min, avg, max) = (87608.016, 87614.293, 87632.015), stdev = 10.410
[info]   CI (99.9%): [87574.207, 87654.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.146 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.146, 0.187), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8.559 ±(99.9%) 9.388 B/op [Average]
[info]   (min, avg, max) = (5.142, 8.559, 11.456), stdev = 2.438
[info]   CI (99.9%): [≈ 0, 17.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1458.759 ±(99.9%) 646.963 MB/sec [Average]
[info]   (min, avg, max) = (1329.087, 1458.759, 1648.872), stdev = 168.014
[info]   CI (99.9%): [811.796, 2105.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   85913.937 ±(99.9%) 24482.289 B/op [Average]
[info]   (min, avg, max) = (81258.123, 85913.937, 96496.278), stdev = 6357.973
[info]   CI (99.9%): [61431.648, 110396.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Run progress: 47.19% complete, ETA 00:26:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 77421.095 ops/s
[info] # Warmup Iteration   2: 114021.574 ops/s
[info] # Warmup Iteration   3: 114731.030 ops/s
[info] Iteration   1: 114061.636 ops/s
[info]                  ·gc.alloc.rate:                   870.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              12011.358 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.862 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      971.988 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13414.765 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 113833.177 ops/s
[info]                  ·gc.alloc.rate:                   868.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              12011.377 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9016.582 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 113920.804 ops/s
[info]                  ·gc.alloc.rate:                   869.295 MB/sec
[info]                  ·gc.alloc.rate.norm:              12011.342 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      984.738 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13606.456 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 114797.559 ops/s
[info]                  ·gc.alloc.rate:                   875.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              12011.375 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.764 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13585.430 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 114995.225 ops/s
[info]                  ·gc.alloc.rate:                   877.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              12011.363 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9089.038 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   114321.680 ±(99.9%) 2062.058 ops/s [Average]
[info]   (min, avg, max) = (113833.177, 114321.680, 114995.225), stdev = 535.510
[info]   CI (99.9%): [112259.622, 116383.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   872.345 ±(99.9%) 15.774 MB/sec [Average]
[info]   (min, avg, max) = (868.638, 872.345, 877.518), stdev = 4.097
[info]   CI (99.9%): [856.571, 888.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   12011.363 ±(99.9%) 0.054 B/op [Average]
[info]   (min, avg, max) = (12011.342, 12011.363, 12011.377), stdev = 0.014
[info]   CI (99.9%): [12011.309, 12011.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.032 ±(99.9%) 1.682 B/op [Average]
[info]   (min, avg, max) = (0.575, 1.032, 1.727), stdev = 0.437
[info]   CI (99.9%): [≈ 0, 2.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   852.714 ±(99.9%) 684.996 MB/sec [Average]
[info]   (min, avg, max) = (652.061, 852.714, 990.764), stdev = 177.891
[info]   CI (99.9%): [167.718, 1537.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11742.454 ±(99.9%) 9459.325 B/op [Average]
[info]   (min, avg, max) = (9016.582, 11742.454, 13606.456), stdev = 2456.557
[info]   CI (99.9%): [2283.129, 21201.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Run progress: 47.62% complete, ETA 00:25:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 120068.723 ops/s
[info] # Warmup Iteration   2: 132674.240 ops/s
[info] # Warmup Iteration   3: 132758.314 ops/s
[info] Iteration   1: 133056.442 ops/s
[info]                  ·gc.alloc.rate:                   534.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              6328.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43.794 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3888.518 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 132106.647 ops/s
[info]                  ·gc.alloc.rate:                   531.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              6328.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.629 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7813.112 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 132685.703 ops/s
[info]                  ·gc.alloc.rate:                   533.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              6328.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7751.368 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 132689.503 ops/s
[info]                  ·gc.alloc.rate:                   533.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              6328.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.385 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3871.617 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 132601.769 ops/s
[info]                  ·gc.alloc.rate:                   533.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              6328.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.722 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7748.430 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   132628.013 ±(99.9%) 1310.312 ops/s [Average]
[info]   (min, avg, max) = (132106.647, 132628.013, 133056.442), stdev = 340.284
[info]   CI (99.9%): [131317.701, 133938.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   533.168 ±(99.9%) 5.389 MB/sec [Average]
[info]   (min, avg, max) = (531.008, 533.168, 534.905), stdev = 1.399
[info]   CI (99.9%): [527.779, 538.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   6328.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6328.003, 6328.003, 6328.003), stdev = 0.001
[info]   CI (99.9%): [6328.003, 6328.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.790 ±(99.9%) 6.270 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.790, 3.702), stdev = 1.628
[info]   CI (99.9%): [≈ 0, 7.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   9.353 ±(99.9%) 74.166 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.353, 43.794), stdev = 19.261
[info]   CI (99.9%): [≈ 0, 83.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   523.361 ±(99.9%) 688.357 MB/sec [Average]
[info]   (min, avg, max) = (326.385, 523.361, 655.629), stdev = 178.764
[info]   CI (99.9%): [≈ 0, 1211.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6214.609 ±(99.9%) 8206.878 B/op [Average]
[info]   (min, avg, max) = (3871.617, 6214.609, 7813.112), stdev = 2131.300
[info]   CI (99.9%): [≈ 0, 14421.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 48.05% complete, ETA 00:25:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 146529.167 ops/s
[info] # Warmup Iteration   2: 164645.362 ops/s
[info] # Warmup Iteration   3: 165176.768 ops/s
[info] Iteration   1: 165118.686 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 165082.925 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 164931.215 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 165224.574 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 165195.070 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   165110.494 ±(99.9%) 443.808 ops/s [Average]
[info]   (min, avg, max) = (164931.215, 165110.494, 165224.574), stdev = 115.255
[info]   CI (99.9%): [164666.687, 165554.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.002, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Run progress: 48.48% complete, ETA 00:25:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2929.289 ops/s
[info] # Warmup Iteration   2: 4171.993 ops/s
[info] # Warmup Iteration   3: 4258.144 ops/s
[info] Iteration   1: 4272.321 ops/s
[info]                  ·gc.alloc.rate:                   1963.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              723379.324 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1963.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 723502.720 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 4292.920 ops/s
[info]                  ·gc.alloc.rate:                   1972.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              723379.886 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30.524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1987.443 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 728801.833 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 4304.597 ops/s
[info]                  ·gc.alloc.rate:                   1978.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              723379.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2006.061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 733467.467 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 4326.738 ops/s
[info]                  ·gc.alloc.rate:                   1988.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              723379.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.880 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 734705.804 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 4257.160 ops/s
[info]                  ·gc.alloc.rate:                   1956.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              723379.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30.783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.684 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 749739.228 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   4290.747 ±(99.9%) 104.741 ops/s [Average]
[info]   (min, avg, max) = (4257.160, 4290.747, 4326.738), stdev = 27.201
[info]   CI (99.9%): [4186.006, 4395.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1971.931 ±(99.9%) 48.715 MB/sec [Average]
[info]   (min, avg, max) = (1956.393, 1971.931, 1988.742), stdev = 12.651
[info]   CI (99.9%): [1923.215, 2020.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   723379.420 ±(99.9%) 1.559 B/op [Average]
[info]   (min, avg, max) = (723379.025, 723379.420, 723379.886), stdev = 0.405
[info]   CI (99.9%): [723377.861, 723380.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   15.328 ±(99.9%) 59.019 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.328, 30.783), stdev = 15.327
[info]   CI (99.9%): [≈ 0, 74.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2000.959 ±(99.9%) 99.431 MB/sec [Average]
[info]   (min, avg, max) = (1963.728, 2000.959, 2027.684), stdev = 25.822
[info]   CI (99.9%): [1901.528, 2100.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   734043.410 ±(99.9%) 37812.336 B/op [Average]
[info]   (min, avg, max) = (723502.720, 734043.410, 749739.228), stdev = 9819.744
[info]   CI (99.9%): [696231.075, 771855.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Run progress: 48.92% complete, ETA 00:25:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32182.490 ops/s
[info] # Warmup Iteration   2: 40738.112 ops/s
[info] # Warmup Iteration   3: 41131.612 ops/s
[info] Iteration   1: 40596.004 ops/s
[info]                  ·gc.alloc.rate:                   810.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25360.235 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 40707.881 ops/s
[info]                  ·gc.alloc.rate:                   812.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.726 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37885.133 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 41382.210 ops/s
[info]                  ·gc.alloc.rate:                   826.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.642 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24891.899 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 41280.133 ops/s
[info]                  ·gc.alloc.rate:                   824.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      984.274 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37524.428 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 41400.812 ops/s
[info]                  ·gc.alloc.rate:                   826.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.903 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25045.081 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   41073.408 ±(99.9%) 1499.791 ops/s [Average]
[info]   (min, avg, max) = (40596.004, 41073.408, 41400.812), stdev = 389.491
[info]   CI (99.9%): [39573.617, 42573.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   820.104 ±(99.9%) 30.427 MB/sec [Average]
[info]   (min, avg, max) = (810.466, 820.104, 826.724), stdev = 7.902
[info]   CI (99.9%): [789.676, 850.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31424.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (31424.010, 31424.010, 31424.011), stdev = 0.001
[info]   CI (99.9%): [31424.009, 31424.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.104), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.607 ±(99.9%) 6.577 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.607, 4.024), stdev = 1.708
[info]   CI (99.9%): [≈ 0, 8.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   786.323 ±(99.9%) 687.895 MB/sec [Average]
[info]   (min, avg, max) = (654.073, 786.323, 984.274), stdev = 178.644
[info]   CI (99.9%): [98.428, 1474.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   30141.355 ±(99.9%) 26598.987 B/op [Average]
[info]   (min, avg, max) = (24891.899, 30141.355, 37885.133), stdev = 6907.673
[info]   CI (99.9%): [3542.368, 56740.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Run progress: 49.35% complete, ETA 00:25:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51916.429 ops/s
[info] # Warmup Iteration   2: 83581.792 ops/s
[info] # Warmup Iteration   3: 84553.471 ops/s
[info] Iteration   1: 85426.109 ops/s
[info]                  ·gc.alloc.rate:                   898.898 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.644 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18065.989 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 85627.164 ops/s
[info]                  ·gc.alloc.rate:                   900.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.493 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12084.967 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 85365.311 ops/s
[info]                  ·gc.alloc.rate:                   898.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.527 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18281.547 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 85468.452 ops/s
[info]                  ·gc.alloc.rate:                   899.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.923 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18357.440 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 85381.226 ops/s
[info]                  ·gc.alloc.rate:                   898.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      667.590 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12304.117 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   85453.652 ±(99.9%) 404.472 ops/s [Average]
[info]   (min, avg, max) = (85365.311, 85453.652, 85627.164), stdev = 105.040
[info]   CI (99.9%): [85049.180, 85858.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   899.166 ±(99.9%) 4.206 MB/sec [Average]
[info]   (min, avg, max) = (898.157, 899.166, 900.961), stdev = 1.092
[info]   CI (99.9%): [894.960, 903.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   16560.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16560.005, 16560.005, 16560.005), stdev = 0.001
[info]   CI (99.9%): [16560.004, 16560.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.997 ±(99.9%) 2.241 B/op [Average]
[info]   (min, avg, max) = (0.384, 0.997, 1.918), stdev = 0.582
[info]   CI (99.9%): [≈ 0, 3.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   858.835 ±(99.9%) 690.507 MB/sec [Average]
[info]   (min, avg, max) = (657.493, 858.835, 996.923), stdev = 179.322
[info]   CI (99.9%): [168.329, 1549.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15818.812 ±(99.9%) 12749.961 B/op [Average]
[info]   (min, avg, max) = (12084.967, 15818.812, 18357.440), stdev = 3311.124
[info]   CI (99.9%): [3068.851, 28568.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 1.000
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Run progress: 49.78% complete, ETA 00:24:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 225217.290 ops/s
[info] # Warmup Iteration   2: 241166.759 ops/s
[info] # Warmup Iteration   3: 237237.756 ops/s
[info] Iteration   1: 242519.598 ops/s
[info]                  ·gc.alloc.rate:                   789.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.947 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4262.610 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 241366.918 ops/s
[info]                  ·gc.alloc.rate:                   785.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.451 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6424.374 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 238447.384 ops/s
[info]                  ·gc.alloc.rate:                   775.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.309 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4337.719 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 240874.152 ops/s
[info]                  ·gc.alloc.rate:                   783.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      987.856 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6453.023 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 233822.280 ops/s
[info]                  ·gc.alloc.rate:                   760.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.766 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4448.097 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   239406.066 ±(99.9%) 13310.094 ops/s [Average]
[info]   (min, avg, max) = (233822.280, 239406.066, 242519.598), stdev = 3456.589
[info]   CI (99.9%): [226095.972, 252716.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   778.936 ±(99.9%) 43.674 MB/sec [Average]
[info]   (min, avg, max) = (760.578, 778.936, 789.087), stdev = 11.342
[info]   CI (99.9%): [735.261, 822.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.002, 5120.002, 5120.002), stdev = 0.001
[info]   CI (99.9%): [5120.001, 5120.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.250 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.167), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.434 ±(99.9%) 1.626 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.434, 1.086), stdev = 0.422
[info]   CI (99.9%): [≈ 0, 2.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   789.666 ±(99.9%) 692.471 MB/sec [Average]
[info]   (min, avg, max) = (656.947, 789.666, 987.856), stdev = 179.832
[info]   CI (99.9%): [97.195, 1482.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5185.165 ±(99.9%) 4413.838 B/op [Average]
[info]   (min, avg, max) = (4262.610, 5185.165, 6453.023), stdev = 1146.260
[info]   CI (99.9%): [771.326, 9599.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Run progress: 50.22% complete, ETA 00:24:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12961.112 ops/s
[info] # Warmup Iteration   2: 24296.459 ops/s
[info] # Warmup Iteration   3: 24436.383 ops/s
[info] Iteration   1: 24233.117 ops/s
[info]                  ·gc.alloc.rate:                   1107.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              71912.205 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.842 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63575.625 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 23996.654 ops/s
[info]                  ·gc.alloc.rate:                   1096.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              71912.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.523 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64640.341 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 23999.758 ops/s
[info]                  ·gc.alloc.rate:                   1096.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              71912.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.670 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86755.205 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 24044.538 ops/s
[info]                  ·gc.alloc.rate:                   1098.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              71912.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      998.783 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65380.669 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 24281.481 ops/s
[info]                  ·gc.alloc.rate:                   1109.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              71912.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1003.733 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65066.459 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   24111.109 ±(99.9%) 523.190 ops/s [Average]
[info]   (min, avg, max) = (23996.654, 24111.109, 24281.481), stdev = 135.871
[info]   CI (99.9%): [23587.919, 24634.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1101.570 ±(99.9%) 23.961 MB/sec [Average]
[info]   (min, avg, max) = (1096.371, 1101.570, 1109.334), stdev = 6.223
[info]   CI (99.9%): [1077.609, 1125.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   71912.056 ±(99.9%) 0.320 B/op [Average]
[info]   (min, avg, max) = (71912.017, 71912.056, 71912.205), stdev = 0.083
[info]   CI (99.9%): [71911.736, 71912.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4.344 ±(99.9%) 6.760 B/op [Average]
[info]   (min, avg, max) = (2.725, 4.344, 6.746), stdev = 1.756
[info]   CI (99.9%): [≈ 0, 11.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1057.910 ±(99.9%) 571.210 MB/sec [Average]
[info]   (min, avg, max) = (978.842, 1057.910, 1322.670), stdev = 148.341
[info]   CI (99.9%): [486.700, 1629.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   69083.660 ±(99.9%) 38129.885 B/op [Average]
[info]   (min, avg, max) = (63575.625, 69083.660, 86755.205), stdev = 9902.210
[info]   CI (99.9%): [30953.775, 107213.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Run progress: 50.65% complete, ETA 00:24:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41599.356 ops/s
[info] # Warmup Iteration   2: 51818.900 ops/s
[info] # Warmup Iteration   3: 52247.807 ops/s
[info] Iteration   1: 51667.562 ops/s
[info]                  ·gc.alloc.rate:                   1095.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              33360.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1305.407 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39769.514 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 52048.622 ops/s
[info]                  ·gc.alloc.rate:                   1102.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              33360.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.942 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29700.623 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 52199.977 ops/s
[info]                  ·gc.alloc.rate:                   1106.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              33360.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1316.064 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39685.619 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 52148.640 ops/s
[info]                  ·gc.alloc.rate:                   1105.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              33360.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29964.771 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 50991.809 ops/s
[info]                  ·gc.alloc.rate:                   1081.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              33360.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.942 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30789.070 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   51811.322 ±(99.9%) 1938.193 ops/s [Average]
[info]   (min, avg, max) = (50991.809, 51811.322, 52199.977), stdev = 503.343
[info]   CI (99.9%): [49873.129, 53749.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1098.147 ±(99.9%) 40.102 MB/sec [Average]
[info]   (min, avg, max) = (1081.272, 1098.147, 1106.293), stdev = 10.414
[info]   CI (99.9%): [1058.045, 1138.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   33360.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (33360.008, 33360.008, 33360.008), stdev = 0.001
[info]   CI (99.9%): [33360.007, 33360.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.649 ±(99.9%) 5.100 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.649, 3.213), stdev = 1.325
[info]   CI (99.9%): [≈ 0, 6.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1118.819 ±(99.9%) 675.137 MB/sec [Average]
[info]   (min, avg, max) = (981.942, 1118.819, 1316.064), stdev = 175.331
[info]   CI (99.9%): [443.682, 1793.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   33981.919 ±(99.9%) 20256.155 B/op [Average]
[info]   (min, avg, max) = (29700.623, 33981.919, 39769.514), stdev = 5260.459
[info]   CI (99.9%): [13725.765, 54238.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.800, 5.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Run progress: 51.08% complete, ETA 00:24:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59805.380 ops/s
[info] # Warmup Iteration   2: 97167.907 ops/s
[info] # Warmup Iteration   3: 95924.664 ops/s
[info] Iteration   1: 97471.701 ops/s
[info]                  ·gc.alloc.rate:                   1334.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.277 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21275.268 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 97631.524 ops/s
[info]                  ·gc.alloc.rate:                   1337.286 MB/sec
[info]                  ·gc.alloc.rate.norm:              21559.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.135 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21412.440 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 96954.468 ops/s
[info]                  ·gc.alloc.rate:                   1327.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1335.911 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21691.469 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 96827.532 ops/s
[info]                  ·gc.alloc.rate:                   1326.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              21559.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.762 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21828.415 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 97684.885 ops/s
[info]                  ·gc.alloc.rate:                   1338.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.538 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21722.580 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   97314.022 ±(99.9%) 1527.159 ops/s [Average]
[info]   (min, avg, max) = (96827.532, 97314.022, 97684.885), stdev = 396.598
[info]   CI (99.9%): [95786.863, 98841.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1332.941 ±(99.9%) 21.448 MB/sec [Average]
[info]   (min, avg, max) = (1326.249, 1332.941, 1338.447), stdev = 5.570
[info]   CI (99.9%): [1311.493, 1354.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21560.004 ±(99.9%) 0.079 B/op [Average]
[info]   (min, avg, max) = (21559.984, 21560.004, 21560.025), stdev = 0.021
[info]   CI (99.9%): [21559.925, 21560.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.211 ±(99.9%) 1.723 B/op [Average]
[info]   (min, avg, max) = (0.677, 1.211, 1.678), stdev = 0.447
[info]   CI (99.9%): [≈ 0, 2.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1334.524 ±(99.9%) 47.336 MB/sec [Average]
[info]   (min, avg, max) = (1317.277, 1334.524, 1348.538), stdev = 12.293
[info]   CI (99.9%): [1287.188, 1381.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   21586.035 ±(99.9%) 893.193 B/op [Average]
[info]   (min, avg, max) = (21275.268, 21586.035, 21828.415), stdev = 231.959
[info]   CI (99.9%): [20692.842, 22479.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Run progress: 51.52% complete, ETA 00:23:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 227075.400 ops/s
[info] # Warmup Iteration   2: 246512.590 ops/s
[info] # Warmup Iteration   3: 244091.091 ops/s
[info] Iteration   1: 246838.277 ops/s
[info]                  ·gc.alloc.rate:                   786.887 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.315 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4170.926 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 246743.028 ops/s
[info]                  ·gc.alloc.rate:                   786.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.989 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6246.076 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 247643.629 ops/s
[info]                  ·gc.alloc.rate:                   789.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.601 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4153.120 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 246733.416 ops/s
[info]                  ·gc.alloc.rate:                   786.279 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.135 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6271.825 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 246163.503 ops/s
[info]                  ·gc.alloc.rate:                   784.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.690 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4203.759 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   246824.371 ±(99.9%) 2040.308 ops/s [Average]
[info]   (min, avg, max) = (246163.503, 246824.371, 247643.629), stdev = 529.861
[info]   CI (99.9%): [244784.063, 248864.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   786.705 ±(99.9%) 6.525 MB/sec [Average]
[info]   (min, avg, max) = (784.767, 786.705, 789.398), stdev = 1.695
[info]   CI (99.9%): [780.180, 793.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5016.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5016.002, 5016.002, 5016.002), stdev = 0.001
[info]   CI (99.9%): [5016.001, 5016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.505 ±(99.9%) 0.430 B/op [Average]
[info]   (min, avg, max) = (0.397, 0.505, 0.664), stdev = 0.112
[info]   CI (99.9%): [0.075, 0.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   785.546 ±(99.9%) 687.314 MB/sec [Average]
[info]   (min, avg, max) = (653.601, 785.546, 983.135), stdev = 178.493
[info]   CI (99.9%): [98.232, 1472.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5009.141 ±(99.9%) 4393.952 B/op [Average]
[info]   (min, avg, max) = (4153.120, 5009.141, 6271.825), stdev = 1141.095
[info]   CI (99.9%): [615.189, 9403.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 51.95% complete, ETA 00:23:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 252037.889 ops/s
[info] # Warmup Iteration   2: 263169.743 ops/s
[info] # Warmup Iteration   3: 274455.842 ops/s
[info] Iteration   1: 273143.945 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 273767.191 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 273635.998 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 273783.503 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 273703.732 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   273606.874 ±(99.9%) 1021.388 ops/s [Average]
[info]   (min, avg, max) = (273143.945, 273606.874, 273783.503), stdev = 265.251
[info]   CI (99.9%): [272585.486, 274628.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Run progress: 52.38% complete, ETA 00:23:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53806.393 ops/s
[info] # Warmup Iteration   2: 70999.458 ops/s
[info] # Warmup Iteration   3: 71337.465 ops/s
[info] Iteration   1: 72098.039 ops/s
[info]                  ·gc.alloc.rate:                   1069.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      970.211 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21172.190 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 70452.871 ops/s
[info]                  ·gc.alloc.rate:                   1045.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      973.389 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21742.092 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 70956.542 ops/s
[info]                  ·gc.alloc.rate:                   1052.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              23343.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1304.477 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28930.514 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 72293.496 ops/s
[info]                  ·gc.alloc.rate:                   1072.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.419 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21455.297 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 71787.220 ops/s
[info]                  ·gc.alloc.rate:                   1064.682 MB/sec
[info]                  ·gc.alloc.rate.norm:              23343.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.794 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21723.935 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   71517.634 ±(99.9%) 3019.783 ops/s [Average]
[info]   (min, avg, max) = (70452.871, 71517.634, 72293.496), stdev = 784.228
[info]   CI (99.9%): [68497.851, 74537.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1060.854 ±(99.9%) 44.654 MB/sec [Average]
[info]   (min, avg, max) = (1045.107, 1060.854, 1072.167), stdev = 11.596
[info]   CI (99.9%): [1016.200, 1105.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   23344.006 ±(99.9%) 0.107 B/op [Average]
[info]   (min, avg, max) = (23343.978, 23344.006, 23344.034), stdev = 0.028
[info]   CI (99.9%): [23343.898, 23344.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.146), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.748 ±(99.9%) 3.900 B/op [Average]
[info]   (min, avg, max) = (0.454, 1.748, 3.255), stdev = 1.013
[info]   CI (99.9%): [≈ 0, 5.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1044.858 ±(99.9%) 559.795 MB/sec [Average]
[info]   (min, avg, max) = (970.211, 1044.858, 1304.477), stdev = 145.377
[info]   CI (99.9%): [485.063, 1604.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   23004.806 ±(99.9%) 12786.885 B/op [Average]
[info]   (min, avg, max) = (21172.190, 23004.806, 28930.514), stdev = 3320.714
[info]   CI (99.9%): [10217.920, 35791.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Run progress: 52.81% complete, ETA 00:23:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51413.463 ops/s
[info] # Warmup Iteration   2: 71783.246 ops/s
[info] # Warmup Iteration   3: 73516.120 ops/s
[info] Iteration   1: 73695.808 ops/s
[info]                  ·gc.alloc.rate:                   1480.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              31624.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1625.552 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34719.222 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 73941.493 ops/s
[info]                  ·gc.alloc.rate:                   1485.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              31624.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1311.750 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27918.733 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 73329.539 ops/s
[info]                  ·gc.alloc.rate:                   1473.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              31624.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1652.484 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35465.826 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 73060.642 ops/s
[info]                  ·gc.alloc.rate:                   1467.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              31624.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1332.203 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28700.196 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 73152.302 ops/s
[info]                  ·gc.alloc.rate:                   1469.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              31624.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.179 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28814.593 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   73435.957 ±(99.9%) 1435.283 ops/s [Average]
[info]   (min, avg, max) = (73060.642, 73435.957, 73941.493), stdev = 372.739
[info]   CI (99.9%): [72000.674, 74871.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1475.524 ±(99.9%) 29.066 MB/sec [Average]
[info]   (min, avg, max) = (1467.920, 1475.524, 1485.840), stdev = 7.548
[info]   CI (99.9%): [1446.459, 1504.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31624.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (31624.006, 31624.006, 31624.006), stdev = 0.001
[info]   CI (99.9%): [31624.005, 31624.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.517 ±(99.9%) 1.957 B/op [Average]
[info]   (min, avg, max) = (0.896, 1.517, 2.234), stdev = 0.508
[info]   CI (99.9%): [≈ 0, 3.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1452.233 ±(99.9%) 658.742 MB/sec [Average]
[info]   (min, avg, max) = (1311.750, 1452.233, 1652.484), stdev = 171.073
[info]   CI (99.9%): [793.492, 2110.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   31123.714 ±(99.9%) 14050.762 B/op [Average]
[info]   (min, avg, max) = (27918.733, 31123.714, 35465.826), stdev = 3648.938
[info]   CI (99.9%): [17072.952, 45174.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Run progress: 53.25% complete, ETA 00:23:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50836.974 ops/s
[info] # Warmup Iteration   2: 85314.206 ops/s
[info] # Warmup Iteration   3: 87155.649 ops/s
[info] Iteration   1: 86491.605 ops/s
[info]                  ·gc.alloc.rate:                   976.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              17776.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      977.971 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17800.519 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 86375.281 ops/s
[info]                  ·gc.alloc.rate:                   975.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              17776.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.574 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17957.937 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 87552.597 ops/s
[info]                  ·gc.alloc.rate:                   988.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              17776.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17812.153 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 86801.769 ops/s
[info]                  ·gc.alloc.rate:                   980.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              17776.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.347 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18086.810 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 85463.499 ops/s
[info]                  ·gc.alloc.rate:                   965.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              17776.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18443.956 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   86536.950 ±(99.9%) 2908.547 ops/s [Average]
[info]   (min, avg, max) = (85463.499, 86536.950, 87552.597), stdev = 755.340
[info]   CI (99.9%): [83628.403, 89445.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   977.255 ±(99.9%) 32.710 MB/sec [Average]
[info]   (min, avg, max) = (965.168, 977.255, 988.686), stdev = 8.495
[info]   CI (99.9%): [944.545, 1009.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17776.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17776.005, 17776.005, 17776.005), stdev = 0.001
[info]   CI (99.9%): [17776.004, 17776.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.231 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.146), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.361 ±(99.9%) 4.183 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.361, 2.655), stdev = 1.086
[info]   CI (99.9%): [≈ 0, 5.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   990.605 ±(99.9%) 35.899 MB/sec [Average]
[info]   (min, avg, max) = (977.971, 990.605, 1001.435), stdev = 9.323
[info]   CI (99.9%): [954.706, 1026.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   18020.275 ±(99.9%) 1017.740 B/op [Average]
[info]   (min, avg, max) = (17800.519, 18020.275, 18443.956), stdev = 264.304
[info]   CI (99.9%): [17002.535, 19038.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Run progress: 53.68% complete, ETA 00:22:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94908.175 ops/s
[info] # Warmup Iteration   2: 109276.317 ops/s
[info] # Warmup Iteration   3: 108631.944 ops/s
[info] Iteration   1: 109009.209 ops/s
[info]                  ·gc.alloc.rate:                   1148.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1303.863 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18821.433 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 110086.607 ops/s
[info]                  ·gc.alloc.rate:                   1159.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14028.250 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 110058.575 ops/s
[info]                  ·gc.alloc.rate:                   1158.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18804.352 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 109936.096 ops/s
[info]                  ·gc.alloc.rate:                   1157.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.135 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14219.046 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 109883.555 ops/s
[info]                  ·gc.alloc.rate:                   1157.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.804 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19063.283 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   109794.808 ±(99.9%) 1721.763 ops/s [Average]
[info]   (min, avg, max) = (109009.209, 109794.808, 110086.607), stdev = 447.136
[info]   CI (99.9%): [108073.046, 111516.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1156.273 ±(99.9%) 17.437 MB/sec [Average]
[info]   (min, avg, max) = (1148.310, 1156.273, 1159.164), stdev = 4.528
[info]   CI (99.9%): [1138.836, 1173.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   16576.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16576.004, 16576.004, 16576.004), stdev = 0.001
[info]   CI (99.9%): [16576.003, 16576.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.104), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.013 ±(99.9%) 1.916 B/op [Average]
[info]   (min, avg, max) = (0.301, 1.013, 1.491), stdev = 0.498
[info]   CI (99.9%): [≈ 0, 2.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1184.714 ±(99.9%) 695.934 MB/sec [Average]
[info]   (min, avg, max) = (980.999, 1184.714, 1330.804), stdev = 180.732
[info]   CI (99.9%): [488.780, 1880.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   16987.273 ±(99.9%) 10077.112 B/op [Average]
[info]   (min, avg, max) = (14028.250, 16987.273, 19063.283), stdev = 2616.994
[info]   CI (99.9%): [6910.161, 27064.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Run progress: 54.11% complete, ETA 00:22:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23303.135 ops/s
[info] # Warmup Iteration   2: 44218.017 ops/s
[info] # Warmup Iteration   3: 43619.039 ops/s
[info] Iteration   1: 44675.915 ops/s
[info]                  ·gc.alloc.rate:                   2075.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              73112.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2000.131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70472.981 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 44472.768 ops/s
[info]                  ·gc.alloc.rate:                   2065.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              73112.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.302 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71360.407 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 44770.427 ops/s
[info]                  ·gc.alloc.rate:                   2079.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              73112.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.339 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71213.338 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 44805.427 ops/s
[info]                  ·gc.alloc.rate:                   2081.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              73112.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71391.712 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 44401.188 ops/s
[info]                  ·gc.alloc.rate:                   2062.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              73112.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.930 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72206.481 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   44625.145 ±(99.9%) 693.013 ops/s [Average]
[info]   (min, avg, max) = (44401.188, 44625.145, 44805.427), stdev = 179.973
[info]   CI (99.9%): [43932.132, 45318.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2072.747 ±(99.9%) 31.769 MB/sec [Average]
[info]   (min, avg, max) = (2062.475, 2072.747, 2081.099), stdev = 8.250
[info]   CI (99.9%): [2040.978, 2104.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73112.009 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (73112.009, 73112.009, 73112.010), stdev = 0.001
[info]   CI (99.9%): [73112.008, 73112.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.224 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.125), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.910 ±(99.9%) 7.888 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.910, 4.391), stdev = 2.048
[info]   CI (99.9%): [≈ 0, 9.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2022.167 ±(99.9%) 56.042 MB/sec [Average]
[info]   (min, avg, max) = (2000.131, 2022.167, 2036.930), stdev = 14.554
[info]   CI (99.9%): [1966.125, 2078.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   71328.984 ±(99.9%) 2374.507 B/op [Average]
[info]   (min, avg, max) = (70472.981, 71328.984, 72206.481), stdev = 616.652
[info]   CI (99.9%): [68954.476, 73703.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 8.000), stdev = 0.837
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Run progress: 54.55% complete, ETA 00:22:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88707.722 ops/s
[info] # Warmup Iteration   2: 114501.778 ops/s
[info] # Warmup Iteration   3: 114094.526 ops/s
[info] Iteration   1: 117244.581 ops/s
[info]                  ·gc.alloc.rate:                   807.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              10840.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.838 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      646.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8673.751 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 116540.815 ops/s
[info]                  ·gc.alloc.rate:                   802.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              10840.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      969.232 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13089.433 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 117620.624 ops/s
[info]                  ·gc.alloc.rate:                   810.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              10840.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.253 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8659.766 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 117154.417 ops/s
[info]                  ·gc.alloc.rate:                   806.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              10840.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      974.968 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13097.132 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 117601.953 ops/s
[info]                  ·gc.alloc.rate:                   809.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              10840.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.423 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8745.488 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   117232.478 ±(99.9%) 1691.445 ops/s [Average]
[info]   (min, avg, max) = (116540.815, 117232.478, 117620.624), stdev = 439.263
[info]   CI (99.9%): [115541.033, 118923.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   807.418 ±(99.9%) 11.682 MB/sec [Average]
[info]   (min, avg, max) = (802.669, 807.418, 810.210), stdev = 3.034
[info]   CI (99.9%): [795.736, 819.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10840.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10840.003, 10840.004, 10840.004), stdev = 0.001
[info]   CI (99.9%): [10840.003, 10840.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.125), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.119 ±(99.9%) 1.333 B/op [Average]
[info]   (min, avg, max) = (0.838, 1.119, 1.687), stdev = 0.346
[info]   CI (99.9%): [≈ 0, 2.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   778.177 ±(99.9%) 681.797 MB/sec [Average]
[info]   (min, avg, max) = (646.010, 778.177, 974.968), stdev = 177.060
[info]   CI (99.9%): [96.381, 1459.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10453.114 ±(99.9%) 9281.415 B/op [Average]
[info]   (min, avg, max) = (8659.766, 10453.114, 13097.132), stdev = 2410.354
[info]   CI (99.9%): [1171.699, 19734.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Run progress: 54.98% complete, ETA 00:22:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 111493.505 ops/s
[info] # Warmup Iteration   2: 157837.004 ops/s
[info] # Warmup Iteration   3: 163037.783 ops/s
[info] Iteration   1: 164406.298 ops/s
[info]                  ·gc.alloc.rate:                   243.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.736 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2448.826 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 164907.591 ops/s
[info]                  ·gc.alloc.rate:                   244.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.816 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2441.299 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 163562.941 ops/s
[info]                  ·gc.alloc.rate:                   242.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.200 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2461.296 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 164580.495 ops/s
[info]                  ·gc.alloc.rate:                   244.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.593 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.353 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3083.166 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 166281.733 ops/s
[info]                  ·gc.alloc.rate:      246.772 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   164747.812 ±(99.9%) 3815.340 ops/s [Average]
[info]   (min, avg, max) = (163562.941, 164747.812, 166281.733), stdev = 990.832
[info]   CI (99.9%): [160932.472, 168563.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   244.499 ±(99.9%) 5.668 MB/sec [Average]
[info]   (min, avg, max) = (242.752, 244.499, 246.772), stdev = 1.472
[info]   CI (99.9%): [238.831, 250.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2336.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2336.002, 2336.003, 2336.003), stdev = 0.001
[info]   CI (99.9%): [2336.002, 2336.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.280 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.167), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.359 ±(99.9%) 2.677 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.359, 1.593), stdev = 0.695
[info]   CI (99.9%): [≈ 0, 3.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   217.936 ±(99.9%) 482.079 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 217.936, 322.353), stdev = 125.194
[info]   CI (99.9%): [≈ 0, 700.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2086.917 ±(99.9%) 4614.535 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2086.917, 3083.166), stdev = 1198.380
[info]   CI (99.9%): [≈ 0, 6701.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Run progress: 55.41% complete, ETA 00:22:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 706893.780 ops/s
[info] # Warmup Iteration   2: 778582.714 ops/s
[info] # Warmup Iteration   3: 789591.381 ops/s
[info] Iteration   1: 799219.866 ops/s
[info]                  ·gc.alloc.rate:                   991.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      977.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1924.397 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 803037.126 ops/s
[info]                  ·gc.alloc.rate:                   995.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      977.849 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1916.619 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 804847.027 ops/s
[info]                  ·gc.alloc.rate:                   998.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.274 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1920.777 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 803292.568 ops/s
[info]                  ·gc.alloc.rate:                   996.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      986.820 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1933.626 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 800919.899 ops/s
[info]                  ·gc.alloc.rate:                   993.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.177 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1951.106 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   802263.297 ±(99.9%) 8480.396 ops/s [Average]
[info]   (min, avg, max) = (799219.866, 802263.297, 804847.027), stdev = 2202.332
[info]   CI (99.9%): [793782.901, 810743.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   995.005 ±(99.9%) 10.578 MB/sec [Average]
[info]   (min, avg, max) = (991.055, 995.005, 998.242), stdev = 2.747
[info]   CI (99.9%): [984.427, 1005.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.083, 0.125), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.163 ±(99.9%) 0.333 B/op [Average]
[info]   (min, avg, max) = (0.041, 0.163, 0.245), stdev = 0.086
[info]   CI (99.9%): [≈ 0, 0.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   983.432 ±(99.9%) 25.817 MB/sec [Average]
[info]   (min, avg, max) = (977.041, 983.432, 993.177), stdev = 6.704
[info]   CI (99.9%): [957.615, 1009.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1929.305 ±(99.9%) 52.788 B/op [Average]
[info]   (min, avg, max) = (1916.619, 1929.305, 1951.106), stdev = 13.709
[info]   CI (99.9%): [1876.517, 1982.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 55.84% complete, ETA 00:21:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 806095.852 ops/s
[info] # Warmup Iteration   2: 845034.593 ops/s
[info] # Warmup Iteration   3: 850360.266 ops/s
[info] Iteration   1: 858686.550 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 853852.231 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 857338.069 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 855815.205 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 858108.873 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   856760.185 ±(99.9%) 7509.490 ops/s [Average]
[info]   (min, avg, max) = (853852.231, 856760.185, 858686.550), stdev = 1950.191
[info]   CI (99.9%): [849250.695, 864269.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Run progress: 56.28% complete, ETA 00:21:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 154451.372 ops/s
[info] # Warmup Iteration   2: 193394.710 ops/s
[info] # Warmup Iteration   3: 201388.007 ops/s
[info] Iteration   1: 202725.821 ops/s
[info]                  ·gc.alloc.rate:                   662.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      644.624 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5003.488 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 201672.563 ops/s
[info]                  ·gc.alloc.rate:                   659.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      642.078 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5011.439 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 197153.825 ops/s
[info]                  ·gc.alloc.rate:                   644.496 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      642.584 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5128.740 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 197639.301 ops/s
[info]                  ·gc.alloc.rate:                   645.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      643.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5124.502 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 200980.533 ops/s
[info]                  ·gc.alloc.rate:                   656.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      645.439 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5054.799 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   200034.408 ±(99.9%) 9598.982 ops/s [Average]
[info]   (min, avg, max) = (197153.825, 200034.408, 202725.821), stdev = 2492.825
[info]   CI (99.9%): [190435.427, 209633.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   653.800 ±(99.9%) 31.388 MB/sec [Average]
[info]   (min, avg, max) = (644.496, 653.800, 662.728), stdev = 8.151
[info]   CI (99.9%): [622.412, 685.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5144.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5144.002, 5144.002, 5144.002), stdev = 0.001
[info]   CI (99.9%): [5144.002, 5144.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.104), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.457 ±(99.9%) 1.421 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.457, 0.812), stdev = 0.369
[info]   CI (99.9%): [≈ 0, 1.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   643.632 ±(99.9%) 5.378 MB/sec [Average]
[info]   (min, avg, max) = (642.078, 643.632, 645.439), stdev = 1.397
[info]   CI (99.9%): [638.254, 649.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5064.593 ±(99.9%) 230.709 B/op [Average]
[info]   (min, avg, max) = (5003.488, 5064.593, 5128.740), stdev = 59.914
[info]   CI (99.9%): [4833.884, 5295.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Run progress: 56.71% complete, ETA 00:21:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 112350.140 ops/s
[info] # Warmup Iteration   2: 185958.538 ops/s
[info] # Warmup Iteration   3: 187162.135 ops/s
[info] Iteration   1: 182965.347 ops/s
[info]                  ·gc.alloc.rate:                   972.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      984.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8463.374 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 186579.756 ops/s
[info]                  ·gc.alloc.rate:                   992.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.538 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8355.657 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 184917.644 ops/s
[info]                  ·gc.alloc.rate:                   983.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995.415 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8473.679 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 184063.779 ops/s
[info]                  ·gc.alloc.rate:                   978.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      666.512 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5698.659 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 186996.884 ops/s
[info]                  ·gc.alloc.rate:                   994.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.876 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1003.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8443.237 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   185104.682 ±(99.9%) 6515.299 ops/s [Average]
[info]   (min, avg, max) = (182965.347, 185104.682, 186996.884), stdev = 1692.002
[info]   CI (99.9%): [178589.383, 191619.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   984.157 ±(99.9%) 34.245 MB/sec [Average]
[info]   (min, avg, max) = (972.970, 984.157, 994.094), stdev = 8.893
[info]   CI (99.9%): [949.912, 1018.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8368.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8368.002, 8368.002, 8368.002), stdev = 0.001
[info]   CI (99.9%): [8368.002, 8368.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.601 ±(99.9%) 1.025 B/op [Average]
[info]   (min, avg, max) = (0.177, 0.601, 0.876), stdev = 0.266
[info]   CI (99.9%): [≈ 0, 1.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   927.911 ±(99.9%) 563.314 MB/sec [Average]
[info]   (min, avg, max) = (666.512, 927.911, 1003.032), stdev = 146.291
[info]   CI (99.9%): [364.597, 1491.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7886.921 ±(99.9%) 4713.806 B/op [Average]
[info]   (min, avg, max) = (5698.659, 7886.921, 8473.679), stdev = 1224.161
[info]   CI (99.9%): [3173.115, 12600.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Run progress: 57.14% complete, ETA 00:21:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 339043.212 ops/s
[info] # Warmup Iteration   2: 354844.905 ops/s
[info] # Warmup Iteration   3: 356758.810 ops/s
[info] Iteration   1: 357836.668 ops/s
[info]                  ·gc.alloc.rate:                   694.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      663.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2916.772 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 355681.626 ops/s
[info]                  ·gc.alloc.rate:                   690.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.139 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2929.947 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 352892.157 ops/s
[info]                  ·gc.alloc.rate:                   685.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.335 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2953.158 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 355888.472 ops/s
[info]                  ·gc.alloc.rate:                   691.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.576 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4392.598 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 356361.091 ops/s
[info]                  ·gc.alloc.rate:                   692.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      663.518 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2930.093 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   355732.003 ±(99.9%) 6919.682 ops/s [Average]
[info]   (min, avg, max) = (352892.157, 355732.003, 357836.668), stdev = 1797.019
[info]   CI (99.9%): [348812.321, 362651.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   690.792 ±(99.9%) 13.024 MB/sec [Average]
[info]   (min, avg, max) = (685.401, 690.792, 694.656), stdev = 3.382
[info]   CI (99.9%): [677.768, 703.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3056.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3056.001, 3056.001, 3056.001), stdev = 0.001
[info]   CI (99.9%): [3056.001, 3056.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.073 ±(99.9%) 0.220 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.073, 0.159), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.324 ±(99.9%) 0.967 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.324, 0.699), stdev = 0.251
[info]   CI (99.9%): [≈ 0, 1.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   728.915 ±(99.9%) 569.706 MB/sec [Average]
[info]   (min, avg, max) = (662.139, 728.915, 993.576), stdev = 147.951
[info]   CI (99.9%): [159.210, 1298.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3224.514 ±(99.9%) 2514.897 B/op [Average]
[info]   (min, avg, max) = (2916.772, 3224.514, 4392.598), stdev = 653.111
[info]   CI (99.9%): [709.617, 5739.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Run progress: 57.58% complete, ETA 00:20:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 209961.130 ops/s
[info] # Warmup Iteration   2: 302638.845 ops/s
[info] # Warmup Iteration   3: 312923.604 ops/s
[info] Iteration   1: 312115.476 ops/s
[info]                  ·gc.alloc.rate:                   307.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.719 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1289.869 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 312140.411 ops/s
[info]                  ·gc.alloc.rate:                   307.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.823 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1289.803 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 313352.167 ops/s
[info]                  ·gc.alloc.rate:                   308.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      320.362 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1609.364 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 312838.106 ops/s
[info]                  ·gc.alloc.rate:                   308.439 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      320.365 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1612.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 312448.052 ops/s
[info]                  ·gc.alloc.rate:                   308.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.864 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1625.769 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   312578.843 ±(99.9%) 2009.435 ops/s [Average]
[info]   (min, avg, max) = (312115.476, 312578.843, 313352.167), stdev = 521.844
[info]   CI (99.9%): [310569.407, 314588.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   308.222 ±(99.9%) 1.934 MB/sec [Average]
[info]   (min, avg, max) = (307.687, 308.222, 308.943), stdev = 0.502
[info]   CI (99.9%): [306.288, 310.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1552.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1552.001, 1552.001, 1552.001), stdev = 0.001
[info]   CI (99.9%): [1552.001, 1552.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.126 ±(99.9%) 0.526 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.126, 0.314), stdev = 0.137
[info]   CI (99.9%): [≈ 0, 0.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   295.026 ±(99.9%) 138.045 MB/sec [Average]
[info]   (min, avg, max) = (255.719, 295.026, 322.864), stdev = 35.850
[info]   CI (99.9%): [156.981, 433.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1485.363 ±(99.9%) 687.723 B/op [Average]
[info]   (min, avg, max) = (1289.803, 1485.363, 1625.769), stdev = 178.599
[info]   CI (99.9%): [797.640, 2173.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Run progress: 58.01% complete, ETA 00:20:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 847443.950 ops/s
[info] # Warmup Iteration   2: 949404.698 ops/s
[info] # Warmup Iteration   3: 960762.701 ops/s
[info] Iteration   1: 955301.906 ops/s
[info]                  ·gc.alloc.rate:                   708.873 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.762 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1080.490 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 961418.725 ops/s
[info]                  ·gc.alloc.rate:                   713.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.796 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1604.118 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 969049.012 ops/s
[info]                  ·gc.alloc.rate:                   719.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.871 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1060.287 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 965291.203 ops/s
[info]                  ·gc.alloc.rate:                   716.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.157 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1066.613 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 965491.985 ops/s
[info]                  ·gc.alloc.rate:                   716.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.190 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1069.640 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   963310.566 ±(99.9%) 20131.261 ops/s [Average]
[info]   (min, avg, max) = (955301.906, 963310.566, 969049.012), stdev = 5228.025
[info]   CI (99.9%): [943179.305, 983441.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   714.871 ±(99.9%) 15.123 MB/sec [Average]
[info]   (min, avg, max) = (708.873, 714.871, 719.195), stdev = 3.927
[info]   CI (99.9%): [699.748, 729.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1168.000, 1168.000, 1168.000), stdev = 0.001
[info]   CI (99.9%): [1168.000, 1168.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.087, 0.104), stdev = 0.009
[info]   CI (99.9%): [0.052, 0.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.143 ±(99.9%) 0.059 B/op [Average]
[info]   (min, avg, max) = (0.135, 0.143, 0.170), stdev = 0.015
[info]   CI (99.9%): [0.084, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   719.755 ±(99.9%) 559.781 MB/sec [Average]
[info]   (min, avg, max) = (652.871, 719.755, 979.796), stdev = 145.373
[info]   CI (99.9%): [159.974, 1279.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1176.229 ±(99.9%) 921.492 B/op [Average]
[info]   (min, avg, max) = (1060.287, 1176.229, 1604.118), stdev = 239.308
[info]   CI (99.9%): [254.738, 2097.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 58.44% complete, ETA 00:20:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 938878.962 ops/s
[info] # Warmup Iteration   2: 1025118.395 ops/s
[info] # Warmup Iteration   3: 1041782.528 ops/s
[info] Iteration   1: 1041898.887 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1041698.491 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1041932.135 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1039443.751 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1044978.597 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1041990.372 ±(99.9%) 7582.867 ops/s [Average]
[info]   (min, avg, max) = (1039443.751, 1041990.372, 1044978.597), stdev = 1969.247
[info]   CI (99.9%): [1034407.505, 1049573.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce
[info] # Run progress: 58.87% complete, ETA 00:20:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 610420.572 ops/s
[info] # Warmup Iteration   2: 897563.904 ops/s
[info] # Warmup Iteration   3: 921278.007 ops/s
[info] Iteration   1: 921407.386 ops/s
[info]                  ·gc.alloc.rate:                   2992.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              5112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3009.189 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5140.748 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 918599.123 ops/s
[info]                  ·gc.alloc.rate:                   2983.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              5112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3036.473 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5203.242 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 917183.130 ops/s
[info]                  ·gc.alloc.rate:                   2978.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              5112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3050.550 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5235.319 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 925186.361 ops/s
[info]                  ·gc.alloc.rate:                   3005.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              5112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3056.279 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5197.926 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 924959.467 ops/s
[info]                  ·gc.alloc.rate:                   3004.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              5112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2723.082 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4633.743 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce":
[info]   921467.093 ±(99.9%) 13964.994 ops/s [Average]
[info]   (min, avg, max) = (917183.130, 921467.093, 925186.361), stdev = 3626.665
[info]   CI (99.9%): [907502.099, 935432.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate":
[info]   2992.835 ±(99.9%) 46.655 MB/sec [Average]
[info]   (min, avg, max) = (2978.694, 2992.835, 3005.756), stdev = 12.116
[info]   CI (99.9%): [2946.180, 3039.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5112.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5112.000, 5112.000, 5112.000), stdev = 0.001
[info]   CI (99.9%): [5112.000, 5112.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.133 ±(99.9%) 0.121 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.133, 0.167), stdev = 0.032
[info]   CI (99.9%): [0.012, 0.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.227 ±(99.9%) 0.204 B/op [Average]
[info]   (min, avg, max) = (0.178, 0.227, 0.283), stdev = 0.053
[info]   CI (99.9%): [0.023, 0.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2975.115 ±(99.9%) 547.023 MB/sec [Average]
[info]   (min, avg, max) = (2723.082, 2975.115, 3056.279), stdev = 142.060
[info]   CI (99.9%): [2428.092, 3522.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5082.196 ±(99.9%) 974.202 B/op [Average]
[info]   (min, avg, max) = (4633.743, 5082.196, 5235.319), stdev = 252.997
[info]   CI (99.9%): [4107.994, 6056.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.count":
[info]   44.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.200, 9.000), stdev = 0.837
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala
[info] # Run progress: 59.31% complete, ETA 00:20:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 745190.678 ops/s
[info] # Warmup Iteration   2: 1779613.213 ops/s
[info] # Warmup Iteration   3: 1777014.321 ops/s
[info] Iteration   1: 1768511.494 ops/s
[info]                  ·gc.alloc.rate:                   1662.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1652.047 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1470.504 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1781676.549 ops/s
[info]                  ·gc.alloc.rate:                   1675.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1667.097 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1472.577 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1803568.254 ops/s
[info]                  ·gc.alloc.rate:                   1695.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1464.807 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1798351.708 ops/s
[info]                  ·gc.alloc.rate:                   1690.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.868 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1475.543 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1789344.957 ops/s
[info]                  ·gc.alloc.rate:                   1682.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.849 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1487.951 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala":
[info]   1788290.593 ±(99.9%) 53449.897 ops/s [Average]
[info]   (min, avg, max) = (1768511.494, 1788290.593, 1803568.254), stdev = 13880.769
[info]   CI (99.9%): [1734840.695, 1841740.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1681.545 ±(99.9%) 50.311 MB/sec [Average]
[info]   (min, avg, max) = (1662.715, 1681.545, 1695.741), stdev = 13.066
[info]   CI (99.9%): [1631.234, 1731.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1480.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1480.000, 1480.000, 1480.000), stdev = 0.001
[info]   CI (99.9%): [1480.000, 1480.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.125), stdev = 0.025
[info]   CI (99.9%): [0.006, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.092 ±(99.9%) 0.088 B/op [Average]
[info]   (min, avg, max) = (0.054, 0.092, 0.111), stdev = 0.023
[info]   CI (99.9%): [0.003, 0.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1675.039 ±(99.9%) 60.957 MB/sec [Average]
[info]   (min, avg, max) = (1652.047, 1675.039, 1691.849), stdev = 15.830
[info]   CI (99.9%): [1614.082, 1735.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1474.276 ±(99.9%) 33.089 B/op [Average]
[info]   (min, avg, max) = (1464.807, 1474.276, 1487.951), stdev = 8.593
[info]   CI (99.9%): [1441.187, 1507.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 1.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala
[info] # Run progress: 59.74% complete, ETA 00:19:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7908230.993 ops/s
[info] # Warmup Iteration   2: 8216034.050 ops/s
[info] # Warmup Iteration   3: 8409998.843 ops/s
[info] Iteration   1: 8508171.654 ops/s
[info]                  ·gc.alloc.rate:                   2118.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1995.268 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 369.173 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 8460121.185 ops/s
[info]                  ·gc.alloc.rate:                   2106.887 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2010.139 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 374.000 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 8568455.292 ops/s
[info]                  ·gc.alloc.rate:                   2134.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2360.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 433.577 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 8597528.564 ops/s
[info]                  ·gc.alloc.rate:                   2141.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.605 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 371.869 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 8436905.494 ops/s
[info]                  ·gc.alloc.rate:                   2101.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.588 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 379.754 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala":
[info]   8514236.438 ±(99.9%) 264145.329 ops/s [Average]
[info]   (min, avg, max) = (8436905.494, 8514236.438, 8597528.564), stdev = 68597.703
[info]   CI (99.9%): [8250091.109, 8778381.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2120.479 ±(99.9%) 66.366 MB/sec [Average]
[info]   (min, avg, max) = (2101.232, 2120.479, 2141.586), stdev = 17.235
[info]   CI (99.9%): [2054.113, 2186.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.096, 0.104), stdev = 0.011
[info]   CI (99.9%): [0.052, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.018 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (0.015, 0.018, 0.019), stdev = 0.002
[info]   CI (99.9%): [0.010, 0.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   2086.599 ±(99.9%) 592.733 MB/sec [Average]
[info]   (min, avg, max) = (1995.268, 2086.599, 2360.396), stdev = 153.931
[info]   CI (99.9%): [1493.867, 2679.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   385.674 ±(99.9%) 104.198 B/op [Average]
[info]   (min, avg, max) = (369.173, 385.674, 433.577), stdev = 27.060
[info]   CI (99.9%): [281.476, 489.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson
[info] # Run progress: 60.17% complete, ETA 00:19:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 77281.593 ops/s
[info] # Warmup Iteration   2: 326452.335 ops/s
[info] # Warmup Iteration   3: 325286.237 ops/s
[info] Iteration   1: 328406.899 ops/s
[info]                  ·gc.alloc.rate:                   1937.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              9288.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1987.648 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9528.040 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 327478.375 ops/s
[info]                  ·gc.alloc.rate:                   1932.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              9288.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2006.806 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9646.074 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 326319.619 ops/s
[info]                  ·gc.alloc.rate:                   1925.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              9288.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.538 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8115.744 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 327659.543 ops/s
[info]                  ·gc.alloc.rate:                   1933.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              9288.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.234 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9743.316 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 328623.956 ops/s
[info]                  ·gc.alloc.rate:                   1939.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              9288.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.595 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9740.291 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson":
[info]   327697.678 ±(99.9%) 3502.594 ops/s [Average]
[info]   (min, avg, max) = (326319.619, 327697.678, 328623.956), stdev = 909.612
[info]   CI (99.9%): [324195.085, 331200.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1933.614 ±(99.9%) 20.462 MB/sec [Average]
[info]   (min, avg, max) = (1925.568, 1933.614, 1939.165), stdev = 5.314
[info]   CI (99.9%): [1913.152, 1954.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   9288.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9288.001, 9288.001, 9288.001), stdev = 0.001
[info]   CI (99.9%): [9288.001, 9288.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.460 ±(99.9%) 0.844 B/op [Average]
[info]   (min, avg, max) = (0.299, 0.460, 0.700), stdev = 0.219
[info]   CI (99.9%): [≈ 0, 1.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1947.764 ±(99.9%) 575.229 MB/sec [Average]
[info]   (min, avg, max) = (1682.538, 1947.764, 2033.595), stdev = 149.385
[info]   CI (99.9%): [1372.535, 2522.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9354.693 ±(99.9%) 2688.332 B/op [Average]
[info]   (min, avg, max) = (8115.744, 9354.693, 9743.316), stdev = 698.151
[info]   CI (99.9%): [6666.362, 12043.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 8.000), stdev = 0.837
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce
[info] # Run progress: 60.61% complete, ETA 00:19:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 663882.069 ops/s
[info] # Warmup Iteration   2: 1083306.692 ops/s
[info] # Warmup Iteration   3: 1107935.608 ops/s
[info] Iteration   1: 1109364.991 ops/s
[info]                  ·gc.alloc.rate:                   2430.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              3448.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2320.462 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3291.959 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1103066.475 ops/s
[info]                  ·gc.alloc.rate:                   2416.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              3448.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2679.914 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3823.218 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 1101528.664 ops/s
[info]                  ·gc.alloc.rate:                   2412.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              3448.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2361.832 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3375.067 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1090044.172 ops/s
[info]                  ·gc.alloc.rate:                   2388.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              3448.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2371.991 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3423.975 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1109922.204 ops/s
[info]                  ·gc.alloc.rate:                   2431.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              3448.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2377.280 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3371.223 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce":
[info]   1102785.301 ±(99.9%) 30938.568 ops/s [Average]
[info]   (min, avg, max) = (1090044.172, 1102785.301, 1109922.204), stdev = 8034.648
[info]   CI (99.9%): [1071846.733, 1133723.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate":
[info]   2416.057 ±(99.9%) 66.867 MB/sec [Average]
[info]   (min, avg, max) = (2388.635, 2416.057, 2431.421), stdev = 17.365
[info]   CI (99.9%): [2349.189, 2482.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3448.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3448.000, 3448.000, 3448.000), stdev = 0.001
[info]   CI (99.9%): [3448.000, 3448.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.167), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.149 ±(99.9%) 0.198 B/op [Average]
[info]   (min, avg, max) = (0.118, 0.149, 0.238), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2422.296 ±(99.9%) 561.158 MB/sec [Average]
[info]   (min, avg, max) = (2320.462, 2422.296, 2679.914), stdev = 145.731
[info]   CI (99.9%): [1861.138, 2983.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3457.088 ±(99.9%) 808.901 B/op [Average]
[info]   (min, avg, max) = (3291.959, 3457.088, 3823.218), stdev = 210.069
[info]   CI (99.9%): [2648.187, 4265.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.count":
[info]   36.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 9.000), stdev = 1.225
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala
[info] # Run progress: 61.04% complete, ETA 00:19:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_250ba263/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1530901.323 ops/s
[info] # Warmup Iteration   2: 3718268.401 ops/s
[info] # Warmup Iteration   3: 3812310.286 ops/s
[info] Iteration   1: 3743549.637 ops/s
[info]                  ·gc.alloc.rate:                   2130.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2327.991 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 978.951 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 3742271.964 ops/s
[info]                  ·gc.alloc.rate:                   2130.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.596 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 846.937 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 3762904.995 ops/s
[info]                  ·gc.alloc.rate:                   2141.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2362.392 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 988.251 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 3770255.257 ops/s
[info]                  ·gc.alloc.rate:                   2146.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.954 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 848.685 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 3767762.805 ops/s
[info]                  ·gc.alloc.rate:                   2144.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.855 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 850.919 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala":
[info]   3757348.932 ±(99.9%) 51791.779 ops/s [Average]
[info]   (min, avg, max) = (3742271.964, 3757348.932, 3770255.257), stdev = 13450.161
[info]   CI (99.9%): [3705557.152, 3809140.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2138.780 ±(99.9%) 29.794 MB/sec [Average]
[info]   (min, avg, max) = (2130.243, 2138.780, 2146.292), stdev = 7.738
[info]   CI (99.9%): [2108.985, 2168.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   896.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (896.000, 896.000, 896.000), stdev = 0.001
[info]   CI (99.9%): [896.000, 896.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.125), stdev = 0.017
[info]   CI (99.9%): [0.041, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.045 ±(99.9%) 0.028 B/op [Average]
[info]   (min, avg, max) = (0.035, 0.045, 0.053), stdev = 0.007
[info]   CI (99.9%): [0.017, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2154.758 ±(99.9%) 671.895 MB/sec [Average]
[info]   (min, avg, max) = (2013.596, 2154.758, 2362.392), stdev = 174.489
[info]   CI (99.9%): [1482.862, 2826.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   902.749 ±(99.9%) 284.541 B/op [Average]
[info]   (min, avg, max) = (846.937, 902.749, 988.251), stdev = 73.894
[info]   CI (99.9%): [618.208, 1187.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala
[info] # Run progress: 61.47% complete, ETA 00:19:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6352381.331 ops/s
[info] # Warmup Iteration   2: 19202204.916 ops/s
[info] # Warmup Iteration   3: 19750172.214 ops/s
[info] Iteration   1: 19919922.579 ops/s
[info]                  ·gc.alloc.rate:                   911.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.586 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77.473 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 19913574.572 ops/s
[info]                  ·gc.alloc.rate:                   910.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.707 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77.446 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 19906897.060 ops/s
[info]                  ·gc.alloc.rate:                   910.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51.771 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 19906710.937 ops/s
[info]                  ·gc.alloc.rate:                   910.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77.894 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 19680535.997 ops/s
[info]                  ·gc.alloc.rate:                   900.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.290 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79.110 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala":
[info]   19865528.229 ±(99.9%) 398763.499 ops/s [Average]
[info]   (min, avg, max) = (19680535.997, 19865528.229, 19919922.579), stdev = 103557.614
[info]   CI (99.9%): [19466764.730, 20264291.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   908.719 ±(99.9%) 18.005 MB/sec [Average]
[info]   (min, avg, max) = (900.374, 908.719, 911.317), stdev = 4.676
[info]   CI (99.9%): [890.714, 926.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.006 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.006, 0.008), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   917.880 ±(99.9%) 566.737 MB/sec [Average]
[info]   (min, avg, max) = (654.687, 917.880, 989.290), stdev = 147.180
[info]   CI (99.9%): [351.143, 1484.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   72.739 ±(99.9%) 45.211 B/op [Average]
[info]   (min, avg, max) = (51.771, 72.739, 79.110), stdev = 11.741
[info]   CI (99.9%): [27.528, 117.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson
[info] # Run progress: 61.90% complete, ETA 00:18:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 136011.610 ops/s
[info] # Warmup Iteration   2: 457496.578 ops/s
[info] # Warmup Iteration   3: 464982.509 ops/s
[info] Iteration   1: 465702.837 ops/s
[info]                  ·gc.alloc.rate:                   1628.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              5504.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1648.108 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5570.730 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 463793.745 ops/s
[info]                  ·gc.alloc.rate:                   1621.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              5504.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.079 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5647.884 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 460910.411 ops/s
[info]                  ·gc.alloc.rate:                   1611.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              5504.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.284 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1674.994 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5719.749 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 465131.559 ops/s
[info]                  ·gc.alloc.rate:                   1626.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              5504.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5699.456 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 463404.997 ops/s
[info]                  ·gc.alloc.rate:                   1620.725 MB/sec
[info]                  ·gc.alloc.rate.norm:              5504.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.386 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4589.323 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson":
[info]   463788.710 ±(99.9%) 7177.860 ops/s [Average]
[info]   (min, avg, max) = (460910.411, 463788.710, 465702.837), stdev = 1864.067
[info]   CI (99.9%): [456610.850, 470966.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1621.780 ±(99.9%) 24.682 MB/sec [Average]
[info]   (min, avg, max) = (1611.813, 1621.780, 1628.366), stdev = 6.410
[info]   CI (99.9%): [1597.098, 1646.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5504.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5504.001, 5504.001, 5504.001), stdev = 0.001
[info]   CI (99.9%): [5504.001, 5504.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.125), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.283 ±(99.9%) 0.334 B/op [Average]
[info]   (min, avg, max) = (0.211, 0.283, 0.424), stdev = 0.087
[info]   CI (99.9%): [≈ 0, 0.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1604.526 ±(99.9%) 547.338 MB/sec [Average]
[info]   (min, avg, max) = (1351.386, 1604.526, 1684.062), stdev = 142.142
[info]   CI (99.9%): [1057.188, 2151.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5445.429 ±(99.9%) 1856.102 B/op [Average]
[info]   (min, avg, max) = (4589.323, 5445.429, 5719.749), stdev = 482.024
[info]   CI (99.9%): [3589.327, 7301.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala
[info] # Run progress: 62.34% complete, ETA 00:18:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1109883.760 ops/s
[info] # Warmup Iteration   2: 2111647.858 ops/s
[info] # Warmup Iteration   3: 2111103.336 ops/s
[info] Iteration   1: 2134159.559 ops/s
[info]                  ·gc.alloc.rate:                   1355.733 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.695 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 969.730 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2126302.116 ops/s
[info]                  ·gc.alloc.rate:                   1351.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 981.231 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2143358.685 ops/s
[info]                  ·gc.alloc.rate:                   1362.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334.491 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 979.781 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2141323.547 ops/s
[info]                  ·gc.alloc.rate:                   1360.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.457 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 986.104 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2115273.893 ops/s
[info]                  ·gc.alloc.rate:                   1343.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.904 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1002.208 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala":
[info]   2132083.560 ±(99.9%) 44441.401 ops/s [Average]
[info]   (min, avg, max) = (2115273.893, 2132083.560, 2143358.685), stdev = 11541.291
[info]   CI (99.9%): [2087642.159, 2176524.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1354.630 ±(99.9%) 28.278 MB/sec [Average]
[info]   (min, avg, max) = (1343.937, 1354.630, 1362.031), stdev = 7.344
[info]   CI (99.9%): [1326.352, 1382.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1000.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1000.000, 1000.000, 1000.000), stdev = 0.001
[info]   CI (99.9%): [1000.000, 1000.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.146), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.065 ±(99.9%) 0.098 B/op [Average]
[info]   (min, avg, max) = (0.046, 0.065, 0.108), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1332.655 ±(99.9%) 49.253 MB/sec [Average]
[info]   (min, avg, max) = (1314.695, 1332.655, 1346.904), stdev = 12.791
[info]   CI (99.9%): [1283.403, 1381.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   983.811 ±(99.9%) 45.759 B/op [Average]
[info]   (min, avg, max) = (969.730, 983.811, 1002.208), stdev = 11.883
[info]   CI (99.9%): [938.052, 1029.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala
[info] # Run progress: 62.77% complete, ETA 00:18:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8744714.632 ops/s
[info] # Warmup Iteration   2: 4971934.992 ops/s
[info] # Warmup Iteration   3: 5273474.079 ops/s
[info] Iteration   1: 5317615.070 ops/s
[info]                  ·gc.alloc.rate:                   702.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.290 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 194.207 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 5272950.362 ops/s
[info]                  ·gc.alloc.rate:                   696.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 195.850 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 5196589.924 ops/s
[info]                  ·gc.alloc.rate:                   686.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 199.032 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 5254979.121 ops/s
[info]                  ·gc.alloc.rate:                   694.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.157 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 197.124 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 5310171.923 ops/s
[info]                  ·gc.alloc.rate:                   701.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.908 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 195.559 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala":
[info]   5270461.280 ±(99.9%) 187689.614 ops/s [Average]
[info]   (min, avg, max) = (5196589.924, 5270461.280, 5317615.070), stdev = 48742.397
[info]   CI (99.9%): [5082771.666, 5458150.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   696.525 ±(99.9%) 25.229 MB/sec [Average]
[info]   (min, avg, max) = (686.625, 696.525, 702.901), stdev = 6.552
[info]   CI (99.9%): [671.296, 721.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   208.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (208.000, 208.000, 208.000), stdev = 0.001
[info]   CI (99.9%): [208.000, 208.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.179 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.125), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.019 ±(99.9%) 0.053 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.037), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   657.483 ±(99.9%) 6.105 MB/sec [Average]
[info]   (min, avg, max) = (656.040, 657.483, 659.908), stdev = 1.585
[info]   CI (99.9%): [651.378, 663.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   196.354 ±(99.9%) 7.011 B/op [Average]
[info]   (min, avg, max) = (194.207, 196.354, 199.032), stdev = 1.821
[info]   CI (99.9%): [189.344, 203.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson
[info] # Run progress: 63.20% complete, ETA 00:18:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 110135.828 ops/s
[info] # Warmup Iteration   2: 390515.816 ops/s
[info] # Warmup Iteration   3: 393821.795 ops/s
[info] Iteration   1: 391637.718 ops/s
[info]                  ·gc.alloc.rate:                   1789.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              7192.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1984.282 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7974.807 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 392743.689 ops/s
[info]                  ·gc.alloc.rate:                   1794.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              7192.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1669.051 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6689.693 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 394847.053 ops/s
[info]                  ·gc.alloc.rate:                   1804.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              7192.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1679.149 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6693.829 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 392004.161 ops/s
[info]                  ·gc.alloc.rate:                   1791.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              7192.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8133.182 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 392010.828 ops/s
[info]                  ·gc.alloc.rate:                   1791.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              7192.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1693.213 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6798.532 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson":
[info]   392648.690 ±(99.9%) 4978.428 ops/s [Average]
[info]   (min, avg, max) = (391637.718, 392648.690, 394847.053), stdev = 1292.882
[info]   CI (99.9%): [387670.262, 397627.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1794.069 ±(99.9%) 22.666 MB/sec [Average]
[info]   (min, avg, max) = (1789.505, 1794.069, 1804.115), stdev = 5.886
[info]   CI (99.9%): [1771.404, 1816.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   7192.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7192.001, 7192.001, 7192.001), stdev = 0.001
[info]   CI (99.9%): [7192.001, 7192.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.451 ±(99.9%) 0.488 B/op [Average]
[info]   (min, avg, max) = (0.251, 0.451, 0.584), stdev = 0.127
[info]   CI (99.9%): [≈ 0, 0.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1810.247 ±(99.9%) 687.369 MB/sec [Average]
[info]   (min, avg, max) = (1669.051, 1810.247, 2025.541), stdev = 178.507
[info]   CI (99.9%): [1122.878, 2497.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7258.009 ±(99.9%) 2811.318 B/op [Average]
[info]   (min, avg, max) = (6689.693, 7258.009, 8133.182), stdev = 730.090
[info]   CI (99.9%): [4446.691, 10069.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala
[info] # Run progress: 63.64% complete, ETA 00:17:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_250ba263/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 2046373.509 ops/s
[info] # Warmup Iteration   2: 2732799.756 ops/s
[info] # Warmup Iteration   3: 2719537.331 ops/s
[info] Iteration   1: 2764144.886 ops/s
[info]                  ·gc.alloc.rate:                   1460.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1648.063 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 938.585 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2779338.994 ops/s
[info]                  ·gc.alloc.rate:                   1469.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.281 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 752.189 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2774095.445 ops/s
[info]                  ·gc.alloc.rate:                   1466.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1672.419 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 948.824 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2768569.522 ops/s
[info]                  ·gc.alloc.rate:                   1463.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.160 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 764.182 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2756412.127 ops/s
[info]                  ·gc.alloc.rate:                   1456.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.105 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 770.429 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala":
[info]   2768512.195 ±(99.9%) 34110.304 ops/s [Average]
[info]   (min, avg, max) = (2756412.127, 2768512.195, 2779338.994), stdev = 8858.338
[info]   CI (99.9%): [2734401.891, 2802622.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1463.401 ±(99.9%) 18.429 MB/sec [Average]
[info]   (min, avg, max) = (1456.924, 1463.401, 1469.218), stdev = 4.786
[info]   CI (99.9%): [1444.971, 1481.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   832.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (832.000, 832.000, 832.000), stdev = 0.001
[info]   CI (99.9%): [832.000, 832.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.121 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.121, 0.167), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.069 ±(99.9%) 0.088 B/op [Average]
[info]   (min, avg, max) = (0.036, 0.069, 0.095), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1468.406 ±(99.9%) 675.792 MB/sec [Average]
[info]   (min, avg, max) = (1328.281, 1468.406, 1672.419), stdev = 175.501
[info]   CI (99.9%): [792.614, 2144.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   834.842 ±(99.9%) 383.753 B/op [Average]
[info]   (min, avg, max) = (752.189, 834.842, 948.824), stdev = 99.659
[info]   CI (99.9%): [451.089, 1218.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala
[info] # Run progress: 64.07% complete, ETA 00:17:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5945750.935 ops/s
[info] # Warmup Iteration   2: 6735540.085 ops/s
[info] # Warmup Iteration   3: 6681819.183 ops/s
[info] Iteration   1: 6627236.467 ops/s
[info]                  ·gc.alloc.rate:                   1010.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 232.558 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6758145.238 ops/s
[info]                  ·gc.alloc.rate:                   1030.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.412 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 228.369 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6827234.405 ops/s
[info]                  ·gc.alloc.rate:                   1040.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      984.755 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 227.045 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6773010.162 ops/s
[info]                  ·gc.alloc.rate:                   1032.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320.127 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 306.724 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 6851502.282 ops/s
[info]                  ·gc.alloc.rate:                   1044.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995.275 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 228.613 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala":
[info]   6767425.711 ±(99.9%) 335781.269 ops/s [Average]
[info]   (min, avg, max) = (6627236.467, 6767425.711, 6851502.282), stdev = 87201.329
[info]   CI (99.9%): [6431644.442, 7103206.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1031.897 ±(99.9%) 51.504 MB/sec [Average]
[info]   (min, avg, max) = (1010.391, 1031.897, 1044.849), stdev = 13.376
[info]   CI (99.9%): [980.392, 1083.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   240.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (240.000, 240.000, 240.000), stdev = 0.001
[info]   CI (99.9%): [240.000, 240.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.017 ±(99.9%) 0.021 B/op [Average]
[info]   (min, avg, max) = (0.010, 0.017, 0.024), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1051.927 ±(99.9%) 577.842 MB/sec [Average]
[info]   (min, avg, max) = (979.062, 1051.927, 1320.127), stdev = 150.064
[info]   CI (99.9%): [474.085, 1629.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   244.662 ±(99.9%) 133.828 B/op [Average]
[info]   (min, avg, max) = (227.045, 244.662, 306.724), stdev = 34.755
[info]   CI (99.9%): [110.834, 378.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson
[info] # Run progress: 64.50% complete, ETA 00:17:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 247937.147 ops/s
[info] # Warmup Iteration   2: 702195.713 ops/s
[info] # Warmup Iteration   3: 702381.024 ops/s
[info] Iteration   1: 719777.960 ops/s
[info]                  ·gc.alloc.rate:                   2084.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              4560.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2325.093 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5085.770 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 707947.180 ops/s
[info]                  ·gc.alloc.rate:                   2050.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              4560.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011.152 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4471.759 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 715490.593 ops/s
[info]                  ·gc.alloc.rate:                   2072.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              4560.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.024 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4450.284 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 725194.227 ops/s
[info]                  ·gc.alloc.rate:                   2101.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              4560.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.780 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4406.462 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 716966.002 ops/s
[info]                  ·gc.alloc.rate:                   2077.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              4560.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.463 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4468.771 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson":
[info]   717075.192 ±(99.9%) 24282.513 ops/s [Average]
[info]   (min, avg, max) = (707947.180, 717075.192, 725194.227), stdev = 6306.092
[info]   CI (99.9%): [692792.679, 741357.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2077.404 ±(99.9%) 71.063 MB/sec [Average]
[info]   (min, avg, max) = (2050.838, 2077.404, 2101.540), stdev = 18.455
[info]   CI (99.9%): [2006.341, 2148.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4560.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4560.001, 4560.001, 4560.001), stdev = 0.001
[info]   CI (99.9%): [4560.000, 4560.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.146), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.238 ±(99.9%) 0.267 B/op [Average]
[info]   (min, avg, max) = (0.136, 0.238, 0.324), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2085.103 ±(99.9%) 517.811 MB/sec [Average]
[info]   (min, avg, max) = (2011.152, 2085.103, 2325.093), stdev = 134.474
[info]   CI (99.9%): [1567.292, 2602.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4576.609 ±(99.9%) 1100.596 B/op [Average]
[info]   (min, avg, max) = (4406.462, 4576.609, 5085.770), stdev = 285.821
[info]   CI (99.9%): [3476.013, 5677.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 64.94% complete, ETA 00:17:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 480657.425 ops/s
[info] # Warmup Iteration   2: 812383.867 ops/s
[info] # Warmup Iteration   3: 821140.340 ops/s
[info] Iteration   1: 819897.577 ops/s
[info]                  ·gc.alloc.rate:                   2667.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2663.111 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5112.397 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 816681.002 ops/s
[info]                  ·gc.alloc.rate:                   2656.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2688.381 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5181.342 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 811400.008 ops/s
[info]                  ·gc.alloc.rate:                   2639.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2705.553 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5248.539 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 810342.170 ops/s
[info]                  ·gc.alloc.rate:                   2636.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2716.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5273.693 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 815025.351 ops/s
[info]                  ·gc.alloc.rate:                   2651.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2378.719 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4593.601 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   814669.221 ±(99.9%) 15027.496 ops/s [Average]
[info]   (min, avg, max) = (810342.170, 814669.221, 819897.577), stdev = 3902.593
[info]   CI (99.9%): [799641.725, 829696.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2650.218 ±(99.9%) 48.058 MB/sec [Average]
[info]   (min, avg, max) = (2636.865, 2650.218, 2667.072), stdev = 12.480
[info]   CI (99.9%): [2602.160, 2698.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5120.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.000, 5120.001, 5120.001), stdev = 0.001
[info]   CI (99.9%): [5120.000, 5120.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.137 ±(99.9%) 0.184 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.137, 0.208), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.265 ±(99.9%) 0.353 B/op [Average]
[info]   (min, avg, max) = (0.162, 0.265, 0.401), stdev = 0.092
[info]   CI (99.9%): [≈ 0, 0.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2630.356 ±(99.9%) 547.122 MB/sec [Average]
[info]   (min, avg, max) = (2378.719, 2630.356, 2716.018), stdev = 142.086
[info]   CI (99.9%): [2083.234, 3177.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5081.915 ±(99.9%) 1078.537 B/op [Average]
[info]   (min, avg, max) = (4593.601, 5081.915, 5273.693), stdev = 280.093
[info]   CI (99.9%): [4003.377, 6160.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   39.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 65.37% complete, ETA 00:17:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 278280.399 ops/s
[info] # Warmup Iteration   2: 983723.186 ops/s
[info] # Warmup Iteration   3: 964568.724 ops/s
[info] Iteration   1: 988492.717 ops/s
[info]                  ·gc.alloc.rate:                   1225.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.557 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2085.157 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 979724.655 ops/s
[info]                  ·gc.alloc.rate:                   1215.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320.223 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2121.014 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 993900.412 ops/s
[info]                  ·gc.alloc.rate:                   1232.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1579.713 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 979043.008 ops/s
[info]                  ·gc.alloc.rate:                   1214.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336.880 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2148.739 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 984488.272 ops/s
[info]                  ·gc.alloc.rate:                   1221.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.076 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2146.967 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   985129.813 ±(99.9%) 23963.030 ops/s [Average]
[info]   (min, avg, max) = (979043.008, 985129.813, 993900.412), stdev = 6223.123
[info]   CI (99.9%): [961166.782, 1009092.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1221.807 ±(99.9%) 29.299 MB/sec [Average]
[info]   (min, avg, max) = (1214.476, 1221.807, 1232.498), stdev = 7.609
[info]   CI (99.9%): [1192.508, 1251.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1952.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.000, 1952.000, 1952.000), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.146), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.173 ±(99.9%) 0.191 B/op [Average]
[info]   (min, avg, max) = (0.099, 0.173, 0.232), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1261.434 ±(99.9%) 570.575 MB/sec [Average]
[info]   (min, avg, max) = (997.435, 1261.434, 1343.076), stdev = 148.177
[info]   CI (99.9%): [690.859, 1832.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2016.318 ±(99.9%) 945.034 B/op [Average]
[info]   (min, avg, max) = (1579.713, 2016.318, 2148.739), stdev = 245.422
[info]   CI (99.9%): [1071.284, 2961.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 65.80% complete, ETA 00:16:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6817826.630 ops/s
[info] # Warmup Iteration   2: 8212684.416 ops/s
[info] # Warmup Iteration   3: 8355248.148 ops/s
[info] Iteration   1: 8383121.578 ops/s
[info]                  ·gc.alloc.rate:                   383.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.739 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.025 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 8361182.550 ops/s
[info]                  ·gc.alloc.rate:                   382.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      588.331 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 110.723 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 8400047.029 ops/s
[info]                  ·gc.alloc.rate:                   384.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332.446 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.282 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 8399477.795 ops/s
[info]                  ·gc.alloc.rate:                   384.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.449 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61.911 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 8401963.290 ops/s
[info]                  ·gc.alloc.rate:                   384.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.382 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61.893 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   8389158.448 ±(99.9%) 66920.070 ops/s [Average]
[info]   (min, avg, max) = (8361182.550, 8389158.448, 8401963.290), stdev = 17378.930
[info]   CI (99.9%): [8322238.378, 8456078.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   383.786 ±(99.9%) 3.013 MB/sec [Average]
[info]   (min, avg, max) = (382.576, 383.786, 384.330), stdev = 0.782
[info]   CI (99.9%): [380.774, 386.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.644 ±(99.9%) 5.389 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.644, 3.147), stdev = 1.399
[info]   CI (99.9%): [≈ 0, 6.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.121 ±(99.9%) 1.014 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.121, 0.592), stdev = 0.263
[info]   CI (99.9%): [≈ 0, 1.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   367.469 ±(99.9%) 491.753 MB/sec [Average]
[info]   (min, avg, max) = (255.739, 367.469, 588.331), stdev = 127.707
[info]   CI (99.9%): [≈ 0, 859.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   68.967 ±(99.9%) 92.868 B/op [Average]
[info]   (min, avg, max) = (48.025, 68.967, 110.723), stdev = 24.118
[info]   CI (99.9%): [≈ 0, 161.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 5.000), stdev = 1.732
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 66.23% complete, ETA 00:16:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38217.844 ops/s
[info] # Warmup Iteration   2: 268674.424 ops/s
[info] # Warmup Iteration   3: 276476.690 ops/s
[info] Iteration   1: 277613.562 ops/s
[info]                  ·gc.alloc.rate:                   1429.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              8104.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1312.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7439.736 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 279215.473 ops/s
[info]                  ·gc.alloc.rate:                   1437.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              8104.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1654.820 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9328.894 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 275592.777 ops/s
[info]                  ·gc.alloc.rate:                   1419.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              8104.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334.339 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7619.796 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 278563.241 ops/s
[info]                  ·gc.alloc.rate:                   1434.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              8104.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7579.995 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 274264.032 ops/s
[info]                  ·gc.alloc.rate:                   1412.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              8104.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.171 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7729.400 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   277049.817 ±(99.9%) 7980.660 ops/s [Average]
[info]   (min, avg, max) = (274264.032, 277049.817, 279215.473), stdev = 2072.552
[info]   CI (99.9%): [269069.157, 285030.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1426.510 ±(99.9%) 40.411 MB/sec [Average]
[info]   (min, avg, max) = (1412.461, 1426.510, 1437.540), stdev = 10.495
[info]   CI (99.9%): [1386.098, 1466.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8104.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8104.001, 8104.002, 8104.002), stdev = 0.001
[info]   CI (99.9%): [8104.001, 8104.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.146), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.425 ±(99.9%) 1.040 B/op [Average]
[info]   (min, avg, max) = (0.119, 0.425, 0.821), stdev = 0.270
[info]   CI (99.9%): [≈ 0, 1.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1397.972 ±(99.9%) 555.270 MB/sec [Average]
[info]   (min, avg, max) = (1312.011, 1397.972, 1654.820), stdev = 144.202
[info]   CI (99.9%): [842.702, 1953.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7939.564 ±(99.9%) 3017.157 B/op [Average]
[info]   (min, avg, max) = (7439.736, 7939.564, 9328.894), stdev = 783.546
[info]   CI (99.9%): [4922.407, 10956.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 7.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 66.67% complete, ETA 00:16:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5258.629 ops/s
[info] # Warmup Iteration   2: 7433.379 ops/s
[info] # Warmup Iteration   3: 7599.122 ops/s
[info] Iteration   1: 7677.904 ops/s
[info]                  ·gc.alloc.rate:                   1847.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              378792.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46.933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1967.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 403456.000 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 7715.022 ops/s
[info]                  ·gc.alloc.rate:                   1856.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              378792.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1657.657 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 338134.168 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 7666.793 ops/s
[info]                  ·gc.alloc.rate:                   1845.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              378792.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2005.240 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 411608.472 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 7717.075 ops/s
[info]                  ·gc.alloc.rate:                   1857.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              378792.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1680.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 342801.080 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 7606.354 ops/s
[info]                  ·gc.alloc.rate:                   1830.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              378792.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.378 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 419265.009 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   7676.629 ±(99.9%) 173.779 ops/s [Average]
[info]   (min, avg, max) = (7606.354, 7676.629, 7717.075), stdev = 45.130
[info]   CI (99.9%): [7502.851, 7850.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1847.587 ±(99.9%) 41.682 MB/sec [Average]
[info]   (min, avg, max) = (1830.766, 1847.587, 1857.212), stdev = 10.825
[info]   CI (99.9%): [1805.905, 1889.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   378792.054 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (378792.053, 378792.054, 378792.057), stdev = 0.002
[info]   CI (99.9%): [378792.047, 378792.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.141 ±(99.9%) 0.328 MB/sec [Average]
[info]   (min, avg, max) = (0.037, 0.141, 0.229), stdev = 0.085
[info]   CI (99.9%): [≈ 0, 0.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   28.854 ±(99.9%) 67.184 B/op [Average]
[info]   (min, avg, max) = (7.629, 28.854, 46.933), stdev = 17.447
[info]   CI (99.9%): [≈ 0, 96.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1867.588 ±(99.9%) 702.697 MB/sec [Average]
[info]   (min, avg, max) = (1657.657, 1867.588, 2026.378), stdev = 182.488
[info]   CI (99.9%): [1164.891, 2570.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   383052.946 ±(99.9%) 151366.622 B/op [Average]
[info]   (min, avg, max) = (338134.168, 383052.946, 419265.009), stdev = 39309.431
[info]   CI (99.9%): [231686.323, 534419.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 1.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 67.10% complete, ETA 00:16:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7075.008 ops/s
[info] # Warmup Iteration   2: 14001.053 ops/s
[info] # Warmup Iteration   3: 14124.100 ops/s
[info] Iteration   1: 14527.330 ops/s
[info]                  ·gc.alloc.rate:                   367.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              39872.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.456 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55423.700 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 14535.411 ops/s
[info]                  ·gc.alloc.rate:                   368.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              39872.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34911.659 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 14463.409 ops/s
[info]                  ·gc.alloc.rate:                   366.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              39872.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.385 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35083.007 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 14137.706 ops/s
[info]                  ·gc.alloc.rate:                   358.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              39872.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      324.827 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36151.400 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 14134.586 ops/s
[info]                  ·gc.alloc.rate:                   358.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              39872.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      324.691 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36159.072 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   14359.688 ±(99.9%) 793.100 ops/s [Average]
[info]   (min, avg, max) = (14134.586, 14359.688, 14535.411), stdev = 205.966
[info]   CI (99.9%): [13566.588, 15152.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   363.775 ±(99.9%) 19.979 MB/sec [Average]
[info]   (min, avg, max) = (358.031, 363.775, 368.250), stdev = 5.188
[info]   CI (99.9%): [343.796, 383.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39872.031 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (39872.028, 39872.031, 39872.036), stdev = 0.003
[info]   CI (99.9%): [39872.018, 39872.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.703 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.092, 0.416), stdev = 0.182
[info]   CI (99.9%): [≈ 0, 0.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9.919 ±(99.9%) 76.065 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.919, 45.082), stdev = 19.754
[info]   CI (99.9%): [≈ 0, 85.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   361.159 ±(99.9%) 323.557 MB/sec [Average]
[info]   (min, avg, max) = (322.385, 361.159, 511.456), stdev = 84.027
[info]   CI (99.9%): [37.602, 684.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   39545.768 ±(99.9%) 34251.872 B/op [Average]
[info]   (min, avg, max) = (34911.659, 39545.768, 55423.700), stdev = 8895.102
[info]   CI (99.9%): [5293.896, 73797.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 67.53% complete, ETA 00:16:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19261.948 ops/s
[info] # Warmup Iteration   2: 24441.813 ops/s
[info] # Warmup Iteration   3: 24603.966 ops/s
[info] Iteration   1: 24218.928 ops/s
[info]                  ·gc.alloc.rate:                   413.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.651 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33244.153 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 24292.510 ops/s
[info]                  ·gc.alloc.rate:                   415.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     213.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.752 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21363.398 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 24630.402 ops/s
[info]                  ·gc.alloc.rate:                   420.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.682 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21070.274 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 23658.772 ops/s
[info]                  ·gc.alloc.rate:                   404.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43605.730 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 24519.467 ops/s
[info]                  ·gc.alloc.rate:                   418.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.707 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21037.369 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   24264.016 ±(99.9%) 1451.875 ops/s [Average]
[info]   (min, avg, max) = (23658.772, 24264.016, 24630.402), stdev = 377.047
[info]   CI (99.9%): [22812.141, 25715.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   414.636 ±(99.9%) 24.755 MB/sec [Average]
[info]   (min, avg, max) = (404.274, 414.636, 420.836), stdev = 6.429
[info]   CI (99.9%): [389.881, 439.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26896.018 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (26896.017, 26896.018, 26896.021), stdev = 0.002
[info]   CI (99.9%): [26896.011, 26896.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.684 ±(99.9%) 5.628 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.684, 3.299), stdev = 1.462
[info]   CI (99.9%): [≈ 0, 6.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   44.332 ±(99.9%) 364.619 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.332, 213.699), stdev = 94.690
[info]   CI (99.9%): [≈ 0, 408.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   430.846 ±(99.9%) 571.347 MB/sec [Average]
[info]   (min, avg, max) = (327.707, 430.846, 655.438), stdev = 148.377
[info]   CI (99.9%): [≈ 0, 1002.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   28064.185 ±(99.9%) 39059.045 B/op [Average]
[info]   (min, avg, max) = (21037.369, 28064.185, 43605.730), stdev = 10143.510
[info]   CI (99.9%): [≈ 0, 67123.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 5.000), stdev = 1.673
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 67.97% complete, ETA 00:15:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 808.536 ops/s
[info] # Warmup Iteration   2: 2350.230 ops/s
[info] # Warmup Iteration   3: 2345.934 ops/s
[info] Iteration   1: 2394.459 ops/s
[info]                  ·gc.alloc.rate:                   1466.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              964094.176 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1644.533 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1081193.500 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 2388.014 ops/s
[info]                  ·gc.alloc.rate:                   1462.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              964088.171 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.878 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 873886.486 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2380.900 ops/s
[info]                  ·gc.alloc.rate:                   1459.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              964088.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1335.101 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 882177.290 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2416.943 ops/s
[info]                  ·gc.alloc.rate:                   1480.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              964088.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.344 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1092158.253 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2383.477 ops/s
[info]                  ·gc.alloc.rate:                   1459.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              964088.171 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.986 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 890233.987 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   2392.759 ±(99.9%) 55.704 ops/s [Average]
[info]   (min, avg, max) = (2380.900, 2392.759, 2416.943), stdev = 14.466
[info]   CI (99.9%): [2337.055, 2448.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1465.738 ±(99.9%) 33.983 MB/sec [Average]
[info]   (min, avg, max) = (1459.066, 1465.738, 1480.653), stdev = 8.825
[info]   CI (99.9%): [1431.755, 1499.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   964089.374 ±(99.9%) 10.337 B/op [Average]
[info]   (min, avg, max) = (964088.171, 964089.374, 964094.176), stdev = 2.684
[info]   CI (99.9%): [964079.038, 964099.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   16.445 ±(99.9%) 68.723 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.445, 41.046), stdev = 17.847
[info]   CI (99.9%): [≈ 0, 85.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1466.168 ±(99.9%) 686.766 MB/sec [Average]
[info]   (min, avg, max) = (1325.878, 1466.168, 1677.344), stdev = 178.351
[info]   CI (99.9%): [779.402, 2152.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   963929.903 ±(99.9%) 432300.836 B/op [Average]
[info]   (min, avg, max) = (873886.486, 963929.903, 1092158.253), stdev = 112267.154
[info]   CI (99.9%): [531629.067, 1396230.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 68.40% complete, ETA 00:15:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5660.144 ops/s
[info] # Warmup Iteration   2: 7558.802 ops/s
[info] # Warmup Iteration   3: 7667.657 ops/s
[info] Iteration   1: 7576.806 ops/s
[info]                  ·gc.alloc.rate:                   1629.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              338544.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1636.802 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 340046.915 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 7649.461 ops/s
[info]                  ·gc.alloc.rate:                   1645.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              338544.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1651.911 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 339954.616 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 7669.949 ops/s
[info]                  ·gc.alloc.rate:                   1649.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              338544.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29.898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.522 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 341620.922 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 7632.177 ops/s
[info]                  ·gc.alloc.rate:                   1641.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              338544.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1675.994 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 345656.472 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 7635.590 ops/s
[info]                  ·gc.alloc.rate:                   1642.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              338544.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39.811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 347168.314 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   7632.796 ±(99.9%) 133.406 ops/s [Average]
[info]   (min, avg, max) = (7576.806, 7632.796, 7669.949), stdev = 34.645
[info]   CI (99.9%): [7499.391, 7766.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1641.575 ±(99.9%) 28.557 MB/sec [Average]
[info]   (min, avg, max) = (1629.568, 1641.575, 1649.531), stdev = 7.416
[info]   CI (99.9%): [1613.018, 1670.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   338544.054 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (338544.053, 338544.054, 338544.058), stdev = 0.002
[info]   CI (99.9%): [338544.047, 338544.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.102 ±(99.9%) 0.280 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.102, 0.193), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   21.041 ±(99.9%) 57.629 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.041, 39.811), stdev = 14.966
[info]   CI (99.9%): [≈ 0, 78.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1662.655 ±(99.9%) 72.623 MB/sec [Average]
[info]   (min, avg, max) = (1636.802, 1662.655, 1684.046), stdev = 18.860
[info]   CI (99.9%): [1590.032, 1735.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   342889.448 ±(99.9%) 12809.905 B/op [Average]
[info]   (min, avg, max) = (339954.616, 342889.448, 347168.314), stdev = 3326.692
[info]   CI (99.9%): [330079.543, 355699.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 68.83% complete, ETA 00:15:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_250ba263/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 22996.807 ops/s
[info] # Warmup Iteration   2: 42444.602 ops/s
[info] # Warmup Iteration   3: 43027.302 ops/s
[info] Iteration   1: 43271.545 ops/s
[info]                  ·gc.alloc.rate:                   627.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.689 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.474 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11726.220 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 42781.771 ops/s
[info]                  ·gc.alloc.rate:                   620.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.885 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      649.566 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23893.652 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 43211.787 ops/s
[info]                  ·gc.alloc.rate:                   626.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.832 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23752.971 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 43210.802 ops/s
[info]                  ·gc.alloc.rate:                   626.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.943 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23850.021 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 42746.822 ops/s
[info]                  ·gc.alloc.rate:                   619.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.760 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.405 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24206.963 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   43044.546 ±(99.9%) 990.802 ops/s [Average]
[info]   (min, avg, max) = (42746.822, 43044.546, 43271.545), stdev = 257.308
[info]   CI (99.9%): [42053.743, 44035.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   623.794 ±(99.9%) 14.419 MB/sec [Average]
[info]   (min, avg, max) = (619.406, 623.794, 627.218), stdev = 3.745
[info]   CI (99.9%): [609.375, 638.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22807.822 ±(99.9%) 0.385 B/op [Average]
[info]   (min, avg, max) = (22807.689, 22807.822, 22807.943), stdev = 0.100
[info]   CI (99.9%): [22807.437, 22808.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.824 ±(99.9%) 3.315 B/op [Average]
[info]   (min, avg, max) = (0.766, 1.824, 3.033), stdev = 0.861
[info]   CI (99.9%): [≈ 0, 5.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   587.260 ±(99.9%) 570.081 MB/sec [Average]
[info]   (min, avg, max) = (322.474, 587.260, 657.405), stdev = 148.048
[info]   CI (99.9%): [17.178, 1157.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   21485.965 ±(99.9%) 21018.794 B/op [Average]
[info]   (min, avg, max) = (11726.220, 21485.965, 24206.963), stdev = 5458.514
[info]   CI (99.9%): [467.172, 42504.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 69.26% complete, ETA 00:15:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62113.808 ops/s
[info] # Warmup Iteration   2: 73125.613 ops/s
[info] # Warmup Iteration   3: 74156.683 ops/s
[info] Iteration   1: 74346.973 ops/s
[info]                  ·gc.alloc.rate:                   560.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              11864.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81.475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.715 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13904.300 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 74148.576 ops/s
[info]                  ·gc.alloc.rate:                   558.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              11864.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.367 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6928.574 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 72369.303 ops/s
[info]                  ·gc.alloc.rate:                   545.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              11864.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14182.867 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 72364.358 ops/s
[info]                  ·gc.alloc.rate:                   545.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              11864.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14175.819 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 75022.997 ops/s
[info]                  ·gc.alloc.rate:                   565.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              11864.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.059 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6840.423 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   73650.441 ±(99.9%) 4681.553 ops/s [Average]
[info]   (min, avg, max) = (72364.358, 73650.441, 75022.997), stdev = 1215.784
[info]   CI (99.9%): [68968.889, 78331.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   555.129 ±(99.9%) 35.280 MB/sec [Average]
[info]   (min, avg, max) = (545.461, 555.129, 565.516), stdev = 9.162
[info]   CI (99.9%): [519.849, 590.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   11864.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11864.005, 11864.006, 11864.006), stdev = 0.001
[info]   CI (99.9%): [11864.005, 11864.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.803 ±(99.9%) 6.557 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.803, 3.848), stdev = 1.703
[info]   CI (99.9%): [≈ 0, 7.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   17.019 ±(99.9%) 138.795 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.019, 81.475), stdev = 36.045
[info]   CI (99.9%): [≈ 0, 155.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   522.595 ±(99.9%) 690.349 MB/sec [Average]
[info]   (min, avg, max) = (326.059, 522.595, 656.715), stdev = 179.281
[info]   CI (99.9%): [≈ 0, 1212.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11206.396 ±(99.9%) 15198.710 B/op [Average]
[info]   (min, avg, max) = (6840.423, 11206.396, 14182.867), stdev = 3947.057
[info]   CI (99.9%): [≈ 0, 26405.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 69.70% complete, ETA 00:14:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63873.278 ops/s
[info] # Warmup Iteration   2: 74379.884 ops/s
[info] # Warmup Iteration   3: 74846.104 ops/s
[info] Iteration   1: 74904.640 ops/s
[info]                  ·gc.alloc.rate:      1.143 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 74893.609 ops/s
[info]                  ·gc.alloc.rate:      1.142 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 74814.419 ops/s
[info]                  ·gc.alloc.rate:      1.141 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 74757.425 ops/s
[info]                  ·gc.alloc.rate:      1.140 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 74790.205 ops/s
[info]                  ·gc.alloc.rate:      1.141 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   74832.060 ±(99.9%) 248.729 ops/s [Average]
[info]   (min, avg, max) = (74757.425, 74832.060, 74904.640), stdev = 64.594
[info]   CI (99.9%): [74583.330, 75080.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.141 ±(99.9%) 0.004 MB/sec [Average]
[info]   (min, avg, max) = (1.140, 1.141, 1.143), stdev = 0.001
[info]   CI (99.9%): [1.137, 1.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   24.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24.005, 24.005, 24.005), stdev = 0.001
[info]   CI (99.9%): [24.005, 24.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 70.13% complete, ETA 00:14:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2127.648 ops/s
[info] # Warmup Iteration   2: 5384.435 ops/s
[info] # Warmup Iteration   3: 5586.585 ops/s
[info] Iteration   1: 5544.653 ops/s
[info]                  ·gc.alloc.rate:                   1639.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              465616.385 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1650.499 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 468607.215 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 5583.739 ops/s
[info]                  ·gc.alloc.rate:                   1651.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              465615.867 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23.469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.086 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 469089.908 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 5528.329 ops/s
[info]                  ·gc.alloc.rate:                   1635.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              465615.977 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.188 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 381507.217 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 5532.422 ops/s
[info]                  ·gc.alloc.rate:                   1636.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              465615.962 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.401 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 478623.595 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 5599.219 ops/s
[info]                  ·gc.alloc.rate:                   1656.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              465615.603 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1688.263 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 474583.139 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   5557.672 ±(99.9%) 122.885 ops/s [Average]
[info]   (min, avg, max) = (5528.329, 5557.672, 5599.219), stdev = 31.913
[info]   CI (99.9%): [5434.788, 5680.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1644.084 ±(99.9%) 36.155 MB/sec [Average]
[info]   (min, avg, max) = (1635.652, 1644.084, 1656.363), stdev = 9.389
[info]   CI (99.9%): [1607.929, 1680.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   465615.959 ±(99.9%) 1.084 B/op [Average]
[info]   (min, avg, max) = (465615.603, 465615.959, 465616.385), stdev = 0.282
[info]   CI (99.9%): [465614.874, 465617.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.104), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   16.458 ±(99.9%) 40.220 B/op [Average]
[info]   (min, avg, max) = (5.921, 16.458, 29.252), stdev = 10.445
[info]   CI (99.9%): [≈ 0, 56.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1605.088 ±(99.9%) 573.121 MB/sec [Average]
[info]   (min, avg, max) = (1340.188, 1605.088, 1688.263), stdev = 148.838
[info]   CI (99.9%): [1031.967, 2178.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   454482.215 ±(99.9%) 157889.361 B/op [Average]
[info]   (min, avg, max) = (381507.217, 454482.215, 478623.595), stdev = 41003.366
[info]   CI (99.9%): [296592.854, 612371.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala
[info] # Run progress: 70.56% complete, ETA 00:14:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4848545.769 ops/s
[info] # Warmup Iteration   2: 5533304.412 ops/s
[info] # Warmup Iteration   3: 5534505.774 ops/s
[info] Iteration   1: 5519746.808 ops/s
[info]                  ·gc.alloc.rate:                   1655.368 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1651.050 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 470.769 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 5529125.977 ops/s
[info]                  ·gc.alloc.rate:                   1658.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1662.766 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 473.202 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5503836.793 ops/s
[info]                  ·gc.alloc.rate:                   1650.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.655 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 382.510 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 5552449.705 ops/s
[info]                  ·gc.alloc.rate:                   1665.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1681.222 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 476.591 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 5603208.318 ops/s
[info]                  ·gc.alloc.rate:                   1680.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1687.236 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 473.972 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala":
[info]   5541673.520 ±(99.9%) 148792.602 ops/s [Average]
[info]   (min, avg, max) = (5503836.793, 5541673.520, 5603208.318), stdev = 38640.966
[info]   CI (99.9%): [5392880.918, 5690466.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1661.952 ±(99.9%) 44.189 MB/sec [Average]
[info]   (min, avg, max) = (1650.605, 1661.952, 1680.216), stdev = 11.476
[info]   CI (99.9%): [1617.762, 1706.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (472.000, 472.000, 472.000), stdev = 0.001
[info]   CI (99.9%): [472.000, 472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.167), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.027 ±(99.9%) 0.047 B/op [Average]
[info]   (min, avg, max) = (0.018, 0.027, 0.047), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1603.986 ±(99.9%) 575.985 MB/sec [Average]
[info]   (min, avg, max) = (1337.655, 1603.986, 1687.236), stdev = 149.581
[info]   CI (99.9%): [1028.001, 2179.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   455.409 ±(99.9%) 157.124 B/op [Average]
[info]   (min, avg, max) = (382.510, 455.409, 476.591), stdev = 40.804
[info]   CI (99.9%): [298.285, 612.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson
[info] # Run progress: 71.00% complete, ETA 00:14:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 119615.427 ops/s
[info] # Warmup Iteration   2: 376997.914 ops/s
[info] # Warmup Iteration   3: 381517.815 ops/s
[info] Iteration   1: 381821.931 ops/s
[info]                  ·gc.alloc.rate:                   2140.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              8824.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1994.701 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8223.899 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 377622.985 ops/s
[info]                  ·gc.alloc.rate:                   2117.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              8824.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2349.221 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9788.320 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 381617.258 ops/s
[info]                  ·gc.alloc.rate:                   2139.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              8824.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.350 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8354.410 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 380100.656 ops/s
[info]                  ·gc.alloc.rate:                   2131.712 MB/sec
[info]                  ·gc.alloc.rate.norm:              8824.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8415.617 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 379032.025 ops/s
[info]                  ·gc.alloc.rate:                   2124.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              8824.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.277 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8455.700 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson":
[info]   380038.971 ±(99.9%) 6813.754 ops/s [Average]
[info]   (min, avg, max) = (377622.985, 380038.971, 381821.931), stdev = 1769.510
[info]   CI (99.9%): [373225.216, 386852.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2130.783 ±(99.9%) 36.739 MB/sec [Average]
[info]   (min, avg, max) = (2117.782, 2130.783, 2140.255), stdev = 9.541
[info]   CI (99.9%): [2094.044, 2167.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8824.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8824.001, 8824.001, 8824.001), stdev = 0.001
[info]   CI (99.9%): [8824.001, 8824.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.121 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.121, 0.167), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.500 ±(99.9%) 0.725 B/op [Average]
[info]   (min, avg, max) = (0.257, 0.500, 0.694), stdev = 0.188
[info]   CI (99.9%): [≈ 0, 1.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2087.721 ±(99.9%) 566.451 MB/sec [Average]
[info]   (min, avg, max) = (1994.701, 2087.721, 2349.221), stdev = 147.105
[info]   CI (99.9%): [1521.270, 2654.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8647.589 ±(99.9%) 2478.634 B/op [Average]
[info]   (min, avg, max) = (8223.899, 8647.589, 9788.320), stdev = 643.693
[info]   CI (99.9%): [6168.955, 11126.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 9.000), stdev = 0.894
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala
[info] # Run progress: 71.43% complete, ETA 00:14:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2904058.149 ops/s
[info] # Warmup Iteration   2: 3415442.900 ops/s
[info] # Warmup Iteration   3: 3573647.694 ops/s
[info] Iteration   1: 3546591.740 ops/s
[info]                  ·gc.alloc.rate:                   576.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.801 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 291.473 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3589932.640 ops/s
[info]                  ·gc.alloc.rate:                   583.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.351 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 143.102 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 3508921.325 ops/s
[info]                  ·gc.alloc.rate:                   570.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.915 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 292.810 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3535020.786 ops/s
[info]                  ·gc.alloc.rate:                   575.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.967 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 290.647 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 3600977.932 ops/s
[info]                  ·gc.alloc.rate:                   585.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 285.469 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala":
[info]   3556288.884 ±(99.9%) 148125.539 ops/s [Average]
[info]   (min, avg, max) = (3508921.325, 3556288.884, 3600977.932), stdev = 38467.732
[info]   CI (99.9%): [3408163.346, 3704414.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   578.455 ±(99.9%) 23.725 MB/sec [Average]
[info]   (min, avg, max) = (570.835, 578.455, 585.626), stdev = 6.161
[info]   CI (99.9%): [554.731, 602.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   256.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (256.000, 256.000, 256.000), stdev = 0.001
[info]   CI (99.9%): [256.000, 256.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.805 ±(99.9%) 6.399 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.805, 3.777), stdev = 1.662
[info]   CI (99.9%): [≈ 0, 7.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.357 ±(99.9%) 2.840 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.357, 1.676), stdev = 0.738
[info]   CI (99.9%): [≈ 0, 3.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   588.415 ±(99.9%) 564.149 MB/sec [Average]
[info]   (min, avg, max) = (326.351, 588.415, 656.801), stdev = 146.508
[info]   CI (99.9%): [24.266, 1152.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   260.700 ±(99.9%) 253.366 B/op [Average]
[info]   (min, avg, max) = (143.102, 260.700, 292.810), stdev = 65.798
[info]   CI (99.9%): [7.335, 514.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson
[info] # Run progress: 71.86% complete, ETA 00:13:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 81214.119 ops/s
[info] # Warmup Iteration   2: 336875.207 ops/s
[info] # Warmup Iteration   3: 338171.539 ops/s
[info] Iteration   1: 340025.671 ops/s
[info]                  ·gc.alloc.rate:                   1332.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1312.553 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6077.245 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 340044.650 ops/s
[info]                  ·gc.alloc.rate:                   1332.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.816 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6123.243 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 341068.754 ops/s
[info]                  ·gc.alloc.rate:                   1336.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1332.305 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6148.059 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 341094.480 ops/s
[info]                  ·gc.alloc.rate:                   1336.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.128 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6179.792 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 338072.726 ops/s
[info]                  ·gc.alloc.rate:                   1324.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6264.469 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson":
[info]   340061.256 ±(99.9%) 4731.124 ops/s [Average]
[info]   (min, avg, max) = (338072.726, 340061.256, 341094.480), stdev = 1228.658
[info]   CI (99.9%): [335330.132, 344792.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1332.507 ±(99.9%) 18.727 MB/sec [Average]
[info]   (min, avg, max) = (1324.698, 1332.507, 1336.626), stdev = 4.863
[info]   CI (99.9%): [1313.781, 1351.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   6168.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6168.001, 6168.001, 6168.001), stdev = 0.001
[info]   CI (99.9%): [6168.001, 6168.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.125), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.385 ±(99.9%) 0.454 B/op [Average]
[info]   (min, avg, max) = (0.288, 0.385, 0.578), stdev = 0.118
[info]   CI (99.9%): [≈ 0, 0.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1330.444 ±(99.9%) 50.254 MB/sec [Average]
[info]   (min, avg, max) = (1312.553, 1330.444, 1345.416), stdev = 13.051
[info]   CI (99.9%): [1280.189, 1380.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6158.562 ±(99.9%) 269.802 B/op [Average]
[info]   (min, avg, max) = (6077.245, 6158.562, 6264.469), stdev = 70.067
[info]   CI (99.9%): [5888.760, 6428.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce
[info] # Run progress: 72.29% complete, ETA 00:13:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 427337.902 ops/s
[info] # Warmup Iteration   2: 613647.866 ops/s
[info] # Warmup Iteration   3: 621762.764 ops/s
[info] Iteration   1: 618209.566 ops/s
[info]                  ·gc.alloc.rate:                   2227.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              5672.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2315.480 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5895.936 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 619013.718 ops/s
[info]                  ·gc.alloc.rate:                   2230.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              5672.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2340.638 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5951.775 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 623001.424 ops/s
[info]                  ·gc.alloc.rate:                   2245.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              5672.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.779 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5104.185 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 616679.549 ops/s
[info]                  ·gc.alloc.rate:                   2222.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              5672.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2367.919 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6043.994 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 622512.267 ops/s
[info]                  ·gc.alloc.rate:                   2244.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              5672.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2376.292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6005.895 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce":
[info]   619883.305 ±(99.9%) 10625.220 ops/s [Average]
[info]   (min, avg, max) = (616679.549, 619883.305, 623001.424), stdev = 2759.336
[info]   CI (99.9%): [609258.084, 630508.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2234.018 ±(99.9%) 39.963 MB/sec [Average]
[info]   (min, avg, max) = (2222.179, 2234.018, 2245.581), stdev = 10.378
[info]   CI (99.9%): [2194.055, 2273.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5672.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5672.001, 5672.001, 5672.001), stdev = 0.001
[info]   CI (99.9%): [5672.001, 5672.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.133 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.125, 0.133, 0.146), stdev = 0.011
[info]   CI (99.9%): [0.089, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.338 ±(99.9%) 0.109 B/op [Average]
[info]   (min, avg, max) = (0.316, 0.338, 0.371), stdev = 0.028
[info]   CI (99.9%): [0.229, 0.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2284.222 ±(99.9%) 574.521 MB/sec [Average]
[info]   (min, avg, max) = (2020.779, 2284.222, 2376.292), stdev = 149.201
[info]   CI (99.9%): [1709.701, 2858.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5800.357 ±(99.9%) 1513.948 B/op [Average]
[info]   (min, avg, max) = (5104.185, 5800.357, 6043.994), stdev = 393.167
[info]   CI (99.9%): [4286.409, 7314.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala
[info] # Run progress: 72.73% complete, ETA 00:13:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 258335.112 ops/s
[info] # Warmup Iteration   2: 643643.453 ops/s
[info] # Warmup Iteration   3: 648000.909 ops/s
[info] Iteration   1: 650156.195 ops/s
[info]                  ·gc.alloc.rate:                   756.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      972.526 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2354.415 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 651462.278 ops/s
[info]                  ·gc.alloc.rate:                   758.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.174 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1575.528 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 648159.525 ops/s
[info]                  ·gc.alloc.rate:                   754.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.855 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1590.068 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 647348.792 ops/s
[info]                  ·gc.alloc.rate:                   753.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      987.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2401.057 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 644725.918 ops/s
[info]                  ·gc.alloc.rate:                   750.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.460 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1614.762 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala":
[info]   648370.542 ±(99.9%) 10026.321 ops/s [Average]
[info]   (min, avg, max) = (644725.918, 648370.542, 651462.278), stdev = 2603.804
[info]   CI (99.9%): [638344.221, 658396.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   754.688 ±(99.9%) 11.730 MB/sec [Average]
[info]   (min, avg, max) = (750.448, 754.688, 758.338), stdev = 3.046
[info]   CI (99.9%): [742.959, 766.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1832.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1832.001, 1832.001, 1832.001), stdev = 0.001
[info]   CI (99.9%): [1832.001, 1832.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.207 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.162 ±(99.9%) 0.505 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.162, 0.305), stdev = 0.131
[info]   CI (99.9%): [≈ 0, 0.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   785.695 ±(99.9%) 683.410 MB/sec [Average]
[info]   (min, avg, max) = (652.174, 785.695, 987.458), stdev = 177.479
[info]   CI (99.9%): [102.285, 1469.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1907.166 ±(99.9%) 1656.219 B/op [Average]
[info]   (min, avg, max) = (1575.528, 1907.166, 2401.057), stdev = 430.115
[info]   CI (99.9%): [250.947, 3563.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala
[info] # Run progress: 73.16% complete, ETA 00:13:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2888197.242 ops/s
[info] # Warmup Iteration   2: 3262330.467 ops/s
[info] # Warmup Iteration   3: 3323765.060 ops/s
[info] Iteration   1: 3294596.076 ops/s
[info]                  ·gc.alloc.rate:                   1373.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1315.453 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 628.346 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3313430.591 ops/s
[info]                  ·gc.alloc.rate:                   1380.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1321.492 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 627.765 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3304999.746 ops/s
[info]                  ·gc.alloc.rate:                   1377.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1661.424 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 791.312 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3296721.755 ops/s
[info]                  ·gc.alloc.rate:                   1374.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.767 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 638.581 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3287499.043 ops/s
[info]                  ·gc.alloc.rate:                   1370.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.224 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 643.577 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala":
[info]   3299449.442 ±(99.9%) 38510.571 ops/s [Average]
[info]   (min, avg, max) = (3287499.043, 3299449.442, 3313430.591), stdev = 10001.073
[info]   CI (99.9%): [3260938.871, 3337960.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1375.207 ±(99.9%) 15.751 MB/sec [Average]
[info]   (min, avg, max) = (1370.173, 1375.207, 1380.929), stdev = 4.090
[info]   CI (99.9%): [1359.456, 1390.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   656.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (656.000, 656.000, 656.000), stdev = 0.001
[info]   CI (99.9%): [656.000, 656.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.036 ±(99.9%) 0.043 B/op [Average]
[info]   (min, avg, max) = (0.020, 0.036, 0.049), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1396.072 ±(99.9%) 572.960 MB/sec [Average]
[info]   (min, avg, max) = (1315.453, 1396.072, 1661.424), stdev = 148.796
[info]   CI (99.9%): [823.112, 1969.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   665.916 ±(99.9%) 271.173 B/op [Average]
[info]   (min, avg, max) = (627.765, 665.916, 791.312), stdev = 70.423
[info]   CI (99.9%): [394.743, 937.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson
[info] # Run progress: 73.59% complete, ETA 00:13:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50710.745 ops/s
[info] # Warmup Iteration   2: 224790.841 ops/s
[info] # Warmup Iteration   3: 233279.431 ops/s
[info] Iteration   1: 233339.835 ops/s
[info]                  ·gc.alloc.rate:                   1626.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              10976.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1647.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11118.163 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 233706.734 ops/s
[info]                  ·gc.alloc.rate:                   1630.666 MB/sec
[info]                  ·gc.alloc.rate.norm:              10976.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1663.641 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11197.958 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 234892.915 ops/s
[info]                  ·gc.alloc.rate:                   1637.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              10976.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.815 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8978.459 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 233868.593 ops/s
[info]                  ·gc.alloc.rate:                   1630.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              10976.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.581 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11324.131 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 231832.984 ops/s
[info]                  ·gc.alloc.rate:                   1616.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              10976.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1689.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11468.397 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson":
[info]   233528.212 ±(99.9%) 4270.321 ops/s [Average]
[info]   (min, avg, max) = (231832.984, 233528.212, 234892.915), stdev = 1108.989
[info]   CI (99.9%): [229257.891, 237798.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1628.572 ±(99.9%) 30.090 MB/sec [Average]
[info]   (min, avg, max) = (1616.535, 1628.572, 1637.900), stdev = 7.814
[info]   CI (99.9%): [1598.482, 1658.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10976.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10976.002, 10976.002, 10976.002), stdev = 0.001
[info]   CI (99.9%): [10976.002, 10976.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.146), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.618 ±(99.9%) 1.057 B/op [Average]
[info]   (min, avg, max) = (0.418, 0.618, 0.980), stdev = 0.275
[info]   CI (99.9%): [≈ 0, 1.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1604.614 ±(99.9%) 573.384 MB/sec [Average]
[info]   (min, avg, max) = (1339.815, 1604.614, 1689.055), stdev = 148.906
[info]   CI (99.9%): [1031.230, 2177.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10817.422 ±(99.9%) 3991.300 B/op [Average]
[info]   (min, avg, max) = (8978.459, 10817.422, 11468.397), stdev = 1036.528
[info]   CI (99.9%): [6826.122, 14808.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce
[info] # Run progress: 74.03% complete, ETA 00:12:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 581185.446 ops/s
[info] # Warmup Iteration   2: 860725.415 ops/s
[info] # Warmup Iteration   3: 859856.547 ops/s
[info] Iteration   1: 867138.986 ops/s
[info]                  ·gc.alloc.rate:                   1969.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1976.763 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3588.546 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 853419.194 ops/s
[info]                  ·gc.alloc.rate:                   1939.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1996.418 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3681.779 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 872556.269 ops/s
[info]                  ·gc.alloc.rate:                   1982.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2012.197 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3629.286 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 849230.936 ops/s
[info]                  ·gc.alloc.rate:                   1929.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.820 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3124.627 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 857680.870 ops/s
[info]                  ·gc.alloc.rate:                   1949.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3725.845 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce":
[info]   860005.251 ±(99.9%) 37198.246 ops/s [Average]
[info]   (min, avg, max) = (849230.936, 860005.251, 872556.269), stdev = 9660.266
[info]   CI (99.9%): [822807.005, 897203.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1953.988 ±(99.9%) 84.538 MB/sec [Average]
[info]   (min, avg, max) = (1929.349, 1953.988, 1982.654), stdev = 21.954
[info]   CI (99.9%): [1869.450, 2038.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3576.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3576.000, 3576.000, 3576.001), stdev = 0.001
[info]   CI (99.9%): [3576.000, 3576.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.104, 0.146), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.190 ±(99.9%) 0.275 B/op [Average]
[info]   (min, avg, max) = (0.077, 0.190, 0.269), stdev = 0.072
[info]   CI (99.9%): [≈ 0, 0.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1940.379 ±(99.9%) 553.271 MB/sec [Average]
[info]   (min, avg, max) = (1685.820, 1940.379, 2030.696), stdev = 143.683
[info]   CI (99.9%): [1387.107, 2493.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3550.017 ±(99.9%) 937.300 B/op [Average]
[info]   (min, avg, max) = (3124.627, 3550.017, 3725.845), stdev = 243.414
[info]   CI (99.9%): [2612.717, 4487.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala
[info] # Run progress: 74.46% complete, ETA 00:12:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_250ba263/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 528146.988 ops/s
[info] # Warmup Iteration   2: 1620659.105 ops/s
[info] # Warmup Iteration   3: 1582388.204 ops/s
[info] Iteration   1: 1574805.521 ops/s
[info]                  ·gc.alloc.rate:                   1064.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1304.012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1303.518 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1620863.942 ops/s
[info]                  ·gc.alloc.rate:                   1096.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.232 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 956.324 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1588594.690 ops/s
[info]                  ·gc.alloc.rate:                   1074.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 982.356 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1619680.208 ops/s
[info]                  ·gc.alloc.rate:                   1094.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.849 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1291.359 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1619981.445 ops/s
[info]                  ·gc.alloc.rate:                   1095.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.756 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 973.035 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala":
[info]   1604785.161 ±(99.9%) 83307.212 ops/s [Average]
[info]   (min, avg, max) = (1574805.521, 1604785.161, 1620863.942), stdev = 21634.618
[info]   CI (99.9%): [1521477.949, 1688092.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1084.976 ±(99.9%) 56.970 MB/sec [Average]
[info]   (min, avg, max) = (1064.404, 1084.976, 1096.163), stdev = 14.795
[info]   CI (99.9%): [1028.006, 1141.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1064.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1064.000, 1064.000, 1064.000), stdev = 0.001
[info]   CI (99.9%): [1064.000, 1064.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.024
[info]   CI (99.9%): [0.004, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.094 ±(99.9%) 0.093 B/op [Average]
[info]   (min, avg, max) = (0.061, 0.094, 0.124), stdev = 0.024
[info]   CI (99.9%): [0.001, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1122.291 ±(99.9%) 683.644 MB/sec [Average]
[info]   (min, avg, max) = (985.232, 1122.291, 1328.849), stdev = 177.540
[info]   CI (99.9%): [438.647, 1805.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1101.319 ±(99.9%) 690.524 B/op [Average]
[info]   (min, avg, max) = (956.324, 1101.319, 1303.518), stdev = 179.327
[info]   CI (99.9%): [410.795, 1791.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala
[info] # Run progress: 74.89% complete, ETA 00:12:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5651188.092 ops/s
[info] # Warmup Iteration   2: 6863202.422 ops/s
[info] # Warmup Iteration   3: 6991028.881 ops/s
[info] Iteration   1: 6984954.809 ops/s
[info]                  ·gc.alloc.rate:                   781.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.978 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147.091 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6787808.601 ops/s
[info]                  ·gc.alloc.rate:                   759.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.987 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 151.366 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6931705.164 ops/s
[info]                  ·gc.alloc.rate:                   775.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.848 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 222.498 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6933240.234 ops/s
[info]                  ·gc.alloc.rate:                   775.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.093 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 148.649 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6922314.961 ops/s
[info]                  ·gc.alloc.rate:                   774.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.422 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 149.259 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala":
[info]   6912004.754 ±(99.9%) 283563.697 ops/s [Average]
[info]   (min, avg, max) = (6787808.601, 6912004.754, 6984954.809), stdev = 73640.592
[info]   CI (99.9%): [6628441.056, 7195568.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   773.060 ±(99.9%) 31.649 MB/sec [Average]
[info]   (min, avg, max) = (759.257, 773.060, 781.313), stdev = 8.219
[info]   CI (99.9%): [741.411, 804.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.125), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.012 ±(99.9%) 0.045 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.029), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   719.466 ±(99.9%) 560.522 MB/sec [Average]
[info]   (min, avg, max) = (652.978, 719.466, 979.848), stdev = 145.566
[info]   CI (99.9%): [158.944, 1279.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   163.773 ±(99.9%) 126.548 B/op [Average]
[info]   (min, avg, max) = (147.091, 163.773, 222.498), stdev = 32.864
[info]   CI (99.9%): [37.225, 290.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson
[info] # Run progress: 75.32% complete, ETA 00:12:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 168239.485 ops/s
[info] # Warmup Iteration   2: 542070.434 ops/s
[info] # Warmup Iteration   3: 542775.510 ops/s
[info] Iteration   1: 537509.020 ops/s
[info]                  ·gc.alloc.rate:                   1854.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              5432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1987.904 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5821.380 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 538612.499 ops/s
[info]                  ·gc.alloc.rate:                   1859.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              5432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1670.857 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4881.950 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 544404.563 ops/s
[info]                  ·gc.alloc.rate:                   1878.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              5432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5835.008 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 543031.082 ops/s
[info]                  ·gc.alloc.rate:                   1874.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              5432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1688.859 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4894.366 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 541560.402 ops/s
[info]                  ·gc.alloc.rate:                   1869.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              5432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5906.440 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson":
[info]   541023.513 ±(99.9%) 11212.373 ops/s [Average]
[info]   (min, avg, max) = (537509.020, 541023.513, 544404.563), stdev = 2911.818
[info]   CI (99.9%): [529811.140, 552235.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1867.309 ±(99.9%) 38.676 MB/sec [Average]
[info]   (min, avg, max) = (1854.938, 1867.309, 1878.654), stdev = 10.044
[info]   CI (99.9%): [1828.634, 1905.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5432.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5432.001, 5432.001, 5432.001), stdev = 0.001
[info]   CI (99.9%): [5432.001, 5432.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.230 ±(99.9%) 0.258 B/op [Average]
[info]   (min, avg, max) = (0.120, 0.230, 0.304), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1879.681 ±(99.9%) 705.583 MB/sec [Average]
[info]   (min, avg, max) = (1670.857, 1879.681, 2032.748), stdev = 183.238
[info]   CI (99.9%): [1174.098, 2585.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5467.829 ±(99.9%) 2041.487 B/op [Average]
[info]   (min, avg, max) = (4881.950, 5467.829, 5906.440), stdev = 530.168
[info]   CI (99.9%): [3426.342, 7509.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 8.000), stdev = 1.140
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce
[info] # Run progress: 75.76% complete, ETA 00:11:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 402569.793 ops/s
[info] # Warmup Iteration   2: 636764.551 ops/s
[info] # Warmup Iteration   3: 647313.224 ops/s
[info] Iteration   1: 648277.866 ops/s
[info]                  ·gc.alloc.rate:                   2247.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2316.073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5622.316 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 648770.962 ops/s
[info]                  ·gc.alloc.rate:                   2248.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2004.762 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4864.260 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 646429.576 ops/s
[info]                  ·gc.alloc.rate:                   2240.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2355.771 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5736.650 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 642653.882 ops/s
[info]                  ·gc.alloc.rate:                   2227.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2367.954 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5799.745 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 642236.424 ops/s
[info]                  ·gc.alloc.rate:                   2226.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.934 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4987.257 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce":
[info]   645673.742 ±(99.9%) 11849.762 ops/s [Average]
[info]   (min, avg, max) = (642236.424, 645673.742, 648770.962), stdev = 3077.346
[info]   CI (99.9%): [633823.980, 657523.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate":
[info]   2238.105 ±(99.9%) 41.221 MB/sec [Average]
[info]   (min, avg, max) = (2226.194, 2238.105, 2248.643), stdev = 10.705
[info]   CI (99.9%): [2196.885, 2279.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5456.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5456.001, 5456.001, 5456.001), stdev = 0.001
[info]   CI (99.9%): [5456.001, 5456.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.121 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.121, 0.167), stdev = 0.031
[info]   CI (99.9%): [0.002, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.294 ±(99.9%) 0.287 B/op [Average]
[info]   (min, avg, max) = (0.203, 0.294, 0.404), stdev = 0.074
[info]   CI (99.9%): [0.007, 0.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2215.899 ±(99.9%) 694.310 MB/sec [Average]
[info]   (min, avg, max) = (2004.762, 2215.899, 2367.954), stdev = 180.310
[info]   CI (99.9%): [1521.589, 2910.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5402.045 ±(99.9%) 1700.298 B/op [Average]
[info]   (min, avg, max) = (4864.260, 5402.045, 5799.745), stdev = 441.562
[info]   CI (99.9%): [3701.747, 7102.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 10.000), stdev = 1.924
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala
[info] # Run progress: 76.19% complete, ETA 00:11:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4706923.431 ops/s
[info] # Warmup Iteration   2: 4958909.262 ops/s
[info] # Warmup Iteration   3: 5090874.075 ops/s
[info] Iteration   1: 5061539.276 ops/s
[info]                  ·gc.alloc.rate:                   1260.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.434 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 408.674 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5047336.458 ops/s
[info]                  ·gc.alloc.rate:                   1257.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1319.909 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 411.486 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5044211.458 ops/s
[info]                  ·gc.alloc.rate:                   1256.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1326.750 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 414.025 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 5097434.044 ops/s
[info]                  ·gc.alloc.rate:                   1269.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1000.265 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 308.819 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5076911.168 ops/s
[info]                  ·gc.alloc.rate:                   1264.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 415.179 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala":
[info]   5065486.481 ±(99.9%) 84993.766 ops/s [Average]
[info]   (min, avg, max) = (5044211.458, 5065486.481, 5097434.044), stdev = 22072.611
[info]   CI (99.9%): [4980492.715, 5150480.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1261.682 ±(99.9%) 21.146 MB/sec [Average]
[info]   (min, avg, max) = (1256.170, 1261.682, 1269.689), stdev = 5.492
[info]   CI (99.9%): [1240.536, 1282.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.092, 0.125), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.028 ±(99.9%) 0.049 B/op [Average]
[info]   (min, avg, max) = (0.006, 0.028, 0.039), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1260.092 ±(99.9%) 560.421 MB/sec [Average]
[info]   (min, avg, max) = (1000.265, 1260.092, 1339.103), stdev = 145.540
[info]   CI (99.9%): [699.671, 1820.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   391.637 ±(99.9%) 178.532 B/op [Average]
[info]   (min, avg, max) = (308.819, 391.637, 415.179), stdev = 46.364
[info]   CI (99.9%): [213.105, 570.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson
[info] # Run progress: 76.62% complete, ETA 00:11:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 122720.666 ops/s
[info] # Warmup Iteration   2: 383144.626 ops/s
[info] # Warmup Iteration   3: 384541.786 ops/s
[info] Iteration   1: 387626.472 ops/s
[info]                  ·gc.alloc.rate:                   2084.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              8464.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2325.694 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9443.719 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 388572.679 ops/s
[info]                  ·gc.alloc.rate:                   2090.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              8464.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2012.567 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8149.694 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 382777.858 ops/s
[info]                  ·gc.alloc.rate:                   2058.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              8464.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8322.358 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 381709.972 ops/s
[info]                  ·gc.alloc.rate:                   2052.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              8464.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.228 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8376.270 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 387168.425 ops/s
[info]                  ·gc.alloc.rate:                   2082.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              8464.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.221 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8275.588 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson":
[info]   385571.081 ±(99.9%) 11945.686 ops/s [Average]
[info]   (min, avg, max) = (381709.972, 385571.081, 388572.679), stdev = 3102.257
[info]   CI (99.9%): [373625.395, 397516.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2073.610 ±(99.9%) 65.292 MB/sec [Average]
[info]   (min, avg, max) = (2052.503, 2073.610, 2090.185), stdev = 16.956
[info]   CI (99.9%): [2008.318, 2138.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8464.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8464.001, 8464.001, 8464.001), stdev = 0.001
[info]   CI (99.9%): [8464.001, 8464.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.117, 0.167), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.475 ±(99.9%) 0.628 B/op [Average]
[info]   (min, avg, max) = (0.257, 0.475, 0.677), stdev = 0.163
[info]   CI (99.9%): [≈ 0, 1.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2085.925 ±(99.9%) 517.256 MB/sec [Average]
[info]   (min, avg, max) = (2012.567, 2085.925, 2325.694), stdev = 134.330
[info]   CI (99.9%): [1568.670, 2603.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8513.526 ±(99.9%) 2028.116 B/op [Average]
[info]   (min, avg, max) = (8149.694, 8513.526, 9443.719), stdev = 526.695
[info]   CI (99.9%): [6485.410, 10541.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 9.000), stdev = 0.894
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce
[info] # Run progress: 77.06% complete, ETA 00:11:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 257560.671 ops/s
[info] # Warmup Iteration   2: 459125.810 ops/s
[info] # Warmup Iteration   3: 462348.039 ops/s
[info] Iteration   1: 465596.382 ops/s
[info]                  ·gc.alloc.rate:                   1228.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              4152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      977.717 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3305.396 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 460993.446 ops/s
[info]                  ·gc.alloc.rate:                   1215.947 MB/sec
[info]                  ·gc.alloc.rate.norm:              4152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1308.755 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4468.906 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 466117.690 ops/s
[info]                  ·gc.alloc.rate:                   1229.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              4152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.424 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4449.037 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 466561.426 ops/s
[info]                  ·gc.alloc.rate:                   1230.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              4152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      994.274 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3353.791 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 465393.659 ops/s
[info]                  ·gc.alloc.rate:                   1227.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              4152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1333.117 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4507.752 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce":
[info]   464932.521 ±(99.9%) 8659.161 ops/s [Average]
[info]   (min, avg, max) = (460993.446, 464932.521, 466561.426), stdev = 2248.757
[info]   CI (99.9%): [456273.360, 473591.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1226.474 ±(99.9%) 23.128 MB/sec [Average]
[info]   (min, avg, max) = (1215.947, 1226.474, 1230.913), stdev = 6.006
[info]   CI (99.9%): [1203.346, 1249.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4152.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4152.001, 4152.001, 4152.001), stdev = 0.001
[info]   CI (99.9%): [4152.001, 4152.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.207 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.146), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.268 ±(99.9%) 0.705 B/op [Average]
[info]   (min, avg, max) = (0.070, 0.268, 0.493), stdev = 0.183
[info]   CI (99.9%): [≈ 0, 0.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1186.257 ±(99.9%) 705.112 MB/sec [Average]
[info]   (min, avg, max) = (977.717, 1186.257, 1333.117), stdev = 183.115
[info]   CI (99.9%): [481.145, 1891.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4016.976 ±(99.9%) 2418.513 B/op [Average]
[info]   (min, avg, max) = (3305.396, 4016.976, 4507.752), stdev = 628.080
[info]   CI (99.9%): [1598.463, 6435.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala
[info] # Run progress: 77.49% complete, ETA 00:11:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2795794.518 ops/s
[info] # Warmup Iteration   2: 3357613.425 ops/s
[info] # Warmup Iteration   3: 3424690.239 ops/s
[info] Iteration   1: 3436406.821 ops/s
[info]                  ·gc.alloc.rate:                   663.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 299.904 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 3407903.984 ops/s
[info]                  ·gc.alloc.rate:                   658.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.721 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 301.504 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3397658.050 ops/s
[info]                  ·gc.alloc.rate:                   656.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.761 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 302.408 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3353413.996 ops/s
[info]                  ·gc.alloc.rate:                   647.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.226 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 306.545 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 3374536.085 ops/s
[info]                  ·gc.alloc.rate:                   651.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.491 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 305.248 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala":
[info]   3393983.787 ±(99.9%) 122240.615 ops/s [Average]
[info]   (min, avg, max) = (3353413.996, 3393983.787, 3436406.821), stdev = 31745.499
[info]   CI (99.9%): [3271743.173, 3516224.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   655.568 ±(99.9%) 23.637 MB/sec [Average]
[info]   (min, avg, max) = (647.804, 655.568, 663.901), stdev = 6.139
[info]   CI (99.9%): [631.931, 679.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.027 ±(99.9%) 0.075 B/op [Average]
[info]   (min, avg, max) = (0.010, 0.027, 0.048), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   653.631 ±(99.9%) 3.967 MB/sec [Average]
[info]   (min, avg, max) = (652.721, 653.631, 654.956), stdev = 1.030
[info]   CI (99.9%): [649.664, 657.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   303.122 ±(99.9%) 10.495 B/op [Average]
[info]   (min, avg, max) = (299.904, 303.122, 306.545), stdev = 2.726
[info]   CI (99.9%): [292.627, 313.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson
[info] # Run progress: 77.92% complete, ETA 00:10:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 85205.257 ops/s
[info] # Warmup Iteration   2: 322140.125 ops/s
[info] # Warmup Iteration   3: 319306.497 ops/s
[info] Iteration   1: 322098.040 ops/s
[info]                  ·gc.alloc.rate:                   1176.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              5752.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1311.263 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6408.999 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 322462.668 ops/s
[info]                  ·gc.alloc.rate:                   1178.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              5752.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.517 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4829.878 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 323060.896 ops/s
[info]                  ·gc.alloc.rate:                   1180.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              5752.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1327.839 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6469.266 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 319098.200 ops/s
[info]                  ·gc.alloc.rate:                   1166.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              5752.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.496 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4938.302 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 323788.086 ops/s
[info]                  ·gc.alloc.rate:                   1183.248 MB/sec
[info]                  ·gc.alloc.rate.norm:              5752.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6518.043 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson":
[info]   322101.578 ±(99.9%) 6919.191 ops/s [Average]
[info]   (min, avg, max) = (319098.200, 322101.578, 323788.086), stdev = 1796.892
[info]   CI (99.9%): [315182.387, 329020.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1177.132 ±(99.9%) 24.659 MB/sec [Average]
[info]   (min, avg, max) = (1166.516, 1177.132, 1183.248), stdev = 6.404
[info]   CI (99.9%): [1152.473, 1201.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5752.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5752.001, 5752.001, 5752.001), stdev = 0.001
[info]   CI (99.9%): [5752.001, 5752.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.386 ±(99.9%) 0.695 B/op [Average]
[info]   (min, avg, max) = (0.103, 0.386, 0.607), stdev = 0.181
[info]   CI (99.9%): [≈ 0, 1.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1194.189 ±(99.9%) 699.752 MB/sec [Average]
[info]   (min, avg, max) = (989.517, 1194.189, 1340.831), stdev = 181.723
[info]   CI (99.9%): [494.437, 1893.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5832.897 ±(99.9%) 3341.769 B/op [Average]
[info]   (min, avg, max) = (4829.878, 5832.897, 6518.043), stdev = 867.847
[info]   CI (99.9%): [2491.129, 9174.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 78.35% complete, ETA 00:10:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1116767.335 ops/s
[info] # Warmup Iteration   2: 2056453.836 ops/s
[info] # Warmup Iteration   3: 2076867.515 ops/s
[info] Iteration   1: 2087236.223 ops/s
[info]                  ·gc.alloc.rate:                   3044.486 MB/sec
[info]                  ·gc.alloc.rate.norm:              2296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3340.262 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2519.060 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 2079778.443 ops/s
[info]                  ·gc.alloc.rate:                   3033.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              2296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3036.742 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2298.204 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 2069345.323 ops/s
[info]                  ·gc.alloc.rate:                   3018.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              2296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2711.796 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2062.473 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 2069547.538 ops/s
[info]                  ·gc.alloc.rate:                   3018.733 MB/sec
[info]                  ·gc.alloc.rate.norm:              2296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3057.195 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2325.254 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 2097426.956 ops/s
[info]                  ·gc.alloc.rate:                   3060.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              2296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3063.868 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2298.844 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2080666.897 ±(99.9%) 46234.320 ops/s [Average]
[info]   (min, avg, max) = (2069345.323, 2080666.897, 2097426.956), stdev = 12006.906
[info]   CI (99.9%): [2034432.577, 2126901.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3035.194 ±(99.9%) 67.952 MB/sec [Average]
[info]   (min, avg, max) = (3018.733, 3035.194, 3060.077), stdev = 17.647
[info]   CI (99.9%): [2967.241, 3103.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2296.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2296.000, 2296.000, 2296.000), stdev = 0.001
[info]   CI (99.9%): [2296.000, 2296.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.133 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.133, 0.208), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.101 ±(99.9%) 0.159 B/op [Average]
[info]   (min, avg, max) = (0.047, 0.101, 0.158), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3041.973 ±(99.9%) 858.296 MB/sec [Average]
[info]   (min, avg, max) = (2711.796, 3041.973, 3340.262), stdev = 222.897
[info]   CI (99.9%): [2183.677, 3900.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2300.767 ±(99.9%) 624.011 B/op [Average]
[info]   (min, avg, max) = (2062.473, 2300.767, 2519.060), stdev = 162.054
[info]   CI (99.9%): [1676.756, 2924.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   45.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 9.000, 10.000), stdev = 0.707
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.200, 9.000), stdev = 0.837
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 78.79% complete, ETA 00:10:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38950.090 ops/s
[info] # Warmup Iteration   2: 294303.311 ops/s
[info] # Warmup Iteration   3: 292845.166 ops/s
[info] Iteration   1: 285417.212 ops/s
[info]                  ·gc.alloc.rate:                   515.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      578.882 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3192.130 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 295503.295 ops/s
[info]                  ·gc.alloc.rate:                   533.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.117 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1720.809 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 291405.921 ops/s
[info]                  ·gc.alloc.rate:                   525.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      650.794 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3515.174 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 287700.120 ops/s
[info]                  ·gc.alloc.rate:                   519.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.510 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3575.051 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 296390.398 ops/s
[info]                  ·gc.alloc.rate:                   534.952 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.147 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1742.097 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   291283.389 ±(99.9%) 18382.138 ops/s [Average]
[info]   (min, avg, max) = (285417.212, 291283.389, 296390.398), stdev = 4773.783
[info]   CI (99.9%): [272901.251, 309665.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   525.637 ±(99.9%) 33.337 MB/sec [Average]
[info]   (min, avg, max) = (515.025, 525.637, 534.952), stdev = 8.657
[info]   CI (99.9%): [492.300, 558.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2840.001, 2840.001, 2840.002), stdev = 0.001
[info]   CI (99.9%): [2840.001, 2840.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.399 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.250), stdev = 0.104
[info]   CI (99.9%): [≈ 0, 0.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.412 ±(99.9%) 2.202 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.412, 1.378), stdev = 0.572
[info]   CI (99.9%): [≈ 0, 2.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   506.890 ±(99.9%) 647.520 MB/sec [Average]
[info]   (min, avg, max) = (323.117, 506.890, 653.510), stdev = 168.159
[info]   CI (99.9%): [≈ 0, 1154.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2749.052 ±(99.9%) 3620.822 B/op [Average]
[info]   (min, avg, max) = (1720.809, 2749.052, 3575.051), stdev = 940.316
[info]   CI (99.9%): [≈ 0, 6369.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 79.22% complete, ETA 00:10:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 637592.602 ops/s
[info] # Warmup Iteration   2: 695101.404 ops/s
[info] # Warmup Iteration   3: 705318.148 ops/s
[info] Iteration   1: 701539.023 ops/s
[info]                  ·gc.alloc.rate:                   445.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.744 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 573.882 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 698540.538 ops/s
[info]                  ·gc.alloc.rate:                   443.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.953 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1497.908 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 705125.694 ops/s
[info]                  ·gc.alloc.rate:                   447.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.332 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 737.496 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 695384.233 ops/s
[info]                  ·gc.alloc.rate:                   441.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.358 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 747.828 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 686782.229 ops/s
[info]                  ·gc.alloc.rate:                   436.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.421 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1511.262 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   697474.343 ±(99.9%) 26878.172 ops/s [Average]
[info]   (min, avg, max) = (686782.229, 697474.343, 705125.694), stdev = 6980.176
[info]   CI (99.9%): [670596.172, 724352.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   443.113 ±(99.9%) 16.982 MB/sec [Average]
[info]   (min, avg, max) = (436.338, 443.113, 447.911), stdev = 4.410
[info]   CI (99.9%): [426.132, 460.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1000.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1000.001, 1000.001, 1000.001), stdev = 0.001
[info]   CI (99.9%): [1000.001, 1000.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.666 ±(99.9%) 5.470 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.207), stdev = 1.420
[info]   CI (99.9%): [≈ 0, 6.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.502 ±(99.9%) 12.320 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.502, 7.223), stdev = 3.199
[info]   CI (99.9%): [≈ 0, 13.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   448.162 ±(99.9%) 761.452 MB/sec [Average]
[info]   (min, avg, max) = (255.744, 448.162, 664.953), stdev = 197.747
[info]   CI (99.9%): [≈ 0, 1209.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1013.675 ±(99.9%) 1746.047 B/op [Average]
[info]   (min, avg, max) = (573.882, 1013.675, 1511.262), stdev = 453.443
[info]   CI (99.9%): [≈ 0, 2759.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 79.65% complete, ETA 00:10:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3413680.647 ops/s
[info] # Warmup Iteration   2: 3727896.627 ops/s
[info] # Warmup Iteration   3: 3727677.140 ops/s
[info] Iteration   1: 3834533.897 ops/s
[info]                  ·gc.alloc.rate:                   1247.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 406.159 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3794845.054 ops/s
[info]                  ·gc.alloc.rate:                   1234.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.966 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 548.681 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 3831857.534 ops/s
[info]                  ·gc.alloc.rate:                   1246.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.377 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 545.705 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3812925.494 ops/s
[info]                  ·gc.alloc.rate:                   1240.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1335.862 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 551.444 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3838377.751 ops/s
[info]                  ·gc.alloc.rate:                   1249.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1005.870 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 412.306 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   3822507.946 ±(99.9%) 70503.281 ops/s [Average]
[info]   (min, avg, max) = (3794845.054, 3822507.946, 3838377.751), stdev = 18309.478
[info]   CI (99.9%): [3752004.665, 3893011.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   1243.488 ±(99.9%) 23.074 MB/sec [Average]
[info]   (min, avg, max) = (1234.522, 1243.488, 1249.086), stdev = 5.992
[info]   CI (99.9%): [1220.414, 1266.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   512.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (512.000, 512.000, 512.000), stdev = 0.001
[info]   CI (99.9%): [512.000, 512.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.125), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   0.034 ±(99.9%) 0.041 B/op [Average]
[info]   (min, avg, max) = (0.026, 0.034, 0.052), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   1196.489 ±(99.9%) 699.633 MB/sec [Average]
[info]   (min, avg, max) = (989.372, 1196.489, 1335.862), stdev = 181.692
[info]   CI (99.9%): [496.856, 1896.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   492.859 ±(99.9%) 294.181 B/op [Average]
[info]   (min, avg, max) = (406.159, 492.859, 551.444), stdev = 76.398
[info]   CI (99.9%): [198.678, 787.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 8.000), stdev = 2.168
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 80.09% complete, ETA 00:09:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3768902.596 ops/s
[info] # Warmup Iteration   2: 4013089.206 ops/s
[info] # Warmup Iteration   3: 4125717.894 ops/s
[info] Iteration   1: 4123020.361 ops/s
[info]                  ·gc.alloc.rate:                   356.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.826 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97.643 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 4116086.444 ops/s
[info]                  ·gc.alloc.rate:                   355.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.816 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97.808 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 4143360.950 ops/s
[info]                  ·gc.alloc.rate:                   357.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332.370 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 126.265 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 4121606.564 ops/s
[info]                  ·gc.alloc.rate:                   356.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332.356 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 126.929 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 4169288.541 ops/s
[info]                  ·gc.alloc.rate:                   360.202 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.684 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 249.452 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   4134672.572 ±(99.9%) 84488.340 ops/s [Average]
[info]   (min, avg, max) = (4116086.444, 4134672.572, 4169288.541), stdev = 21941.354
[info]   CI (99.9%): [4050184.232, 4219160.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   357.266 ±(99.9%) 7.157 MB/sec [Average]
[info]   (min, avg, max) = (355.707, 357.266, 360.202), stdev = 1.859
[info]   CI (99.9%): [350.109, 364.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   136.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (136.000, 136.000, 136.000), stdev = 0.001
[info]   CI (99.9%): [136.000, 136.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   0.655 ±(99.9%) 5.413 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.655, 3.169), stdev = 1.406
[info]   CI (99.9%): [≈ 0, 6.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   0.249 ±(99.9%) 2.056 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.249, 1.204), stdev = 0.534
[info]   CI (99.9%): [≈ 0, 2.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   367.410 ±(99.9%) 648.265 MB/sec [Average]
[info]   (min, avg, max) = (255.816, 367.410, 660.684), stdev = 168.352
[info]   CI (99.9%): [≈ 0, 1015.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   139.620 ±(99.9%) 242.871 B/op [Average]
[info]   (min, avg, max) = (97.643, 139.620, 249.452), stdev = 63.073
[info]   CI (99.9%): [≈ 0, 382.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 80.52% complete, ETA 00:09:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17067.112 ops/s
[info] # Warmup Iteration   2: 187760.136 ops/s
[info] # Warmup Iteration   3: 197866.742 ops/s
[info] Iteration   1: 204095.072 ops/s
[info]                  ·gc.alloc.rate:                   1298.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              10016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.963 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.361 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10099.058 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 204331.554 ops/s
[info]                  ·gc.alloc.rate:                   1300.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              10016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320.376 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10169.589 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 202661.540 ops/s
[info]                  ·gc.alloc.rate:                   1289.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              10016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7743.818 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 202824.261 ops/s
[info]                  ·gc.alloc.rate:                   1291.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              10016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336.350 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10366.459 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 202874.819 ops/s
[info]                  ·gc.alloc.rate:                   1291.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              10016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10415.633 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   203357.449 ±(99.9%) 3040.838 ops/s [Average]
[info]   (min, avg, max) = (202661.540, 203357.449, 204331.554), stdev = 789.696
[info]   CI (99.9%): [200316.611, 206398.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1294.166 ±(99.9%) 19.123 MB/sec [Average]
[info]   (min, avg, max) = (1289.560, 1294.166, 1300.435), stdev = 4.966
[info]   CI (99.9%): [1275.043, 1313.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10016.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10016.002, 10016.002, 10016.002), stdev = 0.001
[info]   CI (99.9%): [10016.002, 10016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.125), stdev = 0.021
[info]   CI (99.9%): [0.024, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.805 ±(99.9%) 0.609 B/op [Average]
[info]   (min, avg, max) = (0.646, 0.805, 0.963), stdev = 0.158
[info]   CI (99.9%): [0.196, 1.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1261.137 ±(99.9%) 570.770 MB/sec [Average]
[info]   (min, avg, max) = (997.016, 1261.137, 1342.583), stdev = 148.227
[info]   CI (99.9%): [690.368, 1831.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9758.911 ±(99.9%) 4367.281 B/op [Average]
[info]   (min, avg, max) = (7743.818, 9758.911, 10415.633), stdev = 1134.169
[info]   CI (99.9%): [5391.630, 14126.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce
[info] # Run progress: 80.95% complete, ETA 00:09:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 485461.159 ops/s
[info] # Warmup Iteration   2: 719629.950 ops/s
[info] # Warmup Iteration   3: 726849.788 ops/s
[info] Iteration   1: 720641.650 ops/s
[info]                  ·gc.alloc.rate:                   2746.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              6000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2668.809 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5829.714 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 722019.274 ops/s
[info]                  ·gc.alloc.rate:                   2752.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              6000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2693.423 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5872.041 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 724408.114 ops/s
[info]                  ·gc.alloc.rate:                   2760.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              6000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2707.932 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5884.713 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 724574.905 ops/s
[info]                  ·gc.alloc.rate:                   2761.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              6000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2716.147 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5900.615 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 728000.188 ops/s
[info]                  ·gc.alloc.rate:                   2775.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              6000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2720.518 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5880.172 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce":
[info]   723928.826 ±(99.9%) 10835.825 ops/s [Average]
[info]   (min, avg, max) = (720641.650, 723928.826, 728000.188), stdev = 2814.029
[info]   CI (99.9%): [713093.001, 734764.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2759.544 ±(99.9%) 42.857 MB/sec [Average]
[info]   (min, avg, max) = (2746.765, 2759.544, 2775.958), stdev = 11.130
[info]   CI (99.9%): [2716.687, 2802.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   6000.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6000.001, 6000.001, 6000.001), stdev = 0.001
[info]   CI (99.9%): [6000.000, 6000.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.187), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.235 ±(99.9%) 0.417 B/op [Average]
[info]   (min, avg, max) = (0.136, 0.235, 0.408), stdev = 0.108
[info]   CI (99.9%): [≈ 0, 0.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2701.366 ±(99.9%) 80.575 MB/sec [Average]
[info]   (min, avg, max) = (2668.809, 2701.366, 2720.518), stdev = 20.925
[info]   CI (99.9%): [2620.791, 2781.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5873.451 ±(99.9%) 102.328 B/op [Average]
[info]   (min, avg, max) = (5829.714, 5873.451, 5900.615), stdev = 26.574
[info]   CI (99.9%): [5771.123, 5975.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.count":
[info]   40.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.000, 8.000), stdev = 0.001
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala
[info] # Run progress: 81.39% complete, ETA 00:09:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3161383.317 ops/s
[info] # Warmup Iteration   2: 3809242.663 ops/s
[info] # Warmup Iteration   3: 3829083.553 ops/s
[info] Iteration   1: 3879129.126 ops/s
[info]                  ·gc.alloc.rate:                   2503.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2667.445 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1082.463 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 3883848.735 ops/s
[info]                  ·gc.alloc.rate:                   2507.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2355.545 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 954.384 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 3842921.172 ops/s
[info]                  ·gc.alloc.rate:                   2480.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2366.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 969.187 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 3787064.686 ops/s
[info]                  ·gc.alloc.rate:                   2444.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2714.743 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1128.132 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 3857058.480 ops/s
[info]                  ·gc.alloc.rate:                   2490.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2379.365 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 970.663 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala":
[info]   3850004.440 ±(99.9%) 149817.125 ops/s [Average]
[info]   (min, avg, max) = (3787064.686, 3850004.440, 3883848.735), stdev = 38907.032
[info]   CI (99.9%): [3700187.315, 3999821.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2485.402 ±(99.9%) 96.627 MB/sec [Average]
[info]   (min, avg, max) = (2444.908, 2485.402, 2507.621), stdev = 25.094
[info]   CI (99.9%): [2388.775, 2582.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1016.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1016.000, 1016.000, 1016.000), stdev = 0.001
[info]   CI (99.9%): [1016.000, 1016.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.039 ±(99.9%) 0.059 B/op [Average]
[info]   (min, avg, max) = (0.025, 0.039, 0.059), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   2496.626 ±(99.9%) 687.377 MB/sec [Average]
[info]   (min, avg, max) = (2355.545, 2496.626, 2714.743), stdev = 178.510
[info]   CI (99.9%): [1809.249, 3184.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1020.966 ±(99.9%) 303.878 B/op [Average]
[info]   (min, avg, max) = (954.384, 1020.966, 1128.132), stdev = 78.916
[info]   CI (99.9%): [717.088, 1324.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.count":
[info]   37.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 7.000), stdev = 0.894
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson
[info] # Run progress: 81.82% complete, ETA 00:08:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52324.937 ops/s
[info] # Warmup Iteration   2: 251278.332 ops/s
[info] # Warmup Iteration   3: 248898.483 ops/s
[info] Iteration   1: 253093.133 ops/s
[info]                  ·gc.alloc.rate:                   1809.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              11256.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1652.145 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10275.283 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 254633.819 ops/s
[info]                  ·gc.alloc.rate:                   1821.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              11256.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2000.993 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12368.497 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 259227.750 ops/s
[info]                  ·gc.alloc.rate:                   1854.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              11256.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1679.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10193.601 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 257375.406 ops/s
[info]                  ·gc.alloc.rate:                   1840.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              11256.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.401 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12379.367 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 257632.708 ops/s
[info]                  ·gc.alloc.rate:                   1843.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              11256.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694.077 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10344.630 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson":
[info]   256392.563 ±(99.9%) 9534.066 ops/s [Average]
[info]   (min, avg, max) = (253093.133, 256392.563, 259227.750), stdev = 2475.967
[info]   CI (99.9%): [246858.497, 265926.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1833.781 ±(99.9%) 69.036 MB/sec [Average]
[info]   (min, avg, max) = (1809.833, 1833.781, 1854.034), stdev = 17.928
[info]   CI (99.9%): [1764.745, 1902.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   11256.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11256.002, 11256.002, 11256.002), stdev = 0.001
[info]   CI (99.9%): [11256.001, 11256.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.146), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.614 ±(99.9%) 0.742 B/op [Average]
[info]   (min, avg, max) = (0.382, 0.614, 0.901), stdev = 0.193
[info]   CI (99.9%): [≈ 0, 1.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1810.132 ±(99.9%) 715.103 MB/sec [Average]
[info]   (min, avg, max) = (1652.145, 1810.132, 2024.401), stdev = 185.710
[info]   CI (99.9%): [1095.028, 2525.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   11112.276 ±(99.9%) 4439.699 B/op [Average]
[info]   (min, avg, max) = (10193.601, 11112.276, 12379.367), stdev = 1152.976
[info]   CI (99.9%): [6672.577, 15551.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce
[info] # Run progress: 82.25% complete, ETA 00:08:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 560923.615 ops/s
[info] # Warmup Iteration   2: 835859.433 ops/s
[info] # Warmup Iteration   3: 832834.998 ops/s
[info] Iteration   1: 829449.253 ops/s
[info]                  ·gc.alloc.rate:                   1821.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1972.197 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3742.675 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 834164.874 ops/s
[info]                  ·gc.alloc.rate:                   1831.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1659.328 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3131.438 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 833522.338 ops/s
[info]                  ·gc.alloc.rate:                   1829.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2006.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3790.425 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 834218.974 ops/s
[info]                  ·gc.alloc.rate:                   1831.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.535 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3174.631 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 847855.609 ops/s
[info]                  ·gc.alloc.rate:                   1861.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1689.573 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3135.965 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce":
[info]   835842.209 ±(99.9%) 26956.007 ops/s [Average]
[info]   (min, avg, max) = (829449.253, 835842.209, 847855.609), stdev = 7000.390
[info]   CI (99.9%): [808886.202, 862798.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1835.198 ±(99.9%) 60.024 MB/sec [Average]
[info]   (min, avg, max) = (1821.134, 1835.198, 1861.999), stdev = 15.588
[info]   CI (99.9%): [1775.174, 1895.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3456.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3456.000, 3456.000, 3456.001), stdev = 0.001
[info]   CI (99.9%): [3456.000, 3456.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.125), stdev = 0.023
[info]   CI (99.9%): [0.012, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.188 ±(99.9%) 0.169 B/op [Average]
[info]   (min, avg, max) = (0.116, 0.188, 0.236), stdev = 0.044
[info]   CI (99.9%): [0.019, 0.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1802.118 ±(99.9%) 662.045 MB/sec [Average]
[info]   (min, avg, max) = (1659.328, 1802.118, 2006.956), stdev = 171.931
[info]   CI (99.9%): [1140.073, 2464.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3395.027 ±(99.9%) 1309.170 B/op [Average]
[info]   (min, avg, max) = (3131.438, 3395.027, 3790.425), stdev = 339.987
[info]   CI (99.9%): [2085.857, 4704.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala
[info] # Run progress: 82.68% complete, ETA 00:08:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_250ba263/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 668325.505 ops/s
[info] # Warmup Iteration   2: 1578391.718 ops/s
[info] # Warmup Iteration   3: 1558245.083 ops/s
[info] Iteration   1: 1558632.373 ops/s
[info]                  ·gc.alloc.rate:                   847.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      975.346 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 985.076 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1595259.084 ops/s
[info]                  ·gc.alloc.rate:                   867.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.388 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 644.716 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1595556.201 ops/s
[info]                  ·gc.alloc.rate:                   867.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.048 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 971.501 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1588908.315 ops/s
[info]                  ·gc.alloc.rate:                   864.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 980.866 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1591781.918 ops/s
[info]                  ·gc.alloc.rate:                   865.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.670 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 655.351 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala":
[info]   1586027.578 ±(99.9%) 59899.600 ops/s [Average]
[info]   (min, avg, max) = (1558632.373, 1586027.578, 1595556.201), stdev = 15555.736
[info]   CI (99.9%): [1526127.978, 1645927.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   862.528 ±(99.9%) 32.798 MB/sec [Average]
[info]   (min, avg, max) = (847.546, 862.528, 867.937), stdev = 8.518
[info]   CI (99.9%): [829.729, 895.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.125), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.062 ±(99.9%) 0.148 B/op [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.123), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   853.315 ±(99.9%) 686.880 MB/sec [Average]
[info]   (min, avg, max) = (653.388, 853.315, 990.125), stdev = 178.381
[info]   CI (99.9%): [166.435, 1540.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   847.502 ±(99.9%) 694.538 B/op [Average]
[info]   (min, avg, max) = (644.716, 847.502, 985.076), stdev = 180.369
[info]   CI (99.9%): [152.963, 1542.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala
[info] # Run progress: 83.12% complete, ETA 00:08:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4279709.938 ops/s
[info] # Warmup Iteration   2: 4927086.893 ops/s
[info] # Warmup Iteration   3: 4966137.899 ops/s
[info] Iteration   1: 4868247.175 ops/s
[info]                  ·gc.alloc.rate:                   371.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.753 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82.697 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 4814912.329 ops/s
[info]                  ·gc.alloc.rate:                   367.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      584.619 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 191.074 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 4811285.084 ops/s
[info]                  ·gc.alloc.rate:                   366.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 107.535 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 4749003.581 ops/s
[info]                  ·gc.alloc.rate:                   362.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.151 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 108.396 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 4804956.931 ops/s
[info]                  ·gc.alloc.rate:                   366.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 107.133 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala":
[info]   4809681.020 ±(99.9%) 162960.084 ops/s [Average]
[info]   (min, avg, max) = (4749003.581, 4809681.020, 4868247.175), stdev = 42320.216
[info]   CI (99.9%): [4646720.937, 4972641.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   366.702 ±(99.9%) 12.236 MB/sec [Average]
[info]   (min, avg, max) = (362.172, 366.702, 371.117), stdev = 3.178
[info]   CI (99.9%): [354.466, 378.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (120.000, 120.000, 120.000), stdev = 0.001
[info]   CI (99.9%): [120.000, 120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.764 ±(99.9%) 6.355 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.764, 3.716), stdev = 1.650
[info]   CI (99.9%): [≈ 0, 7.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.250 ±(99.9%) 2.077 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.250, 1.214), stdev = 0.539
[info]   CI (99.9%): [≈ 0, 2.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   364.643 ±(99.9%) 488.446 MB/sec [Average]
[info]   (min, avg, max) = (255.753, 364.643, 584.619), stdev = 126.848
[info]   CI (99.9%): [≈ 0, 853.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   119.367 ±(99.9%) 159.890 B/op [Average]
[info]   (min, avg, max) = (82.697, 119.367, 191.074), stdev = 41.523
[info]   CI (99.9%): [≈ 0, 279.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 5.000), stdev = 1.789
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson
[info] # Run progress: 83.55% complete, ETA 00:08:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 192083.247 ops/s
[info] # Warmup Iteration   2: 551669.977 ops/s
[info] # Warmup Iteration   3: 552911.106 ops/s
[info] Iteration   1: 561407.367 ops/s
[info]                  ·gc.alloc.rate:                   1903.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              5336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1987.739 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5573.489 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 554667.819 ops/s
[info]                  ·gc.alloc.rate:                   1880.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              5336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2006.870 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5693.205 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 557620.453 ops/s
[info]                  ·gc.alloc.rate:                   1890.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              5336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.393 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4749.384 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 553258.876 ops/s
[info]                  ·gc.alloc.rate:                   1875.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              5336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.081 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5766.581 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 554389.530 ops/s
[info]                  ·gc.alloc.rate:                   1879.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              5336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1693.837 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4809.201 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson":
[info]   556268.809 ±(99.9%) 12681.760 ops/s [Average]
[info]   (min, avg, max) = (553258.876, 556268.809, 561407.367), stdev = 3293.413
[info]   CI (99.9%): [543587.049, 568950.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1885.858 ±(99.9%) 42.303 MB/sec [Average]
[info]   (min, avg, max) = (1875.723, 1885.858, 1903.040), stdev = 10.986
[info]   CI (99.9%): [1843.556, 1928.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5336.001, 5336.001, 5336.001), stdev = 0.001
[info]   CI (99.9%): [5336.001, 5336.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.259 ±(99.9%) 0.347 B/op [Average]
[info]   (min, avg, max) = (0.175, 0.259, 0.355), stdev = 0.090
[info]   CI (99.9%): [≈ 0, 0.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1879.584 ±(99.9%) 675.348 MB/sec [Average]
[info]   (min, avg, max) = (1682.393, 1879.584, 2027.081), stdev = 175.386
[info]   CI (99.9%): [1204.236, 2554.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5318.372 ±(99.9%) 1915.166 B/op [Average]
[info]   (min, avg, max) = (4749.384, 5318.372, 5766.581), stdev = 497.363
[info]   CI (99.9%): [3403.206, 7233.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala
[info] # Run progress: 83.98% complete, ETA 00:07:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2934172.756 ops/s
[info] # Warmup Iteration   2: 3476143.327 ops/s
[info] # Warmup Iteration   3: 3532286.979 ops/s
[info] Iteration   1: 3547493.082 ops/s
[info]                  ·gc.alloc.rate:                   1676.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1648.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 731.323 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3546384.359 ops/s
[info]                  ·gc.alloc.rate:                   1676.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1660.836 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 737.166 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3509251.224 ops/s
[info]                  ·gc.alloc.rate:                   1658.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1671.056 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 749.409 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3496241.210 ops/s
[info]                  ·gc.alloc.rate:                   1652.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1681.218 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 756.875 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3534978.728 ops/s
[info]                  ·gc.alloc.rate:                   1670.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1687.230 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 751.283 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala":
[info]   3526869.720 ±(99.9%) 88657.204 ops/s [Average]
[info]   (min, avg, max) = (3496241.210, 3526869.720, 3547493.082), stdev = 23023.994
[info]   CI (99.9%): [3438212.517, 3615526.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1667.063 ±(99.9%) 41.438 MB/sec [Average]
[info]   (min, avg, max) = (1652.618, 1667.063, 1676.594), stdev = 10.761
[info]   CI (99.9%): [1625.625, 1708.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (744.000, 744.000, 744.000), stdev = 0.001
[info]   CI (99.9%): [744.000, 744.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.125), stdev = 0.015
[info]   CI (99.9%): [0.047, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.046 ±(99.9%) 0.024 B/op [Average]
[info]   (min, avg, max) = (0.037, 0.046, 0.055), stdev = 0.006
[info]   CI (99.9%): [0.022, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1669.673 ±(99.9%) 60.581 MB/sec [Average]
[info]   (min, avg, max) = (1648.027, 1669.673, 1687.230), stdev = 15.733
[info]   CI (99.9%): [1609.092, 1730.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   745.211 ±(99.9%) 40.758 B/op [Average]
[info]   (min, avg, max) = (731.323, 745.211, 756.875), stdev = 10.585
[info]   CI (99.9%): [704.454, 785.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson
[info] # Run progress: 84.42% complete, ETA 00:07:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 108425.762 ops/s
[info] # Warmup Iteration   2: 304954.015 ops/s
[info] # Warmup Iteration   3: 306250.429 ops/s
[info] Iteration   1: 307599.198 ops/s
[info]                  ·gc.alloc.rate:                   1638.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320.054 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6755.397 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 306026.862 ops/s
[info]                  ·gc.alloc.rate:                   1630.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1665.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8562.985 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 306648.759 ops/s
[info]                  ·gc.alloc.rate:                   1634.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1676.255 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8600.743 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 305234.404 ops/s
[info]                  ·gc.alloc.rate:                   1625.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.524 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8686.554 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 305556.211 ops/s
[info]                  ·gc.alloc.rate:                   1627.429 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.381 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8708.311 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson":
[info]   306213.087 ±(99.9%) 3619.963 ops/s [Average]
[info]   (min, avg, max) = (305234.404, 306213.087, 307599.198), stdev = 940.093
[info]   CI (99.9%): [302593.124, 309833.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1631.231 ±(99.9%) 19.395 MB/sec [Average]
[info]   (min, avg, max) = (1625.852, 1631.231, 1638.296), stdev = 5.037
[info]   CI (99.9%): [1611.836, 1650.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8384.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8384.001, 8384.001, 8384.001), stdev = 0.001
[info]   CI (99.9%): [8384.001, 8384.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.146), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.535 ±(99.9%) 0.653 B/op [Average]
[info]   (min, avg, max) = (0.322, 0.535, 0.751), stdev = 0.170
[info]   CI (99.9%): [≈ 0, 1.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1607.318 ±(99.9%) 619.413 MB/sec [Average]
[info]   (min, avg, max) = (1320.054, 1607.318, 1690.381), stdev = 160.860
[info]   CI (99.9%): [987.904, 2226.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8262.798 ±(99.9%) 3252.955 B/op [Average]
[info]   (min, avg, max) = (6755.397, 8262.798, 8708.311), stdev = 844.782
[info]   CI (99.9%): [5009.843, 11515.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce
[info] # Run progress: 84.85% complete, ETA 00:07:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 247050.435 ops/s
[info] # Warmup Iteration   2: 450009.272 ops/s
[info] # Warmup Iteration   3: 459106.572 ops/s
[info] Iteration   1: 458073.465 ops/s
[info]                  ·gc.alloc.rate:                   1176.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              4040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1303.924 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4478.952 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 457666.226 ops/s
[info]                  ·gc.alloc.rate:                   1174.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              4040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.245 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3374.316 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 459563.626 ops/s
[info]                  ·gc.alloc.rate:                   1179.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              4040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1315.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4504.473 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 457754.573 ops/s
[info]                  ·gc.alloc.rate:                   1174.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              4040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992.099 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3411.443 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 454002.728 ops/s
[info]                  ·gc.alloc.rate:                   1165.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              4040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331.298 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4613.886 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce":
[info]   457412.123 ±(99.9%) 7908.400 ops/s [Average]
[info]   (min, avg, max) = (454002.728, 457412.123, 459563.626), stdev = 2053.786
[info]   CI (99.9%): [449503.723, 465320.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1174.197 ±(99.9%) 19.636 MB/sec [Average]
[info]   (min, avg, max) = (1165.708, 1174.197, 1179.424), stdev = 5.099
[info]   CI (99.9%): [1154.561, 1193.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4040.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4040.001, 4040.001, 4040.001), stdev = 0.001
[info]   CI (99.9%): [4040.001, 4040.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.015
[info]   CI (99.9%): [0.006, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.215 ±(99.9%) 0.195 B/op [Average]
[info]   (min, avg, max) = (0.143, 0.215, 0.286), stdev = 0.051
[info]   CI (99.9%): [0.020, 0.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1184.717 ±(99.9%) 697.322 MB/sec [Average]
[info]   (min, avg, max) = (981.245, 1184.717, 1331.298), stdev = 181.092
[info]   CI (99.9%): [487.395, 1882.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4076.614 ±(99.9%) 2411.865 B/op [Average]
[info]   (min, avg, max) = (3374.316, 4076.614, 4613.886), stdev = 626.354
[info]   CI (99.9%): [1664.748, 6488.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala
[info] # Run progress: 85.28% complete, ETA 00:07:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2372581.258 ops/s
[info] # Warmup Iteration   2: 2836105.866 ops/s
[info] # Warmup Iteration   3: 2877411.918 ops/s
[info] Iteration   1: 2882928.652 ops/s
[info]                  ·gc.alloc.rate:                   586.038 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.671 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 358.569 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2889938.948 ops/s
[info]                  ·gc.alloc.rate:                   587.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 355.535 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2892490.983 ops/s
[info]                  ·gc.alloc.rate:                   588.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 177.606 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2872870.982 ops/s
[info]                  ·gc.alloc.rate:                   584.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.782 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 357.647 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2885252.348 ops/s
[info]                  ·gc.alloc.rate:                   586.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.053 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 356.293 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala":
[info]   2884696.383 ±(99.9%) 29294.921 ops/s [Average]
[info]   (min, avg, max) = (2872870.982, 2884696.383, 2892490.983), stdev = 7607.798
[info]   CI (99.9%): [2855401.462, 2913991.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   586.441 ±(99.9%) 5.975 MB/sec [Average]
[info]   (min, avg, max) = (584.069, 586.441, 588.119), stdev = 1.552
[info]   CI (99.9%): [580.466, 592.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   320.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (320.000, 320.000, 320.000), stdev = 0.001
[info]   CI (99.9%): [320.000, 320.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.784 ±(99.9%) 6.345 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.784, 3.730), stdev = 1.648
[info]   CI (99.9%): [≈ 0, 7.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.428 ±(99.9%) 3.464 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.428, 2.037), stdev = 0.900
[info]   CI (99.9%): [≈ 0, 3.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   588.321 ±(99.9%) 563.808 MB/sec [Average]
[info]   (min, avg, max) = (326.416, 588.321, 656.671), stdev = 146.419
[info]   CI (99.9%): [24.514, 1152.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   321.130 ±(99.9%) 308.980 B/op [Average]
[info]   (min, avg, max) = (177.606, 321.130, 358.569), stdev = 80.241
[info]   CI (99.9%): [12.150, 630.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson
[info] # Run progress: 85.71% complete, ETA 00:07:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 89282.114 ops/s
[info] # Warmup Iteration   2: 338934.979 ops/s
[info] # Warmup Iteration   3: 339241.515 ops/s
[info] Iteration   1: 339351.717 ops/s
[info]                  ·gc.alloc.rate:                   1301.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1312.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6089.618 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 337961.745 ops/s
[info]                  ·gc.alloc.rate:                   1297.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1323.279 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6161.032 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 342003.813 ops/s
[info]                  ·gc.alloc.rate:                   1312.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1332.182 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6131.306 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 341839.200 ops/s
[info]                  ·gc.alloc.rate:                   1311.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6166.344 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 339946.407 ops/s
[info]                  ·gc.alloc.rate:                   1304.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1008.532 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4669.234 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson":
[info]   340220.576 ±(99.9%) 6594.693 ops/s [Average]
[info]   (min, avg, max) = (337961.745, 340220.576, 342003.813), stdev = 1712.621
[info]   CI (99.9%): [333625.883, 346815.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1305.592 ±(99.9%) 24.821 MB/sec [Average]
[info]   (min, avg, max) = (1297.283, 1305.592, 1312.344), stdev = 6.446
[info]   CI (99.9%): [1280.771, 1330.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   6040.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6040.001, 6040.001, 6040.001), stdev = 0.001
[info]   CI (99.9%): [6040.001, 6040.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.146), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.405 ±(99.9%) 0.619 B/op [Average]
[info]   (min, avg, max) = (0.287, 0.405, 0.679), stdev = 0.161
[info]   CI (99.9%): [≈ 0, 1.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1263.169 ±(99.9%) 549.454 MB/sec [Average]
[info]   (min, avg, max) = (1008.532, 1263.169, 1339.167), stdev = 142.691
[info]   CI (99.9%): [713.715, 1812.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5843.507 ±(99.9%) 2530.435 B/op [Average]
[info]   (min, avg, max) = (4669.234, 5843.507, 6166.344), stdev = 657.146
[info]   CI (99.9%): [3313.072, 8373.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 86.15% complete, ETA 00:06:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 296940.260 ops/s
[info] # Warmup Iteration   2: 647835.320 ops/s
[info] # Warmup Iteration   3: 661078.772 ops/s
[info] Iteration   1: 664018.272 ops/s
[info]                  ·gc.alloc.rate:                   2045.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              4848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1974.818 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4681.545 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 656309.559 ops/s
[info]                  ·gc.alloc.rate:                   2021.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              4848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1994.495 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4782.810 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 669685.944 ops/s
[info]                  ·gc.alloc.rate:                   2062.583 MB/sec
[info]                  ·gc.alloc.rate.norm:              4848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2345.912 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5513.951 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 667844.171 ops/s
[info]                  ·gc.alloc.rate:                   2057.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              4848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.551 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4770.108 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 661635.802 ops/s
[info]                  ·gc.alloc.rate:                   2038.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              4848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.043 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4832.319 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   663898.749 ±(99.9%) 20356.490 ops/s [Average]
[info]   (min, avg, max) = (656309.559, 663898.749, 669685.944), stdev = 5286.516
[info]   CI (99.9%): [643542.259, 684255.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2045.109 ±(99.9%) 62.459 MB/sec [Average]
[info]   (min, avg, max) = (2021.681, 2045.109, 2062.583), stdev = 16.221
[info]   CI (99.9%): [1982.650, 2107.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4848.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4848.001, 4848.001, 4848.001), stdev = 0.001
[info]   CI (99.9%): [4848.001, 4848.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.129 ±(99.9%) 0.207 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.129, 0.208), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.305 ±(99.9%) 0.484 B/op [Average]
[info]   (min, avg, max) = (0.149, 0.305, 0.489), stdev = 0.126
[info]   CI (99.9%): [≈ 0, 0.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2074.364 ±(99.9%) 591.232 MB/sec [Average]
[info]   (min, avg, max) = (1974.818, 2074.364, 2345.912), stdev = 153.541
[info]   CI (99.9%): [1483.132, 2665.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4916.147 ±(99.9%) 1303.745 B/op [Average]
[info]   (min, avg, max) = (4681.545, 4916.147, 5513.951), stdev = 338.578
[info]   CI (99.9%): [3612.401, 6219.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 86.58% complete, ETA 00:06:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 423051.411 ops/s
[info] # Warmup Iteration   2: 1534834.124 ops/s
[info] # Warmup Iteration   3: 1556774.509 ops/s
[info] Iteration   1: 1528786.774 ops/s
[info]                  ·gc.alloc.rate:                   1157.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.282 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1010.473 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1526662.205 ops/s
[info]                  ·gc.alloc.rate:                   1156.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.367 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1358.375 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1549904.762 ops/s
[info]                  ·gc.alloc.rate:                   1173.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      994.794 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1010.262 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1554126.538 ops/s
[info]                  ·gc.alloc.rate:                   1176.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334.736 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1351.910 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1560021.282 ops/s
[info]                  ·gc.alloc.rate:                   1181.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.820 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1353.521 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1543900.312 ±(99.9%) 58590.750 ops/s [Average]
[info]   (min, avg, max) = (1526662.205, 1543900.312, 1560021.282), stdev = 15215.832
[info]   CI (99.9%): [1485309.562, 1602491.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1169.177 ±(99.9%) 44.934 MB/sec [Average]
[info]   (min, avg, max) = (1156.015, 1169.177, 1181.696), stdev = 11.669
[info]   CI (99.9%): [1124.242, 1214.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.250 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.108, 0.208), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.110 ±(99.9%) 0.258 B/op [Average]
[info]   (min, avg, max) = (0.043, 0.110, 0.215), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1194.000 ±(99.9%) 725.029 MB/sec [Average]
[info]   (min, avg, max) = (981.282, 1194.000, 1341.820), stdev = 188.288
[info]   CI (99.9%): [468.971, 1919.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1216.908 ±(99.9%) 726.077 B/op [Average]
[info]   (min, avg, max) = (1010.262, 1216.908, 1358.375), stdev = 188.560
[info]   CI (99.9%): [490.832, 1942.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 87.01% complete, ETA 00:06:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6296245.931 ops/s
[info] # Warmup Iteration   2: 6437879.540 ops/s
[info] # Warmup Iteration   3: 6964799.882 ops/s
[info] Iteration   1: 6961999.589 ops/s
[info]                  ·gc.alloc.rate:                   212.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.826 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6873905.975 ops/s
[info]                  ·gc.alloc.rate:                   209.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.782 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.568 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6962164.660 ops/s
[info]                  ·gc.alloc.rate:                   212.352 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.822 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.826 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6683372.352 ops/s
[info]                  ·gc.alloc.rate:      203.882 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6872262.346 ops/s
[info]                  ·gc.alloc.rate:                   209.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.781 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.585 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   6870740.984 ±(99.9%) 438220.186 ops/s [Average]
[info]   (min, avg, max) = (6683372.352, 6870740.984, 6962164.660), stdev = 113804.391
[info]   CI (99.9%): [6432520.798, 7308961.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   209.548 ±(99.9%) 13.284 MB/sec [Average]
[info]   (min, avg, max) = (203.882, 209.548, 212.352), stdev = 3.450
[info]   CI (99.9%): [196.264, 222.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.010 ±(99.9%) 0.055 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.028), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.002 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204.631 ±(99.9%) 440.484 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.631, 255.822), stdev = 114.392
[info]   CI (99.9%): [≈ 0, 645.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   46.561 ±(99.9%) 100.237 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.561, 58.585), stdev = 26.031
[info]   CI (99.9%): [≈ 0, 146.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 87.45% complete, ETA 00:06:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35418.044 ops/s
[info] # Warmup Iteration   2: 232884.298 ops/s
[info] # Warmup Iteration   3: 233930.476 ops/s
[info] Iteration   1: 236043.649 ops/s
[info]                  ·gc.alloc.rate:                   1624.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1645.216 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10973.005 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 236742.654 ops/s
[info]                  ·gc.alloc.rate:                   1629.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1661.387 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11047.129 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 236888.694 ops/s
[info]                  ·gc.alloc.rate:                   1630.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.819 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11121.871 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 234486.022 ops/s
[info]                  ·gc.alloc.rate:                   1613.704 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.538 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11294.049 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 236030.361 ops/s
[info]                  ·gc.alloc.rate:                   1624.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1689.934 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11269.040 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   236038.276 ±(99.9%) 3667.697 ops/s [Average]
[info]   (min, avg, max) = (234486.022, 236038.276, 236888.694), stdev = 952.489
[info]   CI (99.9%): [232370.579, 239705.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1624.280 ±(99.9%) 25.065 MB/sec [Average]
[info]   (min, avg, max) = (1613.704, 1624.280, 1630.194), stdev = 6.509
[info]   CI (99.9%): [1599.215, 1649.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10832.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10832.002, 10832.002, 10832.002), stdev = 0.001
[info]   CI (99.9%): [10832.001, 10832.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.583 ±(99.9%) 0.952 B/op [Average]
[info]   (min, avg, max) = (0.278, 0.583, 0.833), stdev = 0.247
[info]   CI (99.9%): [≈ 0, 1.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1670.579 ±(99.9%) 68.230 MB/sec [Average]
[info]   (min, avg, max) = (1645.216, 1670.579, 1689.934), stdev = 17.719
[info]   CI (99.9%): [1602.348, 1738.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   11141.019 ±(99.9%) 535.013 B/op [Average]
[info]   (min, avg, max) = (10973.005, 11141.019, 11294.049), stdev = 138.941
[info]   CI (99.9%): [10606.006, 11676.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 87.88% complete, ETA 00:05:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 456095.187 ops/s
[info] # Warmup Iteration   2: 922732.324 ops/s
[info] # Warmup Iteration   3: 946727.676 ops/s
[info] Iteration   1: 937330.133 ops/s
[info]                  ·gc.alloc.rate:                   1486.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1634.536 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2744.337 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 937618.960 ops/s
[info]                  ·gc.alloc.rate:                   1487.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1315.681 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2208.432 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 946230.776 ops/s
[info]                  ·gc.alloc.rate:                   1500.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1656.819 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2756.136 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 947543.904 ops/s
[info]                  ·gc.alloc.rate:                   1502.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334.822 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2217.384 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 929706.592 ops/s
[info]                  ·gc.alloc.rate:                   1474.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.514 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2840.798 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   939686.073 ±(99.9%) 28164.512 ops/s [Average]
[info]   (min, avg, max) = (929706.592, 939686.073, 947543.904), stdev = 7314.234
[info]   CI (99.9%): [911521.561, 967850.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1490.280 ±(99.9%) 43.812 MB/sec [Average]
[info]   (min, avg, max) = (1474.786, 1490.280, 1502.544), stdev = 11.378
[info]   CI (99.9%): [1446.468, 1534.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2496.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2496.000, 2496.000, 2496.000), stdev = 0.001
[info]   CI (99.9%): [2496.000, 2496.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.167), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.160 ±(99.9%) 0.310 B/op [Average]
[info]   (min, avg, max) = (0.070, 0.160, 0.280), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1524.074 ±(99.9%) 701.934 MB/sec [Average]
[info]   (min, avg, max) = (1315.681, 1524.074, 1678.514), stdev = 182.290
[info]   CI (99.9%): [822.140, 2226.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2553.418 ±(99.9%) 1205.543 B/op [Average]
[info]   (min, avg, max) = (2208.432, 2553.418, 2840.798), stdev = 313.076
[info]   CI (99.9%): [1347.874, 3758.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 88.31% complete, ETA 00:05:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_250ba263/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 808744.456 ops/s
[info] # Warmup Iteration   2: 2395065.836 ops/s
[info] # Warmup Iteration   3: 2420379.160 ops/s
[info] Iteration   1: 2402185.511 ops/s
[info]                  ·gc.alloc.rate:                   989.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.880 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 641.320 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2404860.376 ops/s
[info]                  ·gc.alloc.rate:                   990.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.644 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 645.012 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2376495.018 ops/s
[info]                  ·gc.alloc.rate:                   978.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.761 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 656.242 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2394434.671 ops/s
[info]                  ·gc.alloc.rate:                   985.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.851 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 655.271 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2444524.595 ops/s
[info]                  ·gc.alloc.rate:                   1006.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.050 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 644.413 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2404500.034 ±(99.9%) 96132.094 ops/s [Average]
[info]   (min, avg, max) = (2376495.018, 2404500.034, 2444524.595), stdev = 24965.200
[info]   CI (99.9%): [2308367.940, 2500632.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   990.003 ±(99.9%) 39.988 MB/sec [Average]
[info]   (min, avg, max) = (978.319, 990.003, 1006.622), stdev = 10.385
[info]   CI (99.9%): [950.016, 1029.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.096, 0.104), stdev = 0.011
[info]   CI (99.9%): [0.052, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.063 ±(99.9%) 0.028 B/op [Average]
[info]   (min, avg, max) = (0.055, 0.063, 0.068), stdev = 0.007
[info]   CI (99.9%): [0.035, 0.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   990.637 ±(99.9%) 33.911 MB/sec [Average]
[info]   (min, avg, max) = (978.880, 990.637, 1001.050), stdev = 8.807
[info]   CI (99.9%): [956.726, 1024.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   648.451 ±(99.9%) 26.271 B/op [Average]
[info]   (min, avg, max) = (641.320, 648.451, 656.242), stdev = 6.822
[info]   CI (99.9%): [622.181, 674.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 88.74% complete, ETA 00:05:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4223752.767 ops/s
[info] # Warmup Iteration   2: 6112818.579 ops/s
[info] # Warmup Iteration   3: 6178761.693 ops/s
[info] Iteration   1: 6138763.742 ops/s
[info]                  ·gc.alloc.rate:                   686.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 168.224 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6117951.160 ops/s
[info]                  ·gc.alloc.rate:                   684.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.447 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 168.111 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6146861.508 ops/s
[info]                  ·gc.alloc.rate:                   687.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.314 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 167.243 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6168601.974 ops/s
[info]                  ·gc.alloc.rate:                   689.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.768 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 166.820 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6174681.325 ops/s
[info]                  ·gc.alloc.rate:                   690.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 166.991 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   6149371.942 ±(99.9%) 88574.452 ops/s [Average]
[info]   (min, avg, max) = (6117951.160, 6149371.942, 6174681.325), stdev = 23002.504
[info]   CI (99.9%): [6060797.489, 6237946.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   687.615 ±(99.9%) 9.798 MB/sec [Average]
[info]   (min, avg, max) = (684.111, 687.615, 690.351), stdev = 2.545
[info]   CI (99.9%): [677.817, 697.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.104), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.011 ±(99.9%) 0.038 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.027), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   654.314 ±(99.9%) 4.505 MB/sec [Average]
[info]   (min, avg, max) = (653.314, 654.314, 656.027), stdev = 1.170
[info]   CI (99.9%): [649.808, 658.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   167.478 ±(99.9%) 2.498 B/op [Average]
[info]   (min, avg, max) = (166.820, 167.478, 168.224), stdev = 0.649
[info]   CI (99.9%): [164.981, 169.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 89.18% complete, ETA 00:05:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4121251.213 ops/s
[info] # Warmup Iteration   2: 5946051.167 ops/s
[info] # Warmup Iteration   3: 5899043.843 ops/s
[info] Iteration   1: 5980868.788 ops/s
[info]                  ·gc.alloc.rate:                   364.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67.313 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5892602.657 ops/s
[info]                  ·gc.alloc.rate:                   359.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.716 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68.322 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 5955077.312 ops/s
[info]                  ·gc.alloc.rate:                   363.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.694 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86.883 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 5921125.417 ops/s
[info]                  ·gc.alloc.rate:                   361.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.688 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87.381 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 5931748.593 ops/s
[info]                  ·gc.alloc.rate:                   361.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86.782 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   5936284.553 ±(99.9%) 129145.973 ops/s [Average]
[info]   (min, avg, max) = (5892602.657, 5936284.553, 5980868.788), stdev = 33538.799
[info]   CI (99.9%): [5807138.580, 6065430.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   362.022 ±(99.9%) 7.942 MB/sec [Average]
[info]   (min, avg, max) = (359.311, 362.022, 364.744), stdev = 2.062
[info]   CI (99.9%): [354.080, 369.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.765 ±(99.9%) 6.451 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.765, 3.761), stdev = 1.675
[info]   CI (99.9%): [≈ 0, 7.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   0.202 ±(99.9%) 1.705 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.202, 0.994), stdev = 0.443
[info]   CI (99.9%): [≈ 0, 1.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   299.174 ±(99.9%) 152.722 MB/sec [Average]
[info]   (min, avg, max) = (255.716, 299.174, 328.694), stdev = 39.661
[info]   CI (99.9%): [146.452, 451.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   79.336 ±(99.9%) 40.522 B/op [Average]
[info]   (min, avg, max) = (67.313, 79.336, 87.381), stdev = 10.524
[info]   CI (99.9%): [38.814, 119.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 1.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 89.61% complete, ETA 00:05:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45578.521 ops/s
[info] # Warmup Iteration   2: 341144.713 ops/s
[info] # Warmup Iteration   3: 338847.419 ops/s
[info] Iteration   1: 337366.531 ops/s
[info]                  ·gc.alloc.rate:                   1918.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              8952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1984.526 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9260.788 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 341037.361 ops/s
[info]                  ·gc.alloc.rate:                   1940.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              8952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2004.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9250.459 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 340658.087 ops/s
[info]                  ·gc.alloc.rate:                   1937.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              8952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.693 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9325.299 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 342960.754 ops/s
[info]                  ·gc.alloc.rate:                   1950.592 MB/sec
[info]                  ·gc.alloc.rate.norm:              8952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.650 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9305.648 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 342693.260 ops/s
[info]                  ·gc.alloc.rate:                   1948.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              8952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694.444 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7783.139 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   340943.199 ±(99.9%) 8613.734 ops/s [Average]
[info]   (min, avg, max) = (337366.531, 340943.199, 342960.754), stdev = 2236.959
[info]   CI (99.9%): [332329.465, 349556.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1939.150 ±(99.9%) 49.500 MB/sec [Average]
[info]   (min, avg, max) = (1918.356, 1939.150, 1950.592), stdev = 12.855
[info]   CI (99.9%): [1889.650, 1988.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8952.001, 8952.001, 8952.001), stdev = 0.001
[info]   CI (99.9%): [8952.001, 8952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.125 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.125, 0.146), stdev = 0.025
[info]   CI (99.9%): [0.027, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.576 ±(99.9%) 0.450 B/op [Average]
[info]   (min, avg, max) = (0.385, 0.576, 0.672), stdev = 0.117
[info]   CI (99.9%): [0.126, 1.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1946.000 ±(99.9%) 545.106 MB/sec [Average]
[info]   (min, avg, max) = (1694.444, 1946.000, 2027.650), stdev = 141.562
[info]   CI (99.9%): [1400.894, 2491.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8985.067 ±(99.9%) 2589.982 B/op [Average]
[info]   (min, avg, max) = (7783.139, 8985.067, 9325.299), stdev = 672.610
[info]   CI (99.9%): [6395.085, 11575.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Run progress: 90.04% complete, ETA 00:04:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 493029.077 ops/s
[info] # Warmup Iteration   2: 710299.711 ops/s
[info] # Warmup Iteration   3: 720236.492 ops/s
[info] Iteration   1: 721387.220 ops/s
[info]                  ·gc.alloc.rate:                   1609.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              3512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1641.961 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3583.170 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 717863.491 ops/s
[info]                  ·gc.alloc.rate:                   1601.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              3512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1654.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3627.050 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 723947.480 ops/s
[info]                  ·gc.alloc.rate:                   1615.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              3512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1667.460 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3625.567 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 720795.157 ops/s
[info]                  ·gc.alloc.rate:                   1609.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              3512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1676.557 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3658.548 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 718835.554 ops/s
[info]                  ·gc.alloc.rate:                   1603.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              3512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.436 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2950.592 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   720565.780 ±(99.9%) 9124.345 ops/s [Average]
[info]   (min, avg, max) = (717863.491, 720565.780, 723947.480), stdev = 2369.563
[info]   CI (99.9%): [711441.435, 729690.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   1607.933 ±(99.9%) 20.287 MB/sec [Average]
[info]   (min, avg, max) = (1601.878, 1607.933, 1615.229), stdev = 5.268
[info]   CI (99.9%): [1587.646, 1628.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   3512.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3512.001, 3512.001, 3512.001), stdev = 0.001
[info]   CI (99.9%): [3512.000, 3512.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.021
[info]   CI (99.9%): [0.003, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.182 ±(99.9%) 0.176 B/op [Average]
[info]   (min, avg, max) = (0.136, 0.182, 0.228), stdev = 0.046
[info]   CI (99.9%): [0.006, 0.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1597.553 ±(99.9%) 540.757 MB/sec [Average]
[info]   (min, avg, max) = (1347.436, 1597.553, 1676.557), stdev = 140.433
[info]   CI (99.9%): [1056.796, 2138.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3488.985 ±(99.9%) 1163.516 B/op [Average]
[info]   (min, avg, max) = (2950.592, 3488.985, 3658.548), stdev = 302.161
[info]   CI (99.9%): [2325.470, 4652.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 90.48% complete, ETA 00:04:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 477508.624 ops/s
[info] # Warmup Iteration   2: 1129208.101 ops/s
[info] # Warmup Iteration   3: 1157030.232 ops/s
[info] Iteration   1: 1158008.185 ops/s
[info]                  ·gc.alloc.rate:                   1465.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              1992.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1311.706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1783.162 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1148761.424 ops/s
[info]                  ·gc.alloc.rate:                   1453.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              1992.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.860 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1812.533 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1151007.281 ops/s
[info]                  ·gc.alloc.rate:                   1456.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              1992.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1666.691 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2279.485 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1159117.322 ops/s
[info]                  ·gc.alloc.rate:                   1466.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              1992.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1821.652 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1157720.362 ops/s
[info]                  ·gc.alloc.rate:                   1465.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              1992.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.711 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2290.236 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   1154922.915 ±(99.9%) 18085.099 ops/s [Average]
[info]   (min, avg, max) = (1148761.424, 1154922.915, 1159117.322), stdev = 4696.643
[info]   CI (99.9%): [1136837.816, 1173008.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1461.574 ±(99.9%) 22.940 MB/sec [Average]
[info]   (min, avg, max) = (1453.842, 1461.574, 1466.880), stdev = 5.957
[info]   CI (99.9%): [1438.634, 1484.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1992.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1992.000, 1992.000, 1992.000), stdev = 0.001
[info]   CI (99.9%): [1992.000, 1992.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.119 ±(99.9%) 0.180 B/op [Average]
[info]   (min, avg, max) = (0.057, 0.119, 0.171), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1465.481 ±(99.9%) 740.490 MB/sec [Average]
[info]   (min, avg, max) = (1311.706, 1465.481, 1684.711), stdev = 192.303
[info]   CI (99.9%): [724.991, 2205.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1997.414 ±(99.9%) 1012.006 B/op [Average]
[info]   (min, avg, max) = (1783.162, 1997.414, 2290.236), stdev = 262.815
[info]   CI (99.9%): [985.408, 3009.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 90.91% complete, ETA 00:04:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 709593.427 ops/s
[info] # Warmup Iteration   2: 755915.202 ops/s
[info] # Warmup Iteration   3: 759981.913 ops/s
[info] Iteration   1: 762898.654 ops/s
[info]                  ·gc.alloc.rate:                   651.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1367.418 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 757691.017 ops/s
[info]                  ·gc.alloc.rate:                   646.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.066 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1371.279 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 763411.052 ops/s
[info]                  ·gc.alloc.rate:                   651.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.466 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1359.650 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 762662.272 ops/s
[info]                  ·gc.alloc.rate:                   651.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.154 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1362.378 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 760766.030 ops/s
[info]                  ·gc.alloc.rate:                   649.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.277 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1367.835 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   761485.805 ±(99.9%) 9031.645 ops/s [Average]
[info]   (min, avg, max) = (757691.017, 761485.805, 763411.052), stdev = 2345.489
[info]   CI (99.9%): [752454.160, 770517.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   650.243 ±(99.9%) 7.749 MB/sec [Average]
[info]   (min, avg, max) = (646.935, 650.243, 651.876), stdev = 2.012
[info]   CI (99.9%): [642.494, 657.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1344.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1344.001, 1344.001, 1344.001), stdev = 0.001
[info]   CI (99.9%): [1344.000, 1344.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.086 ±(99.9%) 0.311 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.086, 0.173), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   660.743 ±(99.9%) 5.003 MB/sec [Average]
[info]   (min, avg, max) = (659.466, 660.743, 662.751), stdev = 1.299
[info]   CI (99.9%): [655.740, 665.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1365.712 ±(99.9%) 17.883 B/op [Average]
[info]   (min, avg, max) = (1359.650, 1365.712, 1371.279), stdev = 4.644
[info]   CI (99.9%): [1347.829, 1383.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Run progress: 91.34% complete, ETA 00:04:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 197129.720 ops/s
[info] # Warmup Iteration   2: 293877.483 ops/s
[info] # Warmup Iteration   3: 298849.973 ops/s
[info] Iteration   1: 298972.590 ops/s
[info]                  ·gc.alloc.rate:                   1017.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.957 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5154.862 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 299304.221 ops/s
[info]                  ·gc.alloc.rate:                   1019.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.066 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5154.399 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 299234.913 ops/s
[info]                  ·gc.alloc.rate:                   1018.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1312.845 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6905.718 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 299268.750 ops/s
[info]                  ·gc.alloc.rate:                   1019.098 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.472 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5204.186 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 297876.371 ops/s
[info]                  ·gc.alloc.rate:                   1014.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995.114 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5258.419 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   298931.369 ±(99.9%) 2326.139 ops/s [Average]
[info]   (min, avg, max) = (297876.371, 298931.369, 299304.221), stdev = 604.091
[info]   CI (99.9%): [296605.230, 301257.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1017.900 ±(99.9%) 7.915 MB/sec [Average]
[info]   (min, avg, max) = (1014.337, 1017.900, 1019.159), stdev = 2.056
[info]   CI (99.9%): [1009.985, 1025.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5360.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5360.001, 5360.001, 5360.001), stdev = 0.001
[info]   CI (99.9%): [5360.001, 5360.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.395 ±(99.9%) 0.641 B/op [Average]
[info]   (min, avg, max) = (0.219, 0.395, 0.550), stdev = 0.167
[info]   CI (99.9%): [≈ 0, 1.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1051.291 ±(99.9%) 563.608 MB/sec [Average]
[info]   (min, avg, max) = (978.957, 1051.291, 1312.845), stdev = 146.367
[info]   CI (99.9%): [487.683, 1614.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5535.517 ±(99.9%) 2954.076 B/op [Average]
[info]   (min, avg, max) = (5154.399, 5535.517, 6905.718), stdev = 767.164
[info]   CI (99.9%): [2581.440, 8489.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 91.77% complete, ETA 00:04:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 177520.938 ops/s
[info] # Warmup Iteration   2: 284267.109 ops/s
[info] # Warmup Iteration   3: 303392.781 ops/s
[info] Iteration   1: 303722.163 ops/s
[info]                  ·gc.alloc.rate:                   321.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              1664.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.724 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1325.485 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 303698.380 ops/s
[info]                  ·gc.alloc.rate:                   321.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              1664.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.828 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1325.620 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 304498.683 ops/s
[info]                  ·gc.alloc.rate:                   321.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              1664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      321.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1659.553 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 302914.521 ops/s
[info]                  ·gc.alloc.rate:                   320.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              1664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      321.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1668.236 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 303436.514 ops/s
[info]                  ·gc.alloc.rate:                   320.791 MB/sec
[info]                  ·gc.alloc.rate.norm:              1664.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1675.698 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   303654.052 ±(99.9%) 2207.191 ops/s [Average]
[info]   (min, avg, max) = (302914.521, 303654.052, 304498.683), stdev = 573.201
[info]   CI (99.9%): [301446.861, 305861.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   321.005 ±(99.9%) 2.318 MB/sec [Average]
[info]   (min, avg, max) = (320.201, 321.005, 321.866), stdev = 0.602
[info]   CI (99.9%): [318.687, 323.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1664.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1664.001, 1664.001, 1664.001), stdev = 0.001
[info]   CI (99.9%): [1664.001, 1664.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.065 ±(99.9%) 0.372 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.065, 0.216), stdev = 0.097
[info]   CI (99.9%): [≈ 0, 0.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   295.324 ±(99.9%) 139.054 MB/sec [Average]
[info]   (min, avg, max) = (255.724, 295.324, 323.046), stdev = 36.112
[info]   CI (99.9%): [156.270, 434.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1530.918 ±(99.9%) 722.225 B/op [Average]
[info]   (min, avg, max) = (1325.485, 1530.918, 1675.698), stdev = 187.560
[info]   CI (99.9%): [808.693, 2253.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 92.21% complete, ETA 00:03:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 784316.503 ops/s
[info] # Warmup Iteration   2: 1045251.113 ops/s
[info] # Warmup Iteration   3: 1057226.193 ops/s
[info] Iteration   1: 1079765.850 ops/s
[info]                  ·gc.alloc.rate:                   910.975 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.412 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1429.225 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1054121.372 ops/s
[info]                  ·gc.alloc.rate:                   889.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.890 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1463.046 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1079250.064 ops/s
[info]                  ·gc.alloc.rate:                   910.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.752 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1433.349 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1080861.775 ops/s
[info]                  ·gc.alloc.rate:                   911.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.100 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 956.911 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1068240.918 ops/s
[info]                  ·gc.alloc.rate:                   901.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.409 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1457.512 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   1072447.996 ±(99.9%) 44080.013 ops/s [Average]
[info]   (min, avg, max) = (1054121.372, 1072447.996, 1080861.775), stdev = 11447.439
[info]   CI (99.9%): [1028367.983, 1116528.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   904.871 ±(99.9%) 36.953 MB/sec [Average]
[info]   (min, avg, max) = (889.442, 904.871, 911.923), stdev = 9.597
[info]   CI (99.9%): [867.918, 941.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1328.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1328.000, 1328.000, 1328.000), stdev = 0.001
[info]   CI (99.9%): [1328.000, 1328.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.146), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.147 ±(99.9%) 0.174 B/op [Average]
[info]   (min, avg, max) = (0.091, 0.147, 0.212), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   917.913 ±(99.9%) 561.609 MB/sec [Average]
[info]   (min, avg, max) = (657.100, 917.913, 989.409), stdev = 145.848
[info]   CI (99.9%): [356.304, 1479.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1348.008 ±(99.9%) 843.767 B/op [Average]
[info]   (min, avg, max) = (956.911, 1348.008, 1463.046), stdev = 219.123
[info]   CI (99.9%): [504.242, 2191.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 92.64% complete, ETA 00:03:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 707574.853 ops/s
[info] # Warmup Iteration   2: 926497.057 ops/s
[info] # Warmup Iteration   3: 882523.957 ops/s
[info] Iteration   1: 930654.374 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 929819.062 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 930705.709 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 931027.254 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 929935.690 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   930428.418 ±(99.9%) 2019.889 ops/s [Average]
[info]   (min, avg, max) = (929819.062, 930428.418, 931027.254), stdev = 524.559
[info]   CI (99.9%): [928408.529, 932448.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 93.07% complete, ETA 00:03:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 263196.454 ops/s
[info] # Warmup Iteration   2: 321016.286 ops/s
[info] # Warmup Iteration   3: 330561.965 ops/s
[info] Iteration   1: 331510.164 ops/s
[info]                  ·gc.alloc.rate:                   353.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.755 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1214.380 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 331959.739 ops/s
[info]                  ·gc.alloc.rate:                   354.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.715 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1212.767 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 332378.865 ops/s
[info]                  ·gc.alloc.rate:                   354.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.431 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1550.322 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 332888.179 ops/s
[info]                  ·gc.alloc.rate:                   355.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.387 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1547.947 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 331759.520 ops/s
[info]                  ·gc.alloc.rate:                   354.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.736 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1545.253 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   332099.293 ±(99.9%) 2093.647 ops/s [Average]
[info]   (min, avg, max) = (331510.164, 332099.293, 332888.179), stdev = 543.713
[info]   CI (99.9%): [330005.647, 334192.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   354.466 ±(99.9%) 2.300 MB/sec [Average]
[info]   (min, avg, max) = (353.818, 354.466, 355.316), stdev = 0.597
[info]   CI (99.9%): [352.166, 356.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1680.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1680.001, 1680.001, 1680.001), stdev = 0.001
[info]   CI (99.9%): [1680.001, 1680.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.777 ±(99.9%) 6.597 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.777, 3.841), stdev = 1.713
[info]   CI (99.9%): [≈ 0, 7.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.677 ±(99.9%) 31.234 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.677, 18.186), stdev = 8.111
[info]   CI (99.9%): [≈ 0, 34.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   298.405 ±(99.9%) 150.013 MB/sec [Average]
[info]   (min, avg, max) = (255.715, 298.405, 327.431), stdev = 38.958
[info]   CI (99.9%): [148.392, 448.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1414.134 ±(99.9%) 705.035 B/op [Average]
[info]   (min, avg, max) = (1212.767, 1414.134, 1550.322), stdev = 183.095
[info]   CI (99.9%): [709.099, 2119.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Run progress: 93.51% complete, ETA 00:03:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 767281.501 ops/s
[info] # Warmup Iteration   2: 1078124.956 ops/s
[info] # Warmup Iteration   3: 1107003.450 ops/s
[info] Iteration   1: 1107062.460 ops/s
[info]                  ·gc.alloc.rate:                   1654.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1971.648 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2803.332 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1107351.606 ops/s
[info]                  ·gc.alloc.rate:                   1654.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1656.995 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2355.282 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1111855.681 ops/s
[info]                  ·gc.alloc.rate:                   1661.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1335.285 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1889.656 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1088185.737 ops/s
[info]                  ·gc.alloc.rate:                   1625.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.450 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2426.454 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1113264.660 ops/s
[info]                  ·gc.alloc.rate:                   1663.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.173 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2382.736 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   1105544.029 ±(99.9%) 38809.847 ops/s [Average]
[info]   (min, avg, max) = (1088185.737, 1105544.029, 1113264.660), stdev = 10078.794
[info]   CI (99.9%): [1066734.182, 1144353.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   1652.062 ±(99.9%) 58.391 MB/sec [Average]
[info]   (min, avg, max) = (1625.979, 1652.062, 1663.436), stdev = 15.164
[info]   CI (99.9%): [1593.671, 1710.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2352.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2352.000, 2352.000, 2352.000), stdev = 0.001
[info]   CI (99.9%): [2352.000, 2352.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.262 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.108, 0.208), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.154 ±(99.9%) 0.372 B/op [Average]
[info]   (min, avg, max) = (0.059, 0.154, 0.296), stdev = 0.097
[info]   CI (99.9%): [≈ 0, 0.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1665.310 ±(99.9%) 868.255 MB/sec [Average]
[info]   (min, avg, max) = (1335.285, 1665.310, 1971.648), stdev = 225.483
[info]   CI (99.9%): [797.056, 2533.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2371.492 ±(99.9%) 1250.811 B/op [Average]
[info]   (min, avg, max) = (1889.656, 2371.492, 2803.332), stdev = 324.832
[info]   CI (99.9%): [1120.681, 3622.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 93.94% complete, ETA 00:02:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 533797.075 ops/s
[info] # Warmup Iteration   2: 1265735.120 ops/s
[info] # Warmup Iteration   3: 1244505.459 ops/s
[info] Iteration   1: 1264340.969 ops/s
[info]                  ·gc.alloc.rate:                   828.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      970.651 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1208.587 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1299029.276 ops/s
[info]                  ·gc.alloc.rate:                   851.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 788.917 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1296280.846 ops/s
[info]                  ·gc.alloc.rate:                   849.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.400 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1192.961 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1303744.862 ops/s
[info]                  ·gc.alloc.rate:                   854.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.767 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 795.321 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1294062.430 ops/s
[info]                  ·gc.alloc.rate:                   848.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1208.406 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1291491.677 ±(99.9%) 60076.888 ops/s [Average]
[info]   (min, avg, max) = (1264340.969, 1291491.677, 1303744.862), stdev = 15601.777
[info]   CI (99.9%): [1231414.789, 1351568.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   846.700 ±(99.9%) 39.556 MB/sec [Average]
[info]   (min, avg, max) = (828.829, 846.700, 854.810), stdev = 10.273
[info]   CI (99.9%): [807.144, 886.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1032.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1032.000, 1032.000, 1032.000), stdev = 0.001
[info]   CI (99.9%): [1032.000, 1032.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.146), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.097 ±(99.9%) 0.228 B/op [Average]
[info]   (min, avg, max) = (0.025, 0.097, 0.181), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   851.251 ±(99.9%) 690.998 MB/sec [Average]
[info]   (min, avg, max) = (651.021, 851.251, 993.416), stdev = 179.450
[info]   CI (99.9%): [160.253, 1542.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1038.838 ±(99.9%) 867.641 B/op [Average]
[info]   (min, avg, max) = (788.917, 1038.838, 1208.587), stdev = 225.324
[info]   CI (99.9%): [171.197, 1906.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 94.37% complete, ETA 00:02:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2098755.410 ops/s
[info] # Warmup Iteration   2: 2298275.960 ops/s
[info] # Warmup Iteration   3: 2326139.322 ops/s
[info] Iteration   1: 2329977.501 ops/s
[info]                  ·gc.alloc.rate:                   568.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              384.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.736 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 449.060 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2332837.248 ops/s
[info]                  ·gc.alloc.rate:                   569.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              384.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.378 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 222.916 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2302351.764 ops/s
[info]                  ·gc.alloc.rate:                   561.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              384.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.197 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 451.280 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2306512.189 ops/s
[info]                  ·gc.alloc.rate:                   562.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              384.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.531 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 450.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2317489.489 ops/s
[info]                  ·gc.alloc.rate:                   565.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              384.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.318 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 448.335 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   2317833.638 ±(99.9%) 52394.367 ops/s [Average]
[info]   (min, avg, max) = (2302351.764, 2317833.638, 2332837.248), stdev = 13606.651
[info]   CI (99.9%): [2265439.271, 2370228.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   565.533 ±(99.9%) 12.616 MB/sec [Average]
[info]   (min, avg, max) = (561.771, 565.533, 569.118), stdev = 3.276
[info]   CI (99.9%): [552.918, 578.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   384.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (384.000, 384.000, 384.000), stdev = 0.001
[info]   CI (99.9%): [384.000, 384.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.673 ±(99.9%) 5.301 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.673, 3.134), stdev = 1.377
[info]   CI (99.9%): [≈ 0, 5.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.455 ±(99.9%) 3.580 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.455, 2.117), stdev = 0.930
[info]   CI (99.9%): [≈ 0, 4.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   595.032 ±(99.9%) 569.743 MB/sec [Average]
[info]   (min, avg, max) = (330.378, 595.032, 664.736), stdev = 147.960
[info]   CI (99.9%): [25.290, 1164.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   404.320 ±(99.9%) 390.510 B/op [Average]
[info]   (min, avg, max) = (222.916, 404.320, 451.280), stdev = 101.414
[info]   CI (99.9%): [13.810, 794.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Run progress: 94.81% complete, ETA 00:02:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1269484.721 ops/s
[info] # Warmup Iteration   2: 1984072.181 ops/s
[info] # Warmup Iteration   3: 1987739.196 ops/s
[info] Iteration   1: 1999375.346 ops/s
[info]                  ·gc.alloc.rate:                   1381.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1307.485 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1029.340 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2008196.004 ops/s
[info]                  ·gc.alloc.rate:                   1387.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1644.736 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1289.256 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2013138.827 ops/s
[info]                  ·gc.alloc.rate:                   1391.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1036.122 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2002089.825 ops/s
[info]                  ·gc.alloc.rate:                   1383.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1333.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1048.371 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2011773.800 ops/s
[info]                  ·gc.alloc.rate:                   1390.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1048.534 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   2006914.760 ±(99.9%) 23112.977 ops/s [Average]
[info]   (min, avg, max) = (1999375.346, 2006914.760, 2013138.827), stdev = 6002.367
[info]   CI (99.9%): [1983801.783, 2030027.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1387.154 ±(99.9%) 15.826 MB/sec [Average]
[info]   (min, avg, max) = (1381.995, 1387.154, 1391.450), stdev = 4.110
[info]   CI (99.9%): [1371.327, 1402.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1088.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1088.000, 1088.000, 1088.000), stdev = 0.001
[info]   CI (99.9%): [1088.000, 1088.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.062 ±(99.9%) 0.121 B/op [Average]
[info]   (min, avg, max) = (0.033, 0.062, 0.114), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1390.163 ±(99.9%) 549.998 MB/sec [Average]
[info]   (min, avg, max) = (1307.485, 1390.163, 1644.736), stdev = 142.833
[info]   CI (99.9%): [840.165, 1940.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1090.325 ±(99.9%) 429.382 B/op [Average]
[info]   (min, avg, max) = (1029.340, 1090.325, 1289.256), stdev = 111.509
[info]   CI (99.9%): [660.943, 1519.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 95.24% complete, ETA 00:02:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1333332.158 ops/s
[info] # Warmup Iteration   2: 2833239.583 ops/s
[info] # Warmup Iteration   3: 2762466.738 ops/s
[info] Iteration   1: 2857165.211 ops/s
[info]                  ·gc.alloc.rate:                   1176.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      977.967 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 538.852 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2843697.853 ops/s
[info]                  ·gc.alloc.rate:                   1170.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.805 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 727.773 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2852303.177 ops/s
[info]                  ·gc.alloc.rate:                   1174.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.334 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 548.231 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2827608.348 ops/s
[info]                  ·gc.alloc.rate:                   1164.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1332.934 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 741.934 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2845042.878 ops/s
[info]                  ·gc.alloc.rate:                   1171.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1004.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 555.525 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   2845163.493 ±(99.9%) 43281.737 ops/s [Average]
[info]   (min, avg, max) = (2827608.348, 2845163.493, 2857165.211), stdev = 11240.130
[info]   CI (99.9%): [2801881.756, 2888445.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1171.243 ±(99.9%) 17.398 MB/sec [Average]
[info]   (min, avg, max) = (1164.176, 1171.243, 1176.060), stdev = 4.518
[info]   CI (99.9%): [1153.846, 1188.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.051 ±(99.9%) 0.067 B/op [Average]
[info]   (min, avg, max) = (0.034, 0.051, 0.081), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1124.618 ±(99.9%) 701.739 MB/sec [Average]
[info]   (min, avg, max) = (977.967, 1124.618, 1332.934), stdev = 182.239
[info]   CI (99.9%): [422.879, 1826.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   622.463 ±(99.9%) 396.192 B/op [Average]
[info]   (min, avg, max) = (538.852, 622.463, 741.934), stdev = 102.890
[info]   CI (99.9%): [226.271, 1018.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 95.67% complete, ETA 00:02:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2277907.775 ops/s
[info] # Warmup Iteration   2: 3185886.426 ops/s
[info] # Warmup Iteration   3: 3197331.568 ops/s
[info] Iteration   1: 3157702.074 ops/s
[info]                  ·gc.alloc.rate:                   625.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.377 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 327.700 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3209197.900 ops/s
[info]                  ·gc.alloc.rate:                   636.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.086 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 320.811 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3159492.275 ops/s
[info]                  ·gc.alloc.rate:                   626.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 325.188 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3226904.594 ops/s
[info]                  ·gc.alloc.rate:                   639.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 318.727 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 3227825.946 ops/s
[info]                  ·gc.alloc.rate:                   639.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.048 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 318.959 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   3196224.558 ±(99.9%) 135341.539 ops/s [Average]
[info]   (min, avg, max) = (3157702.074, 3196224.558, 3227825.946), stdev = 35147.768
[info]   CI (99.9%): [3060883.019, 3331566.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   633.594 ±(99.9%) 26.572 MB/sec [Average]
[info]   (min, avg, max) = (625.883, 633.594, 639.779), stdev = 6.901
[info]   CI (99.9%): [607.022, 660.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   312.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (312.000, 312.000, 312.000), stdev = 0.001
[info]   CI (99.9%): [312.000, 312.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.788 ±(99.9%) 6.339 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.788, 3.733), stdev = 1.646
[info]   CI (99.9%): [≈ 0, 7.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.393 ±(99.9%) 3.161 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.393, 1.861), stdev = 0.821
[info]   CI (99.9%): [≈ 0, 3.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   654.395 ±(99.9%) 6.642 MB/sec [Average]
[info]   (min, avg, max) = (653.025, 654.395, 657.377), stdev = 1.725
[info]   CI (99.9%): [647.753, 661.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   322.277 ±(99.9%) 15.360 B/op [Average]
[info]   (min, avg, max) = (318.727, 322.277, 327.700), stdev = 3.989
[info]   CI (99.9%): [306.917, 337.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 96.10% complete, ETA 00:01:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2435030.978 ops/s
[info] # Warmup Iteration   2: 3187260.682 ops/s
[info] # Warmup Iteration   3: 3216957.572 ops/s
[info] Iteration   1: 3225251.429 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3215402.452 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3193967.753 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3218902.943 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3203816.392 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3211468.194 ±(99.9%) 48154.105 ops/s [Average]
[info]   (min, avg, max) = (3193967.753, 3211468.194, 3225251.429), stdev = 12505.468
[info]   CI (99.9%): [3163314.088, 3259622.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 96.54% complete, ETA 00:01:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2083178.664 ops/s
[info] # Warmup Iteration   2: 2847207.677 ops/s
[info] # Warmup Iteration   3: 2825259.723 ops/s
[info] Iteration   1: 2881264.309 ops/s
[info]                  ·gc.alloc.rate:                   1215.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1302.421 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 711.539 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2863830.512 ops/s
[info]                  ·gc.alloc.rate:                   1208.480 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.081 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 539.056 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2886377.402 ops/s
[info]                  ·gc.alloc.rate:                   1218.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1315.292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 717.014 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2869838.126 ops/s
[info]                  ·gc.alloc.rate:                   1210.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1324.712 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 726.640 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2877194.636 ops/s
[info]                  ·gc.alloc.rate:                   1213.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      999.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 546.578 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2875700.997 ±(99.9%) 34572.730 ops/s [Average]
[info]   (min, avg, max) = (2863830.512, 2875700.997, 2886377.402), stdev = 8978.428
[info]   CI (99.9%): [2841128.267, 2910273.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1213.215 ±(99.9%) 14.661 MB/sec [Average]
[info]   (min, avg, max) = (1208.480, 1213.215, 1218.044), stdev = 3.807
[info]   CI (99.9%): [1198.554, 1227.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   664.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (664.000, 664.000, 664.000), stdev = 0.001
[info]   CI (99.9%): [664.000, 664.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.052 ±(99.9%) 0.073 B/op [Average]
[info]   (min, avg, max) = (0.034, 0.052, 0.079), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1184.504 ±(99.9%) 684.660 MB/sec [Average]
[info]   (min, avg, max) = (981.081, 1184.504, 1324.712), stdev = 177.804
[info]   CI (99.9%): [499.844, 1869.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   648.165 ±(99.9%) 371.041 B/op [Average]
[info]   (min, avg, max) = (539.056, 648.165, 726.640), stdev = 96.358
[info]   CI (99.9%): [277.124, 1019.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 96.97% complete, ETA 00:01:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6091.508 ops/s
[info] # Warmup Iteration   2: 8614.976 ops/s
[info] # Warmup Iteration   3: 11060.946 ops/s
[info] Iteration   1: 11081.492 ops/s
[info]                  ·gc.alloc.rate:                   1625.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              230856.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26.603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1631.672 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 231681.940 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 11057.450 ops/s
[info]                  ·gc.alloc.rate:                   1621.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              230771.753 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1645.484 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 234244.236 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 12517.801 ops/s
[info]                  ·gc.alloc.rate:                   1830.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              230152.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1659.367 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 208651.634 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 12567.150 ops/s
[info]                  ·gc.alloc.rate:                   1837.975 MB/sec
[info]                  ·gc.alloc.rate.norm:              230203.542 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2007.408 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 251424.667 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 12429.964 ops/s
[info]                  ·gc.alloc.rate:                   1817.837 MB/sec
[info]                  ·gc.alloc.rate.norm:              230208.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28.994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1683.389 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 213181.776 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   11930.771 ±(99.9%) 3033.674 ops/s [Average]
[info]   (min, avg, max) = (11057.450, 11930.771, 12567.150), stdev = 787.836
[info]   CI (99.9%): [8897.097, 14964.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1746.623 ±(99.9%) 433.821 MB/sec [Average]
[info]   (min, avg, max) = (1621.091, 1746.623, 1837.975), stdev = 112.662
[info]   CI (99.9%): [1312.802, 2180.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   230438.280 ±(99.9%) 1328.021 B/op [Average]
[info]   (min, avg, max) = (230152.035, 230438.280, 230856.037), stdev = 344.883
[info]   CI (99.9%): [229110.259, 231766.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.158 ±(99.9%) 0.236 MB/sec [Average]
[info]   (min, avg, max) = (0.064, 0.158, 0.229), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   21.129 ±(99.9%) 32.263 B/op [Average]
[info]   (min, avg, max) = (8.003, 21.129, 28.994), stdev = 8.379
[info]   CI (99.9%): [≈ 0, 53.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1725.464 ±(99.9%) 611.347 MB/sec [Average]
[info]   (min, avg, max) = (1631.672, 1725.464, 2007.408), stdev = 158.765
[info]   CI (99.9%): [1114.117, 2336.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   227836.851 ±(99.9%) 66557.914 B/op [Average]
[info]   (min, avg, max) = (208651.634, 227836.851, 251424.667), stdev = 17284.879
[info]   CI (99.9%): [161278.937, 294394.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.600, 14.000), stdev = 4.930
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 97.40% complete, ETA 00:01:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4758.666 ops/s
[info] # Warmup Iteration   2: 14707.604 ops/s
[info] # Warmup Iteration   3: 15277.572 ops/s
[info] Iteration   1: 15419.084 ops/s
[info]                  ·gc.alloc.rate:      217.705 MB/sec
[info]                  ·gc.alloc.rate.norm: 22224.026 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 15436.215 ops/s
[info]                  ·gc.alloc.rate:                   217.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              22224.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.816 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26080.263 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 15462.007 ops/s
[info]                  ·gc.alloc.rate:                   218.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              22224.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.774 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26036.417 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 15420.724 ops/s
[info]                  ·gc.alloc.rate:                   217.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              22224.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.806 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26105.627 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 14649.842 ops/s
[info]                  ·gc.alloc.rate:                   206.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              22224.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.387 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34635.282 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   15277.574 ±(99.9%) 1352.869 ops/s [Average]
[info]   (min, avg, max) = (14649.842, 15277.574, 15462.007), stdev = 351.336
[info]   CI (99.9%): [13924.705, 16630.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   215.730 ±(99.9%) 19.111 MB/sec [Average]
[info]   (min, avg, max) = (206.863, 215.730, 218.322), stdev = 4.963
[info]   CI (99.9%): [196.619, 234.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   22224.025 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (22224.016, 22224.025, 22224.029), stdev = 0.005
[info]   CI (99.9%): [22224.006, 22224.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.142 ±(99.9%) 1.131 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.142, 0.666), stdev = 0.294
[info]   CI (99.9%): [≈ 0, 1.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   15.160 ±(99.9%) 121.613 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.160, 71.560), stdev = 31.582
[info]   CI (99.9%): [≈ 0, 136.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   217.957 ±(99.9%) 482.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 217.957, 322.387), stdev = 125.207
[info]   CI (99.9%): [≈ 0, 700.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   22571.518 ±(99.9%) 50640.527 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22571.518, 34635.282), stdev = 13151.184
[info]   CI (99.9%): [≈ 0, 73212.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 97.84% complete, ETA 00:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18315.291 ops/s
[info] # Warmup Iteration   2: 34482.610 ops/s
[info] # Warmup Iteration   3: 37536.832 ops/s
[info] Iteration   1: 37646.908 ops/s
[info]                  ·gc.alloc.rate:                   348.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              14576.177 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.741 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10694.072 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 37867.037 ops/s
[info]                  ·gc.alloc.rate:                   350.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              14576.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.598 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21263.899 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 37915.254 ops/s
[info]                  ·gc.alloc.rate:                   351.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              14576.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     138.906 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.809 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13687.899 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 38007.015 ops/s
[info]                  ·gc.alloc.rate:                   352.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              14576.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.762 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13654.770 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 38119.326 ops/s
[info]                  ·gc.alloc.rate:                   353.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              14576.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13531.787 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   37911.108 ±(99.9%) 678.834 ops/s [Average]
[info]   (min, avg, max) = (37646.908, 37911.108, 38119.326), stdev = 176.291
[info]   CI (99.9%): [37232.274, 38589.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   351.119 ±(99.9%) 6.499 MB/sec [Average]
[info]   (min, avg, max) = (348.578, 351.119, 353.108), stdev = 1.688
[info]   CI (99.9%): [344.620, 357.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14576.044 ±(99.9%) 0.286 B/op [Average]
[info]   (min, avg, max) = (14576.011, 14576.044, 14576.177), stdev = 0.074
[info]   CI (99.9%): [14575.758, 14576.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.671 ±(99.9%) 5.761 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.671, 3.347), stdev = 1.496
[info]   CI (99.9%): [≈ 0, 6.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   27.833 ±(99.9%) 239.094 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.833, 138.906), stdev = 62.092
[info]   CI (99.9%): [≈ 0, 266.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   350.944 ±(99.9%) 366.843 MB/sec [Average]
[info]   (min, avg, max) = (255.741, 350.944, 511.598), stdev = 95.268
[info]   CI (99.9%): [≈ 0, 717.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14566.485 ±(99.9%) 15224.011 B/op [Average]
[info]   (min, avg, max) = (10694.072, 14566.485, 21263.899), stdev = 3953.627
[info]   CI (99.9%): [≈ 0, 29790.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 5.000), stdev = 1.673
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 98.27% complete, ETA 00:00:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 820.581 ops/s
[info] # Warmup Iteration   2: 3161.342 ops/s
[info] # Warmup Iteration   3: 2910.913 ops/s
[info] Iteration   1: 3308.029 ops/s
[info]                  ·gc.alloc.rate:                   1062.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              505400.742 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      976.613 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 464713.419 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 3602.616 ops/s
[info]                  ·gc.alloc.rate:                   1157.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              505496.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36.368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      984.603 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 430166.375 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3588.407 ops/s
[info]                  ·gc.alloc.rate:                   1152.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              505496.123 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1321.786 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 579783.666 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3598.191 ops/s
[info]                  ·gc.alloc.rate:                   1155.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              505496.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.591 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 436008.331 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3600.568 ops/s
[info]                  ·gc.alloc.rate:                   1156.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              505496.113 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45.498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336.876 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 584418.781 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   3539.562 ±(99.9%) 498.833 ops/s [Average]
[info]   (min, avg, max) = (3308.029, 3539.562, 3602.616), stdev = 129.545
[info]   CI (99.9%): [3040.729, 4038.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1136.665 ±(99.9%) 160.609 MB/sec [Average]
[info]   (min, avg, max) = (1062.119, 1136.665, 1157.024), stdev = 41.710
[info]   CI (99.9%): [976.056, 1297.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   505477.044 ±(99.9%) 164.246 B/op [Average]
[info]   (min, avg, max) = (505400.742, 505477.044, 505496.123), stdev = 42.654
[info]   CI (99.9%): [505312.798, 505641.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   29.302 ±(99.9%) 71.091 B/op [Average]
[info]   (min, avg, max) = (9.105, 29.302, 45.638), stdev = 18.462
[info]   CI (99.9%): [≈ 0, 100.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1123.294 ±(99.9%) 725.058 MB/sec [Average]
[info]   (min, avg, max) = (976.613, 1123.294, 1336.876), stdev = 188.295
[info]   CI (99.9%): [398.235, 1848.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   499018.115 ±(99.9%) 296424.280 B/op [Average]
[info]   (min, avg, max) = (430166.375, 499018.115, 584418.781), stdev = 76980.444
[info]   CI (99.9%): [202593.835, 795442.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 98.70% complete, ETA 00:00:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_250ba263/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 20009.853 ops/s
[info] # Warmup Iteration   2: 57540.996 ops/s
[info] # Warmup Iteration   3: 57726.521 ops/s
[info] Iteration   1: 57773.308 ops/s
[info]                  ·gc.alloc.rate:                   737.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.998 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      646.369 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17611.460 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 56677.029 ops/s
[info]                  ·gc.alloc.rate:                   723.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      974.878 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27072.259 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 57702.353 ops/s
[info]                  ·gc.alloc.rate:                   736.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.368 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17823.902 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 57212.825 ops/s
[info]                  ·gc.alloc.rate:                   730.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.057 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18049.199 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 57666.773 ops/s
[info]                  ·gc.alloc.rate:                   736.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.944 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.724 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17980.471 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   57406.458 ±(99.9%) 1784.907 ops/s [Average]
[info]   (min, avg, max) = (56677.029, 57406.458, 57773.308), stdev = 463.535
[info]   CI (99.9%): [55621.551, 59191.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   733.057 ±(99.9%) 22.633 MB/sec [Average]
[info]   (min, avg, max) = (723.806, 733.057, 737.702), stdev = 5.878
[info]   CI (99.9%): [710.423, 755.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20099.996 ±(99.9%) 0.149 B/op [Average]
[info]   (min, avg, max) = (20099.944, 20099.996, 20100.043), stdev = 0.039
[info]   CI (99.9%): [20099.846, 20100.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.374 ±(99.9%) 4.591 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.374, 2.890), stdev = 1.192
[info]   CI (99.9%): [≈ 0, 5.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   717.879 ±(99.9%) 553.493 MB/sec [Average]
[info]   (min, avg, max) = (646.369, 717.879, 974.878), stdev = 143.740
[info]   CI (99.9%): [164.387, 1271.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   19707.458 ±(99.9%) 15866.520 B/op [Average]
[info]   (min, avg, max) = (17611.460, 19707.458, 27072.259), stdev = 4120.485
[info]   CI (99.9%): [3840.938, 35573.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 99.13% complete, ETA 00:00:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65235.755 ops/s
[info] # Warmup Iteration   2: 85497.036 ops/s
[info] # Warmup Iteration   3: 86992.620 ops/s
[info] Iteration   1: 87178.788 ops/s
[info]                  ·gc.alloc.rate:                   571.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.690 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11857.557 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 87492.596 ops/s
[info]                  ·gc.alloc.rate:                   573.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.337 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5871.623 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 87573.449 ops/s
[info]                  ·gc.alloc.rate:                   574.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.074 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11720.682 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 86712.376 ops/s
[info]                  ·gc.alloc.rate:                   568.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.767 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11830.727 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 88464.415 ops/s
[info]                  ·gc.alloc.rate:                   580.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.744 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11613.843 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   87484.325 ±(99.9%) 2478.994 ops/s [Average]
[info]   (min, avg, max) = (86712.376, 87484.325, 88464.415), stdev = 643.787
[info]   CI (99.9%): [85005.331, 89963.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   573.565 ±(99.9%) 16.272 MB/sec [Average]
[info]   (min, avg, max) = (568.540, 573.565, 580.025), stdev = 4.226
[info]   CI (99.9%): [557.293, 589.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10320.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10320.005, 10320.005, 10320.005), stdev = 0.001
[info]   CI (99.9%): [10320.004, 10320.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.832 ±(99.9%) 6.498 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.832, 3.850), stdev = 1.688
[info]   CI (99.9%): [≈ 0, 7.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   15.025 ±(99.9%) 117.344 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.025, 69.513), stdev = 30.474
[info]   CI (99.9%): [≈ 0, 132.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   587.922 ±(99.9%) 563.135 MB/sec [Average]
[info]   (min, avg, max) = (326.337, 587.922, 656.690), stdev = 146.244
[info]   CI (99.9%): [24.788, 1151.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10578.886 ±(99.9%) 10139.569 B/op [Average]
[info]   (min, avg, max) = (5871.623, 10578.886, 11857.557), stdev = 2633.214
[info]   CI (99.9%): [439.317, 20718.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 99.57% complete, ETA 00:00:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 81343.574 ops/s
[info] # Warmup Iteration   2: 104698.503 ops/s
[info] # Warmup Iteration   3: 99153.898 ops/s
[info] Iteration   1: 102638.398 ops/s
[info]                  ·gc.alloc.rate:      6.784 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 104447.354 ops/s
[info]                  ·gc.alloc.rate:      6.901 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 104496.104 ops/s
[info]                  ·gc.alloc.rate:      6.905 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 98012.879 ops/s
[info]                  ·gc.alloc.rate:      6.479 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 103981.533 ops/s
[info]                  ·gc.alloc.rate:      6.870 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   102715.253 ±(99.9%) 10526.652 ops/s [Average]
[info]   (min, avg, max) = (98012.879, 102715.253, 104496.104), stdev = 2733.738
[info]   CI (99.9%): [92188.601, 113241.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   6.788 ±(99.9%) 0.690 MB/sec [Average]
[info]   (min, avg, max) = (6.479, 6.788, 6.905), stdev = 0.179
[info]   CI (99.9%): [6.098, 7.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   104.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.004, 104.004, 104.004), stdev = 0.001
[info]   CI (99.9%): [104.004, 104.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # Run complete. Total time: 00:49:18
[info] Benchmark                                                                               Mode  Cnt         Score        Error   Units
[info] AdtBenchmark.readCirce                                                                 thrpt    5    762902.812 ±  31303.446   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                  thrpt    5      2016.549 ±     82.337  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                             thrpt    5      4160.001 ±      0.001    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         thrpt    5         0.129 ±      0.104  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    thrpt    5         0.266 ±      0.215    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     thrpt    5      2072.565 ±    499.098  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                thrpt    5      4277.845 ±   1193.090    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                       thrpt    5        31.000               counts
[info] AdtBenchmark.readCirce:·gc.time                                                        thrpt    5        31.000                   ms
[info] AdtBenchmark.readJacksonScala                                                          thrpt    5   1703946.017 ±  20447.614   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                           thrpt    5      1212.397 ±     14.410  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      thrpt    5      1120.000 ±      0.001    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  thrpt    5         0.079 ±      0.067  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.073 ±      0.062    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              thrpt    5      1193.962 ±    690.303  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         thrpt    5      1102.903 ±    635.729    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                thrpt    5        18.000               counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                 thrpt    5        20.000                   ms
[info] AdtBenchmark.readJsoniterScala                                                         thrpt    5   4032529.368 ± 148354.811   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                          thrpt    5       266.449 ±      9.949  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     thrpt    5       104.000 ±      0.001    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 thrpt    5         0.631 ±      5.433  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.247 ±      2.124    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             thrpt    5       219.928 ±    490.345  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        thrpt    5        86.061 ±    191.838    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                               thrpt    5         4.000               counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                thrpt    5        10.000                   ms
[info] AdtBenchmark.readPlayJson                                                              thrpt    5    173328.792 ±   5539.071   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                               thrpt    5      1441.191 ±     45.505  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                          thrpt    5     13088.002 ±      0.001    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      thrpt    5         0.096 ±      0.122  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 thrpt    5         0.869 ±      1.087    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  thrpt    5      1465.406 ±    685.730  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             thrpt    5     13311.338 ±   6348.668    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                    thrpt    5        22.000               counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                     thrpt    5        26.000                   ms
[info] AdtBenchmark.writeJacksonScala                                                         thrpt    5   2109977.194 ±  26070.221   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                          thrpt    5       686.376 ±      8.612  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     thrpt    5       512.000 ±      0.001    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 thrpt    5         0.167 ±      0.674  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.124 ±      0.500    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             thrpt    5       719.071 ±    555.093  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        thrpt    5       536.512 ±    417.650    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                               thrpt    5        11.000               counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                thrpt    5        14.000                   ms
[info] AdtBenchmark.writeJsoniterScala                                                        thrpt    5  14689919.196 ± 591434.881   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                         thrpt    5       746.591 ±     30.109  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    thrpt    5        80.000 ±      0.001    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                thrpt    5         0.100 ±      0.154  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.011 ±      0.016    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            thrpt    5       785.494 ±    697.686  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5        84.084 ±     72.763    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                              thrpt    5        12.000               counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                               thrpt    5        11.000                   ms
[info] AdtBenchmark.writePlayJson                                                             thrpt    5    315560.593 ±   7512.669   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                              thrpt    5      1029.727 ±     24.392  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                         thrpt    5      5136.001 ±      0.001    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     thrpt    5         0.083 ±      0.113  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0.415 ±      0.564    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 thrpt    5       991.132 ±     32.185  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            thrpt    5      4943.598 ±    173.489    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                   thrpt    5        15.000               counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                    thrpt    5        18.000                   ms
[info] AnyRefsBenchmark.readCirce                                                             thrpt    5   1582074.912 ±  41958.922   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                              thrpt    5      2452.216 ±     64.886  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                         thrpt    5      2440.000 ±      0.001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     thrpt    5         0.125 ±      0.188  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0.124 ±      0.190    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 thrpt    5      2490.087 ±    680.752  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            thrpt    5      2478.438 ±    725.844    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                   thrpt    5        37.000               counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                    thrpt    5        33.000                   ms
[info] AnyRefsBenchmark.readJacksonScala                                                      thrpt    5   2612776.096 ±  40422.701   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                       thrpt    5      1832.520 ±     28.349  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  thrpt    5      1104.000 ±      0.001    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              thrpt    5         0.117 ±      0.091  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.070 ±      0.056    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          thrpt    5      1812.566 ±    717.424  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      1091.843 ±    425.464    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                            thrpt    5        27.000               counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                             thrpt    5        30.000                   ms
[info] AnyRefsBenchmark.readJsoniterScala                                                     thrpt    5  11353148.864 ± 161841.331   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                      thrpt    5      1442.613 ±     19.848  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 thrpt    5       200.000 ±      0.001    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             thrpt    5         0.092 ±      0.091  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.013 ±      0.013    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         thrpt    5      1467.033 ±    693.391  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5       203.436 ±     98.115    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                           thrpt    5        22.000               counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                            thrpt    5        20.000                   ms
[info] AnyRefsBenchmark.readPlayJson                                                          thrpt    5    621925.625 ±   9719.828   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                           thrpt    5      1643.886 ±     26.325  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      thrpt    5      4160.001 ±      0.001    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  thrpt    5         0.083 ±      0.160  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.211 ±      0.405    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              thrpt    5      1672.930 ±     64.367  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5      4233.585 ±    187.714    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                thrpt    5        25.000               counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                 thrpt    5        31.000                   ms
[info] AnyRefsBenchmark.writeCirce                                                            thrpt    5   1771916.431 ±  18757.041   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                             thrpt    5      1639.353 ±     18.110  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                        thrpt    5      1456.000 ±      0.001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    thrpt    5         0.104 ±      0.196  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.092 ±      0.175    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                thrpt    5      1595.682 ±    537.894  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5      1417.391 ±    485.957    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                  thrpt    5        24.000               counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                   thrpt    5        22.000                   ms
[info] AnyRefsBenchmark.writeJacksonScala                                                     thrpt    5   6408772.336 ± 191425.245   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                      thrpt    5      1759.004 ±     52.127  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 thrpt    5       432.000 ±      0.001    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             thrpt    5         0.096 ±      0.201  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.024 ±      0.049    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         thrpt    5      1740.531 ±    559.775  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5       427.515 ±    139.844    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                           thrpt    5        26.000               counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                            thrpt    5        30.000                   ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                    thrpt    5  23207530.494 ± 262857.288   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     thrpt    5       707.743 ±      8.388  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                thrpt    5        48.000 ±      0.001    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            thrpt    5         0.046 ±      0.119  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.003 ±      0.008    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        thrpt    5       654.302 ±      4.651  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5        44.376 ±      0.771    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                          thrpt    5        10.000               counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                           thrpt    5        10.000                   ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                            thrpt    5  22781873.121 ± 653384.279   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             thrpt    5        ≈ 10⁻⁴               MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        thrpt    5        ≈ 10⁻⁵                 B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  thrpt    5           ≈ 0               counts
[info] AnyRefsBenchmark.writePlayJson                                                         thrpt    5   1457506.776 ±  14217.635   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                          thrpt    5      2133.503 ±     21.218  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     thrpt    5      2304.000 ±      0.001    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 thrpt    5         0.092 ±      0.072  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.099 ±      0.077    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             thrpt    5      2153.243 ±    688.081  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      2325.266 ±    739.272    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                               thrpt    5        32.000               counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                thrpt    5        38.000                   ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                      thrpt    5      8457.504 ±    222.838   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                       thrpt    5      1249.371 ±     32.779  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                  thrpt    5    232521.602 ±     13.374    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                              thrpt    5         0.058 ±      0.088  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5        10.848 ±     16.329    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                          thrpt    5      1257.715 ±    548.297  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5    234139.810 ± 104237.465    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                            thrpt    5        19.000               counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                             thrpt    5        19.000                   ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                               thrpt    5     24739.849 ±    366.136   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                thrpt    5       915.214 ±     14.198  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                           thrpt    5     58227.643 ±     61.821    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.067 ±      0.143  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         4.239 ±      9.133    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5       925.873 ±    569.532  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5     58899.646 ±  36099.518    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                     thrpt    5        14.000               counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                      thrpt    5        15.000                   ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                              thrpt    5     27929.247 ±    629.374   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5       506.986 ±     11.242  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5     28568.016 ±      0.008    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.538 ±      4.499  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5        30.180 ±    252.319    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5       462.718 ±    695.769  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5     26068.255 ±  39125.319    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                    thrpt    5         7.000               counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                     thrpt    5         8.000                   ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                              thrpt    5     16064.780 ±    238.764   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                               thrpt    5      1540.681 ±     22.616  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                          thrpt    5    150944.004 ±      0.394    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.100 ±      0.174  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         9.791 ±     17.034    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5      1540.395 ±    723.201  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5    150894.233 ±  69972.361    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                    thrpt    5        23.000               counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                     thrpt    5        27.000                   ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                             thrpt    5     17640.642 ±    196.914   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5      1541.384 ±     16.758  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5    137528.025 ±      0.009    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.079 ±      0.119  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         7.054 ±     10.535    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5      1595.665 ±    573.889  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5    142368.946 ±  51093.627    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5        24.000               counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5        21.000                   ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                     thrpt    5     17618.849 ±    139.963   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                      thrpt    5      1538.512 ±     12.780  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                 thrpt    5    137440.025 ±      0.013    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space             thrpt    5         0.104 ±      0.220  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm        thrpt    5         9.291 ±     19.569    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space         thrpt    5      1595.572 ±    573.880  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm    thrpt    5    142520.894 ±  50515.158    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                           thrpt    5        24.000               counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                            thrpt    5        22.000                   ms
[info] ArrayOfBooleansBenchmark.readCirce                                                     thrpt    5     47355.688 ±   1608.220   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                      thrpt    5      1642.846 ±     56.209  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                 thrpt    5     54600.009 ±      0.001    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                             thrpt    5         0.096 ±      0.091  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5         3.183 ±      3.037    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         thrpt    5      1666.360 ±     67.327  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5     55385.844 ±   3216.024    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                           thrpt    5        25.000               counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                            thrpt    5        23.000                   ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                              thrpt    5    106293.975 ±   3216.245   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                               thrpt    5       247.437 ±      7.475  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                          thrpt    5      3664.004 ±      0.001    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.029 ±      0.166  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0.430 ±      2.449    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5       218.208 ±    483.167  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5      3232.629 ±   7145.912    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                    thrpt    5         4.000               counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                     thrpt    5         5.000                   ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                             thrpt    5    235111.399 ±   2292.942   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                              thrpt    5       320.238 ±      2.964  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      2144.002 ±      0.001    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.669 ±      5.624  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         4.486 ±     37.730    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5       351.145 ±    366.402  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5      2350.850 ±   2447.168    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                   thrpt    5         6.000               counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                    thrpt    5        12.000                   ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                  thrpt    5     12940.323 ±    176.370   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                   thrpt    5      3947.268 ±     54.762  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                              thrpt    5    480126.044 ±   1425.576    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                          thrpt    5         0.133 ±      0.166  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5        16.206 ±     20.228    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5      3941.666 ±    734.631  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5    479482.883 ±  92795.335    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                        thrpt    5        58.000               counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                         thrpt    5        68.000                   ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                    thrpt    5     45560.413 ±   1515.685   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                     thrpt    5       799.885 ±     26.938  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                thrpt    5     27632.009 ±      0.002    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                            thrpt    5         0.079 ±      0.067  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5         2.731 ±      2.282    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                        thrpt    5       784.806 ±    687.170  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     27099.113 ±  23438.525    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                          thrpt    5        12.000               counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                           thrpt    5        11.000                   ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                             thrpt    5    133597.235 ±   6062.740   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                              thrpt    5       954.858 ±     44.237  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                         thrpt    5     11248.006 ±      0.027    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.071 ±      0.121  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         0.832 ±      1.406    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5       921.074 ±    565.623  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5     10860.227 ±   6887.297    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                   thrpt    5        14.000               counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                    thrpt    5        16.000                   ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                            thrpt    5    284448.594 ±  12588.148   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                             thrpt    5      1022.206 ±     45.319  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      5656.001 ±      0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.087 ±      0.067  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         0.484 ±      0.368    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5      1051.968 ±    576.950  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5      5819.191 ±   3118.603    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                  thrpt    5        16.000               counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                   thrpt    5        16.000                   ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                    thrpt    5    315315.765 ±  22480.566   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                     thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                thrpt    5         0.001 ±      0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                          thrpt    5           ≈ 0               counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                 thrpt    5     55230.692 ±    650.643   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                  thrpt    5       546.526 ±      6.426  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                             thrpt    5     15576.007 ±      0.090    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                         thrpt    5         0.819 ±      6.654  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5        23.430 ±    190.322    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5       517.915 ±    682.144  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5     14750.326 ±  19313.873    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                       thrpt    5         8.000               counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                        thrpt    5        12.000                   ms
[info] ArrayOfBytesBenchmark.readCirce                                                        thrpt    5     21413.684 ±    470.462   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1943.058 ±     43.562  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5    142815.618 ±      2.248    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.087 ±      0.143  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5         6.430 ±     10.598    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5      1942.994 ±    631.098  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5    142823.335 ±  46914.555    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                              thrpt    5        29.000               counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                               thrpt    5        31.000                   ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                 thrpt    5     54654.394 ±   3204.163   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5       127.222 ±      7.394  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5      3664.008 ±      0.002    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.008 ±      0.072  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.246 ±      2.121    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5       102.321 ±    539.508  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5      2977.608 ±  15703.734    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                       thrpt    5         2.000               counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                        thrpt    5         2.000                   ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                thrpt    5    134453.776 ±   1860.865   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       183.137 ±      2.547  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5      2144.003 ±      0.001    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.004 ±      0.038  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.052 ±      0.450    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5       153.459 ±    539.429  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5      1800.825 ±   6330.157    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                      thrpt    5         3.000               counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                       thrpt    5         7.000                   ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                     thrpt    5      9838.614 ±    102.781   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      3296.291 ±     34.126  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5    527320.664 ±      5.354    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5         0.037 ±      0.088  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5         5.995 ±     14.068    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5      3323.341 ±    562.174  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5    531624.715 ±  87364.753    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                           thrpt    5        49.000               counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                            thrpt    5        51.000                   ms
[info] ArrayOfBytesBenchmark.writeCirce                                                       thrpt    5     34089.795 ±   2656.402   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5      1321.366 ±    102.825  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5     61009.594 ±     13.615    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.121 ±      0.174  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5         5.548 ±      7.567    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5      1322.379 ±    866.090  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     60946.143 ±  36046.586    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                             thrpt    5        20.000               counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                              thrpt    5        24.000                   ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                               thrpt    5    237706.145 ±   8587.450   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       567.837 ±     20.242  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      3760.002 ±      0.001    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.785 ±      6.182  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         5.204 ±     40.976    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5       588.830 ±    563.698  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5      3901.569 ±   3765.103    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5         9.000               counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5        10.000                   ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5    251984.696 ±    366.460   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5         0.002 ±      0.001    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5           ≈ 0               counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                    thrpt    5      4624.889 ±     63.562   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5      2141.365 ±     29.808  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5    728752.091 ±      0.014    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5         0.067 ±      0.104  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5        22.668 ±     35.532    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5      2141.620 ±    736.309  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5    728935.141 ± 255766.170    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                          thrpt    5        32.000               counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                           thrpt    5        32.000                   ms
[info] ArrayOfDoublesBenchmark.readCirce                                                      thrpt    5      2952.266 ±     65.506   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                       thrpt    5      1389.489 ±     30.245  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                  thrpt    5    740720.302 ±      1.392    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                              thrpt    5         0.171 ±      0.328  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5        90.917 ±    174.529    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                          thrpt    5      1391.156 ±    593.545  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5    741767.536 ± 323699.716    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                            thrpt    5        21.000               counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                             thrpt    5        23.000                   ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                               thrpt    5      6310.807 ±    383.151   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                thrpt    5       896.177 ±     54.632  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                           thrpt    5    223512.067 ±      0.013    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.067 ±      0.036  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5        16.602 ±      8.503    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5       858.637 ±    690.671  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5    214324.254 ± 175562.019    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                     thrpt    5        13.000               counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                      thrpt    5        15.000                   ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                              thrpt    5      8207.898 ±    391.197   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5       583.079 ±     27.696  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5    111808.050 ±      0.008    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.699 ±      5.525  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5       135.673 ±   1074.268    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5       591.553 ±    567.951  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5    113545.530 ± 110349.967    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                    thrpt    5         9.000               counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                     thrpt    5        10.000                   ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                   thrpt    5      3748.831 ±     48.895   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                    thrpt    5      1627.839 ±     30.350  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                               thrpt    5    683439.979 ±   4819.870    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           thrpt    5         0.033 ±      0.122  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5        13.990 ±     51.024    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5      1670.343 ±     67.988  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5    701299.310 ±  32244.221    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                         thrpt    5        25.000               counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                          thrpt    5        25.000                   ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                     thrpt    5      5930.805 ±     80.408   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                      thrpt    5       515.585 ±      7.310  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                 thrpt    5    136824.071 ±      0.011    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                             thrpt    5         0.724 ±      5.835  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5       192.859 ±   1554.304    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                         thrpt    5       507.846 ±    646.212  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5    134848.197 ± 172426.484    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                           thrpt    5         8.000               counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                            thrpt    5        12.000                   ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                              thrpt    5      6985.172 ±     33.486   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                               thrpt    5       303.719 ±      1.449  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                          thrpt    5     68443.732 ±      0.449    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.012 ±      0.072  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         2.812 ±     16.148    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5       293.088 ±    131.360  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5     66045.113 ±  29483.098    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                    thrpt    5         5.000               counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                     thrpt    5         5.000                   ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                             thrpt    5      7716.159 ±    109.923   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5       274.244 ±      3.905  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5     55936.055 ±      0.009    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.763 ±      6.416  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5       155.637 ±   1308.825    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5       284.828 ±    153.221  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5     58078.736 ±  30656.935    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5         5.000               counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5        12.000                   ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                     thrpt    5      7702.950 ±    302.142   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                      thrpt    5       202.278 ±      7.869  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                 thrpt    5     41328.054 ±      0.007    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space             thrpt    5         0.008 ±      0.068  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm        thrpt    5         1.613 ±     13.890    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space         thrpt    5       204.618 ±    440.456  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm    thrpt    5     41622.084 ±  89595.487    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                           thrpt    5         4.000               counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                            thrpt    5        10.000                   ms
[info] ArrayOfFloatsBenchmark.readCirce                                                       thrpt    5      4283.979 ±    131.126   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      1503.931 ±     45.806  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5    552600.098 ±      0.018    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.137 ±      0.361  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5        50.468 ±    132.285    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5      1527.902 ±    719.641  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5    561155.494 ± 254324.886    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                             thrpt    5        23.000               counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                              thrpt    5        24.000                   ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                thrpt    5     11487.904 ±    386.691   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5       966.885 ±     32.055  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5    132470.994 ±     62.263    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.071 ±      0.091  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         9.702 ±     12.642    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5       992.593 ±     35.009  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5    136008.902 ±   9006.823    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                      thrpt    5        15.000               counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                       thrpt    5        17.000                   ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                               thrpt    5     17922.747 ±    519.912   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5        93.830 ±      2.666  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      8240.024 ±      0.013    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.421 ±      3.628  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5        36.906 ±    317.768    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5       102.307 ±    539.436  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5      8993.170 ±  47418.854    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         2.000               counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                      thrpt    5         5.000                   ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                    thrpt    5      4490.942 ±     84.540   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      1924.320 ±     32.899  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5    674342.192 ±   4047.686    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5         0.087 ±      0.274  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5        30.695 ±     96.549    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5      1879.617 ±    724.837  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5    658622.180 ± 251323.988    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                          thrpt    5        28.000               counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                           thrpt    5        30.000                   ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                      thrpt    5      9251.972 ±   1214.464   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                       thrpt    5       524.796 ±    100.566  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                  thrpt    5     89475.986 ±  27528.798    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              thrpt    5         0.718 ±      5.810  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5       123.717 ±   1002.155    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          thrpt    5       521.901 ±    686.753  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     88482.654 ± 112842.211    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                            thrpt    5         8.000               counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                             thrpt    5         9.000                   ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                               thrpt    5     11486.284 ±    484.128   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                thrpt    5       342.569 ±     14.461  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           thrpt    5     46941.806 ±      0.533    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.025 ±      0.088  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         3.441 ±     12.097    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5       359.528 ±    327.069  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5     49231.336 ±  43809.393    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                     thrpt    5         6.000               counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                      thrpt    5         7.000                   ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                              thrpt    5     13121.022 ±    221.081   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                               thrpt    5       320.527 ±      5.351  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          thrpt    5     38448.034 ±      0.017    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.758 ±      6.483  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5        91.131 ±    778.985    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5       350.095 ±    367.566  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5     42023.797 ±  44790.166    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                    thrpt    5         6.000               counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                     thrpt    5        13.000                   ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                      thrpt    5     13029.395 ±    369.979   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       thrpt    5       237.668 ±      6.747  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  thrpt    5     28712.033 ±      0.015    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space              thrpt    5         0.761 ±      6.420  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm         thrpt    5        93.031 ±    784.892    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space          thrpt    5       270.352 ±    125.613  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm     thrpt    5     32682.750 ±  16148.891    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                            thrpt    5         5.000               counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                             thrpt    5        12.000                   ms
[info] ArrayOfInstantsBenchmark.readCirce                                                     thrpt    5      9958.464 ±    212.789   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                      thrpt    5      1635.441 ±     35.027  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                 thrpt    5    258492.730 ±     27.326    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space                             thrpt    5         0.079 ±      0.200  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5        12.505 ±     31.612    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         thrpt    5      1665.803 ±     64.517  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5    263305.767 ±  14534.597    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                           thrpt    5        25.000               counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                            thrpt    5        26.000                   ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                              thrpt    5     10664.765 ±    267.091   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                               thrpt    5      1647.383 ±     41.419  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                          thrpt    5    243146.757 ±     58.263    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.079 ±      0.067  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5        11.665 ±      9.710    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5      1677.424 ±     53.908  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5    247589.539 ±  10290.846    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                    thrpt    5        25.000               counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                     thrpt    5        29.000                   ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                             thrpt    5    106271.930 ±   3566.138   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                              thrpt    5       276.537 ±      9.270  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      4096.004 ±      0.001    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.546 ±      4.599  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         8.053 ±     67.800    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5       285.999 ±    159.438  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5      4234.757 ±   2306.668    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                   thrpt    5         5.000               counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                    thrpt    5        10.000                   ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                  thrpt    5      5774.494 ±    198.143   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                   thrpt    5      1525.002 ±     53.100  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                              thrpt    5    415600.072 ±      0.009    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                          thrpt    5         0.037 ±      0.088  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5        10.225 ±     24.164    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5      1541.378 ±    724.494  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5    420192.997 ± 201833.244    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                        thrpt    5        23.000               counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                         thrpt    5        25.000                   ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                    thrpt    5     25125.710 ±    666.789   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                     thrpt    5      1412.216 ±     38.098  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                thrpt    5     88463.829 ±     42.954    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                            thrpt    5         0.062 ±      0.150  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5         3.921 ±      9.501    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                        thrpt    5      1392.909 ±    596.049  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     87220.133 ±  35505.228    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                          thrpt    5        21.000               counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                           thrpt    5        21.000                   ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                            thrpt    5    265556.692 ±   1453.439   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                             thrpt    5       585.841 ±      2.889  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      3472.002 ±      0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.782 ±      6.283  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         4.639 ±     37.299    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5       588.889 ±    565.091  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5      3490.474 ±   3354.332    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                  thrpt    5         9.000               counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                   thrpt    5        10.000                   ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                    thrpt    5    282851.425 ±    817.987   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                     thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                thrpt    5         0.001 ±      0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                          thrpt    5           ≈ 0               counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                 thrpt    5     28179.604 ±   1033.606   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                  thrpt    5      1482.205 ±     54.402  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                             thrpt    5     82792.016 ±      0.007    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                         thrpt    5         0.104 ±      0.204  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5         5.815 ±     11.389    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5      1518.618 ±    699.968  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5     84856.685 ±  40228.450    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                       thrpt    5        23.000               counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                        thrpt    5        24.000                   ms
[info] ArrayOfIntsBenchmark.readCirce                                                         thrpt    5     17055.229 ±    258.723   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      2121.020 ±     32.202  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5    195749.223 ±     22.168    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.137 ±      0.156  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5        12.687 ±     14.580    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      2148.276 ±    732.000  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5    198306.734 ±  69847.395    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                               thrpt    5        32.000               counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                thrpt    5        30.000                   ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                  thrpt    5     38092.514 ±   2476.536   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5       273.611 ±     17.506  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5     11305.931 ±     16.536    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.025 ±      0.215  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         1.024 ±      8.819    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5       282.940 ±    711.020  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5     11691.395 ±  29125.305    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                        thrpt    5         5.000               counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                         thrpt    5         6.000                   ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                 thrpt    5     91320.216 ±   2332.225   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       478.042 ±     12.212  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      8240.005 ±      0.001    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.676 ±      5.511  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5        11.644 ±     94.849    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5       511.252 ±    650.669  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5      8824.186 ±  11374.667    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         8.000               counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                        thrpt    5        11.000                   ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                      thrpt    5      8521.670 ±    270.250   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      3013.855 ±     89.713  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5    556687.741 ±   1917.153    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5         0.083 ±      0.150  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5        15.332 ±     27.182    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5      3048.444 ±     63.732  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5    563111.436 ±  24147.984    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                            thrpt    5        45.000               counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                             thrpt    5        47.000                   ms
[info] ArrayOfIntsBenchmark.writeCirce                                                        thrpt    5     25431.224 ±   6680.068   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5      1371.284 ±    361.102  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5     84863.726 ±     42.633    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.092 ±      0.072  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5         5.652 ±      3.895    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5      1322.423 ±     49.535  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5     82166.901 ±  23103.910    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                              thrpt    5        20.000               counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                               thrpt    5        21.000                   ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                 thrpt    5    100238.165 ±   2433.905   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                  thrpt    5       808.265 ±     19.539  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             thrpt    5     12692.326 ±      0.078    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.071 ±      0.166  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         1.111 ±      2.604    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5       850.877 ±    690.206  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5     13356.025 ±  10716.912    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                       thrpt    5        13.000               counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                        thrpt    5        15.000                   ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                thrpt    5    118590.464 ±   1889.797   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 thrpt    5       505.074 ±      8.003  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            thrpt    5      6704.004 ±      0.001    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.772 ±      6.378  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5        10.211 ±     84.367    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5       508.861 ±    647.122  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5      6759.207 ±   8660.023    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                      thrpt    5         8.000               counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                       thrpt    5        12.000                   ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                        thrpt    5    154783.339 ±   1012.904   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    thrpt    5         0.003 ±      0.001    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              thrpt    5           ≈ 0               counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                     thrpt    5      4162.247 ±     97.274   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                      thrpt    5      1795.878 ±     42.770  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                 thrpt    5    679084.338 ±      1.143    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             thrpt    5         0.033 ±      0.072  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5        12.601 ±     27.123    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5      1793.061 ±    653.174  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5    677801.181 ± 234501.926    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                           thrpt    5        27.000               counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                            thrpt    5        30.000                   ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                   thrpt    5     27889.160 ±    999.818   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                    thrpt    5      1513.716 ±     52.915  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                               thrpt    5     85416.086 ±     53.366    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space                           thrpt    5         0.112 ±      0.146  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5         6.338 ±      8.167    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                       thrpt    5      1529.397 ±    690.278  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5     86287.187 ±  38287.717    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                         thrpt    5        23.000               counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                          thrpt    5        22.000                   ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                            thrpt    5     31582.730 ±    742.449   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                             thrpt    5      1442.008 ±     32.901  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                        thrpt    5     71862.348 ±     54.543    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.058 ±      0.174  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         2.896 ±      8.604    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5      1472.441 ±    719.787  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5     73340.554 ±  34281.994    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                  thrpt    5        22.000               counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                   thrpt    5        26.000                   ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                           thrpt    5    269624.839 ±   6473.509   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                            thrpt    5       701.756 ±     16.993  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                       thrpt    5      4096.002 ±      0.001    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5         0.087 ±      0.067  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5         0.510 ±      0.386    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5       727.082 ±    563.759  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5      4242.505 ±   3247.664    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                 thrpt    5        11.000               counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                  thrpt    5        10.000                   ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                thrpt    5     18117.278 ±    540.395   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                 thrpt    5      1841.329 ±     55.233  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                            thrpt    5    159960.158 ±      1.145    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                        thrpt    5         0.100 ±      0.132  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                   thrpt    5         8.677 ±     11.413    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                    thrpt    5      1817.716 ±    716.916  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm               thrpt    5    157929.112 ±  63102.085    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                      thrpt    5        27.000               counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                       thrpt    5        29.000                   ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                  thrpt    5     53134.974 ±    512.101   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                   thrpt    5      1401.942 ±     13.520  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                              thrpt    5     41528.008 ±      0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                          thrpt    5         0.062 ±      0.113  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                     thrpt    5         1.850 ±      3.362    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                      thrpt    5      1393.017 ±    594.154  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                 thrpt    5     41263.199 ±  17565.050    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                        thrpt    5        21.000               counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                         thrpt    5        21.000                   ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                          thrpt    5   1221544.386 ±  10268.511   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                           thrpt    5      1309.935 ±     10.853  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                      thrpt    5      1688.000 ±      0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                  thrpt    5         0.092 ±      0.122  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm             thrpt    5         0.118 ±      0.157    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space              thrpt    5      1322.485 ±     48.469  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm         thrpt    5      1704.187 ±     68.471    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                thrpt    5        20.000               counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                 thrpt    5        19.000                   ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                  thrpt    5   1362648.704 ±   3406.812   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                   thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm              thrpt    5        ≈ 10⁻⁴                 B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                        thrpt    5           ≈ 0               counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                               thrpt    5     60077.858 ±   2922.435   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                thrpt    5      1396.448 ±     68.516  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                           thrpt    5     36584.009 ±      0.014    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                       thrpt    5         0.079 ±      0.230  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                  thrpt    5         2.067 ±      6.034    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                   thrpt    5      1384.323 ±    597.757  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm              thrpt    5     36255.008 ±  14988.581    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                     thrpt    5        21.000               counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                      thrpt    5        22.000                   ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                   thrpt    5     19162.736 ±    483.717   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                    thrpt    5      1465.157 ±     36.606  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                               thrpt    5    120340.306 ±     28.495    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                           thrpt    5         0.067 ±      0.191  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5         5.478 ±     15.816    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                       thrpt    5      1461.668 ±    703.523  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5    120099.829 ±  59528.368    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                         thrpt    5        22.000               counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                          thrpt    5        22.000                   ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                            thrpt    5     18796.352 ±    417.678   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                             thrpt    5      1365.414 ±     30.312  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                        thrpt    5    114328.623 ±     56.242    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.067 ±      0.105  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         5.575 ±      8.743    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5      1403.239 ±    558.961  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5    117523.614 ±  48137.682    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                  thrpt    5        21.000               counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                   thrpt    5        24.000                   ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                           thrpt    5    324644.264 ±   6218.997   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                            thrpt    5       829.886 ±     15.777  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                       thrpt    5      4024.001 ±      0.001    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5         0.096 ±      0.122  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5         0.464 ±      0.588    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5       860.563 ±    699.071  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5      4172.469 ±   3383.697    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                 thrpt    5        13.000               counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                  thrpt    5        11.000                   ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                thrpt    5     13721.462 ±    256.687   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                 thrpt    5      1746.952 ±     32.805  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                            thrpt    5    200400.505 ±      2.920    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                        thrpt    5         0.067 ±      0.154  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                   thrpt    5         7.643 ±     17.689    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                    thrpt    5      1747.977 ±    587.899  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm               thrpt    5    200533.251 ±  68195.326    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                      thrpt    5        26.000               counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                       thrpt    5        30.000                   ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                          thrpt    5   1261579.405 ±  39429.226   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                           thrpt    5      1045.276 ±     33.339  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                      thrpt    5      1304.000 ±      0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                  thrpt    5         0.075 ±      0.108  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm             thrpt    5         0.093 ±      0.132    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space              thrpt    5      1052.153 ±    553.341  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm         thrpt    5      1312.117 ±    668.936    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                thrpt    5        16.000               counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                 thrpt    5        15.000                   ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                  thrpt    5   1596277.235 ±   4762.632   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                   thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm              thrpt    5        ≈ 10⁻⁴                 B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                        thrpt    5           ≈ 0               counts
[info] ArrayOfLongsBenchmark.readCirce                                                        thrpt    5     15771.522 ±    442.275   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      2121.188 ±     59.885  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5    211684.342 ±     26.612    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.075 ±      0.176  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5         7.462 ±     17.450    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5      2148.026 ±    683.884  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5    214330.844 ±  65973.760    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                              thrpt    5        32.000               counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                               thrpt    5        32.000                   ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                 thrpt    5     30487.350 ±   1139.142   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5       416.522 ±     15.517  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     21502.047 ±     51.945    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.025 ±      0.143  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         1.300 ±      7.466    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5       376.449 ±    595.517  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5     19465.579 ±  31302.782    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                       thrpt    5         6.000               counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                        thrpt    5         6.000                   ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                thrpt    5     58898.366 ±    828.389   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       612.519 ±      8.114  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     16368.007 ±      0.001    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.716 ±      5.542  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5        19.110 ±    147.786    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5       657.601 ±      5.405  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5     17572.860 ±    271.595    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5        10.000               counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5        11.000                   ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                     thrpt    5      8157.751 ±    135.873   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      2960.023 ±     47.907  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5    571100.014 ±    102.813    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5         0.108 ±      0.104  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5        20.873 ±     19.950    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5      2912.598 ±    698.390  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5    561947.657 ± 134240.103    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                           thrpt    5        43.000               counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                            thrpt    5        44.000                   ms
[info] ArrayOfLongsBenchmark.writeCirce                                                       thrpt    5     22557.166 ±   4635.790   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5      1566.629 ±    322.712  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5    109320.092 ±     40.424    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.090 ±      0.249  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5         6.278 ±     16.509    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5      1593.087 ±    552.576  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5    111251.253 ±  37860.167    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                             thrpt    5        24.000               counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                              thrpt    5        24.000                   ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                thrpt    5     57695.747 ±    444.347   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5       719.036 ±      5.517  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5     19616.239 ±      0.164    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.058 ±      0.132  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         1.590 ±      3.595    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5       718.218 ±    584.181  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5     19596.956 ±  16024.742    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                      thrpt    5        11.000               counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                       thrpt    5        13.000                   ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                               thrpt    5     63061.253 ±   3085.651   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       420.562 ±     20.364  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5     10496.007 ±      0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.760 ±      6.325  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5        19.343 ±    161.052    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5       378.620 ±    610.384  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5      9481.398 ±  15829.213    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5         6.000               counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5         9.000                   ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5     76939.545 ±   3335.151   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5         0.005 ±      0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5           ≈ 0               counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                    thrpt    5      3677.717 ±     65.929   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5      1590.594 ±     28.365  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5    680768.317 ±      1.819    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5         0.042 ±      0.127  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5        17.792 ±     53.980    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5      1587.718 ±    570.856  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5    679560.513 ± 244883.681    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                          thrpt    5        24.000               counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                           thrpt    5        23.000                   ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                      thrpt    5     28301.980 ±    541.713   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                       thrpt    5      1020.560 ±     19.753  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                  thrpt    5     56751.902 ±      0.968    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space                              thrpt    5         0.083 ±      0.113  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5         4.629 ±      6.285    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                          thrpt    5      1052.494 ±    550.431  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     58557.766 ±  31826.116    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                            thrpt    5        16.000               counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                             thrpt    5        15.000                   ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                               thrpt    5     28252.500 ±    731.844   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                thrpt    5       774.479 ±     20.349  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                           thrpt    5     43144.114 ±      0.857    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.058 ±      0.174  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         3.255 ±      9.738    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5       789.579 ±    700.921  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5     44033.661 ±  40117.714    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                     thrpt    5        12.000               counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                      thrpt    5        14.000                   ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                              thrpt    5     31761.303 ±    668.929   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5       702.557 ±     14.635  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5     34816.014 ±      0.006    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.580 ±      4.500  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5        28.719 ±    222.905    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5       727.199 ±    572.773  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5     36036.785 ±  28357.245    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                    thrpt    5        11.000               counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                     thrpt    5        11.000                   ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                   thrpt    5     22518.364 ±    767.377   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                    thrpt    5      1408.630 ±     48.808  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                               thrpt    5     98448.019 ±      0.008    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           thrpt    5         0.067 ±      0.104  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5         4.656 ±      7.266    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5      1461.897 ±    695.287  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5    102243.054 ±  51302.708    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                         thrpt    5        22.000               counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                          thrpt    5        25.000                   ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                     thrpt    5     83624.460 ±   1986.968   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                      thrpt    5      1290.020 ±     31.371  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                 thrpt    5     24280.005 ±      0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                             thrpt    5         0.071 ±      0.134  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5         1.332 ±      2.528    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                         thrpt    5      1256.869 ±    544.526  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5     23669.088 ±  10701.211    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                           thrpt    5        19.000               counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                            thrpt    5        18.000                   ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                              thrpt    5    189852.301 ±   2227.780   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                               thrpt    5      1236.062 ±     14.984  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                          thrpt    5     10248.002 ±      0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.100 ±      0.154  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0.828 ±      1.281    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5      1193.588 ±    688.814  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5      9899.449 ±   5817.738    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                    thrpt    5        18.000               counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                     thrpt    5        21.000                   ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                             thrpt    5    429576.649 ±   9411.280   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5       476.037 ±     10.222  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      1744.001 ±      0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.783 ±      6.249  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         2.860 ±     22.819    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5       509.365 ±    648.285  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5      1868.381 ±   2406.533    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5         8.000               counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5        11.000                   ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                     thrpt    5    532552.309 ±   3616.481   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                      thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                 thrpt    5         0.001 ±      0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                           thrpt    5           ≈ 0               counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                  thrpt    5    105711.908 ±   3152.346   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                   thrpt    5      1289.523 ±     39.057  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                              thrpt    5     19200.004 ±      0.001    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          thrpt    5         0.083 ±      0.098  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5         1.239 ±      1.440    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5      1315.126 ±     58.372  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5     19582.660 ±   1205.982    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                        thrpt    5        20.000               counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                         thrpt    5        21.000                   ms
[info] ArrayOfShortsBenchmark.readCirce                                                       thrpt    5     18026.540 ±    819.782   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      2342.516 ±    105.071  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5    204534.067 ±     14.999    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.142 ±      0.200  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5        12.399 ±     18.029    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5      2356.273 ±     79.780  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5    205764.295 ±  13578.386    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                             thrpt    5        35.000               counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                              thrpt    5        35.000                   ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                thrpt    5     44754.460 ±    750.507   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5       176.528 ±      2.880  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5      6208.009 ±      0.001    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.012 ±      0.108  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.440 ±      3.788    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5       204.643 ±    440.510  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5      7201.088 ±  15501.546    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                      thrpt    5         4.000               counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                       thrpt    5         5.000                   ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                               thrpt    5     96503.112 ±   3958.093   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       256.052 ±     10.717  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      4176.004 ±      0.001    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.661 ±      5.594  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5        10.639 ±     90.031    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5       219.500 ±    488.521  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5      3574.331 ±   7921.678    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         4.000               counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                      thrpt    5        10.000                   ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                    thrpt    5      9389.863 ±    232.199   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      3259.751 ±     82.026  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5    546384.383 ±      2.905    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5         0.096 ±      0.185  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5        16.069 ±     31.065    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5      3255.267 ±    740.188  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5    545788.775 ± 135252.482    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                          thrpt    5        48.000               counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                           thrpt    5        51.000                   ms
[info] ArrayOfShortsBenchmark.writeCirce                                                      thrpt    5     26682.984 ±   6482.823   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                       thrpt    5      1485.313 ±    361.266  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                  thrpt    5     87614.293 ±     40.086    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              thrpt    5         0.146 ±      0.170  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5         8.559 ±      9.388    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          thrpt    5      1458.759 ±    646.963  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     85913.937 ±  24482.289    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                            thrpt    5        22.000               counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                             thrpt    5        21.000                   ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                               thrpt    5    114321.680 ±   2062.058   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                thrpt    5       872.345 ±     15.774  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           thrpt    5     12011.363 ±      0.054    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.075 ±      0.122  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         1.032 ±      1.682    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5       852.714 ±    684.996  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5     11742.454 ±   9459.325    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                     thrpt    5        13.000               counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                      thrpt    5        17.000                   ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                              thrpt    5    132628.013 ±   1310.312   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                               thrpt    5       533.168 ±      5.389  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      6328.003 ±      0.001    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.790 ±      6.270  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         9.353 ±     74.166    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5       523.361 ±    688.357  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5      6214.609 ±   8206.878    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                    thrpt    5         8.000               counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                     thrpt    5        10.000                   ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                      thrpt    5    165110.494 ±    443.808   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  thrpt    5         0.002 ±      0.001    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                            thrpt    5           ≈ 0               counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                   thrpt    5      4290.747 ±    104.741   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                    thrpt    5      1971.931 ±     48.715  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                               thrpt    5    723379.420 ±      1.559    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           thrpt    5         0.042 ±      0.160  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5        15.328 ±     59.019    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5      2000.959 ±     99.431  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5    734043.410 ±  37812.336    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                         thrpt    5        30.000               counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                          thrpt    5        30.000                   ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                        thrpt    5     41073.408 ±   1499.791   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5       820.104 ±     30.427  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5     31424.010 ±      0.002    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.042 ±      0.170  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5         1.607 ±      6.577    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5       786.323 ±    687.895  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5     30141.355 ±  26598.987    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                              thrpt    5        12.000               counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                               thrpt    5        11.000                   ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                 thrpt    5     85453.652 ±    404.472   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5       899.166 ±      4.206  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     16560.005 ±      0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.054 ±      0.122  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.997 ±      2.241    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5       858.835 ±    690.507  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5     15818.812 ±  12749.961    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                       thrpt    5        13.000               counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                        thrpt    5        15.000                   ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                thrpt    5    239406.066 ±  13310.094   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       778.936 ±     43.674  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5      5120.002 ±      0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.067 ±      0.250  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.434 ±      1.626    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5       789.666 ±    692.471  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5      5185.165 ±   4413.838    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5        12.000               counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5        11.000                   ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                     thrpt    5     24111.109 ±    523.190   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      1101.570 ±     23.961  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5     71912.056 ±      0.320    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5         0.067 ±      0.105  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5         4.344 ±      6.760    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5      1057.910 ±    571.210  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5     69083.660 ±  38129.885    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                           thrpt    5        16.000               counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                            thrpt    5        17.000                   ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                       thrpt    5     51811.322 ±   1938.193   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5      1098.147 ±     40.102  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5     33360.008 ±      0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.054 ±      0.166  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5         1.649 ±      5.100    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5      1118.819 ±    675.137  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     33981.919 ±  20256.155    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                             thrpt    5        17.000               counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                              thrpt    5        19.000                   ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                thrpt    5     97314.022 ±   1527.159   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5      1332.941 ±     21.448  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5     21560.004 ±      0.079    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.075 ±      0.108  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         1.211 ±      1.723    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5      1334.524 ±     47.336  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5     21586.035 ±    893.193    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                      thrpt    5        20.000               counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                       thrpt    5        24.000                   ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                               thrpt    5    246824.371 ±   2040.308   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       786.705 ±      6.525  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      5016.002 ±      0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.079 ±      0.067  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         0.505 ±      0.430    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5       785.546 ±    687.314  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5      5009.141 ±   4393.952    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5        12.000               counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5        12.000                   ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5    273606.874 ±   1021.388   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5         0.001 ±      0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5           ≈ 0               counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                    thrpt    5     71517.634 ±   3019.783   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5      1060.854 ±     44.654  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5     23344.006 ±      0.107    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5         0.079 ±      0.174  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5         1.748 ±      3.900    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5      1044.858 ±    559.795  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     23004.806 ±  12786.885    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                          thrpt    5        16.000               counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                           thrpt    5        17.000                   ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                      thrpt    5     73435.957 ±   1435.283   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                       thrpt    5      1475.524 ±     29.066  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                  thrpt    5     31624.006 ±      0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space                              thrpt    5         0.071 ±      0.091  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5         1.517 ±      1.957    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                          thrpt    5      1452.233 ±    658.742  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     31123.714 ±  14050.762    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                            thrpt    5        22.000               counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                             thrpt    5        21.000                   ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                               thrpt    5     86536.950 ±   2908.547   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                thrpt    5       977.255 ±     32.710  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                           thrpt    5     17776.005 ±      0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.075 ±      0.231  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         1.361 ±      4.183    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5       990.605 ±     35.899  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5     18020.275 ±   1017.740    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                     thrpt    5        15.000               counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                      thrpt    5        17.000                   ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                              thrpt    5    109794.808 ±   1721.763   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5      1156.273 ±     17.437  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5     16576.004 ±      0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.071 ±      0.134  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         1.013 ±      1.916    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5      1184.714 ±    695.934  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5     16987.273 ±  10077.112    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                    thrpt    5        18.000               counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                     thrpt    5        16.000                   ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                   thrpt    5     44625.145 ±    693.013   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                    thrpt    5      2072.747 ±     31.769  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                               thrpt    5     73112.009 ±      0.002    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           thrpt    5         0.054 ±      0.224  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5         1.910 ±      7.888    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5      2022.167 ±     56.042  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5     71328.984 ±   2374.507    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                         thrpt    5        30.000               counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                          thrpt    5        34.000                   ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                     thrpt    5    117232.478 ±   1691.445   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                      thrpt    5       807.418 ±     11.682  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                 thrpt    5     10840.004 ±      0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                             thrpt    5         0.083 ±      0.098  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5         1.119 ±      1.333    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                         thrpt    5       778.177 ±    681.797  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5     10453.114 ±   9281.415    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                           thrpt    5        12.000               counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                            thrpt    5        13.000                   ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                              thrpt    5    164747.812 ±   3815.340   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                               thrpt    5       244.499 ±      5.668  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                          thrpt    5      2336.003 ±      0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.037 ±      0.280  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0.359 ±      2.677    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5       217.936 ±    482.079  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5      2086.917 ±   4614.535    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                    thrpt    5         4.000               counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                     thrpt    5         4.000                   ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                             thrpt    5    802263.297 ±   8480.396   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5       995.005 ±     10.578  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      1952.001 ±      0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.083 ±      0.170  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         0.163 ±      0.333    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5       983.432 ±     25.817  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5      1929.305 ±     52.788    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5        15.000               counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5        13.000                   ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                     thrpt    5    856760.185 ±   7509.490   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                      thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                 thrpt    5        ≈ 10⁻³                 B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                           thrpt    5           ≈ 0               counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                  thrpt    5    200034.408 ±   9598.982   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                   thrpt    5       653.800 ±     31.388  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                              thrpt    5      5144.002 ±      0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          thrpt    5         0.058 ±      0.183  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.457 ±      1.421    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5       643.632 ±      5.378  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      5064.593 ±    230.709    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                        thrpt    5        10.000               counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                         thrpt    5        11.000                   ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                           thrpt    5    185104.682 ±   6515.299   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                            thrpt    5       984.157 ±     34.245  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                       thrpt    5      8368.002 ±      0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                   thrpt    5         0.071 ±      0.122  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm              thrpt    5         0.601 ±      1.025    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space               thrpt    5       927.911 ±    563.314  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5      7886.921 ±   4713.806    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                 thrpt    5        14.000               counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                  thrpt    5        16.000                   ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                          thrpt    5    355732.003 ±   6919.682   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                           thrpt    5       690.792 ±     13.024  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                      thrpt    5      3056.001 ±      0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                  thrpt    5         0.073 ±      0.220  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm             thrpt    5         0.324 ±      0.967    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space              thrpt    5       728.915 ±    569.706  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm         thrpt    5      3224.514 ±   2514.897    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                thrpt    5        11.000               counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                 thrpt    5        11.000                   ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                          thrpt    5    312578.843 ±   2009.435   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                           thrpt    5       308.222 ±      1.934  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                      thrpt    5      1552.001 ±      0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                  thrpt    5         0.025 ±      0.105  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm             thrpt    5         0.126 ±      0.526    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space              thrpt    5       295.026 ±    138.045  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm         thrpt    5      1485.363 ±    687.723    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                thrpt    5         5.000               counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                 thrpt    5         6.000                   ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                         thrpt    5    963310.566 ±  20131.261   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                          thrpt    5       714.871 ±     15.123  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                     thrpt    5      1168.000 ±      0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                 thrpt    5         0.087 ±      0.036  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm            thrpt    5         0.143 ±      0.059    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space             thrpt    5       719.755 ±    559.781  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5      1176.229 ±    921.492    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                               thrpt    5        11.000               counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                thrpt    5        10.000                   ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                 thrpt    5   1041990.372 ±   7582.867   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                  thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm             thrpt    5        ≈ 10⁻³                 B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                       thrpt    5           ≈ 0               counts
[info] ArraysBenchmark.readCirce                                                              thrpt    5    921467.093 ±  13964.994   ops/s
[info] ArraysBenchmark.readCirce:·gc.alloc.rate                                               thrpt    5      2992.835 ±     46.655  MB/sec
[info] ArraysBenchmark.readCirce:·gc.alloc.rate.norm                                          thrpt    5      5112.000 ±      0.001    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      thrpt    5         0.133 ±      0.121  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 thrpt    5         0.227 ±      0.204    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  thrpt    5      2975.115 ±    547.023  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             thrpt    5      5082.196 ±    974.202    B/op
[info] ArraysBenchmark.readCirce:·gc.count                                                    thrpt    5        44.000               counts
[info] ArraysBenchmark.readCirce:·gc.time                                                     thrpt    5        41.000                   ms
[info] ArraysBenchmark.readJacksonScala                                                       thrpt    5   1788290.593 ±  53449.897   ops/s
[info] ArraysBenchmark.readJacksonScala:·gc.alloc.rate                                        thrpt    5      1681.545 ±     50.311  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   thrpt    5      1480.000 ±      0.001    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               thrpt    5         0.104 ±      0.098  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.092 ±      0.088    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           thrpt    5      1675.039 ±     60.957  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5      1474.276 ±     33.089    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.count                                             thrpt    5        25.000               counts
[info] ArraysBenchmark.readJacksonScala:·gc.time                                              thrpt    5        30.000                   ms
[info] ArraysBenchmark.readJsoniterScala                                                      thrpt    5   8514236.438 ± 264145.329   ops/s
[info] ArraysBenchmark.readJsoniterScala:·gc.alloc.rate                                       thrpt    5      2120.479 ±     66.366  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  thrpt    5       392.000 ±      0.001    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              thrpt    5         0.096 ±      0.044  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.018 ±      0.008    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          thrpt    5      2086.599 ±    592.733  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5       385.674 ±    104.198    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.count                                            thrpt    5        31.000               counts
[info] ArraysBenchmark.readJsoniterScala:·gc.time                                             thrpt    5        28.000                   ms
[info] ArraysBenchmark.readPlayJson                                                           thrpt    5    327697.678 ±   3502.594   ops/s
[info] ArraysBenchmark.readPlayJson:·gc.alloc.rate                                            thrpt    5      1933.614 ±     20.462  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.alloc.rate.norm                                       thrpt    5      9288.001 ±      0.001    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   thrpt    5         0.096 ±      0.176  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.460 ±      0.844    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               thrpt    5      1947.764 ±    575.229  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5      9354.693 ±   2688.332    B/op
[info] ArraysBenchmark.readPlayJson:·gc.count                                                 thrpt    5        29.000               counts
[info] ArraysBenchmark.readPlayJson:·gc.time                                                  thrpt    5        36.000                   ms
[info] ArraysBenchmark.writeCirce                                                             thrpt    5   1102785.301 ±  30938.568   ops/s
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate                                              thrpt    5      2416.057 ±     66.867  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate.norm                                         thrpt    5      3448.000 ±      0.001    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     thrpt    5         0.104 ±      0.139  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0.149 ±      0.198    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 thrpt    5      2422.296 ±    561.158  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            thrpt    5      3457.088 ±    808.901    B/op
[info] ArraysBenchmark.writeCirce:·gc.count                                                   thrpt    5        36.000               counts
[info] ArraysBenchmark.writeCirce:·gc.time                                                    thrpt    5        35.000                   ms
[info] ArraysBenchmark.writeJacksonScala                                                      thrpt    5   3757348.932 ±  51791.779   ops/s
[info] ArraysBenchmark.writeJacksonScala:·gc.alloc.rate                                       thrpt    5      2138.780 ±     29.794  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  thrpt    5       896.000 ±      0.001    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              thrpt    5         0.108 ±      0.067  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.045 ±      0.028    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          thrpt    5      2154.758 ±    671.895  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5       902.749 ±    284.541    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.count                                            thrpt    5        32.000               counts
[info] ArraysBenchmark.writeJacksonScala:·gc.time                                             thrpt    5        38.000                   ms
[info] ArraysBenchmark.writeJsoniterScala                                                     thrpt    5  19865528.229 ± 398763.499   ops/s
[info] ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate                                      thrpt    5       908.719 ±     18.005  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 thrpt    5        72.000 ±      0.001    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             thrpt    5         0.079 ±      0.105  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.006 ±      0.008    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         thrpt    5       917.880 ±    566.737  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5        72.739 ±     45.211    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.count                                           thrpt    5        14.000               counts
[info] ArraysBenchmark.writeJsoniterScala:·gc.time                                            thrpt    5        13.000                   ms
[info] ArraysBenchmark.writePlayJson                                                          thrpt    5    463788.710 ±   7177.860   ops/s
[info] ArraysBenchmark.writePlayJson:·gc.alloc.rate                                           thrpt    5      1621.780 ±     24.682  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.alloc.rate.norm                                      thrpt    5      5504.001 ±      0.001    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  thrpt    5         0.083 ±      0.098  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.283 ±      0.334    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              thrpt    5      1604.526 ±    547.338  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5      5445.429 ±   1856.102    B/op
[info] ArraysBenchmark.writePlayJson:·gc.count                                                thrpt    5        24.000               counts
[info] ArraysBenchmark.writePlayJson:·gc.time                                                 thrpt    5        29.000                   ms
[info] BitSetsBenchmark.readJacksonScala                                                      thrpt    5   2132083.560 ±  44441.401   ops/s
[info] BitSetsBenchmark.readJacksonScala:·gc.alloc.rate                                       thrpt    5      1354.630 ±     28.278  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  thrpt    5      1000.000 ±      0.001    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              thrpt    5         0.087 ±      0.132  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.065 ±      0.098    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          thrpt    5      1332.655 ±     49.253  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5       983.811 ±     45.759    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.count                                            thrpt    5        20.000               counts
[info] BitSetsBenchmark.readJacksonScala:·gc.time                                             thrpt    5        23.000                   ms
[info] BitSetsBenchmark.readJsoniterScala                                                     thrpt    5   5270461.280 ± 187689.614   ops/s
[info] BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate                                      thrpt    5       696.525 ±     25.229  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 thrpt    5       208.000 ±      0.001    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             thrpt    5         0.062 ±      0.179  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.019 ±      0.053    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         thrpt    5       657.483 ±      6.105  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5       196.354 ±      7.011    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.count                                           thrpt    5        10.000               counts
[info] BitSetsBenchmark.readJsoniterScala:·gc.time                                            thrpt    5         9.000                   ms
[info] BitSetsBenchmark.readPlayJson                                                          thrpt    5    392648.690 ±   4978.428   ops/s
[info] BitSetsBenchmark.readPlayJson:·gc.alloc.rate                                           thrpt    5      1794.069 ±     22.666  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      thrpt    5      7192.001 ±      0.001    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  thrpt    5         0.112 ±      0.122  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.451 ±      0.488    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              thrpt    5      1810.247 ±    687.369  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5      7258.009 ±   2811.318    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.count                                                thrpt    5        27.000               counts
[info] BitSetsBenchmark.readPlayJson:·gc.time                                                 thrpt    5        31.000                   ms
[info] BitSetsBenchmark.writeJacksonScala                                                     thrpt    5   2768512.195 ±  34110.304   ops/s
[info] BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate                                      thrpt    5      1463.401 ±     18.429  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 thrpt    5       832.000 ±      0.001    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             thrpt    5         0.121 ±      0.154  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.069 ±      0.088    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         thrpt    5      1468.406 ±    675.792  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5       834.842 ±    383.753    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.count                                           thrpt    5        22.000               counts
[info] BitSetsBenchmark.writeJacksonScala:·gc.time                                            thrpt    5        26.000                   ms
[info] BitSetsBenchmark.writeJsoniterScala                                                    thrpt    5   6767425.711 ± 335781.269   ops/s
[info] BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     thrpt    5      1031.897 ±     51.504  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                thrpt    5       240.000 ±      0.001    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            thrpt    5         0.075 ±      0.091  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.017 ±      0.021    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        thrpt    5      1051.927 ±    577.842  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5       244.662 ±    133.828    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.count                                          thrpt    5        16.000               counts
[info] BitSetsBenchmark.writeJsoniterScala:·gc.time                                           thrpt    5        15.000                   ms
[info] BitSetsBenchmark.writePlayJson                                                         thrpt    5    717075.192 ±  24282.513   ops/s
[info] BitSetsBenchmark.writePlayJson:·gc.alloc.rate                                          thrpt    5      2077.404 ±     71.063  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     thrpt    5      4560.001 ±      0.001    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 thrpt    5         0.108 ±      0.119  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.238 ±      0.267    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             thrpt    5      2085.103 ±    517.811  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      4576.609 ±   1100.596    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.count                                               thrpt    5        31.000               counts
[info] BitSetsBenchmark.writePlayJson:·gc.time                                                thrpt    5        36.000                   ms
[info] ExtractFieldsBenchmark.readCirce                                                       thrpt    5    814669.221 ±  15027.496   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      2650.218 ±     48.058  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5      5120.001 ±      0.001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.137 ±      0.184  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.265 ±      0.353    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5      2630.356 ±    547.122  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5      5081.915 ±   1078.537    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                             thrpt    5        39.000               counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                              thrpt    5        35.000                   ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                thrpt    5    985129.813 ±  23963.030   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5      1221.807 ±     29.299  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5      1952.000 ±      0.001    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.108 ±      0.119  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.173 ±      0.191    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5      1261.434 ±    570.575  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5      2016.318 ±    945.034    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                      thrpt    5        19.000               counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                       thrpt    5        23.000                   ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                               thrpt    5   8389158.448 ±  66920.070   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       383.786 ±      3.013  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5        72.000 ±      0.001    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.644 ±      5.389  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         0.121 ±      1.014    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5       367.469 ±    491.753  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5        68.967 ±     92.868    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         6.000               counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                      thrpt    5        10.000                   ms
[info] ExtractFieldsBenchmark.readPlayJson                                                    thrpt    5    277049.817 ±   7980.660   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      1426.510 ±     40.411  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5      8104.002 ±      0.001    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5         0.075 ±      0.185  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.425 ±      1.040    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5      1397.972 ±    555.270  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5      7939.564 ±   3017.157    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                          thrpt    5        21.000               counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                           thrpt    5        25.000                   ms
[info] GoogleMapsAPIBenchmark.readCirce                                                       thrpt    5      7676.629 ±    173.779   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      1847.587 ±     41.682  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5    378792.054 ±      0.007    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.141 ±      0.328  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5        28.854 ±     67.184    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5      1867.588 ±    702.697  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5    383052.946 ± 151366.622    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                             thrpt    5        28.000               counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                              thrpt    5        30.000                   ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                thrpt    5     14359.688 ±    793.100   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5       363.775 ±     19.979  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5     39872.031 ±      0.012    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.092 ±      0.703  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         9.919 ±     76.065    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5       361.159 ±    323.557  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5     39545.768 ±  34251.872    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                      thrpt    5         6.000               counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                       thrpt    5         8.000                   ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                               thrpt    5     24264.016 ±   1451.875   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       414.636 ±     24.755  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5     26896.018 ±      0.008    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.684 ±      5.628  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5        44.332 ±    364.619    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5       430.846 ±    571.347  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5     28064.185 ±  39059.045    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         7.000               counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                      thrpt    5        12.000                   ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                    thrpt    5      2392.759 ±     55.704   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      1465.738 ±     33.983  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5    964089.374 ±     10.337    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5         0.025 ±      0.104  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5        16.445 ±     68.723    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5      1466.168 ±    686.766  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5    963929.903 ± 432300.836    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                          thrpt    5        22.000               counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                           thrpt    5        29.000                   ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                      thrpt    5      7632.796 ±    133.406   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                       thrpt    5      1641.575 ±     28.557  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                  thrpt    5    338544.054 ±      0.007    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              thrpt    5         0.102 ±      0.280  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5        21.041 ±     57.629    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          thrpt    5      1662.655 ±     72.623  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5    342889.448 ±  12809.905    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                            thrpt    5        25.000               counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                             thrpt    5        26.000                   ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                               thrpt    5     43044.546 ±    990.802   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                thrpt    5       623.794 ±     14.419  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           thrpt    5     22807.822 ±      0.385    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.050 ±      0.091  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         1.824 ±      3.315    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5       587.260 ±    570.081  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5     21485.965 ±  21018.794    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                     thrpt    5         9.000               counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                      thrpt    5        12.000                   ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                              thrpt    5     73650.441 ±   4681.553   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                               thrpt    5       555.129 ±     35.280  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          thrpt    5     11864.006 ±      0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.803 ±      6.557  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5        17.019 ±    138.795    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5       522.595 ±    690.349  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5     11206.396 ±  15198.710    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                    thrpt    5         8.000               counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                     thrpt    5         9.000                   ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                      thrpt    5     74832.060 ±    248.729   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       thrpt    5         1.141 ±      0.004  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  thrpt    5        24.005 ±      0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                            thrpt    5           ≈ 0               counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                   thrpt    5      5557.672 ±    122.885   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                    thrpt    5      1644.084 ±     36.155  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                               thrpt    5    465615.959 ±      1.084    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           thrpt    5         0.058 ±      0.143  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5        16.458 ±     40.220    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5      1605.088 ±    573.121  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5    454482.215 ± 157889.361    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                         thrpt    5        24.000               counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                          thrpt    5        29.000                   ms
[info] IntAndLongMapsBenchmark.readJsoniterScala                                              thrpt    5   5541673.520 ± 148792.602   ops/s
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5      1661.952 ±     44.189  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5       472.000 ±      0.001    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.096 ±      0.166  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0.027 ±      0.047    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5      1603.986 ±    575.985  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5       455.409 ±    157.124    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.count                                    thrpt    5        24.000               counts
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.time                                     thrpt    5        21.000                   ms
[info] IntAndLongMapsBenchmark.readPlayJson                                                   thrpt    5    380038.971 ±   6813.754   ops/s
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate                                    thrpt    5      2130.783 ±     36.739  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate.norm                               thrpt    5      8824.001 ±      0.001    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           thrpt    5         0.121 ±      0.174  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.500 ±      0.725    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5      2087.721 ±    566.451  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5      8647.589 ±   2478.634    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.count                                         thrpt    5        31.000               counts
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.time                                          thrpt    5        38.000                   ms
[info] IntAndLongMapsBenchmark.writeJsoniterScala                                             thrpt    5   3556288.884 ± 148125.539   ops/s
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5       578.455 ±     23.725  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5       256.000 ±      0.001    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.805 ±      6.399  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         0.357 ±      2.840    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5       588.415 ±    564.149  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5       260.700 ±    253.366    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5         9.000               counts
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5        11.000                   ms
[info] IntAndLongMapsBenchmark.writePlayJson                                                  thrpt    5    340061.256 ±   4731.124   ops/s
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate                                   thrpt    5      1332.507 ±     18.727  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate.norm                              thrpt    5      6168.001 ±      0.001    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          thrpt    5         0.083 ±      0.098  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.385 ±      0.454    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5      1330.444 ±     50.254  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      6158.562 ±    269.802    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.count                                        thrpt    5        20.000               counts
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.time                                         thrpt    5        24.000                   ms
[info] IterablesBenchmark.readCirce                                                           thrpt    5    619883.305 ±  10625.220   ops/s
[info] IterablesBenchmark.readCirce:·gc.alloc.rate                                            thrpt    5      2234.018 ±     39.963  MB/sec
[info] IterablesBenchmark.readCirce:·gc.alloc.rate.norm                                       thrpt    5      5672.001 ±      0.001    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   thrpt    5         0.133 ±      0.044  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.338 ±      0.109    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               thrpt    5      2284.222 ±    574.521  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5      5800.357 ±   1513.948    B/op
[info] IterablesBenchmark.readCirce:·gc.count                                                 thrpt    5        34.000               counts
[info] IterablesBenchmark.readCirce:·gc.time                                                  thrpt    5        31.000                   ms
[info] IterablesBenchmark.readJacksonScala                                                    thrpt    5    648370.542 ±  10026.321   ops/s
[info] IterablesBenchmark.readJacksonScala:·gc.alloc.rate                                     thrpt    5       754.688 ±     11.730  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                thrpt    5      1832.001 ±      0.001    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            thrpt    5         0.067 ±      0.207  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.162 ±      0.505    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        thrpt    5       785.695 ±    683.410  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5      1907.166 ±   1656.219    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.count                                          thrpt    5        12.000               counts
[info] IterablesBenchmark.readJacksonScala:·gc.time                                           thrpt    5        15.000                   ms
[info] IterablesBenchmark.readJsoniterScala                                                   thrpt    5   3299449.442 ±  38510.571   ops/s
[info] IterablesBenchmark.readJsoniterScala:·gc.alloc.rate                                    thrpt    5      1375.207 ±     15.751  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               thrpt    5       656.000 ±      0.001    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.075 ±      0.091  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.036 ±      0.043    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5      1396.072 ±    572.960  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5       665.916 ±    271.173    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.count                                         thrpt    5        21.000               counts
[info] IterablesBenchmark.readJsoniterScala:·gc.time                                          thrpt    5        19.000                   ms
[info] IterablesBenchmark.readPlayJson                                                        thrpt    5    233528.212 ±   4270.321   ops/s
[info] IterablesBenchmark.readPlayJson:·gc.alloc.rate                                         thrpt    5      1628.572 ±     30.090  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.alloc.rate.norm                                    thrpt    5     10976.002 ±      0.001    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                thrpt    5         0.092 ±      0.156  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.618 ±      1.057    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            thrpt    5      1604.614 ±    573.384  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5     10817.422 ±   3991.300    B/op
[info] IterablesBenchmark.readPlayJson:·gc.count                                              thrpt    5        24.000               counts
[info] IterablesBenchmark.readPlayJson:·gc.time                                               thrpt    5        30.000                   ms
[info] IterablesBenchmark.writeCirce                                                          thrpt    5    860005.251 ±  37198.246   ops/s
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate                                           thrpt    5      1953.988 ±     84.538  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                      thrpt    5      3576.000 ±      0.001    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.104 ±      0.150  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.190 ±      0.275    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      1940.379 ±    553.271  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5      3550.017 ±    937.300    B/op
[info] IterablesBenchmark.writeCirce:·gc.count                                                thrpt    5        29.000               counts
[info] IterablesBenchmark.writeCirce:·gc.time                                                 thrpt    5        27.000                   ms
[info] IterablesBenchmark.writeJacksonScala                                                   thrpt    5   1604785.161 ±  83307.212   ops/s
[info] IterablesBenchmark.writeJacksonScala:·gc.alloc.rate                                    thrpt    5      1084.976 ±     56.970  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               thrpt    5      1064.000 ±      0.001    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.096 ±      0.091  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.094 ±      0.093    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5      1122.291 ±    683.644  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5      1101.319 ±    690.524    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.count                                         thrpt    5        17.000               counts
[info] IterablesBenchmark.writeJacksonScala:·gc.time                                          thrpt    5        19.000                   ms
[info] IterablesBenchmark.writeJsoniterScala                                                  thrpt    5   6912004.754 ± 283563.697   ops/s
[info] IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate                                   thrpt    5       773.060 ±     31.649  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              thrpt    5       176.000 ±      0.001    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.054 ±      0.193  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.012 ±      0.045    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5       719.466 ±    560.522  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5       163.773 ±    126.548    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.count                                        thrpt    5        11.000               counts
[info] IterablesBenchmark.writeJsoniterScala:·gc.time                                         thrpt    5        11.000                   ms
[info] IterablesBenchmark.writePlayJson                                                       thrpt    5    541023.513 ±  11212.373   ops/s
[info] IterablesBenchmark.writePlayJson:·gc.alloc.rate                                        thrpt    5      1867.309 ±     38.676  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.alloc.rate.norm                                   thrpt    5      5432.001 ±      0.001    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               thrpt    5         0.079 ±      0.088  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.230 ±      0.258    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5      1879.681 ±    705.583  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5      5467.829 ±   2041.487    B/op
[info] IterablesBenchmark.writePlayJson:·gc.count                                             thrpt    5        28.000               counts
[info] IterablesBenchmark.writePlayJson:·gc.time                                              thrpt    5        33.000                   ms
[info] MapsBenchmark.readCirce                                                                thrpt    5    645673.742 ±  11849.762   ops/s
[info] MapsBenchmark.readCirce:·gc.alloc.rate                                                 thrpt    5      2238.105 ±     41.221  MB/sec
[info] MapsBenchmark.readCirce:·gc.alloc.rate.norm                                            thrpt    5      5456.001 ±      0.001    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        thrpt    5         0.121 ±      0.119  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   thrpt    5         0.294 ±      0.287    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    thrpt    5      2215.899 ±    694.310  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               thrpt    5      5402.045 ±   1700.298    B/op
[info] MapsBenchmark.readCirce:·gc.count                                                      thrpt    5        33.000               counts
[info] MapsBenchmark.readCirce:·gc.time                                                       thrpt    5        34.000                   ms
[info] MapsBenchmark.readJsoniterScala                                                        thrpt    5   5065486.481 ±  84993.766   ops/s
[info] MapsBenchmark.readJsoniterScala:·gc.alloc.rate                                         thrpt    5      1261.682 ±     21.146  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    thrpt    5       392.000 ±      0.001    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                thrpt    5         0.092 ±      0.156  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.028 ±      0.049    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            thrpt    5      1260.092 ±    560.421  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5       391.637 ±    178.532    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.count                                              thrpt    5        19.000               counts
[info] MapsBenchmark.readJsoniterScala:·gc.time                                               thrpt    5        17.000                   ms
[info] MapsBenchmark.readPlayJson                                                             thrpt    5    385571.081 ±  11945.686   ops/s
[info] MapsBenchmark.readPlayJson:·gc.alloc.rate                                              thrpt    5      2073.610 ±     65.292  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                         thrpt    5      8464.001 ±      0.001    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     thrpt    5         0.117 ±      0.156  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0.475 ±      0.628    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 thrpt    5      2085.925 ±    517.256  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            thrpt    5      8513.526 ±   2028.116    B/op
[info] MapsBenchmark.readPlayJson:·gc.count                                                   thrpt    5        31.000               counts
[info] MapsBenchmark.readPlayJson:·gc.time                                                    thrpt    5        37.000                   ms
[info] MapsBenchmark.writeCirce                                                               thrpt    5    464932.521 ±   8659.161   ops/s
[info] MapsBenchmark.writeCirce:·gc.alloc.rate                                                thrpt    5      1226.474 ±     23.128  MB/sec
[info] MapsBenchmark.writeCirce:·gc.alloc.rate.norm                                           thrpt    5      4152.001 ±      0.001    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       thrpt    5         0.079 ±      0.207  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  thrpt    5         0.268 ±      0.705    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   thrpt    5      1186.257 ±    705.112  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              thrpt    5      4016.976 ±   2418.513    B/op
[info] MapsBenchmark.writeCirce:·gc.count                                                     thrpt    5        18.000               counts
[info] MapsBenchmark.writeCirce:·gc.time                                                      thrpt    5        16.000                   ms
[info] MapsBenchmark.writeJsoniterScala                                                       thrpt    5   3393983.787 ± 122240.615   ops/s
[info] MapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                        thrpt    5       655.568 ±     23.637  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5       304.000 ±      0.001    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               thrpt    5         0.058 ±      0.164  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.027 ±      0.075    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           thrpt    5       653.631 ±      3.967  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5       303.122 ±     10.495    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.count                                             thrpt    5        10.000               counts
[info] MapsBenchmark.writeJsoniterScala:·gc.time                                              thrpt    5        10.000                   ms
[info] MapsBenchmark.writePlayJson                                                            thrpt    5    322101.578 ±   6919.191   ops/s
[info] MapsBenchmark.writePlayJson:·gc.alloc.rate                                             thrpt    5      1177.132 ±     24.659  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                        thrpt    5      5752.001 ±      0.001    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    thrpt    5         0.079 ±      0.143  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.386 ±      0.695    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                thrpt    5      1194.189 ±    699.752  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5      5832.897 ±   3341.769    B/op
[info] MapsBenchmark.writePlayJson:·gc.count                                                  thrpt    5        18.000               counts
[info] MapsBenchmark.writePlayJson:·gc.time                                                   thrpt    5        20.000                   ms
[info] MissingReqFieldBenchmark.readCirce                                                     thrpt    5   2080666.897 ±  46234.320   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                      thrpt    5      3035.194 ±     67.952  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                 thrpt    5      2296.000 ±      0.001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                             thrpt    5         0.133 ±      0.209  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.101 ±      0.159    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         thrpt    5      3041.973 ±    858.296  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5      2300.767 ±    624.011    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                           thrpt    5        45.000               counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                            thrpt    5        41.000                   ms
[info] MissingReqFieldBenchmark.readJacksonScala                                              thrpt    5    291283.389 ±  18382.138   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                               thrpt    5       525.637 ±     33.337  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                          thrpt    5      2840.001 ±      0.001    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.075 ±      0.399  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0.412 ±      2.202    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5       506.890 ±    647.520  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5      2749.052 ±   3620.822    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                    thrpt    5         8.000               counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                     thrpt    5        11.000                   ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                             thrpt    5    697474.343 ±  26878.172   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                              thrpt    5       443.113 ±     16.982  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      1000.001 ±      0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.666 ±      5.470  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         1.502 ±     12.320    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5       448.162 ±    761.452  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5      1013.675 ±   1746.047    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                   thrpt    5         7.000               counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                    thrpt    5         9.000                   ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                         thrpt    5   3822507.946 ±  70503.281   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                          thrpt    5      1243.488 ±     23.074  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                     thrpt    5       512.000 ±      0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                 thrpt    5         0.083 ±      0.098  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm            thrpt    5         0.034 ±      0.041    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space             thrpt    5      1196.489 ±    699.633  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm        thrpt    5       492.859 ±    294.181    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                               thrpt    5        18.000               counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                thrpt    5        21.000                   ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                   thrpt    5   4134672.572 ±  84488.340   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                    thrpt    5       357.266 ±      7.157  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm               thrpt    5       136.000 ±      0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space           thrpt    5         0.655 ±      5.413  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm      thrpt    5         0.249 ±      2.056    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space       thrpt    5       367.410 ±    648.265  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm  thrpt    5       139.620 ±    242.871    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                         thrpt    5         6.000               counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                          thrpt    5        10.000                   ms
[info] MissingReqFieldBenchmark.readPlayJson                                                  thrpt    5    203357.449 ±   3040.838   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                   thrpt    5      1294.166 ±     19.123  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                              thrpt    5     10016.002 ±      0.001    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                          thrpt    5         0.104 ±      0.080  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.805 ±      0.609    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5      1261.137 ±    570.770  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      9758.911 ±   4367.281    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                        thrpt    5        19.000               counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                         thrpt    5        23.000                   ms
[info] MutableIterablesBenchmark.readCirce                                                    thrpt    5    723928.826 ±  10835.825   ops/s
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      2759.544 ±     42.857  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5      6000.001 ±      0.001    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5         0.108 ±      0.191  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.235 ±      0.417    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5      2701.366 ±     80.575  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5      5873.451 ±    102.328    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.count                                          thrpt    5        40.000               counts
[info] MutableIterablesBenchmark.readCirce:·gc.time                                           thrpt    5        38.000                   ms
[info] MutableIterablesBenchmark.readJsoniterScala                                            thrpt    5   3850004.440 ± 149817.125   ops/s
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5      2485.402 ±     96.627  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      1016.000 ±      0.001    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.096 ±      0.146  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         0.039 ±      0.059    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5      2496.626 ±    687.377  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5      1020.966 ±    303.878    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.count                                  thrpt    5        37.000               counts
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.time                                   thrpt    5        32.000                   ms
[info] MutableIterablesBenchmark.readPlayJson                                                 thrpt    5    256392.563 ±   9534.066   ops/s
[info] MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate                                  thrpt    5      1833.781 ±     69.036  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate.norm                             thrpt    5     11256.002 ±      0.001    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         thrpt    5         0.100 ±      0.119  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.614 ±      0.742    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5      1810.132 ±    715.103  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5     11112.276 ±   4439.699    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.count                                       thrpt    5        27.000               counts
[info] MutableIterablesBenchmark.readPlayJson:·gc.time                                        thrpt    5        32.000                   ms
[info] MutableIterablesBenchmark.writeCirce                                                   thrpt    5    835842.209 ±  26956.007   ops/s
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      1835.198 ±     60.024  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5      3456.000 ±      0.001    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5         0.100 ±      0.088  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.188 ±      0.169    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5      1802.118 ±    662.045  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5      3395.027 ±   1309.170    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.count                                         thrpt    5        27.000               counts
[info] MutableIterablesBenchmark.writeCirce:·gc.time                                          thrpt    5        26.000                   ms
[info] MutableIterablesBenchmark.writeJacksonScala                                            thrpt    5   1586027.578 ±  59899.600   ops/s
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate                             thrpt    5       862.528 ±     32.798  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        thrpt    5       856.000 ±      0.001    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.062 ±      0.150  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         0.062 ±      0.148    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5       853.315 ±    686.880  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5       847.502 ±    694.538    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.count                                  thrpt    5        13.000               counts
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.time                                   thrpt    5        14.000                   ms
[info] MutableIterablesBenchmark.writeJsoniterScala                                           thrpt    5   4809681.020 ± 162960.084   ops/s
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5       366.702 ±     12.236  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5       120.000 ±      0.001    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5         0.764 ±      6.355  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5         0.250 ±      2.077    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5       364.643 ±    488.446  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5       119.367 ±    159.890    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5         6.000               counts
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5        11.000                   ms
[info] MutableIterablesBenchmark.writePlayJson                                                thrpt    5    556268.809 ±  12681.760   ops/s
[info] MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate                                 thrpt    5      1885.858 ±     42.303  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate.norm                            thrpt    5      5336.001 ±      0.001    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        thrpt    5         0.092 ±      0.122  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.259 ±      0.347    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    thrpt    5      1879.584 ±    675.348  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               thrpt    5      5318.372 ±   1915.166    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.count                                      thrpt    5        28.000               counts
[info] MutableIterablesBenchmark.writePlayJson:·gc.time                                       thrpt    5        33.000                   ms
[info] MutableMapsBenchmark.readJsoniterScala                                                 thrpt    5   3526869.720 ±  88657.204   ops/s
[info] MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5      1667.063 ±     41.438  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5       744.000 ±      0.001    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.104 ±      0.057  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.046 ±      0.024    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5      1669.673 ±     60.581  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5       745.211 ±     40.758    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.count                                       thrpt    5        25.000               counts
[info] MutableMapsBenchmark.readJsoniterScala:·gc.time                                        thrpt    5        22.000                   ms
[info] MutableMapsBenchmark.readPlayJson                                                      thrpt    5    306213.087 ±   3619.963   ops/s
[info] MutableMapsBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      1631.231 ±     19.395  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5      8384.001 ±      0.001    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5         0.104 ±      0.127  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.535 ±      0.653    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5      1607.318 ±    619.413  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      8262.798 ±   3252.955    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.count                                            thrpt    5        24.000               counts
[info] MutableMapsBenchmark.readPlayJson:·gc.time                                             thrpt    5        29.000                   ms
[info] MutableMapsBenchmark.writeCirce                                                        thrpt    5    457412.123 ±   7908.400   ops/s
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5      1174.197 ±     19.636  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5      4040.001 ±      0.001    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.062 ±      0.057  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.215 ±      0.195    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5      1184.717 ±    697.322  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5      4076.614 ±   2411.865    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.count                                              thrpt    5        18.000               counts
[info] MutableMapsBenchmark.writeCirce:·gc.time                                               thrpt    5        17.000                   ms
[info] MutableMapsBenchmark.writeJsoniterScala                                                thrpt    5   2884696.383 ±  29294.921   ops/s
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 thrpt    5       586.441 ±      5.975  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            thrpt    5       320.000 ±      0.001    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.784 ±      6.345  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.428 ±      3.464    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5       588.321 ±    563.808  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5       321.130 ±    308.980    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.count                                      thrpt    5         9.000               counts
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.time                                       thrpt    5        11.000                   ms
[info] MutableMapsBenchmark.writePlayJson                                                     thrpt    5    340220.576 ±   6594.693   ops/s
[info] MutableMapsBenchmark.writePlayJson:·gc.alloc.rate                                      thrpt    5      1305.592 ±     24.821  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                 thrpt    5      6040.001 ±      0.001    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             thrpt    5         0.087 ±      0.132  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.405 ±      0.619    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5      1263.169 ±    549.454  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5      5843.507 ±   2530.435    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.count                                           thrpt    5        19.000               counts
[info] MutableMapsBenchmark.writePlayJson:·gc.time                                            thrpt    5        22.000                   ms
[info] PrimitivesBenchmark.readCirce                                                          thrpt    5    663898.749 ±  20356.490   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      2045.109 ±     62.459  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5      4848.001 ±      0.001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.129 ±      0.207  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.305 ±      0.484    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      2074.364 ±    591.232  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5      4916.147 ±   1303.745    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                thrpt    5        31.000               counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                 thrpt    5        29.000                   ms
[info] PrimitivesBenchmark.readJacksonScala                                                   thrpt    5   1543900.312 ±  58590.750   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5      1169.177 ±     44.934  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5      1192.000 ±      0.001    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.108 ±      0.250  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.110 ±      0.258    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5      1194.000 ±    725.029  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5      1216.908 ±    726.077    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                         thrpt    5        18.000               counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                          thrpt    5        21.000                   ms
[info] PrimitivesBenchmark.readJsoniterScala                                                  thrpt    5   6870740.984 ± 438220.186   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       209.548 ±     13.284  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5        48.000 ±      0.001    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.010 ±      0.055  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.002 ±      0.012    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5       204.631 ±    440.484  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5        46.561 ±    100.237    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                        thrpt    5         4.000               counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                         thrpt    5         9.000                   ms
[info] PrimitivesBenchmark.readPlayJson                                                       thrpt    5    236038.276 ±   3667.697   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      1624.280 ±     25.065  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5     10832.002 ±      0.001    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5         0.087 ±      0.143  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.583 ±      0.952    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5      1670.579 ±     68.230  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     11141.019 ±    535.013    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                             thrpt    5        25.000               counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                              thrpt    5        28.000                   ms
[info] PrimitivesBenchmark.writeCirce                                                         thrpt    5    939686.073 ±  28164.512   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1490.280 ±     43.812  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5      2496.000 ±      0.001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.096 ±      0.185  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.160 ±      0.310    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      1524.074 ±    701.934  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      2553.418 ±   1205.543    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                               thrpt    5        23.000               counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                thrpt    5        21.000                   ms
[info] PrimitivesBenchmark.writeJacksonScala                                                  thrpt    5   2404500.034 ±  96132.094   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                   thrpt    5       990.003 ±     39.988  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              thrpt    5       648.000 ±      0.001    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.096 ±      0.044  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.063 ±      0.028    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5       990.637 ±     33.911  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5       648.451 ±     26.271    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                        thrpt    5        15.000               counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                         thrpt    5        18.000                   ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                 thrpt    5   6149371.942 ±  88574.452   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       687.615 ±      9.798  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5       176.000 ±      0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.042 ±      0.150  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.011 ±      0.038    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5       654.314 ±      4.505  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5       167.478 ±      2.498    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5        10.000               counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5        10.000                   ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5   5936284.553 ± 129145.973   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5       362.022 ±      7.942  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5        96.000 ±      0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                 thrpt    5         0.765 ±      6.451  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm            thrpt    5         0.202 ±      1.705    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space             thrpt    5       299.174 ±    152.722  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm        thrpt    5        79.336 ±     40.522    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5         5.000               counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                thrpt    5        10.000                   ms
[info] PrimitivesBenchmark.writePlayJson                                                      thrpt    5    340943.199 ±   8613.734   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5      1939.150 ±     49.500  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5      8952.001 ±      0.001    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5         0.125 ±      0.098  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.576 ±      0.450    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5      1946.000 ±    545.106  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      8985.067 ±   2589.982    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                            thrpt    5        29.000               counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                             thrpt    5        35.000                   ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                  thrpt    5    720565.780 ±   9124.345   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                   thrpt    5      1607.933 ±     20.287  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                              thrpt    5      3512.001 ±      0.001    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                          thrpt    5         0.083 ±      0.080  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.182 ±      0.176    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                      thrpt    5      1597.553 ±    540.757  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      3488.985 ±   1163.516    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                        thrpt    5        24.000               counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                         thrpt    5        22.000                   ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                           thrpt    5   1154922.915 ±  18085.099   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                            thrpt    5      1461.574 ±     22.940  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                       thrpt    5      1992.000 ±      0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                   thrpt    5         0.087 ±      0.132  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm              thrpt    5         0.119 ±      0.180    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space               thrpt    5      1465.481 ±    740.490  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5      1997.414 ±   1012.006    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                 thrpt    5        22.000               counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                  thrpt    5        24.000                   ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                          thrpt    5    761485.805 ±   9031.645   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                           thrpt    5       650.243 ±      7.749  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                      thrpt    5      1344.001 ±      0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                  thrpt    5         0.042 ±      0.150  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm             thrpt    5         0.086 ±      0.311    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space              thrpt    5       660.743 ±      5.003  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm         thrpt    5      1365.712 ±     17.883    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                thrpt    5        10.000               counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                 thrpt    5        10.000                   ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                 thrpt    5    298931.369 ±   2326.139   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                  thrpt    5      1017.900 ±      7.915  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                             thrpt    5      5360.001 ±      0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                         thrpt    5         0.075 ±      0.122  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.395 ±      0.641    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                     thrpt    5      1051.291 ±    563.608  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                thrpt    5      5535.517 ±   2954.076    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                       thrpt    5        16.000               counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                        thrpt    5        16.000                   ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                          thrpt    5    303654.052 ±   2207.191   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                           thrpt    5       321.005 ±      2.318  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                      thrpt    5      1664.001 ±      0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                  thrpt    5         0.012 ±      0.072  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm             thrpt    5         0.065 ±      0.372    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space              thrpt    5       295.324 ±    139.054  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm         thrpt    5      1530.918 ±    722.225    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                thrpt    5         5.000               counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                 thrpt    5         6.000                   ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                         thrpt    5   1072447.996 ±  44080.013   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                          thrpt    5       904.871 ±     36.953  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                     thrpt    5      1328.000 ±      0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                 thrpt    5         0.100 ±      0.119  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm            thrpt    5         0.147 ±      0.174    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space             thrpt    5       917.913 ±    561.609  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5      1348.008 ±    843.767    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                               thrpt    5        14.000               counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                thrpt    5        13.000                   ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                 thrpt    5    930428.418 ±   2019.889   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                  thrpt    5        ≈ 10⁻⁴               MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm             thrpt    5        ≈ 10⁻³                 B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                       thrpt    5           ≈ 0               counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                              thrpt    5    332099.293 ±   2093.647   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                               thrpt    5       354.466 ±      2.300  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                          thrpt    5      1680.001 ±      0.001    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                      thrpt    5         0.777 ±      6.597  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                 thrpt    5         3.677 ±     31.234    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                  thrpt    5       298.405 ±    150.013  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm             thrpt    5      1414.134 ±    705.035    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                    thrpt    5         5.000               counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                     thrpt    5        11.000                   ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                               thrpt    5   1105544.029 ±  38809.847   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                thrpt    5      1652.062 ±     58.391  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                           thrpt    5      2352.000 ±      0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                       thrpt    5         0.108 ±      0.262  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                  thrpt    5         0.154 ±      0.372    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                   thrpt    5      1665.310 ±    868.255  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm              thrpt    5      2371.492 ±   1250.811    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                     thrpt    5        25.000               counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                      thrpt    5        23.000                   ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                        thrpt    5   1291491.677 ±  60076.888   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                         thrpt    5       846.700 ±     39.556  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                    thrpt    5      1032.000 ±      0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                thrpt    5         0.079 ±      0.183  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm           thrpt    5         0.097 ±      0.228    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space            thrpt    5       851.251 ±    690.998  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5      1038.838 ±    867.641    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                              thrpt    5        13.000               counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                               thrpt    5        15.000                   ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                       thrpt    5   2317833.638 ±  52394.367   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                        thrpt    5       565.533 ±     12.616  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                   thrpt    5       384.000 ±      0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space               thrpt    5         0.673 ±      5.301  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm          thrpt    5         0.455 ±      3.580    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space           thrpt    5       595.032 ±    569.743  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm      thrpt    5       404.320 ±    390.510    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                             thrpt    5         9.000               counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                              thrpt    5        10.000                   ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                              thrpt    5   2006914.760 ±  23112.977   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                               thrpt    5      1387.154 ±     15.826  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                          thrpt    5      1088.000 ±      0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                      thrpt    5         0.079 ±      0.154  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0.062 ±      0.121    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                  thrpt    5      1390.163 ±    549.998  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm             thrpt    5      1090.325 ±    429.382    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                    thrpt    5        21.000               counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                     thrpt    5        19.000                   ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                       thrpt    5   2845163.493 ±  43281.737   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                        thrpt    5      1171.243 ±     17.398  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                   thrpt    5       648.000 ±      0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space               thrpt    5         0.092 ±      0.122  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm          thrpt    5         0.051 ±      0.067    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space           thrpt    5      1124.618 ±    701.739  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm      thrpt    5       622.463 ±    396.192    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                             thrpt    5        17.000               counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                              thrpt    5        20.000                   ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                      thrpt    5   3196224.558 ± 135341.539   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                       thrpt    5       633.594 ±     26.572  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                  thrpt    5       312.000 ±      0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space              thrpt    5         0.788 ±      6.339  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm         thrpt    5         0.393 ±      3.161    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space          thrpt    5       654.395 ±      6.642  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm     thrpt    5       322.277 ±     15.360    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                            thrpt    5        10.000               counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                             thrpt    5        11.000                   ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                              thrpt    5   3211468.194 ±  48154.105   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate               thrpt    5        ≈ 10⁻⁴               MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm          thrpt    5        ≈ 10⁻⁴                 B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                    thrpt    5           ≈ 0               counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                           thrpt    5   2875700.997 ±  34572.730   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                            thrpt    5      1213.215 ±     14.661  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                       thrpt    5       664.000 ±      0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                   thrpt    5         0.096 ±      0.134  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm              thrpt    5         0.052 ±      0.073    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space               thrpt    5      1184.504 ±    684.660  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm          thrpt    5       648.165 ±    371.041    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                 thrpt    5        18.000               counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                  thrpt    5        19.000                   ms
[info] TwitterAPIBenchmark.readCirce                                                          thrpt    5     11930.771 ±   3033.674   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      1746.623 ±    433.821  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5    230438.280 ±   1328.021    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.158 ±      0.236  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5        21.129 ±     32.263    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      1725.464 ±    611.347  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5    227836.851 ±  66557.914    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                thrpt    5        26.000               counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                 thrpt    5        43.000                   ms
[info] TwitterAPIBenchmark.readJacksonScala                                                   thrpt    5     15277.574 ±   1352.869   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5       215.730 ±     19.111  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5     22224.025 ±      0.020    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.142 ±      1.131  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5        15.160 ±    121.613    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5       217.957 ±    482.127  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5     22571.518 ±  50640.527    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                         thrpt    5         4.000               counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                          thrpt    5         6.000                   ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                  thrpt    5     37911.108 ±    678.834   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       351.119 ±      6.499  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5     14576.044 ±      0.286    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.671 ±      5.761  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5        27.833 ±    239.094    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5       350.944 ±    366.843  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5     14566.485 ±  15224.011    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                        thrpt    5         6.000               counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                         thrpt    5        12.000                   ms
[info] TwitterAPIBenchmark.readPlayJson                                                       thrpt    5      3539.562 ±    498.833   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      1136.665 ±    160.609  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5    505477.044 ±    164.246    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5         0.067 ±      0.164  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5        29.302 ±     71.091    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5      1123.294 ±    725.058  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5    499018.115 ± 296424.280    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                             thrpt    5        17.000               counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                              thrpt    5        24.000                   ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                  thrpt    5     57406.458 ±   1784.907   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                   thrpt    5       733.057 ±     22.633  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              thrpt    5     20099.996 ±      0.149    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.050 ±      0.166  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         1.374 ±      4.591    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5       717.879 ±    553.493  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5     19707.458 ±  15866.520    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                        thrpt    5        11.000               counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                         thrpt    5        13.000                   ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                 thrpt    5     87484.325 ±   2478.994   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       573.565 ±     16.272  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5     10320.005 ±      0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.832 ±      6.498  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5        15.025 ±    117.344    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5       587.922 ±    563.135  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5     10578.886 ±  10139.569    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5         9.000               counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5        10.000                   ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5    102715.253 ±  10526.652   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5         6.788 ±      0.690  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5       104.004 ±      0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0               counts
[info] Benchmark result is saved to jdk9.json
[success] Total time: 3004 s, completed Feb 5, 2018, 12:50:15 PM
